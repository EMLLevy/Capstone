
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  0800ab90  0800ab90  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b664  0800b664  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b66c  0800b66c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800b674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  24000078  0800b6ec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000304  0800b6ec  00020304  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d5a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dd7  00000000  00000000  00045e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  00049bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c0  00000000  00000000  0004b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034060  00000000  00000000  0004c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001553c  00000000  00000000  00080950  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00157559  00000000  00000000  00095e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001ed3e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a2c  00000000  00000000  001ed4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000b35  00000000  00000000  001f3efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ab78 	.word	0x0800ab78

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800ab78 	.word	0x0800ab78

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	; 0x40
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f8ed 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8e5 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fb23 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fae9 	bl	8000bd8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fa93 	bl	8000b30 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fadd 	bl	8000bc8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f9ab 	bl	8000968 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 fa25 	bl	8000a60 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 fa55 	bl	8000ac4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  s_ref = init_nco(250. / 4550., 0);
  blocksize = get_blocksize();
 800061a:	f000 fcd1 	bl	8000fc0 <get_blocksize>
 800061e:	6338      	str	r0, [r7, #48]	; 0x30

  s_ref = init_nco(250. / 4000., 0);
 8000620:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800079c <main+0x1ac>
 8000624:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80007a0 <main+0x1b0>
 8000628:	f000 fc42 	bl	8000eb0 <init_nco>
 800062c:	62f8      	str	r0, [r7, #44]	; 0x2c
  s_2 = init_nco(249. / 4000., 0);
 800062e:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800079c <main+0x1ac>
 8000632:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80007a4 <main+0x1b4>
 8000636:	f000 fc3b 	bl	8000eb0 <init_nco>
 800063a:	62b8      	str	r0, [r7, #40]	; 0x28

  sin_buffer = calloc(blocksize, sizeof(float));
 800063c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063e:	2104      	movs	r1, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f009 fdcd 	bl	800a1e0 <calloc>
 8000646:	4603      	mov	r3, r0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  sin2_buffer = calloc(blocksize, sizeof(float));
 800064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fdc6 	bl	800a1e0 <calloc>
 8000654:	4603      	mov	r3, r0
 8000656:	623b      	str	r3, [r7, #32]
  dac_test = calloc(blocksize, sizeof(uint16_t));
 8000658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065a:	2102      	movs	r1, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f009 fdbf 	bl	800a1e0 <calloc>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b50      	ldr	r3, [pc, #320]	; (80007a8 <main+0x1b8>)
 8000668:	601a      	str	r2, [r3, #0]
  adc_float = calloc(blocksize, sizeof(float));
 800066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066c:	2104      	movs	r1, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f009 fdb6 	bl	800a1e0 <calloc>
 8000674:	4603      	mov	r3, r0
 8000676:	61fb      	str	r3, [r7, #28]
  mixed_out = calloc(blocksize, sizeof(float));
 8000678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f009 fdaf 	bl	800a1e0 <calloc>
 8000682:	4603      	mov	r3, r0
 8000684:	61bb      	str	r3, [r7, #24]
  fir_out = calloc(blocksize, sizeof(float));
 8000686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f009 fda8 	bl	800a1e0 <calloc>
 8000690:	4603      	mov	r3, r0
 8000692:	617b      	str	r3, [r7, #20]

  fir_state = malloc(sizeof(float)*(blocksize+fir_coefs_len-1));
 8000694:	227a      	movs	r2, #122	; 0x7a
 8000696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000698:	4413      	add	r3, r2
 800069a:	3b01      	subs	r3, #1
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f009 fde4 	bl	800a26c <malloc>
 80006a4:	4603      	mov	r3, r0
 80006a6:	613b      	str	r3, [r7, #16]

  adc_buff = (uint16_t *) malloc(sizeof(uint16_t)*blocksize*2);
 80006a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f009 fddd 	bl	800a26c <malloc>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <main+0x1bc>)
 80006b8:	601a      	str	r2, [r3, #0]
  dac_buff = (uint16_t *) malloc(sizeof(uint16_t)*blocksize*2);
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 fdd4 	bl	800a26c <malloc>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <main+0x1c0>)
 80006ca:	601a      	str	r2, [r3, #0]

  if ((adc_buff == NULL) || (dac_buff == NULL)) {
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <main+0x1bc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <main+0xec>
 80006d4:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <main+0x1c0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d105      	bne.n	80006e8 <main+0xf8>
	  printf("Failed to allocate memory for arrays\n");
 80006dc:	4835      	ldr	r0, [pc, #212]	; (80007b4 <main+0x1c4>)
 80006de:	f009 fee7 	bl	800a4b0 <puts>
	  exit(EXIT_FAILURE);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fd8a 	bl	800a1fc <exit>
  }

  /* Start ADC with DMA */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buff, 2*blocksize);
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <main+0x1bc>)
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	461a      	mov	r2, r3
 80006f2:	4831      	ldr	r0, [pc, #196]	; (80007b8 <main+0x1c8>)
 80006f4:	f001 fc64 	bl	8001fc0 <HAL_ADC_Start_DMA>

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 80006f8:	4830      	ldr	r0, [pc, #192]	; (80007bc <main+0x1cc>)
 80006fa:	f008 f81d 	bl	8008738 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fe:	2100      	movs	r1, #0
 8000700:	482f      	ldr	r0, [pc, #188]	; (80007c0 <main+0x1d0>)
 8000702:	f002 fb7a 	bl	8002dfa <HAL_DAC_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buff, 2*blocksize, DAC_ALIGN_12B_R);
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <main+0x1c0>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2300      	movs	r3, #0
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	460b      	mov	r3, r1
 8000716:	2100      	movs	r1, #0
 8000718:	4829      	ldr	r0, [pc, #164]	; (80007c0 <main+0x1d0>)
 800071a:	f002 fbc1 	bl	8002ea0 <HAL_DAC_Start_DMA>

  arm_fir_init_f32(&fir_struct, fir_coefs_len, fir_coefs, fir_state, blocksize);
 800071e:	237a      	movs	r3, #122	; 0x7a
 8000720:	b299      	uxth	r1, r3
 8000722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000724:	1d38      	adds	r0, r7, #4
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <main+0x1d4>)
 800072c:	f009 fad8 	bl	8009ce0 <arm_fir_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	nco_get_samples(s_ref, sin_buffer, blocksize);
 8000730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000736:	f000 fc03 	bl	8000f40 <nco_get_samples>
	nco_get_samples(s_2, sin2_buffer, blocksize);
 800073a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800073c:	6a39      	ldr	r1, [r7, #32]
 800073e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000740:	f000 fbfe 	bl	8000f40 <nco_get_samples>

	get_adc_buff(adc_float);
 8000744:	69f8      	ldr	r0, [r7, #28]
 8000746:	f000 fc47 	bl	8000fd8 <get_adc_buff>

	/* Mix the ADC input with the generated sine wave at 250kHz */
	for (i = 0; i < blocksize; i++) {
 800074a:	2300      	movs	r3, #0
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
 800074e:	e016      	b.n	800077e <main+0x18e>
		mixed_out[i] = sin_buffer[i] * adc_float[i];
 8000750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000756:	4413      	add	r3, r2
 8000758:	ed93 7a00 	vldr	s14, [r3]
 800075c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	4413      	add	r3, r2
 8000764:	edd3 7a00 	vldr	s15, [r3]
 8000768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	4413      	add	r3, r2
 8000770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000774:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < blocksize; i++) {
 8000778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800077a:	3301      	adds	r3, #1
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
 800077e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000782:	429a      	cmp	r2, r3
 8000784:	dbe4      	blt.n	8000750 <main+0x160>
//		mixed_out[i] = sin_buffer[i] * sin2_buffer[i];
	}

	/* Filter the mixed output with the filter coefficients*/
	arm_fir_f32(&fir_struct, mixed_out, fir_out, blocksize);
 8000786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000788:	1d38      	adds	r0, r7, #4
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	69b9      	ldr	r1, [r7, #24]
 800078e:	f009 fab9 	bl	8009d04 <arm_fir_f32>

	/* Output result to DAC */
	set_dac_buff(adc_float);
 8000792:	69f8      	ldr	r0, [r7, #28]
 8000794:	f000 fc84 	bl	80010a0 <set_dac_buff>
	nco_get_samples(s_ref, sin_buffer, blocksize);
 8000798:	e7ca      	b.n	8000730 <main+0x140>
 800079a:	bf00      	nop
 800079c:	00000000 	.word	0x00000000
 80007a0:	3d800000 	.word	0x3d800000
 80007a4:	3d7ef9db 	.word	0x3d7ef9db
 80007a8:	24000094 	.word	0x24000094
 80007ac:	2400009c 	.word	0x2400009c
 80007b0:	240000a0 	.word	0x240000a0
 80007b4:	0800ab90 	.word	0x0800ab90
 80007b8:	240001d0 	.word	0x240001d0
 80007bc:	240002ac 	.word	0x240002ac
 80007c0:	240000b8 	.word	0x240000b8
 80007c4:	0800abe8 	.word	0x0800abe8

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0ca      	sub	sp, #296	; 0x128
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007d2:	224c      	movs	r2, #76	; 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 fd50 	bl	800a27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 fd49 	bl	800a27c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	23b8      	movs	r3, #184	; 0xb8
 80007f0:	461a      	mov	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f009 fd42 	bl	800a27c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f005 f947 	bl	8005a8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	4b55      	ldr	r3, [pc, #340]	; (800095c <SystemClock_Config+0x194>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a54      	ldr	r2, [pc, #336]	; (800095c <SystemClock_Config+0x194>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b52      	ldr	r3, [pc, #328]	; (800095c <SystemClock_Config+0x194>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000818:	463b      	mov	r3, r7
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	463b      	mov	r3, r7
 800081e:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000820:	bf00      	nop
 8000822:	4b4e      	ldr	r3, [pc, #312]	; (800095c <SystemClock_Config+0x194>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082e:	d1f8      	bne.n	8000822 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000830:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <SystemClock_Config+0x198>)
 8000832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000834:	f023 0303 	bic.w	r3, r3, #3
 8000838:	4a49      	ldr	r2, [pc, #292]	; (8000960 <SystemClock_Config+0x198>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000840:	2329      	movs	r3, #41	; 0x29
 8000842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000846:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800084a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800084e:	2301      	movs	r3, #1
 8000850:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 800086c:	2318      	movs	r3, #24
 800086e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000884:	230c      	movs	r3, #12
 8000886:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800089a:	4618      	mov	r0, r3
 800089c:	f005 f950 	bl	8005b40 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008a6:	f000 faf9 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	233f      	movs	r3, #63	; 0x3f
 80008ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2303      	movs	r3, #3
 80008b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80008de:	2102      	movs	r1, #2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 fd15 	bl	8006310 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80008ec:	f000 fad6 	bl	8000e9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <SystemClock_Config+0x19c>)
 80008f4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2201      	movs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2210      	movs	r2, #16
 8000900:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2202      	movs	r2, #2
 8000906:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2202      	movs	r2, #2
 800090c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2202      	movs	r2, #2
 8000912:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	22c0      	movs	r2, #192	; 0xc0
 8000918:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f006 f869 	bl	8006a18 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x188>
  {
    Error_Handler();
 800094c:	f000 faa6 	bl	8000e9c <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	58024800 	.word	0x58024800
 8000960:	58024400 	.word	0x58024400
 8000964:	000c0002 	.word	0x000c0002

08000968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_ADC1_Init+0xec>)
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <MX_ADC1_Init+0xf0>)
 8000990:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <MX_ADC1_Init+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_ADC1_Init+0xec>)
 800099a:	2208      	movs	r2, #8
 800099c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009c4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009d4:	2203      	movs	r2, #3
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ee:	4819      	ldr	r0, [pc, #100]	; (8000a54 <MX_ADC1_Init+0xec>)
 80009f0:	f001 f98c 	bl	8001d0c <HAL_ADC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80009fa:	f000 fa4f 	bl	8000e9c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_ADC1_Init+0xec>)
 8000a0a:	f002 f82d 	bl	8002a68 <HAL_ADCEx_MultiModeConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a14:	f000 fa42 	bl	8000e9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_ADC1_Init+0xf4>)
 8000a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_ADC1_Init+0xec>)
 8000a3c:	f001 fb7e 	bl	800213c <HAL_ADC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a46:	f000 fa29 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	240001d0 	.word	0x240001d0
 8000a58:	40022000 	.word	0x40022000
 8000a5c:	14f00020 	.word	0x14f00020

08000a60 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2224      	movs	r2, #36	; 0x24
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f009 fc05 	bl	800a27c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_DAC1_Init+0x5c>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_DAC1_Init+0x60>)
 8000a76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <MX_DAC1_Init+0x5c>)
 8000a7a:	f002 f99c 	bl	8002db6 <HAL_DAC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a84:	f000 fa0a 	bl	8000e9c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000a8c:	2316      	movs	r3, #22
 8000a8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_DAC1_Init+0x5c>)
 8000aa4:	f002 fad8 	bl	8003058 <HAL_DAC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f9f5 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	240000b8 	.word	0x240000b8
 8000ac0:	40007400 	.word	0x40007400

08000ac4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_TIM6_Init+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ae8:	2217      	movs	r2, #23
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000af4:	f007 fdc8 	bl	8008688 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000afe:	f000 f9cd 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b02:	2320      	movs	r3, #32
 8000b04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000b10:	f007 feda 	bl	80088c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b1a:	f000 f9bf 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	240002ac 	.word	0x240002ac
 8000b2c:	40001000 	.word	0x40001000

08000b30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <MX_USART3_UART_Init+0x94>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b7a:	f007 ff2d 	bl	80089d8 <HAL_UART_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b84:	f000 f98a 	bl	8000e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b8c:	f008 ffc3 	bl	8009b16 <HAL_UARTEx_SetTxFifoThreshold>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b96:	f000 f981 	bl	8000e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000b9e:	f008 fff8 	bl	8009b92 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f978 	bl	8000e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_USART3_UART_Init+0x90>)
 8000bae:	f008 ff79 	bl	8009aa4 <HAL_UARTEx_DisableFifoMode>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f000 f970 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240000cc 	.word	0x240000cc
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_DMA_Init+0x6c>)
 8000be0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <MX_DMA_Init+0x6c>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_DMA_Init+0x6c>)
 8000bf0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_DMA_Init+0x6c>)
 8000bfe:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <MX_DMA_Init+0x6c>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_DMA_Init+0x6c>)
 8000c0e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f002 f895 	bl	8002d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c24:	200b      	movs	r0, #11
 8000c26:	f002 f8ac 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2038      	movs	r0, #56	; 0x38
 8000c30:	f002 f88d 	bl	8002d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c34:	2038      	movs	r0, #56	; 0x38
 8000c36:	f002 f8a4 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	58024400 	.word	0x58024400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b87      	ldr	r3, [pc, #540]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c64:	4a85      	ldr	r2, [pc, #532]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c6e:	4b83      	ldr	r3, [pc, #524]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	623b      	str	r3, [r7, #32]
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7c:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c82:	4a7e      	ldr	r2, [pc, #504]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c8c:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c92:	f003 0320 	and.w	r3, r3, #32
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	4b78      	ldr	r3, [pc, #480]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000c9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca0:	4a76      	ldr	r2, [pc, #472]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000caa:	4b74      	ldr	r3, [pc, #464]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b70      	ldr	r3, [pc, #448]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cbe:	4a6f      	ldr	r2, [pc, #444]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc8:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b69      	ldr	r3, [pc, #420]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cdc:	4a67      	ldr	r2, [pc, #412]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b61      	ldr	r3, [pc, #388]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cfa:	4a60      	ldr	r2, [pc, #384]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d04:	4b5d      	ldr	r3, [pc, #372]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d12:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d18:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d22:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d30:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d36:	4a51      	ldr	r2, [pc, #324]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <MX_GPIO_Init+0x234>)
 8000d42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d54:	484a      	ldr	r0, [pc, #296]	; (8000e80 <MX_GPIO_Init+0x238>)
 8000d56:	f004 fe65 	bl	8005a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d60:	4848      	ldr	r0, [pc, #288]	; (8000e84 <MX_GPIO_Init+0x23c>)
 8000d62:	f004 fe5f 	bl	8005a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4847      	ldr	r0, [pc, #284]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000d6c:	f004 fe5a 	bl	8005a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4841      	ldr	r0, [pc, #260]	; (8000e8c <MX_GPIO_Init+0x244>)
 8000d86:	f004 fc9d 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4837      	ldr	r0, [pc, #220]	; (8000e80 <MX_GPIO_Init+0x238>)
 8000da4:	f004 fc8e 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000da8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4830      	ldr	r0, [pc, #192]	; (8000e84 <MX_GPIO_Init+0x23c>)
 8000dc2:	f004 fc7f 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_GPIO_Init+0x248>)
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	482e      	ldr	r0, [pc, #184]	; (8000e94 <MX_GPIO_Init+0x24c>)
 8000dda:	f004 fc73 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4829      	ldr	r0, [pc, #164]	; (8000e98 <MX_GPIO_Init+0x250>)
 8000df4:	f004 fc66 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_GPIO_Init+0x250>)
 8000e16:	f004 fc55 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4819      	ldr	r0, [pc, #100]	; (8000e98 <MX_GPIO_Init+0x250>)
 8000e34:	f004 fc46 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e38:	23c0      	movs	r3, #192	; 0xc0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_GPIO_Init+0x23c>)
 8000e54:	f004 fc36 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_GPIO_Init+0x240>)
 8000e70:	f004 fc28 	bl	80056c4 <HAL_GPIO_Init>

}
 8000e74:	bf00      	nop
 8000e76:	3738      	adds	r7, #56	; 0x38
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58021400 	.word	0x58021400
 8000e84:	58020400 	.word	0x58020400
 8000e88:	58021000 	.word	0x58021000
 8000e8c:	58020800 	.word	0x58020800
 8000e90:	11110000 	.word	0x11110000
 8000e94:	58021800 	.word	0x58021800
 8000e98:	58020000 	.word	0x58020000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	0000      	movs	r0, r0
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eba:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f009 f9d4 	bl	800a26c <malloc>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 8000ece:	481a      	ldr	r0, [pc, #104]	; (8000f38 <init_nco+0x88>)
 8000ed0:	f009 faee 	bl	800a4b0 <puts>
        exit(EXIT_FAILURE);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f009 f991 	bl	800a1fc <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ee2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f3c <init_nco+0x8c>
 8000ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eee:	ee17 2a90 	vmov	r2, s15
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8000ef6:	edd7 7a00 	vldr	s15, [r7]
 8000efa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000efe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f3c <init_nco+0x8c>
 8000f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f06:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f0a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000f30 <init_nco+0x80>
 8000f0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f16:	ee17 2a90 	vmov	r2, s15
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	53c8d4f1 	.word	0x53c8d4f1
 8000f34:	401921fb 	.word	0x401921fb
 8000f38:	0800abb8 	.word	0x0800abb8
 8000f3c:	4f000000 	.word	0x4f000000

08000f40 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     float *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	e02a      	b.n	8000fa8 <nco_get_samples+0x68>

        if ((i == 0) && (s->acc == 0)) {
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <nco_get_samples+0x28>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d103      	bne.n	8000f68 <nco_get_samples+0x28>
            s->acc = 0;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	e008      	b.n	8000f7a <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	609a      	str	r2, [r3, #8]
        }
        //kprime[n]
        kprime = s->acc + s->theta;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	0ddb      	lsrs	r3, r3, #23
 8000f8c:	617b      	str	r3, [r7, #20]
//        	y[i] = index;
//        }
//		y[i] = index;
//        y[i] = (int)((cosine[i / 2] * 2048)/2 + 2047);
//        y[i] = (unsigned int)((cosine[index] * 2048)/2 + 2047);
        y[i] = cosine[index];
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	4413      	add	r3, r2
 8000f96:	4909      	ldr	r1, [pc, #36]	; (8000fbc <nco_get_samples+0x7c>)
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	440a      	add	r2, r1
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3d0      	bcc.n	8000f52 <nco_get_samples+0x12>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3724      	adds	r7, #36	; 0x24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	0800add0 	.word	0x0800add0

08000fc0 <get_blocksize>:
static volatile uint16_t *input_buff;
static volatile uint16_t *output_buff;

enum status volatile current_status;

int get_blocksize() {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	return ADC_block_len;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <get_blocksize+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	24000000 	.word	0x24000000

08000fd8 <get_adc_buff>:
	ADC_block_len = new_blocksize;
	ADC_buffer_len = 2 * new_blocksize;
}

/* Get buffer from the ADC */
void get_adc_buff(float * ret_adc) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* Wait for the next buffer of values */
	current_status = WAIT_FOR_BUFFER;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <get_adc_buff+0xa8>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
	while (current_status == WAIT_FOR_BUFFER)
 8000fe6:	e000      	b.n	8000fea <get_adc_buff+0x12>
		__WFI(); //Wait for interrupts to change current_status
 8000fe8:	bf30      	wfi
	while (current_status == WAIT_FOR_BUFFER)
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <get_adc_buff+0xa8>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d0f9      	beq.n	8000fe8 <get_adc_buff+0x10>

	/* If the ADC conversion is half done, fill up the first half of the buffer */
	if (Half_Done) {
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <get_adc_buff+0xac>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d008      	beq.n	8001010 <get_adc_buff+0x38>
		input_buff = adc_buff;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <get_adc_buff+0xb0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <get_adc_buff+0xb4>)
 8001004:	6013      	str	r3, [r2, #0]
		output_buff = dac_buff;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <get_adc_buff+0xb8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <get_adc_buff+0xbc>)
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00f      	b.n	8001030 <get_adc_buff+0x58>
	}

	/* If the ADC conversion is complete, fill up the second half of the buffer */
	else {
		input_buff = &(adc_buff[ADC_block_len]);
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <get_adc_buff+0xb0>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <get_adc_buff+0xc0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <get_adc_buff+0xb4>)
 800101e:	6013      	str	r3, [r2, #0]
		output_buff = &(dac_buff[ADC_block_len]);
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <get_adc_buff+0xb8>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <get_adc_buff+0xc0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <get_adc_buff+0xbc>)
 800102e:	6013      	str	r3, [r2, #0]
	}

	/* Convert ADC block to floats to return to user*/
	for (i = 0; i < ADC_block_len; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e019      	b.n	800106a <get_adc_buff+0x92>
		ret_adc[i] = (float)(input_buff[i] - 2047) / 2048.;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <get_adc_buff+0xb4>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	eddf 6a10 	vldr	s13, [pc, #64]	; 800109c <get_adc_buff+0xc4>
 800105c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001060:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < ADC_block_len; i++) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <get_adc_buff+0xc0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3e0      	bcc.n	8001036 <get_adc_buff+0x5e>
	}
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	240002f8 	.word	0x240002f8
 8001084:	24000098 	.word	0x24000098
 8001088:	2400009c 	.word	0x2400009c
 800108c:	240000a4 	.word	0x240000a4
 8001090:	240000a0 	.word	0x240000a0
 8001094:	240000a8 	.word	0x240000a8
 8001098:	24000000 	.word	0x24000000
 800109c:	45000000 	.word	0x45000000

080010a0 <set_dac_buff>:

/* Set DAC buffer to output */
void set_dac_buff(float * input_dac) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* Convert from float to 0-4095 for 12bit dac */
	for (i = 0; i < ADC_block_len; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e01d      	b.n	80010ea <set_dac_buff+0x4a>
		output_buff[i] = (int)((input_dac[i] + 1.) * 2048.) & 0xFFFF;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80010c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010c6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001100 <set_dac_buff+0x60>
 80010ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <set_dac_buff+0x68>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	ee17 2a90 	vmov	r2, s15
 80010e0:	b292      	uxth	r2, r2
 80010e2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ADC_block_len; i++) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <set_dac_buff+0x6c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3dc      	bcc.n	80010ae <set_dac_buff+0xe>
	}
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	00000000 	.word	0x00000000
 8001104:	40a00000 	.word	0x40a00000
 8001108:	240000a8 	.word	0x240000a8
 800110c:	24000000 	.word	0x24000000

08001110 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	Half_Done = 1;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800111e:	2101      	movs	r1, #1
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001122:	f004 fc98 	bl	8005a56 <HAL_GPIO_TogglePin>
	if (current_status == STARTUP){}
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_ADC_ConvHalfCpltCallback+0x30>
	else if (current_status == WAIT_FOR_BUFFER) {
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d102      	bne.n	8001140 <HAL_ADC_ConvHalfCpltCallback+0x30>
		current_status = PROCESS;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
	else {
//		printf("Overrun by samples\n");
//		exit(EXIT_FAILURE);
//		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	}
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24000098 	.word	0x24000098
 800114c:	58020400 	.word	0x58020400
 8001150:	240002f8 	.word	0x240002f8

08001154 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	Half_Done = 0;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_ADC_ConvCpltCallback+0x34>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001162:	2101      	movs	r1, #1
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_ADC_ConvCpltCallback+0x38>)
 8001166:	f004 fc76 	bl	8005a56 <HAL_GPIO_TogglePin>
	if (current_status == STARTUP){}
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_ADC_ConvCpltCallback+0x3c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
	if (current_status == WAIT_FOR_BUFFER) {
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d102      	bne.n	800117e <HAL_ADC_ConvCpltCallback+0x2a>
			current_status = PROCESS;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_ADC_ConvCpltCallback+0x3c>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
	else{
//		printf("Overrun by samples\n");
//		exit(1);
//		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	}
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	24000098 	.word	0x24000098
 800118c:	58020400 	.word	0x58020400
 8001190:	240002f8 	.word	0x240002f8

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_MspInit+0x30>)
 800119c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x30>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x30>)
 80011ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	58024400 	.word	0x58024400

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d159      	bne.n	800129e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 80011ec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80011f0:	4a2e      	ldr	r2, [pc, #184]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 80011fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800120a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120e:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 800121a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001226:	2302      	movs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	481d      	ldr	r0, [pc, #116]	; (80012b0 <HAL_ADC_MspInit+0xe8>)
 800123a:	f004 fa43 	bl	80056c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_ADC_MspInit+0xf0>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001246:	2209      	movs	r2, #9
 8001248:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001264:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001274:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001284:	f002 f8a2 	bl	80033cc <HAL_DMA_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800128e:	f7ff fe05 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 8001296:	64da      	str	r2, [r3, #76]	; 0x4c
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_ADC_MspInit+0xec>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40022000 	.word	0x40022000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020400 	.word	0x58020400
 80012b4:	24000234 	.word	0x24000234
 80012b8:	40020010 	.word	0x40020010

080012bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a30      	ldr	r2, [pc, #192]	; (800139c <HAL_DAC_MspInit+0xe0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d159      	bne.n	8001392 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_DAC_MspInit+0xe4>)
 80012e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012e4:	4a2e      	ldr	r2, [pc, #184]	; (80013a0 <HAL_DAC_MspInit+0xe4>)
 80012e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_DAC_MspInit+0xe4>)
 80012f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_DAC_MspInit+0xe4>)
 80012fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_DAC_MspInit+0xe4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_DAC_MspInit+0xe4>)
 800130e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800131a:	2310      	movs	r3, #16
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	481d      	ldr	r0, [pc, #116]	; (80013a4 <HAL_DAC_MspInit+0xe8>)
 800132e:	f004 f9c9 	bl	80056c4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_DAC_MspInit+0xf0>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800133a:	2243      	movs	r2, #67	; 0x43
 800133c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800134c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001350:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001358:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800135c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001360:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001368:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001376:	480c      	ldr	r0, [pc, #48]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 8001378:	f002 f828 	bl	80033cc <HAL_DMA_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001382:	f7ff fd8b 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_DAC_MspInit+0xec>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40007400 	.word	0x40007400
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58020000 	.word	0x58020000
 80013a8:	24000158 	.word	0x24000158
 80013ac:	40020410 	.word	0x40020410

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10e      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013c8:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40001000 	.word	0x40001000
 80013f0:	58024400 	.word	0x58024400

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_UART_MspInit+0x88>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d12e      	bne.n	8001474 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_UART_MspInit+0x8c>)
 8001418:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x8c>)
 800141e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001422:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_UART_MspInit+0x8c>)
 8001428:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800142c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_UART_MspInit+0x8c>)
 8001436:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x8c>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x8c>)
 8001446:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_UART_MspInit+0x90>)
 8001470:	f004 f928 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004800 	.word	0x40004800
 8001480:	58024400 	.word	0x58024400
 8001484:	58020c00 	.word	0x58020c00

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f9ec 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA1_Stream0_IRQHandler+0x10>)
 80014ea:	f002 fd69 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	24000234 	.word	0x24000234

080014f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA2_Stream0_IRQHandler+0x10>)
 80014fe:	f002 fd5f 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	24000158 	.word	0x24000158

0800150c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001516:	f008 fe6b 	bl	800a1f0 <__errno>
 800151a:	4602      	mov	r2, r0
 800151c:	2316      	movs	r3, #22
 800151e:	6013      	str	r3, [r2, #0]
	return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_exit>:

void _exit (int status)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffe7 	bl	800150c <_kill>
	while (1) {}		/* Make sure we hang here */
 800153e:	e7fe      	b.n	800153e <_exit+0x12>

08001540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e00a      	b.n	8001568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001552:	f3af 8000 	nop.w
 8001556:	4601      	mov	r1, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf0      	blt.n	8001552 <_read+0x12>
	}

return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf1      	blt.n	800158c <_write+0x12>
	}
	return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_close>:

int _close(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015da:	605a      	str	r2, [r3, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_isatty>:

int _isatty(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	return 1;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f008 fdd0 	bl	800a1f0 <__errno>
 8001650:	4602      	mov	r2, r0
 8001652:	230c      	movs	r3, #12
 8001654:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24100000 	.word	0x24100000
 800167c:	00000400 	.word	0x00000400
 8001680:	240000ac 	.word	0x240000ac
 8001684:	24000308 	.word	0x24000308

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <SystemInit+0xd8>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a33      	ldr	r2, [pc, #204]	; (8001760 <SystemInit+0xd8>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <SystemInit+0xdc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d807      	bhi.n	80016b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <SystemInit+0xdc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 030f 	bic.w	r3, r3, #15
 80016b0:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <SystemInit+0xdc>)
 80016b2:	f043 0303 	orr.w	r3, r3, #3
 80016b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <SystemInit+0xe0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <SystemInit+0xe0>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <SystemInit+0xe0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <SystemInit+0xe0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4926      	ldr	r1, [pc, #152]	; (8001768 <SystemInit+0xe0>)
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <SystemInit+0xe4>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <SystemInit+0xdc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d907      	bls.n	80016f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <SystemInit+0xdc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 030f 	bic.w	r3, r3, #15
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <SystemInit+0xdc>)
 80016ec:	f043 0303 	orr.w	r3, r3, #3
 80016f0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <SystemInit+0xe0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <SystemInit+0xe0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <SystemInit+0xe0>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <SystemInit+0xe0>)
 8001706:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <SystemInit+0xe8>)
 8001708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <SystemInit+0xe0>)
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <SystemInit+0xec>)
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <SystemInit+0xe0>)
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <SystemInit+0xf0>)
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <SystemInit+0xe0>)
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <SystemInit+0xe0>)
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <SystemInit+0xf0>)
 8001720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <SystemInit+0xe0>)
 8001724:	2200      	movs	r2, #0
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <SystemInit+0xe0>)
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <SystemInit+0xf0>)
 800172c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <SystemInit+0xe0>)
 8001730:	2200      	movs	r2, #0
 8001732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <SystemInit+0xe0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <SystemInit+0xe0>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <SystemInit+0xe0>)
 8001742:	2200      	movs	r2, #0
 8001744:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <SystemInit+0xf4>)
 8001748:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800174c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SystemInit+0xd8>)
 8001750:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001754:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	52002000 	.word	0x52002000
 8001768:	58024400 	.word	0x58024400
 800176c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001770:	02020200 	.word	0x02020200
 8001774:	01ff0000 	.word	0x01ff0000
 8001778:	01010280 	.word	0x01010280
 800177c:	52004000 	.word	0x52004000

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001784:	f7ff ff80 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800178a:	e003      	b.n	8001794 <LoopCopyDataInit>

0800178c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800178e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001792:	3104      	adds	r1, #4

08001794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001794:	480a      	ldr	r0, [pc, #40]	; (80017c0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800179a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800179c:	d3f6      	bcc.n	800178c <CopyDataInit>
  ldr  r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80017a0:	e002      	b.n	80017a8 <LoopFillZerobss>

080017a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80017a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017a4:	f842 3b04 	str.w	r3, [r2], #4

080017a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80017aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017ac:	d3f9      	bcc.n	80017a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f008 fd39 	bl	800a224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7fe ff1d 	bl	80005f0 <main>
  bx  lr
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 80017bc:	0800b674 	.word	0x0800b674
  ldr  r0, =_sdata
 80017c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80017c4:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80017c8:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 80017cc:	24000304 	.word	0x24000304

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017da:	2003      	movs	r0, #3
 80017dc:	f001 faac 	bl	8002d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017e0:	f004 ff4c 	bl	800667c <HAL_RCC_GetSysClockFreq>
 80017e4:	4601      	mov	r1, r0
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_Init+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	4a13      	ldr	r2, [pc, #76]	; (8001840 <HAL_Init+0x6c>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa21 f303 	lsr.w	r3, r1, r3
 80017fc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_Init+0x6c>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_Init+0x70>)
 8001816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_Init+0x74>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f814 	bl	800184c <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e002      	b.n	8001834 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800182e:	f7ff fcb1 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400
 8001840:	0800b5d0 	.word	0x0800b5d0
 8001844:	24000008 	.word	0x24000008
 8001848:	24000004 	.word	0x24000004

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_InitTick+0x60>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e021      	b.n	80018a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_InitTick+0x64>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_InitTick+0x60>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fa91 	bl	8002d9e <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f001 fa5b 	bl	8002d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x68>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24000010 	.word	0x24000010
 80018b0:	24000004 	.word	0x24000004
 80018b4:	2400000c 	.word	0x2400000c

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	24000010 	.word	0x24000010
 80018dc:	240002fc 	.word	0x240002fc

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	240002fc 	.word	0x240002fc

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_Delay+0x40>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	24000010 	.word	0x24000010

0800193c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3360      	adds	r3, #96	; 0x60
 80019b6:	461a      	mov	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019d8:	bf00      	nop
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	611a      	str	r2, [r3, #16]
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b087      	sub	sp, #28
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3360      	adds	r3, #96	; 0x60
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
  }
}
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b087      	sub	sp, #28
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3330      	adds	r3, #48	; 0x30
 8001a82:	461a      	mov	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	211f      	movs	r1, #31
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	f003 011f 	and.w	r1, r3, #31
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f023 0203 	bic.w	r2, r3, #3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3314      	adds	r3, #20
 8001b00:	461a      	mov	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	0e5b      	lsrs	r3, r3, #25
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0d1b      	lsrs	r3, r3, #20
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2107      	movs	r1, #7
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	401a      	ands	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0d1b      	lsrs	r3, r3, #20
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	431a      	orrs	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0318 	and.w	r3, r3, #24
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b6c:	40d9      	lsrs	r1, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	400b      	ands	r3, r1
 8001b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b76:	431a      	orrs	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	000fffff 	.word	0x000fffff

08001b90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6093      	str	r3, [r2, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	5fffffc0 	.word	0x5fffffc0

08001bd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be4:	d101      	bne.n	8001bea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	6fffffc0 	.word	0x6fffffc0

08001c20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c34:	d101      	bne.n	8001c3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <LL_ADC_Enable+0x24>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	7fffffc0 	.word	0x7fffffc0

08001c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_IsEnabled+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_IsEnabled+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <LL_ADC_REG_StartConversion+0x24>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	7fffffc0 	.word	0x7fffffc0

08001cc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d101      	bne.n	8001cd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d101      	bne.n	8001cfe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e137      	b.n	8001f96 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fa47 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff3f 	bl	8001bd0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff25 	bl	8001bac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff5a 	bl	8001c20 <LL_ADC_IsInternalRegulatorEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d113      	bne.n	8001d9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff3e 	bl	8001bf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d7c:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <HAL_ADC_Init+0x294>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	4a88      	ldr	r2, [pc, #544]	; (8001fa4 <HAL_ADC_Init+0x298>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff3e 	bl	8001c20 <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff78 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80d2 	bne.w	8001f84 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80ce 	bne.w	8001f84 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff37 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d110      	bne.n	8001e2a <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e08:	4867      	ldr	r0, [pc, #412]	; (8001fa8 <HAL_ADC_Init+0x29c>)
 8001e0a:	f7ff ff31 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4866      	ldr	r0, [pc, #408]	; (8001fac <HAL_ADC_Init+0x2a0>)
 8001e12:	f7ff ff2d 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4323      	orrs	r3, r4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4862      	ldr	r0, [pc, #392]	; (8001fb0 <HAL_ADC_Init+0x2a4>)
 8001e26:	f7ff fd89 	bl	800193c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7d5b      	ldrb	r3, [r3, #21]
 8001e2e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001e3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7f1b      	ldrb	r3, [r3, #28]
 8001e40:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7f1b      	ldrb	r3, [r3, #28]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	045b      	lsls	r3, r3, #17
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_ADC_Init+0x2a8>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff15 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8001e96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff22 	bl	8001ce6 <LL_ADC_INJ_IsConversionOngoing>
 8001ea2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d14a      	bne.n	8001f40 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d147      	bne.n	8001f40 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7d1b      	ldrb	r3, [r3, #20]
 8001eb4:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <HAL_ADC_Init+0x2ac>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	69b9      	ldr	r1, [r7, #24]
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d11b      	bne.n	8001f14 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_ADC_Init+0x2b0>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0411      	lsls	r1, r2, #16
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f04:	430a      	orrs	r2, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	e007      	b.n	8001f24 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fcb4 	bl	80028a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10c      	bne.n	8001f62 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f023 010f 	bic.w	r1, r3, #15
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f60:	e007      	b.n	8001f72 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020f 	bic.w	r2, r2, #15
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
 8001f82:	e007      	b.n	8001f94 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f043 0210 	orr.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f94:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	24000004 	.word	0x24000004
 8001fa4:	053e2d63 	.word	0x053e2d63
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40022100 	.word	0x40022100
 8001fb0:	40022300 	.word	0x40022300
 8001fb4:	fff0c003 	.word	0xfff0c003
 8001fb8:	ffffbffc 	.word	0xffffbffc
 8001fbc:	fc00f81e 	.word	0xfc00f81e

08001fc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fcc:	484f      	ldr	r0, [pc, #316]	; (800210c <HAL_ADC_Start_DMA+0x14c>)
 8001fce:	f7ff fddf 	bl	8001b90 <LL_ADC_GetMultimode>
 8001fd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe71 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 808c 	bne.w	80020fe <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_Start_DMA+0x34>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e087      	b.n	8002104 <HAL_ADC_Start_DMA+0x144>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d002      	beq.n	800200e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b09      	cmp	r3, #9
 800200c:	d170      	bne.n	80020f0 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fb42 	bl	8002698 <ADC_Enable>
 8002014:	4603      	mov	r3, r0
 8002016:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d163      	bne.n	80020e6 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_ADC_Start_DMA+0x150>)
 8002024:	4013      	ands	r3, r2
 8002026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a38      	ldr	r2, [pc, #224]	; (8002114 <HAL_ADC_Start_DMA+0x154>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d002      	beq.n	800203e <HAL_ADC_Start_DMA+0x7e>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e000      	b.n	8002040 <HAL_ADC_Start_DMA+0x80>
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_ADC_Start_DMA+0x158>)
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4293      	cmp	r3, r2
 8002046:	d002      	beq.n	800204e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f023 0206 	bic.w	r2, r3, #6
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	659a      	str	r2, [r3, #88]	; 0x58
 8002072:	e002      	b.n	800207a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_ADC_Start_DMA+0x15c>)
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_ADC_Start_DMA+0x160>)
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_ADC_Start_DMA+0x164>)
 8002090:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	221c      	movs	r2, #28
 8002098:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0210 	orr.w	r2, r2, #16
 80020b0:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f7ff fd04 	bl	8001aca <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3340      	adds	r3, #64	; 0x40
 80020cc:	4619      	mov	r1, r3
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f001 fd0b 	bl	8003aec <HAL_DMA_Start_IT>
 80020d6:	4603      	mov	r3, r0
 80020d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fdda 	bl	8001c98 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020e4:	e00d      	b.n	8002102 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80020ee:	e008      	b.n	8002102 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020fc:	e001      	b.n	8002102 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40022300 	.word	0x40022300
 8002110:	fffff0fe 	.word	0xfffff0fe
 8002114:	40022100 	.word	0x40022100
 8002118:	40022000 	.word	0x40022000
 800211c:	08002781 	.word	0x08002781
 8002120:	08002859 	.word	0x08002859
 8002124:	08002875 	.word	0x08002875

08002128 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b099      	sub	sp, #100	; 0x64
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4aa1      	ldr	r2, [pc, #644]	; (80023dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002156:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x2a>
 8002162:	2302      	movs	r3, #2
 8002164:	e283      	b.n	800266e <HAL_ADC_ConfigChannel+0x532>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fda4 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 8268 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <HAL_ADC_ConfigChannel+0x62>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2201      	movs	r2, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	e00f      	b.n	80021be <HAL_ADC_ConfigChannel+0x82>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2201      	movs	r2, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	69d1      	ldr	r1, [r2, #28]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fc4a 	bl	8001a72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fd6c 	bl	8001cc0 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fd79 	bl	8001ce6 <LL_ADC_INJ_IsConversionOngoing>
 80021f4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 80a0 	bne.w	800233e <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 809c 	bne.w	800233e <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	461a      	mov	r2, r3
 8002214:	f7ff fc6c 	bl	8001af0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <HAL_ADC_ConfigChannel+0x102>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	e00a      	b.n	8002254 <HAL_ADC_ConfigChannel+0x118>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d027      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6919      	ldr	r1, [r3, #16]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226c:	f7ff fb9a 	bl	80019a4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	7e5b      	ldrb	r3, [r3, #25]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x14a>
 8002280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002284:	e000      	b.n	8002288 <HAL_ADC_ConfigChannel+0x14c>
 8002286:	2300      	movs	r3, #0
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff fbc4 	bl	8001a16 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7e1b      	ldrb	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x168>
 800229e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x16a>
 80022a4:	2300      	movs	r3, #0
 80022a6:	461a      	mov	r2, r3
 80022a8:	f7ff fb9c 	bl	80019e4 <LL_ADC_SetDataRightShift>
 80022ac:	e047      	b.n	800233e <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	429a      	cmp	r2, r3
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	069b      	lsls	r3, r3, #26
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d107      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022f4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	069b      	lsls	r3, r3, #26
 8002306:	429a      	cmp	r2, r3
 8002308:	d107      	bne.n	800231a <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002318:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002320:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	069b      	lsls	r3, r3, #26
 800232a:	429a      	cmp	r2, r3
 800232c:	d107      	bne.n	800233e <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800233c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc94 	bl	8001c70 <LL_ADC_IsEnabled>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8189 	bne.w	8002662 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	461a      	mov	r2, r3
 800235e:	f7ff fbf3 	bl	8001b48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	f040 80ff 	bne.w	800256c <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x25a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	3301      	adds	r3, #1
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2b09      	cmp	r3, #9
 800238c:	bf94      	ite	ls
 800238e:	2301      	movls	r3, #1
 8002390:	2300      	movhi	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e012      	b.n	80023bc <HAL_ADC_ConfigChannel+0x280>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	bf94      	ite	ls
 80023b6:	2301      	movls	r3, #1
 80023b8:	2300      	movhi	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d066      	beq.n	800248e <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x2a4>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	069b      	lsls	r3, r3, #26
 80023d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023da:	e010      	b.n	80023fe <HAL_ADC_ConfigChannel+0x2c2>
 80023dc:	47ff0000 	.word	0x47ff0000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	069b      	lsls	r3, r3, #26
 80023fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ADC_ConfigChannel+0x2e2>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	e010      	b.n	8002440 <HAL_ADC_ConfigChannel+0x304>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x32a>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	051b      	lsls	r3, r3, #20
 8002464:	e011      	b.n	800248a <HAL_ADC_ConfigChannel+0x34e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f003 021f 	and.w	r2, r3, #31
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248a:	430b      	orrs	r3, r1
 800248c:	e069      	b.n	8002562 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x36e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0e9b      	lsrs	r3, r3, #26
 80024a0:	3301      	adds	r3, #1
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	e00e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x38c>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	61fb      	str	r3, [r7, #28]
  return result;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x3ac>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	e010      	b.n	800250a <HAL_ADC_ConfigChannel+0x3ce>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	617b      	str	r3, [r7, #20]
  return result;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	ea42 0103 	orr.w	r1, r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x3fa>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	3301      	adds	r3, #1
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002534:	e014      	b.n	8002560 <HAL_ADC_ConfigChannel+0x424>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	60fb      	str	r3, [r7, #12]
  return result;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	3b1e      	subs	r3, #30
 800255a:	051b      	lsls	r3, r3, #20
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002560:	430b      	orrs	r3, r1
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	4619      	mov	r1, r3
 8002568:	f7ff fac2 	bl	8001af0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da76      	bge.n	8002662 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002574:	4840      	ldr	r0, [pc, #256]	; (8002678 <HAL_ADC_ConfigChannel+0x53c>)
 8002576:	f7ff fa07 	bl	8001988 <LL_ADC_GetCommonPathInternalCh>
 800257a:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800257c:	483f      	ldr	r0, [pc, #252]	; (800267c <HAL_ADC_ConfigChannel+0x540>)
 800257e:	f7ff fb77 	bl	8001c70 <LL_ADC_IsEnabled>
 8002582:	4604      	mov	r4, r0
 8002584:	483e      	ldr	r0, [pc, #248]	; (8002680 <HAL_ADC_ConfigChannel+0x544>)
 8002586:	f7ff fb73 	bl	8001c70 <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	4323      	orrs	r3, r4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d154      	bne.n	800263c <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_ADC_ConfigChannel+0x548>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d121      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x4a4>
 800259c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11c      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a35      	ldr	r2, [pc, #212]	; (8002680 <HAL_ADC_ConfigChannel+0x544>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d158      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025b6:	4619      	mov	r1, r3
 80025b8:	482f      	ldr	r0, [pc, #188]	; (8002678 <HAL_ADC_ConfigChannel+0x53c>)
 80025ba:	f7ff f9d2 	bl	8001962 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025be:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_ADC_ConfigChannel+0x54c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	4a31      	ldr	r2, [pc, #196]	; (800268c <HAL_ADC_ConfigChannel+0x550>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f9      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025de:	e040      	b.n	8002662 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_ADC_ConfigChannel+0x554>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <HAL_ADC_ConfigChannel+0x4d2>
 80025ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a21      	ldr	r2, [pc, #132]	; (8002680 <HAL_ADC_ConfigChannel+0x544>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d131      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002604:	4619      	mov	r1, r3
 8002606:	481c      	ldr	r0, [pc, #112]	; (8002678 <HAL_ADC_ConfigChannel+0x53c>)
 8002608:	f7ff f9ab 	bl	8001962 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260c:	e029      	b.n	8002662 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_ADC_ConfigChannel+0x558>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d124      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x526>
 8002618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11f      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_ADC_ConfigChannel+0x544>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d11a      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002632:	4619      	mov	r1, r3
 8002634:	4810      	ldr	r0, [pc, #64]	; (8002678 <HAL_ADC_ConfigChannel+0x53c>)
 8002636:	f7ff f994 	bl	8001962 <LL_ADC_SetCommonPathInternalCh>
 800263a:	e012      	b.n	8002662 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800264e:	e008      	b.n	8002662 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800266a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800266e:	4618      	mov	r0, r3
 8002670:	3764      	adds	r7, #100	; 0x64
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	40022300 	.word	0x40022300
 800267c:	40022000 	.word	0x40022000
 8002680:	40022100 	.word	0x40022100
 8002684:	cb840000 	.word	0xcb840000
 8002688:	24000004 	.word	0x24000004
 800268c:	053e2d63 	.word	0x053e2d63
 8002690:	bac04000 	.word	0xbac04000
 8002694:	cfb80000 	.word	0xcfb80000

08002698 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fae3 	bl	8001c70 <LL_ADC_IsEnabled>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15a      	bne.n	8002766 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <ADC_Enable+0xd8>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e046      	b.n	8002768 <ADC_Enable+0xd0>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fab2 	bl	8001c48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026e4:	f7ff f8fc 	bl	80018e0 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ea:	4822      	ldr	r0, [pc, #136]	; (8002774 <ADC_Enable+0xdc>)
 80026ec:	f7ff fa50 	bl	8001b90 <LL_ADC_GetMultimode>
 80026f0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a20      	ldr	r2, [pc, #128]	; (8002778 <ADC_Enable+0xe0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d002      	beq.n	8002702 <ADC_Enable+0x6a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e000      	b.n	8002704 <ADC_Enable+0x6c>
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <ADC_Enable+0xe4>)
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4293      	cmp	r3, r2
 800270a:	d025      	beq.n	8002758 <ADC_Enable+0xc0>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d129      	bne.n	8002766 <ADC_Enable+0xce>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002712:	e021      	b.n	8002758 <ADC_Enable+0xc0>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff faa9 	bl	8001c70 <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fa8d 	bl	8001c48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272e:	f7ff f8d7 	bl	80018e0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d90d      	bls.n	8002758 <ADC_Enable+0xc0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e007      	b.n	8002768 <ADC_Enable+0xd0>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d1d6      	bne.n	8002714 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	8000003f 	.word	0x8000003f
 8002774:	40022300 	.word	0x40022300
 8002778:	40022100 	.word	0x40022100
 800277c:	40022000 	.word	0x40022000

08002780 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d14b      	bne.n	8002832 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d021      	beq.n	80027f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f947 	bl	8001a4c <LL_ADC_REG_IsTriggerSourceSWStart>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d032      	beq.n	800282a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d12b      	bne.n	800282a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11f      	bne.n	800282a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
 80027f6:	e018      	b.n	800282a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7fe fc92 	bl	8001154 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002830:	e00e      	b.n	8002850 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fc72 	bl	8002128 <HAL_ADC_ErrorCallback>
}
 8002844:	e004      	b.n	8002850 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7fe fc52 	bl	8001110 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff fc44 	bl	8002128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028b0:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <ADC_ConfigureBoostMode+0x164>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01a      	beq.n	80028f2 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028bc:	f004 f850 	bl	8006960 <HAL_RCC_GetHCLKFreq>
 80028c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ca:	d006      	beq.n	80028da <ADC_ConfigureBoostMode+0x32>
 80028cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028d0:	d00b      	beq.n	80028ea <ADC_ConfigureBoostMode+0x42>
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d6:	d000      	beq.n	80028da <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80028d8:	e05d      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
        break;
 80028e8:	e055      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	60fb      	str	r3, [r7, #12]
        break;
 80028f0:	e051      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028f6:	f004 ff43 	bl	8007780 <HAL_RCCEx_GetPeriphCLKFreq>
 80028fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002904:	d02a      	beq.n	800295c <ADC_ConfigureBoostMode+0xb4>
 8002906:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800290a:	d813      	bhi.n	8002934 <ADC_ConfigureBoostMode+0x8c>
 800290c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002910:	d024      	beq.n	800295c <ADC_ConfigureBoostMode+0xb4>
 8002912:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002916:	d806      	bhi.n	8002926 <ADC_ConfigureBoostMode+0x7e>
 8002918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800291c:	d01e      	beq.n	800295c <ADC_ConfigureBoostMode+0xb4>
 800291e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002922:	d01b      	beq.n	800295c <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002924:	e037      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800292a:	d017      	beq.n	800295c <ADC_ConfigureBoostMode+0xb4>
 800292c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002930:	d014      	beq.n	800295c <ADC_ConfigureBoostMode+0xb4>
        break;
 8002932:	e030      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002934:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002938:	d021      	beq.n	800297e <ADC_ConfigureBoostMode+0xd6>
 800293a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800293e:	d806      	bhi.n	800294e <ADC_ConfigureBoostMode+0xa6>
 8002940:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002944:	d013      	beq.n	800296e <ADC_ConfigureBoostMode+0xc6>
 8002946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800294a:	d014      	beq.n	8002976 <ADC_ConfigureBoostMode+0xce>
        break;
 800294c:	e023      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800294e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002952:	d018      	beq.n	8002986 <ADC_ConfigureBoostMode+0xde>
 8002954:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002958:	d019      	beq.n	800298e <ADC_ConfigureBoostMode+0xe6>
        break;
 800295a:	e01c      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c9b      	lsrs	r3, r3, #18
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	60fb      	str	r3, [r7, #12]
        break;
 800296c:	e013      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
        break;
 8002974:	e00f      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	60fb      	str	r3, [r7, #12]
        break;
 800297c:	e00b      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	60fb      	str	r3, [r7, #12]
        break;
 8002984:	e007      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	09db      	lsrs	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
        break;
 800298c:	e003      	b.n	8002996 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	60fb      	str	r3, [r7, #12]
        break;
 8002994:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <ADC_ConfigureBoostMode+0x168>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d808      	bhi.n	80029b6 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029b4:	e025      	b.n	8002a02 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <ADC_ConfigureBoostMode+0x16c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d80a      	bhi.n	80029d4 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	e016      	b.n	8002a02 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <ADC_ConfigureBoostMode+0x170>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d80a      	bhi.n	80029f2 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	e007      	b.n	8002a02 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a00:	609a      	str	r2, [r3, #8]
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40022300 	.word	0x40022300
 8002a10:	005f5e10 	.word	0x005f5e10
 8002a14:	00bebc20 	.word	0x00bebc20
 8002a18:	017d7840 	.word	0x017d7840

08002a1c <LL_ADC_IsEnabled>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <LL_ADC_IsEnabled+0x18>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <LL_ADC_IsEnabled+0x1a>
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b09f      	sub	sp, #124	; 0x7c
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e07c      	b.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3d      	ldr	r2, [pc, #244]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d102      	bne.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002a98:	4b3c      	ldr	r3, [pc, #240]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	e001      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e05f      	b.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ffbd 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002ac8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ffb7 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d141      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d13e      	bne.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ae2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002afe:	4822      	ldr	r0, [pc, #136]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002b00:	f7ff ff8c 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b04:	4604      	mov	r4, r0
 8002b06:	4821      	ldr	r0, [pc, #132]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002b08:	f7ff ff88 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d12e      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	6811      	ldr	r1, [r2, #0]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6892      	ldr	r2, [r2, #8]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2c:	e021      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002b3c:	f7ff ff6e 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b40:	4604      	mov	r4, r0
 8002b42:	4812      	ldr	r0, [pc, #72]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002b44:	f7ff ff6a 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d110      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5c:	e009      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b70:	e000      	b.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	377c      	adds	r7, #124	; 0x7c
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40022100 	.word	0x40022100
 8002b90:	40022300 	.word	0x40022300
 8002b94:	fffff0e0 	.word	0xfffff0e0

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00
 8002bdc:	05fa0000 	.word	0x05fa0000

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4907      	ldr	r1, [pc, #28]	; (8002c34 <__NVIC_EnableIRQ+0x38>)
 8002c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000e100 	.word	0xe000e100

08002c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db0a      	blt.n	8002c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	490c      	ldr	r1, [pc, #48]	; (8002c84 <__NVIC_SetPriority+0x4c>)
 8002c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c60:	e00a      	b.n	8002c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4908      	ldr	r1, [pc, #32]	; (8002c88 <__NVIC_SetPriority+0x50>)
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	761a      	strb	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	bf28      	it	cs
 8002caa:	2304      	movcs	r3, #4
 8002cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d902      	bls.n	8002cbc <NVIC_EncodePriority+0x30>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3b03      	subs	r3, #3
 8002cba:	e000      	b.n	8002cbe <NVIC_EncodePriority+0x32>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	401a      	ands	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43d9      	mvns	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	4313      	orrs	r3, r2
         );
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d04:	d301      	bcc.n	8002d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <SysTick_Config+0x40>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d12:	210f      	movs	r1, #15
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295
 8002d18:	f7ff ff8e 	bl	8002c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <SysTick_Config+0x40>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <SysTick_Config+0x40>)
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	e000e010 	.word	0xe000e010

08002d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff29 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5c:	f7ff ff40 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff ff90 	bl	8002c8c <NVIC_EncodePriority>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5f 	bl	8002c38 <__NVIC_SetPriority>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff33 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffa4 	bl	8002cf4 <SysTick_Config>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e014      	b.n	8002df2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	791b      	ldrb	r3, [r3, #4]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe fa6f 	bl	80012bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	795b      	ldrb	r3, [r3, #5]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_DAC_Start+0x16>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e040      	b.n	8002e92 <HAL_DAC_Start+0x98>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2201      	movs	r2, #1
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d11d      	bne.n	8002e84 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	e014      	b.n	8002e84 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0202 	orr.w	r2, r2, #2
 8002e82:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	795b      	ldrb	r3, [r3, #5]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_DAC_Start_DMA+0x1e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e09e      	b.n	8002ffc <HAL_DAC_Start_DMA+0x15c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d12a      	bne.n	8002f26 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a4b      	ldr	r2, [pc, #300]	; (8003004 <HAL_DAC_Start_DMA+0x164>)
 8002ed6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <HAL_DAC_Start_DMA+0x168>)
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a49      	ldr	r2, [pc, #292]	; (800300c <HAL_DAC_Start_DMA+0x16c>)
 8002ee6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d009      	beq.n	8002f12 <HAL_DAC_Start_DMA+0x72>
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d00c      	beq.n	8002f1c <HAL_DAC_Start_DMA+0x7c>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d000      	beq.n	8002f08 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002f06:	e039      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	613b      	str	r3, [r7, #16]
        break;
 8002f10:	e034      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	613b      	str	r3, [r7, #16]
        break;
 8002f1a:	e02f      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3310      	adds	r3, #16
 8002f22:	613b      	str	r3, [r7, #16]
        break;
 8002f24:	e02a      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4a39      	ldr	r2, [pc, #228]	; (8003010 <HAL_DAC_Start_DMA+0x170>)
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4a38      	ldr	r2, [pc, #224]	; (8003014 <HAL_DAC_Start_DMA+0x174>)
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4a37      	ldr	r2, [pc, #220]	; (8003018 <HAL_DAC_Start_DMA+0x178>)
 8002f3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d009      	beq.n	8002f68 <HAL_DAC_Start_DMA+0xc8>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d00c      	beq.n	8002f72 <HAL_DAC_Start_DMA+0xd2>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d000      	beq.n	8002f5e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002f5c:	e00e      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	613b      	str	r3, [r7, #16]
        break;
 8002f66:	e009      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	613b      	str	r3, [r7, #16]
        break;
 8002f70:	e004      	b.n	8002f7c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	331c      	adds	r3, #28
 8002f78:	613b      	str	r3, [r7, #16]
        break;
 8002f7a:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d111      	bne.n	8002fa6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f90:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6898      	ldr	r0, [r3, #8]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	f000 fda6 	bl	8003aec <HAL_DMA_Start_IT>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]
 8002fa4:	e010      	b.n	8002fc8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fb4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68d8      	ldr	r0, [r3, #12]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	f000 fd94 	bl	8003aec <HAL_DMA_Start_IT>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10c      	bne.n	8002fee <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e005      	b.n	8002ffa <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	080032b9 	.word	0x080032b9
 8003008:	080032db 	.word	0x080032db
 800300c:	080032f7 	.word	0x080032f7
 8003010:	08003361 	.word	0x08003361
 8003014:	08003383 	.word	0x08003383
 8003018:	0800339f 	.word	0x0800339f

0800301c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_DAC_ConfigChannel+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e11d      	b.n	80032ac <HAL_DAC_ConfigChannel+0x254>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2202      	movs	r2, #2
 800307a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d174      	bne.n	800316e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003084:	f7fe fc2c 	bl	80018e0 <HAL_GetTick>
 8003088:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d134      	bne.n	80030fa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003090:	e011      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003092:	f7fe fc25 	bl	80018e0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d90a      	bls.n	80030b6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f043 0208 	orr.w	r2, r3, #8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2203      	movs	r2, #3
 80030b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0fa      	b.n	80032ac <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030bc:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <HAL_DAC_ConfigChannel+0x25c>)
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e6      	bne.n	8003092 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7fe fc17 	bl	80018f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	6992      	ldr	r2, [r2, #24]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
 80030d4:	e01e      	b.n	8003114 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030d6:	f7fe fc03 	bl	80018e0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d90a      	bls.n	80030fa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f043 0208 	orr.w	r2, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2203      	movs	r2, #3
 80030f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0d8      	b.n	80032ac <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	dbe8      	blt.n	80030d6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003104:	2001      	movs	r0, #1
 8003106:	f7fe fbf7 	bl	80018f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	6992      	ldr	r2, [r2, #24]
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	ea02 0103 	and.w	r1, r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	409a      	lsls	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	21ff      	movs	r1, #255	; 0xff
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	ea02 0103 	and.w	r1, r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6a1a      	ldr	r2, [r3, #32]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	409a      	lsls	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d11d      	bne.n	80031b2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	221f      	movs	r2, #31
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4013      	ands	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2207      	movs	r2, #7
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4013      	ands	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e00f      	b.n	80031fc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d102      	bne.n	80031ea <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e008      	b.n	80031fc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e001      	b.n	80031fc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	400a      	ands	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	22c0      	movs	r2, #192	; 0xc0
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43da      	mvns	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	400a      	ands	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20008000 	.word	0x20008000

080032b8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff fea8 	bl	800301c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	711a      	strb	r2, [r3, #4]
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff fea1 	bl	8003030 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fe97 	bl	8003044 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	711a      	strb	r2, [r3, #4]
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffd8 	bl	8003324 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	711a      	strb	r2, [r3, #4]
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff ffd1 	bl	8003338 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f043 0204 	orr.w	r2, r3, #4
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff ffc7 	bl	800334c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	711a      	strb	r2, [r3, #4]
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033d4:	f7fe fa84 	bl	80018e0 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e37f      	b.n	8003ae4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_DMA_Init+0x1b8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04a      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_DMA_Init+0x1bc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d045      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a63      	ldr	r2, [pc, #396]	; (800358c <HAL_DMA_Init+0x1c0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d040      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a62      	ldr	r2, [pc, #392]	; (8003590 <HAL_DMA_Init+0x1c4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03b      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a60      	ldr	r2, [pc, #384]	; (8003594 <HAL_DMA_Init+0x1c8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d036      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5f      	ldr	r2, [pc, #380]	; (8003598 <HAL_DMA_Init+0x1cc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_DMA_Init+0x1d0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02c      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5c      	ldr	r2, [pc, #368]	; (80035a0 <HAL_DMA_Init+0x1d4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d027      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a5a      	ldr	r2, [pc, #360]	; (80035a4 <HAL_DMA_Init+0x1d8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a59      	ldr	r2, [pc, #356]	; (80035a8 <HAL_DMA_Init+0x1dc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01d      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a57      	ldr	r2, [pc, #348]	; (80035ac <HAL_DMA_Init+0x1e0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d018      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a56      	ldr	r2, [pc, #344]	; (80035b0 <HAL_DMA_Init+0x1e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <HAL_DMA_Init+0x1e8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00e      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a53      	ldr	r2, [pc, #332]	; (80035b8 <HAL_DMA_Init+0x1ec>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a51      	ldr	r2, [pc, #324]	; (80035bc <HAL_DMA_Init+0x1f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_Init+0xb8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a50      	ldr	r2, [pc, #320]	; (80035c0 <HAL_DMA_Init+0x1f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Init+0xbc>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_DMA_Init+0xbe>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 813c 	beq.w	8003708 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_DMA_Init+0x1b8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d04a      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a36      	ldr	r2, [pc, #216]	; (8003588 <HAL_DMA_Init+0x1bc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d045      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a34      	ldr	r2, [pc, #208]	; (800358c <HAL_DMA_Init+0x1c0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d040      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a33      	ldr	r2, [pc, #204]	; (8003590 <HAL_DMA_Init+0x1c4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d03b      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a31      	ldr	r2, [pc, #196]	; (8003594 <HAL_DMA_Init+0x1c8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d036      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_DMA_Init+0x1cc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d031      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2e      	ldr	r2, [pc, #184]	; (800359c <HAL_DMA_Init+0x1d0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02c      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <HAL_DMA_Init+0x1d4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d027      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_DMA_Init+0x1d8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_DMA_Init+0x174>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <HAL_DMA_Init+0x1dc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d01d      	beq.n	8003540 <HAL_DMA_Init+0x174>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a28      	ldr	r2, [pc, #160]	; (80035ac <HAL_DMA_Init+0x1e0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_DMA_Init+0x174>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <HAL_DMA_Init+0x1e4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_DMA_Init+0x174>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <HAL_DMA_Init+0x1e8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_DMA_Init+0x174>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <HAL_DMA_Init+0x1ec>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_DMA_Init+0x174>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a22      	ldr	r2, [pc, #136]	; (80035bc <HAL_DMA_Init+0x1f0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_DMA_Init+0x174>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_DMA_Init+0x1f4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d108      	bne.n	8003552 <HAL_DMA_Init+0x186>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e007      	b.n	8003562 <HAL_DMA_Init+0x196>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003562:	e02f      	b.n	80035c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003564:	f7fe f9bc 	bl	80018e0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b05      	cmp	r3, #5
 8003570:	d928      	bls.n	80035c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2203      	movs	r2, #3
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e2af      	b.n	8003ae4 <HAL_DMA_Init+0x718>
 8003584:	40020010 	.word	0x40020010
 8003588:	40020028 	.word	0x40020028
 800358c:	40020040 	.word	0x40020040
 8003590:	40020058 	.word	0x40020058
 8003594:	40020070 	.word	0x40020070
 8003598:	40020088 	.word	0x40020088
 800359c:	400200a0 	.word	0x400200a0
 80035a0:	400200b8 	.word	0x400200b8
 80035a4:	40020410 	.word	0x40020410
 80035a8:	40020428 	.word	0x40020428
 80035ac:	40020440 	.word	0x40020440
 80035b0:	40020458 	.word	0x40020458
 80035b4:	40020470 	.word	0x40020470
 80035b8:	40020488 	.word	0x40020488
 80035bc:	400204a0 	.word	0x400204a0
 80035c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1c8      	bne.n	8003564 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4b73      	ldr	r3, [pc, #460]	; (80037ac <HAL_DMA_Init+0x3e0>)
 80035de:	4013      	ands	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003602:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	2b04      	cmp	r3, #4
 8003616:	d107      	bne.n	8003628 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	4313      	orrs	r3, r2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b28      	cmp	r3, #40	; 0x28
 800362e:	d903      	bls.n	8003638 <HAL_DMA_Init+0x26c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b2e      	cmp	r3, #46	; 0x2e
 8003636:	d91f      	bls.n	8003678 <HAL_DMA_Init+0x2ac>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b3e      	cmp	r3, #62	; 0x3e
 800363e:	d903      	bls.n	8003648 <HAL_DMA_Init+0x27c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b42      	cmp	r3, #66	; 0x42
 8003646:	d917      	bls.n	8003678 <HAL_DMA_Init+0x2ac>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b46      	cmp	r3, #70	; 0x46
 800364e:	d903      	bls.n	8003658 <HAL_DMA_Init+0x28c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b48      	cmp	r3, #72	; 0x48
 8003656:	d90f      	bls.n	8003678 <HAL_DMA_Init+0x2ac>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b4e      	cmp	r3, #78	; 0x4e
 800365e:	d903      	bls.n	8003668 <HAL_DMA_Init+0x29c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b52      	cmp	r3, #82	; 0x52
 8003666:	d907      	bls.n	8003678 <HAL_DMA_Init+0x2ac>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b73      	cmp	r3, #115	; 0x73
 800366e:	d905      	bls.n	800367c <HAL_DMA_Init+0x2b0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b77      	cmp	r3, #119	; 0x77
 8003676:	d801      	bhi.n	800367c <HAL_DMA_Init+0x2b0>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_DMA_Init+0x2b2>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003688:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 0307 	bic.w	r3, r3, #7
 80036a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d117      	bne.n	80036e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00e      	beq.n	80036e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f001 fe72 	bl	80053b0 <DMA_CheckFifoParam>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e1ff      	b.n	8003ae4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 fdad 	bl	800524c <DMA_CalcBaseAndBitshift>
 80036f2:	4603      	mov	r3, r0
 80036f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	223f      	movs	r2, #63	; 0x3f
 8003700:	409a      	lsls	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	e0fe      	b.n	8003906 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a28      	ldr	r2, [pc, #160]	; (80037b0 <HAL_DMA_Init+0x3e4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <HAL_DMA_Init+0x3e8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d045      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <HAL_DMA_Init+0x3ec>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d040      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a24      	ldr	r2, [pc, #144]	; (80037bc <HAL_DMA_Init+0x3f0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d03b      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <HAL_DMA_Init+0x3f4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d036      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <HAL_DMA_Init+0x3f8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d031      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_DMA_Init+0x3fc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02c      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_DMA_Init+0x400>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d027      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_DMA_Init+0x404>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_DMA_Init+0x408>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d01d      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <HAL_DMA_Init+0x40c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_DMA_Init+0x410>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <HAL_DMA_Init+0x414>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_DMA_Init+0x418>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_DMA_Init+0x41c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_DMA_Init+0x3dc>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <HAL_DMA_Init+0x420>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d123      	bne.n	80037f0 <HAL_DMA_Init+0x424>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e022      	b.n	80037f2 <HAL_DMA_Init+0x426>
 80037ac:	fe10803f 	.word	0xfe10803f
 80037b0:	48022c08 	.word	0x48022c08
 80037b4:	48022c1c 	.word	0x48022c1c
 80037b8:	48022c30 	.word	0x48022c30
 80037bc:	48022c44 	.word	0x48022c44
 80037c0:	48022c58 	.word	0x48022c58
 80037c4:	48022c6c 	.word	0x48022c6c
 80037c8:	48022c80 	.word	0x48022c80
 80037cc:	48022c94 	.word	0x48022c94
 80037d0:	58025408 	.word	0x58025408
 80037d4:	5802541c 	.word	0x5802541c
 80037d8:	58025430 	.word	0x58025430
 80037dc:	58025444 	.word	0x58025444
 80037e0:	58025458 	.word	0x58025458
 80037e4:	5802546c 	.word	0x5802546c
 80037e8:	58025480 	.word	0x58025480
 80037ec:	58025494 	.word	0x58025494
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d07e      	beq.n	80038f4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a80      	ldr	r2, [pc, #512]	; (80039fc <HAL_DMA_Init+0x630>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d021      	beq.n	8003844 <HAL_DMA_Init+0x478>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7e      	ldr	r2, [pc, #504]	; (8003a00 <HAL_DMA_Init+0x634>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01c      	beq.n	8003844 <HAL_DMA_Init+0x478>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7d      	ldr	r2, [pc, #500]	; (8003a04 <HAL_DMA_Init+0x638>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d017      	beq.n	8003844 <HAL_DMA_Init+0x478>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a7b      	ldr	r2, [pc, #492]	; (8003a08 <HAL_DMA_Init+0x63c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d012      	beq.n	8003844 <HAL_DMA_Init+0x478>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7a      	ldr	r2, [pc, #488]	; (8003a0c <HAL_DMA_Init+0x640>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00d      	beq.n	8003844 <HAL_DMA_Init+0x478>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a78      	ldr	r2, [pc, #480]	; (8003a10 <HAL_DMA_Init+0x644>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d008      	beq.n	8003844 <HAL_DMA_Init+0x478>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a77      	ldr	r2, [pc, #476]	; (8003a14 <HAL_DMA_Init+0x648>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <HAL_DMA_Init+0x478>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_DMA_Init+0x64c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <HAL_DMA_Init+0x650>)
 8003862:	4013      	ands	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d008      	beq.n	8003880 <HAL_DMA_Init+0x4b4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d102      	bne.n	800387c <HAL_DMA_Init+0x4b0>
 8003876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800387a:	e002      	b.n	8003882 <HAL_DMA_Init+0x4b6>
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_DMA_Init+0x4b6>
 8003880:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003890:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003898:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <HAL_DMA_Init+0x654>)
 80038c8:	4413      	add	r3, r2
 80038ca:	4a56      	ldr	r2, [pc, #344]	; (8003a24 <HAL_DMA_Init+0x658>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	009a      	lsls	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 fcb7 	bl	800524c <DMA_CalcBaseAndBitshift>
 80038de:	4603      	mov	r3, r0
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	e008      	b.n	8003906 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2240      	movs	r2, #64	; 0x40
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0ee      	b.n	8003ae4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a47      	ldr	r2, [pc, #284]	; (8003a28 <HAL_DMA_Init+0x65c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d072      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <HAL_DMA_Init+0x660>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d06d      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a44      	ldr	r2, [pc, #272]	; (8003a30 <HAL_DMA_Init+0x664>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d068      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a42      	ldr	r2, [pc, #264]	; (8003a34 <HAL_DMA_Init+0x668>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d063      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a41      	ldr	r2, [pc, #260]	; (8003a38 <HAL_DMA_Init+0x66c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d05e      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <HAL_DMA_Init+0x670>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d059      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3e      	ldr	r2, [pc, #248]	; (8003a40 <HAL_DMA_Init+0x674>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d054      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <HAL_DMA_Init+0x678>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d04f      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3b      	ldr	r2, [pc, #236]	; (8003a48 <HAL_DMA_Init+0x67c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d04a      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_DMA_Init+0x680>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d045      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <HAL_DMA_Init+0x684>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d040      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a36      	ldr	r2, [pc, #216]	; (8003a54 <HAL_DMA_Init+0x688>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d03b      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <HAL_DMA_Init+0x68c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d036      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_DMA_Init+0x690>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d031      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_DMA_Init+0x694>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d02c      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <HAL_DMA_Init+0x698>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d027      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a14      	ldr	r2, [pc, #80]	; (80039fc <HAL_DMA_Init+0x630>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d022      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <HAL_DMA_Init+0x634>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01d      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_DMA_Init+0x638>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <HAL_DMA_Init+0x63c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <HAL_DMA_Init+0x640>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <HAL_DMA_Init+0x644>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_DMA_Init+0x648>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_DMA_Init+0x62a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_DMA_Init+0x64c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d138      	bne.n	8003a68 <HAL_DMA_Init+0x69c>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e037      	b.n	8003a6a <HAL_DMA_Init+0x69e>
 80039fa:	bf00      	nop
 80039fc:	58025408 	.word	0x58025408
 8003a00:	5802541c 	.word	0x5802541c
 8003a04:	58025430 	.word	0x58025430
 8003a08:	58025444 	.word	0x58025444
 8003a0c:	58025458 	.word	0x58025458
 8003a10:	5802546c 	.word	0x5802546c
 8003a14:	58025480 	.word	0x58025480
 8003a18:	58025494 	.word	0x58025494
 8003a1c:	fffe000f 	.word	0xfffe000f
 8003a20:	a7fdabf8 	.word	0xa7fdabf8
 8003a24:	cccccccd 	.word	0xcccccccd
 8003a28:	40020010 	.word	0x40020010
 8003a2c:	40020028 	.word	0x40020028
 8003a30:	40020040 	.word	0x40020040
 8003a34:	40020058 	.word	0x40020058
 8003a38:	40020070 	.word	0x40020070
 8003a3c:	40020088 	.word	0x40020088
 8003a40:	400200a0 	.word	0x400200a0
 8003a44:	400200b8 	.word	0x400200b8
 8003a48:	40020410 	.word	0x40020410
 8003a4c:	40020428 	.word	0x40020428
 8003a50:	40020440 	.word	0x40020440
 8003a54:	40020458 	.word	0x40020458
 8003a58:	40020470 	.word	0x40020470
 8003a5c:	40020488 	.word	0x40020488
 8003a60:	400204a0 	.word	0x400204a0
 8003a64:	400204b8 	.word	0x400204b8
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d032      	beq.n	8003ad4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f001 fd1a 	bl	80054a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d102      	bne.n	8003a82 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a96:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <HAL_DMA_Init+0x6f6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d80c      	bhi.n	8003ac2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 fd97 	bl	80055dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	e008      	b.n	8003ad4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e226      	b.n	8003f56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_DMA_Start_IT+0x2a>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e21f      	b.n	8003f56 <HAL_DMA_Start_IT+0x46a>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	f040 820a 	bne.w	8003f40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a68      	ldr	r2, [pc, #416]	; (8003ce0 <HAL_DMA_Start_IT+0x1f4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d04a      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a66      	ldr	r2, [pc, #408]	; (8003ce4 <HAL_DMA_Start_IT+0x1f8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d045      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a65      	ldr	r2, [pc, #404]	; (8003ce8 <HAL_DMA_Start_IT+0x1fc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d040      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a63      	ldr	r2, [pc, #396]	; (8003cec <HAL_DMA_Start_IT+0x200>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d03b      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a62      	ldr	r2, [pc, #392]	; (8003cf0 <HAL_DMA_Start_IT+0x204>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d036      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a60      	ldr	r2, [pc, #384]	; (8003cf4 <HAL_DMA_Start_IT+0x208>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d031      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a5f      	ldr	r2, [pc, #380]	; (8003cf8 <HAL_DMA_Start_IT+0x20c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d02c      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5d      	ldr	r2, [pc, #372]	; (8003cfc <HAL_DMA_Start_IT+0x210>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d027      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5c      	ldr	r2, [pc, #368]	; (8003d00 <HAL_DMA_Start_IT+0x214>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5a      	ldr	r2, [pc, #360]	; (8003d04 <HAL_DMA_Start_IT+0x218>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a59      	ldr	r2, [pc, #356]	; (8003d08 <HAL_DMA_Start_IT+0x21c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d018      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a57      	ldr	r2, [pc, #348]	; (8003d0c <HAL_DMA_Start_IT+0x220>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a56      	ldr	r2, [pc, #344]	; (8003d10 <HAL_DMA_Start_IT+0x224>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a54      	ldr	r2, [pc, #336]	; (8003d14 <HAL_DMA_Start_IT+0x228>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a53      	ldr	r2, [pc, #332]	; (8003d18 <HAL_DMA_Start_IT+0x22c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_DMA_Start_IT+0xee>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a51      	ldr	r2, [pc, #324]	; (8003d1c <HAL_DMA_Start_IT+0x230>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <HAL_DMA_Start_IT+0x100>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e007      	b.n	8003bfc <HAL_DMA_Start_IT+0x110>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f001 f93e 	bl	8004e84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a34      	ldr	r2, [pc, #208]	; (8003ce0 <HAL_DMA_Start_IT+0x1f4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d04a      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <HAL_DMA_Start_IT+0x1f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d045      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <HAL_DMA_Start_IT+0x1fc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d040      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a30      	ldr	r2, [pc, #192]	; (8003cec <HAL_DMA_Start_IT+0x200>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d03b      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2e      	ldr	r2, [pc, #184]	; (8003cf0 <HAL_DMA_Start_IT+0x204>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d036      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <HAL_DMA_Start_IT+0x208>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d031      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <HAL_DMA_Start_IT+0x20c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02c      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_DMA_Start_IT+0x210>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d027      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <HAL_DMA_Start_IT+0x214>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d022      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <HAL_DMA_Start_IT+0x218>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <HAL_DMA_Start_IT+0x21c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <HAL_DMA_Start_IT+0x220>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_DMA_Start_IT+0x224>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_DMA_Start_IT+0x228>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <HAL_DMA_Start_IT+0x22c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x1bc>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_DMA_Start_IT+0x230>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_DMA_Start_IT+0x1c0>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_DMA_Start_IT+0x1c2>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d036      	beq.n	8003d20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 021e 	bic.w	r2, r3, #30
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0216 	orr.w	r2, r2, #22
 8003cc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d03e      	beq.n	8003d4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0208 	orr.w	r2, r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e035      	b.n	8003d4c <HAL_DMA_Start_IT+0x260>
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 020e 	bic.w	r2, r3, #14
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 020a 	orr.w	r2, r2, #10
 8003d32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0204 	orr.w	r2, r2, #4
 8003d4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <HAL_DMA_Start_IT+0x474>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d072      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a82      	ldr	r2, [pc, #520]	; (8003f64 <HAL_DMA_Start_IT+0x478>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d06d      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a80      	ldr	r2, [pc, #512]	; (8003f68 <HAL_DMA_Start_IT+0x47c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d068      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_DMA_Start_IT+0x480>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d063      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7d      	ldr	r2, [pc, #500]	; (8003f70 <HAL_DMA_Start_IT+0x484>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d05e      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7c      	ldr	r2, [pc, #496]	; (8003f74 <HAL_DMA_Start_IT+0x488>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d059      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7a      	ldr	r2, [pc, #488]	; (8003f78 <HAL_DMA_Start_IT+0x48c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d054      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a79      	ldr	r2, [pc, #484]	; (8003f7c <HAL_DMA_Start_IT+0x490>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04f      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a77      	ldr	r2, [pc, #476]	; (8003f80 <HAL_DMA_Start_IT+0x494>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d04a      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a76      	ldr	r2, [pc, #472]	; (8003f84 <HAL_DMA_Start_IT+0x498>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d045      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a74      	ldr	r2, [pc, #464]	; (8003f88 <HAL_DMA_Start_IT+0x49c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d040      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a73      	ldr	r2, [pc, #460]	; (8003f8c <HAL_DMA_Start_IT+0x4a0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d03b      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a71      	ldr	r2, [pc, #452]	; (8003f90 <HAL_DMA_Start_IT+0x4a4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d036      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a70      	ldr	r2, [pc, #448]	; (8003f94 <HAL_DMA_Start_IT+0x4a8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d031      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	; (8003f98 <HAL_DMA_Start_IT+0x4ac>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02c      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6d      	ldr	r2, [pc, #436]	; (8003f9c <HAL_DMA_Start_IT+0x4b0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d027      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6b      	ldr	r2, [pc, #428]	; (8003fa0 <HAL_DMA_Start_IT+0x4b4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d022      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_DMA_Start_IT+0x4b8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01d      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a68      	ldr	r2, [pc, #416]	; (8003fa8 <HAL_DMA_Start_IT+0x4bc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d018      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a67      	ldr	r2, [pc, #412]	; (8003fac <HAL_DMA_Start_IT+0x4c0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a65      	ldr	r2, [pc, #404]	; (8003fb0 <HAL_DMA_Start_IT+0x4c4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00e      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a64      	ldr	r2, [pc, #400]	; (8003fb4 <HAL_DMA_Start_IT+0x4c8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a62      	ldr	r2, [pc, #392]	; (8003fb8 <HAL_DMA_Start_IT+0x4cc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_DMA_Start_IT+0x350>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a61      	ldr	r2, [pc, #388]	; (8003fbc <HAL_DMA_Start_IT+0x4d0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_DMA_Start_IT+0x354>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_DMA_Start_IT+0x356>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01a      	beq.n	8003e7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a37      	ldr	r2, [pc, #220]	; (8003f60 <HAL_DMA_Start_IT+0x474>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d04a      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a36      	ldr	r2, [pc, #216]	; (8003f64 <HAL_DMA_Start_IT+0x478>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d045      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a34      	ldr	r2, [pc, #208]	; (8003f68 <HAL_DMA_Start_IT+0x47c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d040      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a33      	ldr	r2, [pc, #204]	; (8003f6c <HAL_DMA_Start_IT+0x480>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d03b      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a31      	ldr	r2, [pc, #196]	; (8003f70 <HAL_DMA_Start_IT+0x484>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d036      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a30      	ldr	r2, [pc, #192]	; (8003f74 <HAL_DMA_Start_IT+0x488>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d031      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <HAL_DMA_Start_IT+0x48c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02c      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_DMA_Start_IT+0x490>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d027      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <HAL_DMA_Start_IT+0x494>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <HAL_DMA_Start_IT+0x498>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <HAL_DMA_Start_IT+0x49c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_DMA_Start_IT+0x4a0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <HAL_DMA_Start_IT+0x4a4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <HAL_DMA_Start_IT+0x4a8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <HAL_DMA_Start_IT+0x4ac>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_Start_IT+0x430>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_DMA_Start_IT+0x4b0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <HAL_DMA_Start_IT+0x442>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e012      	b.n	8003f54 <HAL_DMA_Start_IT+0x468>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e009      	b.n	8003f54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	58025408 	.word	0x58025408
 8003fa4:	5802541c 	.word	0x5802541c
 8003fa8:	58025430 	.word	0x58025430
 8003fac:	58025444 	.word	0x58025444
 8003fb0:	58025458 	.word	0x58025458
 8003fb4:	5802546c 	.word	0x5802546c
 8003fb8:	58025480 	.word	0x58025480
 8003fbc:	58025494 	.word	0x58025494

08003fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fcc:	4b67      	ldr	r3, [pc, #412]	; (800416c <HAL_DMA_IRQHandler+0x1ac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a67      	ldr	r2, [pc, #412]	; (8004170 <HAL_DMA_IRQHandler+0x1b0>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5f      	ldr	r2, [pc, #380]	; (8004174 <HAL_DMA_IRQHandler+0x1b4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d04a      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <HAL_DMA_IRQHandler+0x1b8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d045      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5c      	ldr	r2, [pc, #368]	; (800417c <HAL_DMA_IRQHandler+0x1bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d040      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5a      	ldr	r2, [pc, #360]	; (8004180 <HAL_DMA_IRQHandler+0x1c0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d03b      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a59      	ldr	r2, [pc, #356]	; (8004184 <HAL_DMA_IRQHandler+0x1c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d036      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_DMA_IRQHandler+0x1c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d031      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a56      	ldr	r2, [pc, #344]	; (800418c <HAL_DMA_IRQHandler+0x1cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d02c      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a54      	ldr	r2, [pc, #336]	; (8004190 <HAL_DMA_IRQHandler+0x1d0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d027      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a53      	ldr	r2, [pc, #332]	; (8004194 <HAL_DMA_IRQHandler+0x1d4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a51      	ldr	r2, [pc, #324]	; (8004198 <HAL_DMA_IRQHandler+0x1d8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01d      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a50      	ldr	r2, [pc, #320]	; (800419c <HAL_DMA_IRQHandler+0x1dc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4e      	ldr	r2, [pc, #312]	; (80041a0 <HAL_DMA_IRQHandler+0x1e0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a4d      	ldr	r2, [pc, #308]	; (80041a4 <HAL_DMA_IRQHandler+0x1e4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a4b      	ldr	r2, [pc, #300]	; (80041a8 <HAL_DMA_IRQHandler+0x1e8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <HAL_DMA_IRQHandler+0x1ec>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_DMA_IRQHandler+0xd2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a48      	ldr	r2, [pc, #288]	; (80041b0 <HAL_DMA_IRQHandler+0x1f0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_DMA_IRQHandler+0xd6>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_DMA_IRQHandler+0xd8>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 842b 	beq.w	80048f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2208      	movs	r2, #8
 80040a8:	409a      	lsls	r2, r3
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a2 	beq.w	80041f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2e      	ldr	r2, [pc, #184]	; (8004174 <HAL_DMA_IRQHandler+0x1b4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d04a      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <HAL_DMA_IRQHandler+0x1b8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d045      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2b      	ldr	r2, [pc, #172]	; (800417c <HAL_DMA_IRQHandler+0x1bc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d040      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <HAL_DMA_IRQHandler+0x1c0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d03b      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_DMA_IRQHandler+0x1c4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d036      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a27      	ldr	r2, [pc, #156]	; (8004188 <HAL_DMA_IRQHandler+0x1c8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d031      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_DMA_IRQHandler+0x1cc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02c      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a24      	ldr	r2, [pc, #144]	; (8004190 <HAL_DMA_IRQHandler+0x1d0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d027      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <HAL_DMA_IRQHandler+0x1d4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_DMA_IRQHandler+0x1d8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d01d      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_DMA_IRQHandler+0x1dc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_DMA_IRQHandler+0x1e0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_DMA_IRQHandler+0x1e4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_DMA_IRQHandler+0x1e8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_DMA_IRQHandler+0x1ec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_DMA_IRQHandler+0x194>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_DMA_IRQHandler+0x1f0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d12f      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x1f4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	e02e      	b.n	80041c8 <HAL_DMA_IRQHandler+0x208>
 800416a:	bf00      	nop
 800416c:	24000004 	.word	0x24000004
 8004170:	1b4e81b5 	.word	0x1b4e81b5
 8004174:	40020010 	.word	0x40020010
 8004178:	40020028 	.word	0x40020028
 800417c:	40020040 	.word	0x40020040
 8004180:	40020058 	.word	0x40020058
 8004184:	40020070 	.word	0x40020070
 8004188:	40020088 	.word	0x40020088
 800418c:	400200a0 	.word	0x400200a0
 8004190:	400200b8 	.word	0x400200b8
 8004194:	40020410 	.word	0x40020410
 8004198:	40020428 	.word	0x40020428
 800419c:	40020440 	.word	0x40020440
 80041a0:	40020458 	.word	0x40020458
 80041a4:	40020470 	.word	0x40020470
 80041a8:	40020488 	.word	0x40020488
 80041ac:	400204a0 	.word	0x400204a0
 80041b0:	400204b8 	.word	0x400204b8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2208      	movs	r2, #8
 80041e6:	409a      	lsls	r2, r3
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d06e      	beq.n	80042ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a69      	ldr	r2, [pc, #420]	; (80043b8 <HAL_DMA_IRQHandler+0x3f8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04a      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a67      	ldr	r2, [pc, #412]	; (80043bc <HAL_DMA_IRQHandler+0x3fc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d045      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a66      	ldr	r2, [pc, #408]	; (80043c0 <HAL_DMA_IRQHandler+0x400>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a64      	ldr	r2, [pc, #400]	; (80043c4 <HAL_DMA_IRQHandler+0x404>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d03b      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a63      	ldr	r2, [pc, #396]	; (80043c8 <HAL_DMA_IRQHandler+0x408>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d036      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a61      	ldr	r2, [pc, #388]	; (80043cc <HAL_DMA_IRQHandler+0x40c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a60      	ldr	r2, [pc, #384]	; (80043d0 <HAL_DMA_IRQHandler+0x410>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d02c      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_DMA_IRQHandler+0x414>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d027      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5d      	ldr	r2, [pc, #372]	; (80043d8 <HAL_DMA_IRQHandler+0x418>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5b      	ldr	r2, [pc, #364]	; (80043dc <HAL_DMA_IRQHandler+0x41c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5a      	ldr	r2, [pc, #360]	; (80043e0 <HAL_DMA_IRQHandler+0x420>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_DMA_IRQHandler+0x424>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a57      	ldr	r2, [pc, #348]	; (80043e8 <HAL_DMA_IRQHandler+0x428>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a55      	ldr	r2, [pc, #340]	; (80043ec <HAL_DMA_IRQHandler+0x42c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a54      	ldr	r2, [pc, #336]	; (80043f0 <HAL_DMA_IRQHandler+0x430>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_DMA_IRQHandler+0x2ee>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_DMA_IRQHandler+0x434>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10a      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x304>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e003      	b.n	80042cc <HAL_DMA_IRQHandler+0x30c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f043 0202 	orr.w	r2, r3, #2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2204      	movs	r2, #4
 80042f6:	409a      	lsls	r2, r3
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 808f 	beq.w	8004420 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <HAL_DMA_IRQHandler+0x3f8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04a      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <HAL_DMA_IRQHandler+0x3fc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d045      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <HAL_DMA_IRQHandler+0x400>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d040      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <HAL_DMA_IRQHandler+0x404>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03b      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_DMA_IRQHandler+0x408>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d036      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <HAL_DMA_IRQHandler+0x40c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <HAL_DMA_IRQHandler+0x410>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <HAL_DMA_IRQHandler+0x414>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d027      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_DMA_IRQHandler+0x418>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <HAL_DMA_IRQHandler+0x41c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <HAL_DMA_IRQHandler+0x420>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <HAL_DMA_IRQHandler+0x424>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <HAL_DMA_IRQHandler+0x428>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_DMA_IRQHandler+0x42c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_DMA_IRQHandler+0x430>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x3e2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_DMA_IRQHandler+0x434>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d12a      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x438>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e023      	b.n	8004400 <HAL_DMA_IRQHandler+0x440>
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2204      	movs	r2, #4
 800440e:	409a      	lsls	r2, r3
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2210      	movs	r2, #16
 800442a:	409a      	lsls	r2, r3
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a6 	beq.w	8004582 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a85      	ldr	r2, [pc, #532]	; (8004650 <HAL_DMA_IRQHandler+0x690>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a83      	ldr	r2, [pc, #524]	; (8004654 <HAL_DMA_IRQHandler+0x694>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a82      	ldr	r2, [pc, #520]	; (8004658 <HAL_DMA_IRQHandler+0x698>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a80      	ldr	r2, [pc, #512]	; (800465c <HAL_DMA_IRQHandler+0x69c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7f      	ldr	r2, [pc, #508]	; (8004660 <HAL_DMA_IRQHandler+0x6a0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a7d      	ldr	r2, [pc, #500]	; (8004664 <HAL_DMA_IRQHandler+0x6a4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7c      	ldr	r2, [pc, #496]	; (8004668 <HAL_DMA_IRQHandler+0x6a8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7a      	ldr	r2, [pc, #488]	; (800466c <HAL_DMA_IRQHandler+0x6ac>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a79      	ldr	r2, [pc, #484]	; (8004670 <HAL_DMA_IRQHandler+0x6b0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_DMA_IRQHandler+0x6b4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a76      	ldr	r2, [pc, #472]	; (8004678 <HAL_DMA_IRQHandler+0x6b8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a74      	ldr	r2, [pc, #464]	; (800467c <HAL_DMA_IRQHandler+0x6bc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_DMA_IRQHandler+0x6c0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a71      	ldr	r2, [pc, #452]	; (8004684 <HAL_DMA_IRQHandler+0x6c4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a70      	ldr	r2, [pc, #448]	; (8004688 <HAL_DMA_IRQHandler+0x6c8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x516>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_DMA_IRQHandler+0x6cc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10a      	bne.n	80044ec <HAL_DMA_IRQHandler+0x52c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e009      	b.n	8004500 <HAL_DMA_IRQHandler+0x540>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d03e      	beq.n	8004582 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2210      	movs	r2, #16
 800450e:	409a      	lsls	r2, r3
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d024      	beq.n	8004582 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e01f      	b.n	8004582 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01b      	beq.n	8004582 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
 8004552:	e016      	b.n	8004582 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0208 	bic.w	r2, r2, #8
 8004570:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2220      	movs	r2, #32
 800458c:	409a      	lsls	r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8110 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <HAL_DMA_IRQHandler+0x690>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d04a      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <HAL_DMA_IRQHandler+0x694>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d045      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a29      	ldr	r2, [pc, #164]	; (8004658 <HAL_DMA_IRQHandler+0x698>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d040      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a28      	ldr	r2, [pc, #160]	; (800465c <HAL_DMA_IRQHandler+0x69c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d03b      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <HAL_DMA_IRQHandler+0x6a0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d036      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a25      	ldr	r2, [pc, #148]	; (8004664 <HAL_DMA_IRQHandler+0x6a4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d031      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a23      	ldr	r2, [pc, #140]	; (8004668 <HAL_DMA_IRQHandler+0x6a8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02c      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a22      	ldr	r2, [pc, #136]	; (800466c <HAL_DMA_IRQHandler+0x6ac>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d027      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <HAL_DMA_IRQHandler+0x6b0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d022      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <HAL_DMA_IRQHandler+0x6b4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d01d      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <HAL_DMA_IRQHandler+0x6b8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d018      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1c      	ldr	r2, [pc, #112]	; (800467c <HAL_DMA_IRQHandler+0x6bc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_DMA_IRQHandler+0x6c0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00e      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_DMA_IRQHandler+0x6c4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a17      	ldr	r2, [pc, #92]	; (8004688 <HAL_DMA_IRQHandler+0x6c8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_DMA_IRQHandler+0x678>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a16      	ldr	r2, [pc, #88]	; (800468c <HAL_DMA_IRQHandler+0x6cc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d12b      	bne.n	8004690 <HAL_DMA_IRQHandler+0x6d0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e02a      	b.n	80046a4 <HAL_DMA_IRQHandler+0x6e4>
 800464e:	bf00      	nop
 8004650:	40020010 	.word	0x40020010
 8004654:	40020028 	.word	0x40020028
 8004658:	40020040 	.word	0x40020040
 800465c:	40020058 	.word	0x40020058
 8004660:	40020070 	.word	0x40020070
 8004664:	40020088 	.word	0x40020088
 8004668:	400200a0 	.word	0x400200a0
 800466c:	400200b8 	.word	0x400200b8
 8004670:	40020410 	.word	0x40020410
 8004674:	40020428 	.word	0x40020428
 8004678:	40020440 	.word	0x40020440
 800467c:	40020458 	.word	0x40020458
 8004680:	40020470 	.word	0x40020470
 8004684:	40020488 	.word	0x40020488
 8004688:	400204a0 	.word	0x400204a0
 800468c:	400204b8 	.word	0x400204b8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8087 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2220      	movs	r2, #32
 80046b4:	409a      	lsls	r2, r3
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d139      	bne.n	800473a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0216 	bic.w	r2, r2, #22
 80046d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695a      	ldr	r2, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <HAL_DMA_IRQHandler+0x736>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0208 	bic.w	r2, r2, #8
 8004704:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	223f      	movs	r2, #63	; 0x3f
 8004710:	409a      	lsls	r2, r3
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8382 	beq.w	8004e34 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
          }
          return;
 8004738:	e37c      	b.n	8004e34 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d018      	beq.n	800477a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	2b00      	cmp	r3, #0
 800475c:	d02c      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
 8004766:	e027      	b.n	80047b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	e01e      	b.n	80047b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10f      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0210 	bic.w	r2, r2, #16
 8004796:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 833e 	beq.w	8004e3e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8088 	beq.w	80048e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2204      	movs	r2, #4
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a8e      	ldr	r2, [pc, #568]	; (8004a18 <HAL_DMA_IRQHandler+0xa58>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04a      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a8d      	ldr	r2, [pc, #564]	; (8004a1c <HAL_DMA_IRQHandler+0xa5c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d045      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a8b      	ldr	r2, [pc, #556]	; (8004a20 <HAL_DMA_IRQHandler+0xa60>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d040      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a8a      	ldr	r2, [pc, #552]	; (8004a24 <HAL_DMA_IRQHandler+0xa64>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d03b      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a88      	ldr	r2, [pc, #544]	; (8004a28 <HAL_DMA_IRQHandler+0xa68>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d036      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a87      	ldr	r2, [pc, #540]	; (8004a2c <HAL_DMA_IRQHandler+0xa6c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d031      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a85      	ldr	r2, [pc, #532]	; (8004a30 <HAL_DMA_IRQHandler+0xa70>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02c      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a84      	ldr	r2, [pc, #528]	; (8004a34 <HAL_DMA_IRQHandler+0xa74>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d027      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a82      	ldr	r2, [pc, #520]	; (8004a38 <HAL_DMA_IRQHandler+0xa78>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a81      	ldr	r2, [pc, #516]	; (8004a3c <HAL_DMA_IRQHandler+0xa7c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d01d      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a7f      	ldr	r2, [pc, #508]	; (8004a40 <HAL_DMA_IRQHandler+0xa80>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7e      	ldr	r2, [pc, #504]	; (8004a44 <HAL_DMA_IRQHandler+0xa84>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7c      	ldr	r2, [pc, #496]	; (8004a48 <HAL_DMA_IRQHandler+0xa88>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7b      	ldr	r2, [pc, #492]	; (8004a4c <HAL_DMA_IRQHandler+0xa8c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a79      	ldr	r2, [pc, #484]	; (8004a50 <HAL_DMA_IRQHandler+0xa90>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_DMA_IRQHandler+0x8b8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a78      	ldr	r2, [pc, #480]	; (8004a54 <HAL_DMA_IRQHandler+0xa94>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <HAL_DMA_IRQHandler+0x8ca>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e007      	b.n	800489a <HAL_DMA_IRQHandler+0x8da>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3301      	adds	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d307      	bcc.n	80048b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f2      	bne.n	800489a <HAL_DMA_IRQHandler+0x8da>
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80048b6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2203      	movs	r2, #3
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048d6:	e003      	b.n	80048e0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 82aa 	beq.w	8004e3e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
 80048f2:	e2a4      	b.n	8004e3e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a57      	ldr	r2, [pc, #348]	; (8004a58 <HAL_DMA_IRQHandler+0xa98>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d04a      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a56      	ldr	r2, [pc, #344]	; (8004a5c <HAL_DMA_IRQHandler+0xa9c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d045      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a54      	ldr	r2, [pc, #336]	; (8004a60 <HAL_DMA_IRQHandler+0xaa0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d040      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a53      	ldr	r2, [pc, #332]	; (8004a64 <HAL_DMA_IRQHandler+0xaa4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d03b      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a51      	ldr	r2, [pc, #324]	; (8004a68 <HAL_DMA_IRQHandler+0xaa8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d036      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a50      	ldr	r2, [pc, #320]	; (8004a6c <HAL_DMA_IRQHandler+0xaac>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d031      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a4e      	ldr	r2, [pc, #312]	; (8004a70 <HAL_DMA_IRQHandler+0xab0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d02c      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a4d      	ldr	r2, [pc, #308]	; (8004a74 <HAL_DMA_IRQHandler+0xab4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d027      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a4b      	ldr	r2, [pc, #300]	; (8004a78 <HAL_DMA_IRQHandler+0xab8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d022      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a4a      	ldr	r2, [pc, #296]	; (8004a7c <HAL_DMA_IRQHandler+0xabc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d01d      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a48      	ldr	r2, [pc, #288]	; (8004a80 <HAL_DMA_IRQHandler+0xac0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d018      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a47      	ldr	r2, [pc, #284]	; (8004a84 <HAL_DMA_IRQHandler+0xac4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a45      	ldr	r2, [pc, #276]	; (8004a88 <HAL_DMA_IRQHandler+0xac8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00e      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a44      	ldr	r2, [pc, #272]	; (8004a8c <HAL_DMA_IRQHandler+0xacc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a42      	ldr	r2, [pc, #264]	; (8004a90 <HAL_DMA_IRQHandler+0xad0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_DMA_IRQHandler+0x9d4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a41      	ldr	r2, [pc, #260]	; (8004a94 <HAL_DMA_IRQHandler+0xad4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_DMA_IRQHandler+0x9d8>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_DMA_IRQHandler+0x9da>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 824f 	beq.w	8004e3e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2204      	movs	r2, #4
 80049b2:	409a      	lsls	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80dd 	beq.w	8004b78 <HAL_DMA_IRQHandler+0xbb8>
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80d7 	beq.w	8004b78 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2204      	movs	r2, #4
 80049d4:	409a      	lsls	r2, r3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d059      	beq.n	8004a98 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8220 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a00:	e21a      	b.n	8004e38 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8216 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a14:	e210      	b.n	8004e38 <HAL_DMA_IRQHandler+0xe78>
 8004a16:	bf00      	nop
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40020058 	.word	0x40020058
 8004a28:	40020070 	.word	0x40020070
 8004a2c:	40020088 	.word	0x40020088
 8004a30:	400200a0 	.word	0x400200a0
 8004a34:	400200b8 	.word	0x400200b8
 8004a38:	40020410 	.word	0x40020410
 8004a3c:	40020428 	.word	0x40020428
 8004a40:	40020440 	.word	0x40020440
 8004a44:	40020458 	.word	0x40020458
 8004a48:	40020470 	.word	0x40020470
 8004a4c:	40020488 	.word	0x40020488
 8004a50:	400204a0 	.word	0x400204a0
 8004a54:	400204b8 	.word	0x400204b8
 8004a58:	48022c08 	.word	0x48022c08
 8004a5c:	48022c1c 	.word	0x48022c1c
 8004a60:	48022c30 	.word	0x48022c30
 8004a64:	48022c44 	.word	0x48022c44
 8004a68:	48022c58 	.word	0x48022c58
 8004a6c:	48022c6c 	.word	0x48022c6c
 8004a70:	48022c80 	.word	0x48022c80
 8004a74:	48022c94 	.word	0x48022c94
 8004a78:	58025408 	.word	0x58025408
 8004a7c:	5802541c 	.word	0x5802541c
 8004a80:	58025430 	.word	0x58025430
 8004a84:	58025444 	.word	0x58025444
 8004a88:	58025458 	.word	0x58025458
 8004a8c:	5802546c 	.word	0x5802546c
 8004a90:	58025480 	.word	0x58025480
 8004a94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d160      	bne.n	8004b64 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a8c      	ldr	r2, [pc, #560]	; (8004cd8 <HAL_DMA_IRQHandler+0xd18>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a8a      	ldr	r2, [pc, #552]	; (8004cdc <HAL_DMA_IRQHandler+0xd1c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a89      	ldr	r2, [pc, #548]	; (8004ce0 <HAL_DMA_IRQHandler+0xd20>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a87      	ldr	r2, [pc, #540]	; (8004ce4 <HAL_DMA_IRQHandler+0xd24>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a86      	ldr	r2, [pc, #536]	; (8004ce8 <HAL_DMA_IRQHandler+0xd28>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a84      	ldr	r2, [pc, #528]	; (8004cec <HAL_DMA_IRQHandler+0xd2c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a83      	ldr	r2, [pc, #524]	; (8004cf0 <HAL_DMA_IRQHandler+0xd30>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a81      	ldr	r2, [pc, #516]	; (8004cf4 <HAL_DMA_IRQHandler+0xd34>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a80      	ldr	r2, [pc, #512]	; (8004cf8 <HAL_DMA_IRQHandler+0xd38>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a7e      	ldr	r2, [pc, #504]	; (8004cfc <HAL_DMA_IRQHandler+0xd3c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7d      	ldr	r2, [pc, #500]	; (8004d00 <HAL_DMA_IRQHandler+0xd40>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7b      	ldr	r2, [pc, #492]	; (8004d04 <HAL_DMA_IRQHandler+0xd44>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <HAL_DMA_IRQHandler+0xd48>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a78      	ldr	r2, [pc, #480]	; (8004d0c <HAL_DMA_IRQHandler+0xd4c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a77      	ldr	r2, [pc, #476]	; (8004d10 <HAL_DMA_IRQHandler+0xd50>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xb82>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a75      	ldr	r2, [pc, #468]	; (8004d14 <HAL_DMA_IRQHandler+0xd54>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d108      	bne.n	8004b54 <HAL_DMA_IRQHandler+0xb94>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0208 	bic.w	r2, r2, #8
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e007      	b.n	8004b64 <HAL_DMA_IRQHandler+0xba4>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8165 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b76:	e15f      	b.n	8004e38 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2202      	movs	r2, #2
 8004b82:	409a      	lsls	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80c5 	beq.w	8004d18 <HAL_DMA_IRQHandler+0xd58>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80bf 	beq.w	8004d18 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d018      	beq.n	8004be6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 813a 	beq.w	8004e3c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bd0:	e134      	b.n	8004e3c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8130 	beq.w	8004e3c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004be4:	e12a      	b.n	8004e3c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d168      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <HAL_DMA_IRQHandler+0xd18>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d04a      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <HAL_DMA_IRQHandler+0xd1c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d045      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <HAL_DMA_IRQHandler+0xd20>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d040      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a34      	ldr	r2, [pc, #208]	; (8004ce4 <HAL_DMA_IRQHandler+0xd24>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d03b      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <HAL_DMA_IRQHandler+0xd28>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d036      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a31      	ldr	r2, [pc, #196]	; (8004cec <HAL_DMA_IRQHandler+0xd2c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d031      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <HAL_DMA_IRQHandler+0xd30>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02c      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2e      	ldr	r2, [pc, #184]	; (8004cf4 <HAL_DMA_IRQHandler+0xd34>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d027      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <HAL_DMA_IRQHandler+0xd38>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d022      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <HAL_DMA_IRQHandler+0xd3c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d01d      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <HAL_DMA_IRQHandler+0xd40>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d018      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <HAL_DMA_IRQHandler+0xd44>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <HAL_DMA_IRQHandler+0xd48>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <HAL_DMA_IRQHandler+0xd4c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_DMA_IRQHandler+0xd50>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_DMA_IRQHandler+0xcd0>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <HAL_DMA_IRQHandler+0xd54>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0xce2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0214 	bic.w	r2, r2, #20
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e007      	b.n	8004cb2 <HAL_DMA_IRQHandler+0xcf2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 020a 	bic.w	r2, r2, #10
 8004cb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80b8 	beq.w	8004e3c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd4:	e0b2      	b.n	8004e3c <HAL_DMA_IRQHandler+0xe7c>
 8004cd6:	bf00      	nop
 8004cd8:	40020010 	.word	0x40020010
 8004cdc:	40020028 	.word	0x40020028
 8004ce0:	40020040 	.word	0x40020040
 8004ce4:	40020058 	.word	0x40020058
 8004ce8:	40020070 	.word	0x40020070
 8004cec:	40020088 	.word	0x40020088
 8004cf0:	400200a0 	.word	0x400200a0
 8004cf4:	400200b8 	.word	0x400200b8
 8004cf8:	40020410 	.word	0x40020410
 8004cfc:	40020428 	.word	0x40020428
 8004d00:	40020440 	.word	0x40020440
 8004d04:	40020458 	.word	0x40020458
 8004d08:	40020470 	.word	0x40020470
 8004d0c:	40020488 	.word	0x40020488
 8004d10:	400204a0 	.word	0x400204a0
 8004d14:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2208      	movs	r2, #8
 8004d22:	409a      	lsls	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8088 	beq.w	8004e3e <HAL_DMA_IRQHandler+0xe7e>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8082 	beq.w	8004e3e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	; (8004e44 <HAL_DMA_IRQHandler+0xe84>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d04a      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <HAL_DMA_IRQHandler+0xe88>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d045      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3e      	ldr	r2, [pc, #248]	; (8004e4c <HAL_DMA_IRQHandler+0xe8c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d040      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a3c      	ldr	r2, [pc, #240]	; (8004e50 <HAL_DMA_IRQHandler+0xe90>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d03b      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3b      	ldr	r2, [pc, #236]	; (8004e54 <HAL_DMA_IRQHandler+0xe94>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d036      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a39      	ldr	r2, [pc, #228]	; (8004e58 <HAL_DMA_IRQHandler+0xe98>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d031      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <HAL_DMA_IRQHandler+0xe9c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d02c      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a36      	ldr	r2, [pc, #216]	; (8004e60 <HAL_DMA_IRQHandler+0xea0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d027      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a35      	ldr	r2, [pc, #212]	; (8004e64 <HAL_DMA_IRQHandler+0xea4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <HAL_DMA_IRQHandler+0xea8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01d      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <HAL_DMA_IRQHandler+0xeac>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d018      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <HAL_DMA_IRQHandler+0xeb0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <HAL_DMA_IRQHandler+0xeb4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00e      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_DMA_IRQHandler+0xeb8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d009      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <HAL_DMA_IRQHandler+0xebc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_DMA_IRQHandler+0xe1a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <HAL_DMA_IRQHandler+0xec0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d108      	bne.n	8004dec <HAL_DMA_IRQHandler+0xe2c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 021c 	bic.w	r2, r2, #28
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e007      	b.n	8004dfc <HAL_DMA_IRQHandler+0xe3c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 020e 	bic.w	r2, r2, #14
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2201      	movs	r2, #1
 8004e06:	409a      	lsls	r2, r3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
 8004e32:	e004      	b.n	8004e3e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004e34:	bf00      	nop
 8004e36:	e002      	b.n	8004e3e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e3e:	3728      	adds	r7, #40	; 0x28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40020010 	.word	0x40020010
 8004e48:	40020028 	.word	0x40020028
 8004e4c:	40020040 	.word	0x40020040
 8004e50:	40020058 	.word	0x40020058
 8004e54:	40020070 	.word	0x40020070
 8004e58:	40020088 	.word	0x40020088
 8004e5c:	400200a0 	.word	0x400200a0
 8004e60:	400200b8 	.word	0x400200b8
 8004e64:	40020410 	.word	0x40020410
 8004e68:	40020428 	.word	0x40020428
 8004e6c:	40020440 	.word	0x40020440
 8004e70:	40020458 	.word	0x40020458
 8004e74:	40020470 	.word	0x40020470
 8004e78:	40020488 	.word	0x40020488
 8004e7c:	400204a0 	.word	0x400204a0
 8004e80:	400204b8 	.word	0x400204b8

08004e84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a84      	ldr	r2, [pc, #528]	; (80050b4 <DMA_SetConfig+0x230>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d072      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a82      	ldr	r2, [pc, #520]	; (80050b8 <DMA_SetConfig+0x234>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d06d      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a81      	ldr	r2, [pc, #516]	; (80050bc <DMA_SetConfig+0x238>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d068      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7f      	ldr	r2, [pc, #508]	; (80050c0 <DMA_SetConfig+0x23c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d063      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7e      	ldr	r2, [pc, #504]	; (80050c4 <DMA_SetConfig+0x240>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d05e      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a7c      	ldr	r2, [pc, #496]	; (80050c8 <DMA_SetConfig+0x244>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d059      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7b      	ldr	r2, [pc, #492]	; (80050cc <DMA_SetConfig+0x248>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d054      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a79      	ldr	r2, [pc, #484]	; (80050d0 <DMA_SetConfig+0x24c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04f      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a78      	ldr	r2, [pc, #480]	; (80050d4 <DMA_SetConfig+0x250>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d04a      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a76      	ldr	r2, [pc, #472]	; (80050d8 <DMA_SetConfig+0x254>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d045      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a75      	ldr	r2, [pc, #468]	; (80050dc <DMA_SetConfig+0x258>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d040      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a73      	ldr	r2, [pc, #460]	; (80050e0 <DMA_SetConfig+0x25c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d03b      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a72      	ldr	r2, [pc, #456]	; (80050e4 <DMA_SetConfig+0x260>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d036      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a70      	ldr	r2, [pc, #448]	; (80050e8 <DMA_SetConfig+0x264>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d031      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a6f      	ldr	r2, [pc, #444]	; (80050ec <DMA_SetConfig+0x268>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d02c      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <DMA_SetConfig+0x26c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d027      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a6c      	ldr	r2, [pc, #432]	; (80050f4 <DMA_SetConfig+0x270>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d022      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a6a      	ldr	r2, [pc, #424]	; (80050f8 <DMA_SetConfig+0x274>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01d      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a69      	ldr	r2, [pc, #420]	; (80050fc <DMA_SetConfig+0x278>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d018      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a67      	ldr	r2, [pc, #412]	; (8005100 <DMA_SetConfig+0x27c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a66      	ldr	r2, [pc, #408]	; (8005104 <DMA_SetConfig+0x280>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a64      	ldr	r2, [pc, #400]	; (8005108 <DMA_SetConfig+0x284>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a63      	ldr	r2, [pc, #396]	; (800510c <DMA_SetConfig+0x288>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <DMA_SetConfig+0x10a>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a61      	ldr	r2, [pc, #388]	; (8005110 <DMA_SetConfig+0x28c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <DMA_SetConfig+0x10e>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <DMA_SetConfig+0x110>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fa0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d004      	beq.n	8004fb4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fb2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3e      	ldr	r2, [pc, #248]	; (80050b4 <DMA_SetConfig+0x230>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d04a      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <DMA_SetConfig+0x234>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d045      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3b      	ldr	r2, [pc, #236]	; (80050bc <DMA_SetConfig+0x238>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d040      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3a      	ldr	r2, [pc, #232]	; (80050c0 <DMA_SetConfig+0x23c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d03b      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a38      	ldr	r2, [pc, #224]	; (80050c4 <DMA_SetConfig+0x240>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d036      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <DMA_SetConfig+0x244>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d031      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a35      	ldr	r2, [pc, #212]	; (80050cc <DMA_SetConfig+0x248>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d02c      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a34      	ldr	r2, [pc, #208]	; (80050d0 <DMA_SetConfig+0x24c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d027      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <DMA_SetConfig+0x250>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a31      	ldr	r2, [pc, #196]	; (80050d8 <DMA_SetConfig+0x254>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d01d      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <DMA_SetConfig+0x258>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <DMA_SetConfig+0x25c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <DMA_SetConfig+0x260>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <DMA_SetConfig+0x264>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a29      	ldr	r2, [pc, #164]	; (80050ec <DMA_SetConfig+0x268>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <DMA_SetConfig+0x1d0>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <DMA_SetConfig+0x26c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <DMA_SetConfig+0x1d4>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <DMA_SetConfig+0x1d6>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d05a      	beq.n	8005114 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	223f      	movs	r2, #63	; 0x3f
 8005068:	409a      	lsls	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800507c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d108      	bne.n	80050a0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800509e:	e0af      	b.n	8005200 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
}
 80050b0:	e0a6      	b.n	8005200 <DMA_SetConfig+0x37c>
 80050b2:	bf00      	nop
 80050b4:	40020010 	.word	0x40020010
 80050b8:	40020028 	.word	0x40020028
 80050bc:	40020040 	.word	0x40020040
 80050c0:	40020058 	.word	0x40020058
 80050c4:	40020070 	.word	0x40020070
 80050c8:	40020088 	.word	0x40020088
 80050cc:	400200a0 	.word	0x400200a0
 80050d0:	400200b8 	.word	0x400200b8
 80050d4:	40020410 	.word	0x40020410
 80050d8:	40020428 	.word	0x40020428
 80050dc:	40020440 	.word	0x40020440
 80050e0:	40020458 	.word	0x40020458
 80050e4:	40020470 	.word	0x40020470
 80050e8:	40020488 	.word	0x40020488
 80050ec:	400204a0 	.word	0x400204a0
 80050f0:	400204b8 	.word	0x400204b8
 80050f4:	58025408 	.word	0x58025408
 80050f8:	5802541c 	.word	0x5802541c
 80050fc:	58025430 	.word	0x58025430
 8005100:	58025444 	.word	0x58025444
 8005104:	58025458 	.word	0x58025458
 8005108:	5802546c 	.word	0x5802546c
 800510c:	58025480 	.word	0x58025480
 8005110:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3c      	ldr	r2, [pc, #240]	; (800520c <DMA_SetConfig+0x388>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d04a      	beq.n	80051b4 <DMA_SetConfig+0x330>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3b      	ldr	r2, [pc, #236]	; (8005210 <DMA_SetConfig+0x38c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d045      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a39      	ldr	r2, [pc, #228]	; (8005214 <DMA_SetConfig+0x390>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d040      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a38      	ldr	r2, [pc, #224]	; (8005218 <DMA_SetConfig+0x394>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d03b      	beq.n	80051b4 <DMA_SetConfig+0x330>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a36      	ldr	r2, [pc, #216]	; (800521c <DMA_SetConfig+0x398>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d036      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a35      	ldr	r2, [pc, #212]	; (8005220 <DMA_SetConfig+0x39c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d031      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a33      	ldr	r2, [pc, #204]	; (8005224 <DMA_SetConfig+0x3a0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02c      	beq.n	80051b4 <DMA_SetConfig+0x330>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a32      	ldr	r2, [pc, #200]	; (8005228 <DMA_SetConfig+0x3a4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d027      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a30      	ldr	r2, [pc, #192]	; (800522c <DMA_SetConfig+0x3a8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d022      	beq.n	80051b4 <DMA_SetConfig+0x330>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <DMA_SetConfig+0x3ac>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d01d      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2d      	ldr	r2, [pc, #180]	; (8005234 <DMA_SetConfig+0x3b0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2c      	ldr	r2, [pc, #176]	; (8005238 <DMA_SetConfig+0x3b4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <DMA_SetConfig+0x330>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2a      	ldr	r2, [pc, #168]	; (800523c <DMA_SetConfig+0x3b8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <DMA_SetConfig+0x330>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a29      	ldr	r2, [pc, #164]	; (8005240 <DMA_SetConfig+0x3bc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <DMA_SetConfig+0x330>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a27      	ldr	r2, [pc, #156]	; (8005244 <DMA_SetConfig+0x3c0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <DMA_SetConfig+0x330>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a26      	ldr	r2, [pc, #152]	; (8005248 <DMA_SetConfig+0x3c4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d101      	bne.n	80051b8 <DMA_SetConfig+0x334>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <DMA_SetConfig+0x336>
 80051b8:	2300      	movs	r3, #0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d020      	beq.n	8005200 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	2201      	movs	r2, #1
 80051c8:	409a      	lsls	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d108      	bne.n	80051f0 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	60da      	str	r2, [r3, #12]
}
 80051ee:	e007      	b.n	8005200 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	48022c08 	.word	0x48022c08
 8005210:	48022c1c 	.word	0x48022c1c
 8005214:	48022c30 	.word	0x48022c30
 8005218:	48022c44 	.word	0x48022c44
 800521c:	48022c58 	.word	0x48022c58
 8005220:	48022c6c 	.word	0x48022c6c
 8005224:	48022c80 	.word	0x48022c80
 8005228:	48022c94 	.word	0x48022c94
 800522c:	58025408 	.word	0x58025408
 8005230:	5802541c 	.word	0x5802541c
 8005234:	58025430 	.word	0x58025430
 8005238:	58025444 	.word	0x58025444
 800523c:	58025458 	.word	0x58025458
 8005240:	5802546c 	.word	0x5802546c
 8005244:	58025480 	.word	0x58025480
 8005248:	58025494 	.word	0x58025494

0800524c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a42      	ldr	r2, [pc, #264]	; (8005364 <DMA_CalcBaseAndBitshift+0x118>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04a      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a41      	ldr	r2, [pc, #260]	; (8005368 <DMA_CalcBaseAndBitshift+0x11c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d045      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a3f      	ldr	r2, [pc, #252]	; (800536c <DMA_CalcBaseAndBitshift+0x120>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d040      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a3e      	ldr	r2, [pc, #248]	; (8005370 <DMA_CalcBaseAndBitshift+0x124>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d03b      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a3c      	ldr	r2, [pc, #240]	; (8005374 <DMA_CalcBaseAndBitshift+0x128>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d036      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a3b      	ldr	r2, [pc, #236]	; (8005378 <DMA_CalcBaseAndBitshift+0x12c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d031      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a39      	ldr	r2, [pc, #228]	; (800537c <DMA_CalcBaseAndBitshift+0x130>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02c      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a38      	ldr	r2, [pc, #224]	; (8005380 <DMA_CalcBaseAndBitshift+0x134>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d027      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a36      	ldr	r2, [pc, #216]	; (8005384 <DMA_CalcBaseAndBitshift+0x138>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a35      	ldr	r2, [pc, #212]	; (8005388 <DMA_CalcBaseAndBitshift+0x13c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a33      	ldr	r2, [pc, #204]	; (800538c <DMA_CalcBaseAndBitshift+0x140>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a32      	ldr	r2, [pc, #200]	; (8005390 <DMA_CalcBaseAndBitshift+0x144>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a30      	ldr	r2, [pc, #192]	; (8005394 <DMA_CalcBaseAndBitshift+0x148>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <DMA_CalcBaseAndBitshift+0x14c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2d      	ldr	r2, [pc, #180]	; (800539c <DMA_CalcBaseAndBitshift+0x150>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <DMA_CalcBaseAndBitshift+0xa8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <DMA_CalcBaseAndBitshift+0x154>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <DMA_CalcBaseAndBitshift+0xac>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <DMA_CalcBaseAndBitshift+0xae>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d024      	beq.n	8005348 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	3b10      	subs	r3, #16
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <DMA_CalcBaseAndBitshift+0x158>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d908      	bls.n	8005338 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	4b1f      	ldr	r3, [pc, #124]	; (80053ac <DMA_CalcBaseAndBitshift+0x160>)
 800532e:	4013      	ands	r3, r2
 8005330:	1d1a      	adds	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	659a      	str	r2, [r3, #88]	; 0x58
 8005336:	e00d      	b.n	8005354 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <DMA_CalcBaseAndBitshift+0x160>)
 8005340:	4013      	ands	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6593      	str	r3, [r2, #88]	; 0x58
 8005346:	e005      	b.n	8005354 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40020010 	.word	0x40020010
 8005368:	40020028 	.word	0x40020028
 800536c:	40020040 	.word	0x40020040
 8005370:	40020058 	.word	0x40020058
 8005374:	40020070 	.word	0x40020070
 8005378:	40020088 	.word	0x40020088
 800537c:	400200a0 	.word	0x400200a0
 8005380:	400200b8 	.word	0x400200b8
 8005384:	40020410 	.word	0x40020410
 8005388:	40020428 	.word	0x40020428
 800538c:	40020440 	.word	0x40020440
 8005390:	40020458 	.word	0x40020458
 8005394:	40020470 	.word	0x40020470
 8005398:	40020488 	.word	0x40020488
 800539c:	400204a0 	.word	0x400204a0
 80053a0:	400204b8 	.word	0x400204b8
 80053a4:	aaaaaaab 	.word	0xaaaaaaab
 80053a8:	0800b5e0 	.word	0x0800b5e0
 80053ac:	fffffc00 	.word	0xfffffc00

080053b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d120      	bne.n	8005406 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d858      	bhi.n	800547e <DMA_CheckFifoParam+0xce>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <DMA_CheckFifoParam+0x24>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	080053f7 	.word	0x080053f7
 80053dc:	080053e5 	.word	0x080053e5
 80053e0:	0800547f 	.word	0x0800547f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d048      	beq.n	8005482 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053f4:	e045      	b.n	8005482 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053fe:	d142      	bne.n	8005486 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005404:	e03f      	b.n	8005486 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540e:	d123      	bne.n	8005458 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2b03      	cmp	r3, #3
 8005416:	d838      	bhi.n	800548a <DMA_CheckFifoParam+0xda>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <DMA_CheckFifoParam+0x70>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	08005437 	.word	0x08005437
 8005428:	08005431 	.word	0x08005431
 800542c:	08005449 	.word	0x08005449
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
        break;
 8005434:	e030      	b.n	8005498 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d025      	beq.n	800548e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005446:	e022      	b.n	800548e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005450:	d11f      	bne.n	8005492 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005456:	e01c      	b.n	8005492 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	2b02      	cmp	r3, #2
 800545e:	d902      	bls.n	8005466 <DMA_CheckFifoParam+0xb6>
 8005460:	2b03      	cmp	r3, #3
 8005462:	d003      	beq.n	800546c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005464:	e018      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
        break;
 800546a:	e015      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
    break;
 800547c:	e00b      	b.n	8005496 <DMA_CheckFifoParam+0xe6>
        break;
 800547e:	bf00      	nop
 8005480:	e00a      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        break;
 8005482:	bf00      	nop
 8005484:	e008      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        break;
 8005486:	bf00      	nop
 8005488:	e006      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        break;
 800548a:	bf00      	nop
 800548c:	e004      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        break;
 800548e:	bf00      	nop
 8005490:	e002      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
        break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <DMA_CheckFifoParam+0xe8>
    break;
 8005496:	bf00      	nop
    }
  }

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a38      	ldr	r2, [pc, #224]	; (800559c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a36      	ldr	r2, [pc, #216]	; (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01d      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a35      	ldr	r2, [pc, #212]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a33      	ldr	r2, [pc, #204]	; (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a32      	ldr	r2, [pc, #200]	; (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a30      	ldr	r2, [pc, #192]	; (80055b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2f      	ldr	r2, [pc, #188]	; (80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2d      	ldr	r2, [pc, #180]	; (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01a      	beq.n	8005546 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	3b08      	subs	r3, #8
 8005518:	4a28      	ldr	r2, [pc, #160]	; (80055bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005534:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2201      	movs	r2, #1
 800553e:	409a      	lsls	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005544:	e024      	b.n	8005590 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	3b10      	subs	r3, #16
 800554e:	4a1e      	ldr	r2, [pc, #120]	; (80055c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d806      	bhi.n	800556e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d902      	bls.n	800556e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3308      	adds	r3, #8
 800556c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005580:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	58025408 	.word	0x58025408
 80055a0:	5802541c 	.word	0x5802541c
 80055a4:	58025430 	.word	0x58025430
 80055a8:	58025444 	.word	0x58025444
 80055ac:	58025458 	.word	0x58025458
 80055b0:	5802546c 	.word	0x5802546c
 80055b4:	58025480 	.word	0x58025480
 80055b8:	58025494 	.word	0x58025494
 80055bc:	cccccccd 	.word	0xcccccccd
 80055c0:	16009600 	.word	0x16009600
 80055c4:	58025880 	.word	0x58025880
 80055c8:	aaaaaaab 	.word	0xaaaaaaab
 80055cc:	400204b8 	.word	0x400204b8
 80055d0:	4002040f 	.word	0x4002040f
 80055d4:	10008200 	.word	0x10008200
 80055d8:	40020880 	.word	0x40020880

080055dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04a      	beq.n	8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d847      	bhi.n	8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a25      	ldr	r2, [pc, #148]	; (8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d022      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a24      	ldr	r2, [pc, #144]	; (8005698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d01d      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a22      	ldr	r2, [pc, #136]	; (800569c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d013      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d101      	bne.n	800564c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005664:	671a      	str	r2, [r3, #112]	; 0x70
 8005666:	e009      	b.n	800567c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800567a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3b01      	subs	r3, #1
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	58025408 	.word	0x58025408
 8005698:	5802541c 	.word	0x5802541c
 800569c:	58025430 	.word	0x58025430
 80056a0:	58025444 	.word	0x58025444
 80056a4:	58025458 	.word	0x58025458
 80056a8:	5802546c 	.word	0x5802546c
 80056ac:	58025480 	.word	0x58025480
 80056b0:	58025494 	.word	0x58025494
 80056b4:	1600963f 	.word	0x1600963f
 80056b8:	58025940 	.word	0x58025940
 80056bc:	1000823f 	.word	0x1000823f
 80056c0:	40020940 	.word	0x40020940

080056c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056d2:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <HAL_GPIO_Init+0x234>)
 80056d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056d6:	e194      	b.n	8005a02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	4013      	ands	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8186 	beq.w	80059fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d00b      	beq.n	8005710 <HAL_GPIO_Init+0x4c>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d007      	beq.n	8005710 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005704:	2b11      	cmp	r3, #17
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b12      	cmp	r3, #18
 800570e:	d130      	bne.n	8005772 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	2203      	movs	r2, #3
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005746:	2201      	movs	r2, #1
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 0201 	and.w	r2, r3, #1
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	2203      	movs	r2, #3
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4313      	orrs	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0xee>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b12      	cmp	r3, #18
 80057b0:	d123      	bne.n	80057fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	08da      	lsrs	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	220f      	movs	r2, #15
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	08da      	lsrs	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3208      	adds	r2, #8
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80e0 	beq.w	80059fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583c:	4b2f      	ldr	r3, [pc, #188]	; (80058fc <HAL_GPIO_Init+0x238>)
 800583e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005842:	4a2e      	ldr	r2, [pc, #184]	; (80058fc <HAL_GPIO_Init+0x238>)
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800584c:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <HAL_GPIO_Init+0x238>)
 800584e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800585a:	4a29      	ldr	r2, [pc, #164]	; (8005900 <HAL_GPIO_Init+0x23c>)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	089b      	lsrs	r3, r3, #2
 8005860:	3302      	adds	r3, #2
 8005862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a20      	ldr	r2, [pc, #128]	; (8005904 <HAL_GPIO_Init+0x240>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d052      	beq.n	800592c <HAL_GPIO_Init+0x268>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <HAL_GPIO_Init+0x244>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d031      	beq.n	80058f2 <HAL_GPIO_Init+0x22e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1e      	ldr	r2, [pc, #120]	; (800590c <HAL_GPIO_Init+0x248>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02b      	beq.n	80058ee <HAL_GPIO_Init+0x22a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_GPIO_Init+0x24c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d025      	beq.n	80058ea <HAL_GPIO_Init+0x226>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_GPIO_Init+0x250>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01f      	beq.n	80058e6 <HAL_GPIO_Init+0x222>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_GPIO_Init+0x254>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d019      	beq.n	80058e2 <HAL_GPIO_Init+0x21e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_GPIO_Init+0x258>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <HAL_GPIO_Init+0x21a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_GPIO_Init+0x25c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00d      	beq.n	80058da <HAL_GPIO_Init+0x216>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <HAL_GPIO_Init+0x260>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <HAL_GPIO_Init+0x212>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a17      	ldr	r2, [pc, #92]	; (8005928 <HAL_GPIO_Init+0x264>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_GPIO_Init+0x20e>
 80058ce:	2309      	movs	r3, #9
 80058d0:	e02d      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058d2:	230a      	movs	r3, #10
 80058d4:	e02b      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058d6:	2308      	movs	r3, #8
 80058d8:	e029      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058da:	2307      	movs	r3, #7
 80058dc:	e027      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058de:	2306      	movs	r3, #6
 80058e0:	e025      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058e2:	2305      	movs	r3, #5
 80058e4:	e023      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058e6:	2304      	movs	r3, #4
 80058e8:	e021      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058ea:	2303      	movs	r3, #3
 80058ec:	e01f      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e01d      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e01b      	b.n	800592e <HAL_GPIO_Init+0x26a>
 80058f6:	bf00      	nop
 80058f8:	58000080 	.word	0x58000080
 80058fc:	58024400 	.word	0x58024400
 8005900:	58000400 	.word	0x58000400
 8005904:	58020000 	.word	0x58020000
 8005908:	58020400 	.word	0x58020400
 800590c:	58020800 	.word	0x58020800
 8005910:	58020c00 	.word	0x58020c00
 8005914:	58021000 	.word	0x58021000
 8005918:	58021400 	.word	0x58021400
 800591c:	58021800 	.word	0x58021800
 8005920:	58021c00 	.word	0x58021c00
 8005924:	58022000 	.word	0x58022000
 8005928:	58022400 	.word	0x58022400
 800592c:	2300      	movs	r3, #0
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	f002 0203 	and.w	r2, r2, #3
 8005934:	0092      	lsls	r2, r2, #2
 8005936:	4093      	lsls	r3, r2
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800593e:	4938      	ldr	r1, [pc, #224]	; (8005a20 <HAL_GPIO_Init+0x35c>)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3302      	adds	r3, #2
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	43db      	mvns	r3, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4013      	ands	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f ae63 	bne.w	80056d8 <HAL_GPIO_Init+0x14>
  }
}
 8005a12:	bf00      	nop
 8005a14:	3724      	adds	r7, #36	; 0x24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	58000400 	.word	0x58000400

08005a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
 8005a30:	4613      	mov	r3, r2
 8005a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a34:	787b      	ldrb	r3, [r7, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a40:	e003      	b.n	8005a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a42:	887b      	ldrh	r3, [r7, #2]
 8005a44:	041a      	lsls	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	619a      	str	r2, [r3, #24]
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	887b      	ldrh	r3, [r7, #2]
 8005a68:	401a      	ands	r2, r3
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d104      	bne.n	8005a7a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	041a      	lsls	r2, r3, #16
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005a78:	e002      	b.n	8005a80 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	619a      	str	r2, [r3, #24]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a94:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	2b06      	cmp	r3, #6
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005aa0:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e040      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e03e      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005abe:	491f      	ldr	r1, [pc, #124]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ac6:	f7fb ff0b 	bl	80018e0 <HAL_GetTick>
 8005aca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005acc:	e009      	b.n	8005ae2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ace:	f7fb ff07 	bl	80018e0 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005adc:	d901      	bls.n	8005ae2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e028      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aee:	d1ee      	bne.n	8005ace <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b1e      	cmp	r3, #30
 8005af4:	d008      	beq.n	8005b08 <HAL_PWREx_ConfigSupply+0x7c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b2e      	cmp	r3, #46	; 0x2e
 8005afa:	d005      	beq.n	8005b08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b1d      	cmp	r3, #29
 8005b00:	d002      	beq.n	8005b08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b2d      	cmp	r3, #45	; 0x2d
 8005b06:	d114      	bne.n	8005b32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b08:	f7fb feea 	bl	80018e0 <HAL_GetTick>
 8005b0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b0e:	e009      	b.n	8005b24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b10:	f7fb fee6 	bl	80018e0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b1e:	d901      	bls.n	8005b24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e007      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d1ee      	bne.n	8005b10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024800 	.word	0x58024800

08005b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e3d7      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80b3 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b60:	4b90      	ldr	r3, [pc, #576]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b6a:	4b8e      	ldr	r3, [pc, #568]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d007      	beq.n	8005b86 <HAL_RCC_OscConfig+0x46>
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b18      	cmp	r3, #24
 8005b7a:	d112      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x62>
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d10d      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b86:	4b87      	ldr	r3, [pc, #540]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8098 	beq.w	8005cc4 <HAL_RCC_OscConfig+0x184>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f040 8093 	bne.w	8005cc4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e3af      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005baa:	d106      	bne.n	8005bba <HAL_RCC_OscConfig+0x7a>
 8005bac:	4b7d      	ldr	r3, [pc, #500]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a7c      	ldr	r2, [pc, #496]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	e058      	b.n	8005c6c <HAL_RCC_OscConfig+0x12c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d112      	bne.n	8005be8 <HAL_RCC_OscConfig+0xa8>
 8005bc2:	4b78      	ldr	r3, [pc, #480]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a77      	ldr	r2, [pc, #476]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4b75      	ldr	r3, [pc, #468]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a74      	ldr	r2, [pc, #464]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4b72      	ldr	r3, [pc, #456]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a71      	ldr	r2, [pc, #452]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e041      	b.n	8005c6c <HAL_RCC_OscConfig+0x12c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bf0:	d112      	bne.n	8005c18 <HAL_RCC_OscConfig+0xd8>
 8005bf2:	4b6c      	ldr	r3, [pc, #432]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6b      	ldr	r2, [pc, #428]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4b69      	ldr	r3, [pc, #420]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a68      	ldr	r2, [pc, #416]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	4b66      	ldr	r3, [pc, #408]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a65      	ldr	r2, [pc, #404]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e029      	b.n	8005c6c <HAL_RCC_OscConfig+0x12c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005c20:	d112      	bne.n	8005c48 <HAL_RCC_OscConfig+0x108>
 8005c22:	4b60      	ldr	r3, [pc, #384]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a5f      	ldr	r2, [pc, #380]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a5c      	ldr	r2, [pc, #368]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	4b5a      	ldr	r3, [pc, #360]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a59      	ldr	r2, [pc, #356]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e011      	b.n	8005c6c <HAL_RCC_OscConfig+0x12c>
 8005c48:	4b56      	ldr	r3, [pc, #344]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a55      	ldr	r2, [pc, #340]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4b53      	ldr	r3, [pc, #332]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a52      	ldr	r2, [pc, #328]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4b50      	ldr	r3, [pc, #320]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a4f      	ldr	r2, [pc, #316]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d013      	beq.n	8005c9c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fb fe34 	bl	80018e0 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fb fe30 	bl	80018e0 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e339      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c8e:	4b45      	ldr	r3, [pc, #276]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x13c>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fb fe20 	bl	80018e0 <HAL_GetTick>
 8005ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fb fe1c 	bl	80018e0 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e325      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x164>
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d070      	beq.n	8005db4 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cd2:	4b34      	ldr	r3, [pc, #208]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cda:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cdc:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x1b8>
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	2b18      	cmp	r3, #24
 8005cec:	d11b      	bne.n	8005d26 <HAL_RCC_OscConfig+0x1e6>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d116      	bne.n	8005d26 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_OscConfig+0x1d0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e2f8      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	4921      	ldr	r1, [pc, #132]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d24:	e046      	b.n	8005db4 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d026      	beq.n	8005d7c <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0219 	bic.w	r2, r3, #25
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	491a      	ldr	r1, [pc, #104]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fb fdce 	bl	80018e0 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fb fdca 	bl	80018e0 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e2d3      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	061b      	lsls	r3, r3, #24
 8005d74:	490b      	ldr	r1, [pc, #44]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
 8005d7a:	e01b      	b.n	8005db4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7c:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <HAL_RCC_OscConfig+0x264>)
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fb fdaa 	bl	80018e0 <HAL_GetTick>
 8005d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d8e:	e00b      	b.n	8005da8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d90:	f7fb fda6 	bl	80018e0 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d904      	bls.n	8005da8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e2af      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005da8:	4b99      	ldr	r3, [pc, #612]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ed      	bne.n	8005d90 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d06a      	beq.n	8005e96 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc0:	4b93      	ldr	r3, [pc, #588]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dca:	4b91      	ldr	r3, [pc, #580]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d007      	beq.n	8005de6 <HAL_RCC_OscConfig+0x2a6>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b18      	cmp	r3, #24
 8005dda:	d11b      	bne.n	8005e14 <HAL_RCC_OscConfig+0x2d4>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d116      	bne.n	8005e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005de6:	4b8a      	ldr	r3, [pc, #552]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_RCC_OscConfig+0x2be>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d001      	beq.n	8005dfe <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e281      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dfe:	4b84      	ldr	r3, [pc, #528]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	4980      	ldr	r1, [pc, #512]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e12:	e040      	b.n	8005e96 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d023      	beq.n	8005e64 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e1c:	4b7c      	ldr	r3, [pc, #496]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7b      	ldr	r2, [pc, #492]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fb fd5a 	bl	80018e0 <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e30:	f7fb fd56 	bl	80018e0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e25f      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e42:	4b73      	ldr	r3, [pc, #460]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e4e:	4b70      	ldr	r3, [pc, #448]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	061b      	lsls	r3, r3, #24
 8005e5c:	496c      	ldr	r1, [pc, #432]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60cb      	str	r3, [r1, #12]
 8005e62:	e018      	b.n	8005e96 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e64:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a69      	ldr	r2, [pc, #420]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fb fd36 	bl	80018e0 <HAL_GetTick>
 8005e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e78:	f7fb fd32 	bl	80018e0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e23b      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d036      	beq.n	8005f10 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d019      	beq.n	8005ede <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eaa:	4b59      	ldr	r3, [pc, #356]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eae:	4a58      	ldr	r2, [pc, #352]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb6:	f7fb fd13 	bl	80018e0 <HAL_GetTick>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ebe:	f7fb fd0f 	bl	80018e0 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e218      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ed0:	4b4f      	ldr	r3, [pc, #316]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x37e>
 8005edc:	e018      	b.n	8005f10 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ede:	4b4c      	ldr	r3, [pc, #304]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee2:	4a4b      	ldr	r2, [pc, #300]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eea:	f7fb fcf9 	bl	80018e0 <HAL_GetTick>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef2:	f7fb fcf5 	bl	80018e0 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e1fe      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f04:	4b42      	ldr	r3, [pc, #264]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d036      	beq.n	8005f8a <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d019      	beq.n	8005f58 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a39      	ldr	r2, [pc, #228]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f30:	f7fb fcd6 	bl	80018e0 <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f38:	f7fb fcd2 	bl	80018e0 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e1db      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
 8005f56:	e018      	b.n	8005f8a <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f58:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f64:	f7fb fcbc 	bl	80018e0 <HAL_GetTick>
 8005f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f6c:	f7fb fcb8 	bl	80018e0 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e1c1      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f7e:	4b24      	ldr	r3, [pc, #144]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80af 	beq.w	80060f6 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <HAL_RCC_OscConfig+0x4d4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <HAL_RCC_OscConfig+0x4d4>)
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fa4:	f7fb fc9c 	bl	80018e0 <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fac:	f7fb fc98 	bl	80018e0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1a1      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fbe:	4b15      	ldr	r3, [pc, #84]	; (8006014 <HAL_RCC_OscConfig+0x4d4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4a0>
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a0e      	ldr	r2, [pc, #56]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fde:	e05b      	b.n	8006098 <HAL_RCC_OscConfig+0x558>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d117      	bne.n	8006018 <HAL_RCC_OscConfig+0x4d8>
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	4a08      	ldr	r2, [pc, #32]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff8:	4a05      	ldr	r2, [pc, #20]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8005ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8006000:	4b03      	ldr	r3, [pc, #12]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	4a02      	ldr	r2, [pc, #8]	; (8006010 <HAL_RCC_OscConfig+0x4d0>)
 8006006:	f023 0304 	bic.w	r3, r3, #4
 800600a:	6713      	str	r3, [r2, #112]	; 0x70
 800600c:	e044      	b.n	8006098 <HAL_RCC_OscConfig+0x558>
 800600e:	bf00      	nop
 8006010:	58024400 	.word	0x58024400
 8006014:	58024800 	.word	0x58024800
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b05      	cmp	r3, #5
 800601e:	d112      	bne.n	8006046 <HAL_RCC_OscConfig+0x506>
 8006020:	4b95      	ldr	r3, [pc, #596]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a94      	ldr	r2, [pc, #592]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006026:	f043 0304 	orr.w	r3, r3, #4
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
 800602c:	4b92      	ldr	r3, [pc, #584]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	4a91      	ldr	r2, [pc, #580]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006036:	6713      	str	r3, [r2, #112]	; 0x70
 8006038:	4b8f      	ldr	r3, [pc, #572]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603c:	4a8e      	ldr	r2, [pc, #568]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6713      	str	r3, [r2, #112]	; 0x70
 8006044:	e028      	b.n	8006098 <HAL_RCC_OscConfig+0x558>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b85      	cmp	r3, #133	; 0x85
 800604c:	d112      	bne.n	8006074 <HAL_RCC_OscConfig+0x534>
 800604e:	4b8a      	ldr	r3, [pc, #552]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	4a89      	ldr	r2, [pc, #548]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006054:	f043 0304 	orr.w	r3, r3, #4
 8006058:	6713      	str	r3, [r2, #112]	; 0x70
 800605a:	4b87      	ldr	r3, [pc, #540]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	4a86      	ldr	r2, [pc, #536]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	6713      	str	r3, [r2, #112]	; 0x70
 8006066:	4b84      	ldr	r3, [pc, #528]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	4a83      	ldr	r2, [pc, #524]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	6713      	str	r3, [r2, #112]	; 0x70
 8006072:	e011      	b.n	8006098 <HAL_RCC_OscConfig+0x558>
 8006074:	4b80      	ldr	r3, [pc, #512]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	4a7f      	ldr	r2, [pc, #508]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	; 0x70
 8006080:	4b7d      	ldr	r3, [pc, #500]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a7c      	ldr	r2, [pc, #496]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
 800608c:	4b7a      	ldr	r3, [pc, #488]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	4a79      	ldr	r2, [pc, #484]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fb fc1e 	bl	80018e0 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a6:	e00a      	b.n	80060be <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fb fc1a 	bl	80018e0 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e121      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060be:	4b6e      	ldr	r3, [pc, #440]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ee      	beq.n	80060a8 <HAL_RCC_OscConfig+0x568>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fb fc08 	bl	80018e0 <HAL_GetTick>
 80060d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fb fc04 	bl	80018e0 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e10b      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060ea:	4b63      	ldr	r3, [pc, #396]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ee      	bne.n	80060d4 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8100 	beq.w	8006300 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006100:	4b5d      	ldr	r3, [pc, #372]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006108:	2b18      	cmp	r3, #24
 800610a:	f000 80bb 	beq.w	8006284 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	2b02      	cmp	r3, #2
 8006114:	f040 8095 	bne.w	8006242 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006118:	4b57      	ldr	r3, [pc, #348]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a56      	ldr	r2, [pc, #344]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800611e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fb fbdc 	bl	80018e0 <HAL_GetTick>
 8006128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612c:	f7fb fbd8 	bl	80018e0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e0e1      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800613e:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800614a:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800614c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614e:	4b4b      	ldr	r3, [pc, #300]	; (800627c <HAL_RCC_OscConfig+0x73c>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800615a:	0112      	lsls	r2, r2, #4
 800615c:	430a      	orrs	r2, r1
 800615e:	4946      	ldr	r1, [pc, #280]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006160:	4313      	orrs	r3, r2
 8006162:	628b      	str	r3, [r1, #40]	; 0x28
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	3b01      	subs	r3, #1
 800616a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	3b01      	subs	r3, #1
 8006174:	025b      	lsls	r3, r3, #9
 8006176:	b29b      	uxth	r3, r3
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	3b01      	subs	r3, #1
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	3b01      	subs	r3, #1
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006194:	4938      	ldr	r1, [pc, #224]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006196:	4313      	orrs	r3, r2
 8006198:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800619a:	4b37      	ldr	r3, [pc, #220]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a36      	ldr	r2, [pc, #216]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061a6:	4b34      	ldr	r3, [pc, #208]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	4b35      	ldr	r3, [pc, #212]	; (8006280 <HAL_RCC_OscConfig+0x740>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061b2:	00d2      	lsls	r2, r2, #3
 80061b4:	4930      	ldr	r1, [pc, #192]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f023 020c 	bic.w	r2, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	492c      	ldr	r1, [pc, #176]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061cc:	4b2a      	ldr	r3, [pc, #168]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f023 0202 	bic.w	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	4927      	ldr	r1, [pc, #156]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061de:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	4a25      	ldr	r2, [pc, #148]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	4a22      	ldr	r2, [pc, #136]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 80061fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006202:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a19      	ldr	r2, [pc, #100]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fb fb61 	bl	80018e0 <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006222:	f7fb fb5d 	bl	80018e0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e066      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006234:	4b10      	ldr	r3, [pc, #64]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x6e2>
 8006240:	e05e      	b.n	8006300 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 8006248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800624c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624e:	f7fb fb47 	bl	80018e0 <HAL_GetTick>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006256:	f7fb fb43 	bl	80018e0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e04c      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCC_OscConfig+0x738>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f0      	bne.n	8006256 <HAL_RCC_OscConfig+0x716>
 8006274:	e044      	b.n	8006300 <HAL_RCC_OscConfig+0x7c0>
 8006276:	bf00      	nop
 8006278:	58024400 	.word	0x58024400
 800627c:	fffffc0c 	.word	0xfffffc0c
 8006280:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006284:	4b21      	ldr	r3, [pc, #132]	; (800630c <HAL_RCC_OscConfig+0x7cc>)
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_OscConfig+0x7cc>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b01      	cmp	r3, #1
 8006296:	d031      	beq.n	80062fc <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f003 0203 	and.w	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d12a      	bne.n	80062fc <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d122      	bne.n	80062fc <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d11a      	bne.n	80062fc <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	0a5b      	lsrs	r3, r3, #9
 80062ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d111      	bne.n	80062fc <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d108      	bne.n	80062fc <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3730      	adds	r7, #48	; 0x30
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400

08006310 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e19c      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006324:	4b8a      	ldr	r3, [pc, #552]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d910      	bls.n	8006354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006332:	4b87      	ldr	r3, [pc, #540]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f023 020f 	bic.w	r2, r3, #15
 800633a:	4985      	ldr	r1, [pc, #532]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b83      	ldr	r3, [pc, #524]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e184      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	4b7b      	ldr	r3, [pc, #492]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800636c:	429a      	cmp	r2, r3
 800636e:	d908      	bls.n	8006382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006370:	4b78      	ldr	r3, [pc, #480]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	4975      	ldr	r1, [pc, #468]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 800637e:	4313      	orrs	r3, r2
 8006380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	4b70      	ldr	r3, [pc, #448]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800639a:	429a      	cmp	r2, r3
 800639c:	d908      	bls.n	80063b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800639e:	4b6d      	ldr	r3, [pc, #436]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	496a      	ldr	r1, [pc, #424]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d010      	beq.n	80063de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	4b64      	ldr	r3, [pc, #400]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d908      	bls.n	80063de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063cc:	4b61      	ldr	r3, [pc, #388]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	495e      	ldr	r1, [pc, #376]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	4b59      	ldr	r3, [pc, #356]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d908      	bls.n	800640c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	4953      	ldr	r1, [pc, #332]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006408:	4313      	orrs	r3, r2
 800640a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	4b4d      	ldr	r3, [pc, #308]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	429a      	cmp	r2, r3
 8006426:	d908      	bls.n	800643a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006428:	4b4a      	ldr	r3, [pc, #296]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f023 020f 	bic.w	r2, r3, #15
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4947      	ldr	r1, [pc, #284]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006436:	4313      	orrs	r3, r2
 8006438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d055      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006446:	4b43      	ldr	r3, [pc, #268]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	4940      	ldr	r1, [pc, #256]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006454:	4313      	orrs	r3, r2
 8006456:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d107      	bne.n	8006470 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006460:	4b3c      	ldr	r3, [pc, #240]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d121      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0f6      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d107      	bne.n	8006488 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006478:	4b36      	ldr	r3, [pc, #216]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d115      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0ea      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d107      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006490:	4b30      	ldr	r3, [pc, #192]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0de      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064a0:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0d6      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b0:	4b28      	ldr	r3, [pc, #160]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f023 0207 	bic.w	r2, r3, #7
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4925      	ldr	r1, [pc, #148]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c2:	f7fb fa0d 	bl	80018e0 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c8:	e00a      	b.n	80064e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ca:	f7fb fa09 	bl	80018e0 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0be      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e0:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d1eb      	bne.n	80064ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d010      	beq.n	8006520 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	429a      	cmp	r2, r3
 800650c:	d208      	bcs.n	8006520 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800650e:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f023 020f 	bic.w	r2, r3, #15
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	490e      	ldr	r1, [pc, #56]	; (8006554 <HAL_RCC_ClockConfig+0x244>)
 800651c:	4313      	orrs	r3, r2
 800651e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d214      	bcs.n	8006558 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 020f 	bic.w	r2, r3, #15
 8006536:	4906      	ldr	r1, [pc, #24]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <HAL_RCC_ClockConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d005      	beq.n	8006558 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e086      	b.n	800665e <HAL_RCC_ClockConfig+0x34e>
 8006550:	52002000 	.word	0x52002000
 8006554:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006570:	429a      	cmp	r2, r3
 8006572:	d208      	bcs.n	8006586 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006574:	4b3c      	ldr	r3, [pc, #240]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4939      	ldr	r1, [pc, #228]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 8006582:	4313      	orrs	r3, r2
 8006584:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	4b34      	ldr	r3, [pc, #208]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800659e:	429a      	cmp	r2, r3
 80065a0:	d208      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065a2:	4b31      	ldr	r3, [pc, #196]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	492e      	ldr	r1, [pc, #184]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d010      	beq.n	80065e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	4b28      	ldr	r3, [pc, #160]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d208      	bcs.n	80065e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	4922      	ldr	r1, [pc, #136]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69da      	ldr	r2, [r3, #28]
 80065f2:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d208      	bcs.n	8006610 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065fe:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	4917      	ldr	r1, [pc, #92]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 800660c:	4313      	orrs	r3, r2
 800660e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006610:	f000 f834 	bl	800667c <HAL_RCC_GetSysClockFreq>
 8006614:	4601      	mov	r1, r0
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	4a12      	ldr	r2, [pc, #72]	; (800666c <HAL_RCC_ClockConfig+0x35c>)
 8006622:	5cd3      	ldrb	r3, [r2, r3]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	fa21 f303 	lsr.w	r3, r1, r3
 800662c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <HAL_RCC_ClockConfig+0x358>)
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	4a0d      	ldr	r2, [pc, #52]	; (800666c <HAL_RCC_ClockConfig+0x35c>)
 8006638:	5cd3      	ldrb	r3, [r2, r3]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_RCC_ClockConfig+0x360>)
 8006646:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006648:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <HAL_RCC_ClockConfig+0x364>)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <HAL_RCC_ClockConfig+0x368>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fb f8fa 	bl	800184c <HAL_InitTick>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	58024400 	.word	0x58024400
 800666c:	0800b5d0 	.word	0x0800b5d0
 8006670:	24000008 	.word	0x24000008
 8006674:	24000004 	.word	0x24000004
 8006678:	2400000c 	.word	0x2400000c

0800667c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800667c:	b480      	push	{r7}
 800667e:	b089      	sub	sp, #36	; 0x24
 8006680:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006682:	4baf      	ldr	r3, [pc, #700]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800668a:	2b18      	cmp	r3, #24
 800668c:	f200 814e 	bhi.w	800692c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066fd 	.word	0x080066fd
 800669c:	0800692d 	.word	0x0800692d
 80066a0:	0800692d 	.word	0x0800692d
 80066a4:	0800692d 	.word	0x0800692d
 80066a8:	0800692d 	.word	0x0800692d
 80066ac:	0800692d 	.word	0x0800692d
 80066b0:	0800692d 	.word	0x0800692d
 80066b4:	0800692d 	.word	0x0800692d
 80066b8:	08006723 	.word	0x08006723
 80066bc:	0800692d 	.word	0x0800692d
 80066c0:	0800692d 	.word	0x0800692d
 80066c4:	0800692d 	.word	0x0800692d
 80066c8:	0800692d 	.word	0x0800692d
 80066cc:	0800692d 	.word	0x0800692d
 80066d0:	0800692d 	.word	0x0800692d
 80066d4:	0800692d 	.word	0x0800692d
 80066d8:	08006729 	.word	0x08006729
 80066dc:	0800692d 	.word	0x0800692d
 80066e0:	0800692d 	.word	0x0800692d
 80066e4:	0800692d 	.word	0x0800692d
 80066e8:	0800692d 	.word	0x0800692d
 80066ec:	0800692d 	.word	0x0800692d
 80066f0:	0800692d 	.word	0x0800692d
 80066f4:	0800692d 	.word	0x0800692d
 80066f8:	0800672f 	.word	0x0800672f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066fc:	4b90      	ldr	r3, [pc, #576]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006708:	4b8d      	ldr	r3, [pc, #564]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	08db      	lsrs	r3, r3, #3
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	4a8c      	ldr	r2, [pc, #560]	; (8006944 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006714:	fa22 f303 	lsr.w	r3, r2, r3
 8006718:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800671a:	e10a      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800671c:	4b89      	ldr	r3, [pc, #548]	; (8006944 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800671e:	61bb      	str	r3, [r7, #24]
    break;
 8006720:	e107      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006722:	4b89      	ldr	r3, [pc, #548]	; (8006948 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006724:	61bb      	str	r3, [r7, #24]
    break;
 8006726:	e104      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006728:	4b88      	ldr	r3, [pc, #544]	; (800694c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800672a:	61bb      	str	r3, [r7, #24]
    break;
 800672c:	e101      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800672e:	4b84      	ldr	r3, [pc, #528]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006738:	4b81      	ldr	r3, [pc, #516]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	091b      	lsrs	r3, r3, #4
 800673e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006742:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006744:	4b7e      	ldr	r3, [pc, #504]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800674e:	4b7c      	ldr	r3, [pc, #496]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	08db      	lsrs	r3, r3, #3
 8006754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	fb02 f303 	mul.w	r3, r2, r3
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80da 	beq.w	8006926 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d05a      	beq.n	800682e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006778:	2b01      	cmp	r3, #1
 800677a:	d302      	bcc.n	8006782 <HAL_RCC_GetSysClockFreq+0x106>
 800677c:	2b02      	cmp	r3, #2
 800677e:	d078      	beq.n	8006872 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006780:	e099      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006782:	4b6f      	ldr	r3, [pc, #444]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d02d      	beq.n	80067ea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800678e:	4b6c      	ldr	r3, [pc, #432]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	08db      	lsrs	r3, r3, #3
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	4a6a      	ldr	r2, [pc, #424]	; (8006944 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b8:	4b61      	ldr	r3, [pc, #388]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80067cc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006950 <HAL_RCC_GetSysClockFreq+0x2d4>
 80067d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80067e8:	e087      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006954 <HAL_RCC_GetSysClockFreq+0x2d8>
 80067f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fc:	4b50      	ldr	r3, [pc, #320]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006810:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006950 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006828:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800682c:	e065      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006838:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006958 <HAL_RCC_GetSysClockFreq+0x2dc>
 800683c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006850:	ed97 6a02 	vldr	s12, [r7, #8]
 8006854:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006950 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006870:	e043      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800695c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006884:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	ed97 6a02 	vldr	s12, [r7, #8]
 8006898:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006950 <HAL_RCC_GetSysClockFreq+0x2d4>
 800689c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068b4:	e021      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006958 <HAL_RCC_GetSysClockFreq+0x2dc>
 80068c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80068dc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006950 <HAL_RCC_GetSysClockFreq+0x2d4>
 80068e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068f8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80068fa:	4b11      	ldr	r3, [pc, #68]	; (8006940 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	0a5b      	lsrs	r3, r3, #9
 8006900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006904:	3301      	adds	r3, #1
 8006906:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006912:	edd7 6a07 	vldr	s13, [r7, #28]
 8006916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691e:	ee17 3a90 	vmov	r3, s15
 8006922:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006924:	e005      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	61bb      	str	r3, [r7, #24]
    break;
 800692a:	e002      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800692e:	61bb      	str	r3, [r7, #24]
    break;
 8006930:	bf00      	nop
  }

  return sysclockfreq;
 8006932:	69bb      	ldr	r3, [r7, #24]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3724      	adds	r7, #36	; 0x24
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	58024400 	.word	0x58024400
 8006944:	03d09000 	.word	0x03d09000
 8006948:	003d0900 	.word	0x003d0900
 800694c:	007a1200 	.word	0x007a1200
 8006950:	46000000 	.word	0x46000000
 8006954:	4c742400 	.word	0x4c742400
 8006958:	4a742400 	.word	0x4a742400
 800695c:	4af42400 	.word	0x4af42400

08006960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006966:	f7ff fe89 	bl	800667c <HAL_RCC_GetSysClockFreq>
 800696a:	4601      	mov	r1, r0
 800696c:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	0a1b      	lsrs	r3, r3, #8
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	4a0f      	ldr	r2, [pc, #60]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006978:	5cd3      	ldrb	r3, [r2, r3]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	fa21 f303 	lsr.w	r3, r1, r3
 8006982:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006984:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800698e:	5cd3      	ldrb	r3, [r2, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	4a07      	ldr	r2, [pc, #28]	; (80069b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800699c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800699e:	4a07      	ldr	r2, [pc, #28]	; (80069bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	58024400 	.word	0x58024400
 80069b4:	0800b5d0 	.word	0x0800b5d0
 80069b8:	24000008 	.word	0x24000008
 80069bc:	24000004 	.word	0x24000004

080069c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80069c4:	f7ff ffcc 	bl	8006960 <HAL_RCC_GetHCLKFreq>
 80069c8:	4601      	mov	r1, r0
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4a04      	ldr	r2, [pc, #16]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069d6:	5cd3      	ldrb	r3, [r2, r3]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	58024400 	.word	0x58024400
 80069e8:	0800b5d0 	.word	0x0800b5d0

080069ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80069f0:	f7ff ffb6 	bl	8006960 <HAL_RCC_GetHCLKFreq>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a02:	5cd3      	ldrb	r3, [r2, r3]
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	58024400 	.word	0x58024400
 8006a14:	0800b5d0 	.word	0x0800b5d0

08006a18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a20:	2300      	movs	r3, #0
 8006a22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a24:	2300      	movs	r3, #0
 8006a26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d03d      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3c:	d013      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a42:	d802      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006a48:	e01f      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a4e:	d013      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a54:	d01c      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006a56:	e018      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4bad      	ldr	r3, [pc, #692]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4aac      	ldr	r2, [pc, #688]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a64:	e015      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fca7 	bl	80083c0 <RCCEx_PLL2_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a76:	e00c      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fd50 	bl	8008524 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a88:	e003      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a8e:	e000      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a98:	4b9d      	ldr	r3, [pc, #628]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa4:	499a      	ldr	r1, [pc, #616]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8006aaa:	e001      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d03d      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d826      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006ae1 	.word	0x08006ae1
 8006ad0:	08006aef 	.word	0x08006aef
 8006ad4:	08006b01 	.word	0x08006b01
 8006ad8:	08006b19 	.word	0x08006b19
 8006adc:	08006b19 	.word	0x08006b19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae0:	4b8b      	ldr	r3, [pc, #556]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	4a8a      	ldr	r2, [pc, #552]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aec:	e015      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 fc63 	bl	80083c0 <RCCEx_PLL2_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fd0c 	bl	8008524 <RCCEx_PLL3_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b10:	e003      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
      break;
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d109      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b20:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	f023 0207 	bic.w	r2, r3, #7
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	4978      	ldr	r1, [pc, #480]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	650b      	str	r3, [r1, #80]	; 0x50
 8006b32:	e001      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d043      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d01f      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d804      	bhi.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d010      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006b58:	e021      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d021      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006b60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006b64:	d020      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006b66:	2bc0      	cmp	r3, #192	; 0xc0
 8006b68:	d020      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006b6a:	e018      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b78:	e019      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	2100      	movs	r1, #0
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fc1d 	bl	80083c0 <RCCEx_PLL2_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b8a:	e010      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fcc6 	bl	8008524 <RCCEx_PLL3_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b9c:	e007      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e002      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006bb4:	4b56      	ldr	r3, [pc, #344]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	4953      	ldr	r1, [pc, #332]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8006bc6:	e001      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d047      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d022      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be6:	d805      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf0:	d011      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006bf2:	e022      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf8:	d022      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006bfa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006bfe:	d021      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006c00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c04:	d020      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006c06:	e018      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c08:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	4a40      	ldr	r2, [pc, #256]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006c14:	e019      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fbcf 	bl	80083c0 <RCCEx_PLL2_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006c26:	e010      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3324      	adds	r3, #36	; 0x24
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fc78 	bl	8008524 <RCCEx_PLL3_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006c38:	e007      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3e:	e004      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006c40:	bf00      	nop
 8006c42:	e002      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006c44:	bf00      	nop
 8006c46:	e000      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006c50:	4b2f      	ldr	r3, [pc, #188]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5c:	492c      	ldr	r1, [pc, #176]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	650b      	str	r3, [r1, #80]	; 0x50
 8006c62:	e001      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d032      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d009      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d802      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d018      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006c84:	e014      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d009      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c8a:	2b30      	cmp	r3, #48	; 0x30
 8006c8c:	d015      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006c8e:	e00f      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b1f      	ldr	r3, [pc, #124]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c9c:	e00e      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2102      	movs	r1, #2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 fb8b 	bl	80083c0 <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006cae:	e005      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb4:	e002      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006cb6:	bf00      	nop
 8006cb8:	e000      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cce:	4910      	ldr	r1, [pc, #64]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cd4:	e001      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d044      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cee:	d021      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf4:	d805      	bhi.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfe:	d010      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006d00:	e021      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006d02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d06:	d021      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d0c:	d020      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006d0e:	e01a      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006d10:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d14:	4ba6      	ldr	r3, [pc, #664]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4aa5      	ldr	r2, [pc, #660]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d20:	e017      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 fb49 	bl	80083c0 <RCCEx_PLL2_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d32:	e00e      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fbf2 	bl	8008524 <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d44:	e005      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4a:	e002      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d58:	4b95      	ldr	r3, [pc, #596]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d64:	4992      	ldr	r1, [pc, #584]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	650b      	str	r3, [r1, #80]	; 0x50
 8006d6a:	e001      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d042      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d84:	d01b      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8a:	d805      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d022      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d94:	d00a      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006d96:	e01b      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d9c:	d01d      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da2:	d01c      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006da4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006da8:	d01b      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006daa:	e011      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	2101      	movs	r1, #1
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fb04 	bl	80083c0 <RCCEx_PLL2_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006dbc:	e012      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3324      	adds	r3, #36	; 0x24
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fbad 	bl	8008524 <RCCEx_PLL3_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006dce:	e009      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dea:	4b71      	ldr	r3, [pc, #452]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df6:	496e      	ldr	r1, [pc, #440]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	650b      	str	r3, [r1, #80]	; 0x50
 8006dfc:	e001      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d049      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e18:	d02a      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006e1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e1e:	d808      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e24:	d00f      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2a:	d015      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d021      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006e30:	e01b      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e36:	d01f      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006e38:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006e3c:	d01e      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d01d      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006e44:	e011      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fab7 	bl	80083c0 <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e56:	e014      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3324      	adds	r3, #36	; 0x24
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 fb60 	bl	8008524 <RCCEx_PLL3_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e68:	e00b      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6e:	e008      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e70:	bf00      	nop
 8006e72:	e006      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e74:	bf00      	nop
 8006e76:	e004      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e88:	4b49      	ldr	r3, [pc, #292]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e96:	4946      	ldr	r1, [pc, #280]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e9c:	e001      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d02d      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb6:	d005      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d013      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ec2:	e00f      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4b3a      	ldr	r3, [pc, #232]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a39      	ldr	r2, [pc, #228]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ed0:	e00c      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fa71 	bl	80083c0 <RCCEx_PLL2_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee8:	e000      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ef2:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efe:	492c      	ldr	r1, [pc, #176]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	650b      	str	r3, [r1, #80]	; 0x50
 8006f04:	e001      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d031      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d81a      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f35 	.word	0x08006f35
 8006f2c:	08006f43 	.word	0x08006f43
 8006f30:	08006f5b 	.word	0x08006f5b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f34:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f40:	e00c      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3304      	adds	r3, #4
 8006f46:	2102      	movs	r1, #2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fa39 	bl	80083c0 <RCCEx_PLL2_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f52:	e003      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	e000      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	f023 0203 	bic.w	r2, r3, #3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	4910      	ldr	r1, [pc, #64]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f74:	e001      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 808a 	beq.w	800709c <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f94:	f7fa fca4 	bl	80018e0 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f9a:	e00d      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9c:	f7fa fca0 	bl	80018e0 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	; 0x64
 8006fa8:	d906      	bls.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	75fb      	strb	r3, [r7, #23]
        break;
 8006fae:	e009      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb8:	4bba      	ldr	r3, [pc, #744]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0eb      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d166      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fca:	4bb7      	ldr	r3, [pc, #732]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fd4:	4053      	eors	r3, r2
 8006fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d013      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fde:	4bb2      	ldr	r3, [pc, #712]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe8:	4baf      	ldr	r3, [pc, #700]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fec:	4aae      	ldr	r2, [pc, #696]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff4:	4bac      	ldr	r3, [pc, #688]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	4aab      	ldr	r2, [pc, #684]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007000:	4aa9      	ldr	r2, [pc, #676]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800700c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007010:	d115      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fa fc65 	bl	80018e0 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007018:	e00b      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fa fc61 	bl	80018e0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	; 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d902      	bls.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	75fb      	strb	r3, [r7, #23]
            break;
 8007030:	e005      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007032:	4b9d      	ldr	r3, [pc, #628]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0ed      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d126      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800704a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007052:	d10d      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8007054:	4b94      	ldr	r3, [pc, #592]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007062:	0919      	lsrs	r1, r3, #4
 8007064:	4b91      	ldr	r3, [pc, #580]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007066:	400b      	ands	r3, r1
 8007068:	498f      	ldr	r1, [pc, #572]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800706a:	4313      	orrs	r3, r2
 800706c:	610b      	str	r3, [r1, #16]
 800706e:	e005      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007070:	4b8d      	ldr	r3, [pc, #564]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	4a8c      	ldr	r2, [pc, #560]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800707a:	6113      	str	r3, [r2, #16]
 800707c:	4b8a      	ldr	r3, [pc, #552]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800707e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800708a:	4987      	ldr	r1, [pc, #540]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800708c:	4313      	orrs	r3, r2
 800708e:	670b      	str	r3, [r1, #112]	; 0x70
 8007090:	e004      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	75bb      	strb	r3, [r7, #22]
 8007096:	e001      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d07f      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ae:	2b28      	cmp	r3, #40	; 0x28
 80070b0:	d866      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	08007187 	.word	0x08007187
 80070bc:	08007181 	.word	0x08007181
 80070c0:	08007181 	.word	0x08007181
 80070c4:	08007181 	.word	0x08007181
 80070c8:	08007181 	.word	0x08007181
 80070cc:	08007181 	.word	0x08007181
 80070d0:	08007181 	.word	0x08007181
 80070d4:	08007181 	.word	0x08007181
 80070d8:	0800715d 	.word	0x0800715d
 80070dc:	08007181 	.word	0x08007181
 80070e0:	08007181 	.word	0x08007181
 80070e4:	08007181 	.word	0x08007181
 80070e8:	08007181 	.word	0x08007181
 80070ec:	08007181 	.word	0x08007181
 80070f0:	08007181 	.word	0x08007181
 80070f4:	08007181 	.word	0x08007181
 80070f8:	0800716f 	.word	0x0800716f
 80070fc:	08007181 	.word	0x08007181
 8007100:	08007181 	.word	0x08007181
 8007104:	08007181 	.word	0x08007181
 8007108:	08007181 	.word	0x08007181
 800710c:	08007181 	.word	0x08007181
 8007110:	08007181 	.word	0x08007181
 8007114:	08007181 	.word	0x08007181
 8007118:	08007187 	.word	0x08007187
 800711c:	08007181 	.word	0x08007181
 8007120:	08007181 	.word	0x08007181
 8007124:	08007181 	.word	0x08007181
 8007128:	08007181 	.word	0x08007181
 800712c:	08007181 	.word	0x08007181
 8007130:	08007181 	.word	0x08007181
 8007134:	08007181 	.word	0x08007181
 8007138:	08007187 	.word	0x08007187
 800713c:	08007181 	.word	0x08007181
 8007140:	08007181 	.word	0x08007181
 8007144:	08007181 	.word	0x08007181
 8007148:	08007181 	.word	0x08007181
 800714c:	08007181 	.word	0x08007181
 8007150:	08007181 	.word	0x08007181
 8007154:	08007181 	.word	0x08007181
 8007158:	08007187 	.word	0x08007187
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	2101      	movs	r1, #1
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f92c 	bl	80083c0 <RCCEx_PLL2_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800716c:	e00c      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3324      	adds	r3, #36	; 0x24
 8007172:	2101      	movs	r1, #1
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f9d5 	bl	8008524 <RCCEx_PLL3_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800717e:	e003      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	e000      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8007186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800718e:	4b46      	ldr	r3, [pc, #280]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719c:	4942      	ldr	r1, [pc, #264]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	654b      	str	r3, [r1, #84]	; 0x54
 80071a2:	e001      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d038      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b8:	2b05      	cmp	r3, #5
 80071ba:	d821      	bhi.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	08007207 	.word	0x08007207
 80071c8:	080071dd 	.word	0x080071dd
 80071cc:	080071ef 	.word	0x080071ef
 80071d0:	08007207 	.word	0x08007207
 80071d4:	08007207 	.word	0x08007207
 80071d8:	08007207 	.word	0x08007207
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3304      	adds	r3, #4
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 f8ec 	bl	80083c0 <RCCEx_PLL2_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071ec:	e00c      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3324      	adds	r3, #36	; 0x24
 80071f2:	2101      	movs	r1, #1
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f995 	bl	8008524 <RCCEx_PLL3_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071fe:	e003      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
      break;
 8007204:	e000      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8007206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800720e:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007212:	f023 0207 	bic.w	r2, r3, #7
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721a:	4923      	ldr	r1, [pc, #140]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800721c:	4313      	orrs	r3, r2
 800721e:	654b      	str	r3, [r1, #84]	; 0x54
 8007220:	e001      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d040      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007238:	2b05      	cmp	r3, #5
 800723a:	d821      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x868>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007287 	.word	0x08007287
 8007248:	0800725d 	.word	0x0800725d
 800724c:	0800726f 	.word	0x0800726f
 8007250:	08007287 	.word	0x08007287
 8007254:	08007287 	.word	0x08007287
 8007258:	08007287 	.word	0x08007287
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3304      	adds	r3, #4
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f001 f8ac 	bl	80083c0 <RCCEx_PLL2_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800726c:	e00c      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3324      	adds	r3, #36	; 0x24
 8007272:	2101      	movs	r1, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f955 	bl	8008524 <RCCEx_PLL3_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
      break;
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8007286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d110      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	f023 0207 	bic.w	r2, r3, #7
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800729c:	4902      	ldr	r1, [pc, #8]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	658b      	str	r3, [r1, #88]	; 0x58
 80072a2:	e007      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80072a4:	58024800 	.word	0x58024800
 80072a8:	58024400 	.word	0x58024400
 80072ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d044      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ca:	d01b      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d0:	d805      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d022      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x904>
 80072d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072da:	d00a      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80072dc:	e01b      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e2:	d01d      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80072e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072e8:	d01c      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 80072ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ee:	d01b      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80072f0:	e011      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3304      	adds	r3, #4
 80072f6:	2100      	movs	r1, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 f861 	bl	80083c0 <RCCEx_PLL2_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007302:	e012      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3324      	adds	r3, #36	; 0x24
 8007308:	2102      	movs	r1, #2
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f90a 	bl	8008524 <RCCEx_PLL3_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007314:	e009      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
      break;
 800731a:	e006      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 800731c:	bf00      	nop
 800731e:	e004      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007320:	bf00      	nop
 8007322:	e002      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007324:	bf00      	nop
 8007326:	e000      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007330:	4bb3      	ldr	r3, [pc, #716]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007334:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800733e:	49b0      	ldr	r1, [pc, #704]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007340:	4313      	orrs	r3, r2
 8007342:	654b      	str	r3, [r1, #84]	; 0x54
 8007344:	e001      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d044      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007360:	d01b      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007366:	d805      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d022      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 800736c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007370:	d00a      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8007372:	e01b      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x994>
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007378:	d01d      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800737a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800737e:	d01c      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007380:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007384:	d01b      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8007386:	e011      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f001 f816 	bl	80083c0 <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007398:	e012      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3324      	adds	r3, #36	; 0x24
 800739e:	2102      	movs	r1, #2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f8bf 	bl	8008524 <RCCEx_PLL3_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073aa:	e009      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
      break;
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80073b2:	bf00      	nop
 80073b4:	e004      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80073b6:	bf00      	nop
 80073b8:	e002      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80073ba:	bf00      	nop
 80073bc:	e000      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80073be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073c6:	4b8e      	ldr	r3, [pc, #568]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073d4:	498a      	ldr	r1, [pc, #552]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	658b      	str	r3, [r1, #88]	; 0x58
 80073da:	e001      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d044      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073f6:	d01b      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 80073f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073fc:	d805      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d022      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007406:	d00a      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007408:	e01b      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800740a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740e:	d01d      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007414:	d01c      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8007416:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800741a:	d01b      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800741c:	e011      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f000 ffcb 	bl	80083c0 <RCCEx_PLL2_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800742e:	e012      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3324      	adds	r3, #36	; 0x24
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f874 	bl	8008524 <RCCEx_PLL3_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007440:	e009      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
      break;
 8007446:	e006      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007448:	bf00      	nop
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800744c:	bf00      	nop
 800744e:	e002      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800745c:	4b68      	ldr	r3, [pc, #416]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800746a:	4965      	ldr	r1, [pc, #404]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800746c:	4313      	orrs	r3, r2
 800746e:	658b      	str	r3, [r1, #88]	; 0x58
 8007470:	e001      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01a      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748c:	d10a      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3324      	adds	r3, #36	; 0x24
 8007492:	2102      	movs	r1, #2
 8007494:	4618      	mov	r0, r3
 8007496:	f001 f845 	bl	8008524 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074a4:	4b56      	ldr	r3, [pc, #344]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	4953      	ldr	r1, [pc, #332]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ce:	d10a      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3324      	adds	r3, #36	; 0x24
 80074d4:	2102      	movs	r1, #2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 f824 	bl	8008524 <RCCEx_PLL3_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074e6:	4b46      	ldr	r3, [pc, #280]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f4:	4942      	ldr	r1, [pc, #264]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d030      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d00d      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8007512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007516:	d016      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d111      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	2100      	movs	r1, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f000 ff4c 	bl	80083c0 <RCCEx_PLL2_Config>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800752c:	e00c      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3324      	adds	r3, #36	; 0x24
 8007532:	2102      	movs	r1, #2
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fff5 	bl	8008524 <RCCEx_PLL3_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800753e:	e003      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	75fb      	strb	r3, [r7, #23]
      break;
 8007544:	e000      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800754e:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800755c:	4928      	ldr	r1, [pc, #160]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800755e:	4313      	orrs	r3, r2
 8007560:	658b      	str	r3, [r1, #88]	; 0x58
 8007562:	e001      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d02f      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800757a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800757e:	d00c      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007584:	d015      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8007586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758a:	d10f      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758c:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007596:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007598:	e00c      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3324      	adds	r3, #36	; 0x24
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 ffbf 	bl	8008524 <RCCEx_PLL3_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80075aa:	e003      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	e000      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 80075b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075ba:	4b11      	ldr	r3, [pc, #68]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c8:	490d      	ldr	r1, [pc, #52]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	654b      	str	r3, [r1, #84]	; 0x54
 80075ce:	e001      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d02c      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d00a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80075ee:	e012      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f0:	4b03      	ldr	r3, [pc, #12]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a02      	ldr	r2, [pc, #8]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80075f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075fc:	e00e      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 80075fe:	bf00      	nop
 8007600:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	2102      	movs	r1, #2
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fed8 	bl	80083c0 <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007614:	e002      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
      break;
 800761a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007622:	4b56      	ldr	r3, [pc, #344]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762e:	4953      	ldr	r1, [pc, #332]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007630:	4313      	orrs	r3, r2
 8007632:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007634:	e001      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3324      	adds	r3, #36	; 0x24
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f000 ff69 	bl	8008524 <RCCEx_PLL3_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d031      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007672:	d00c      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007678:	d802      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d011      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 800767e:	e00d      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007684:	d00f      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 8007686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768a:	d00e      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800768c:	e006      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800768e:	4b3b      	ldr	r3, [pc, #236]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	4a3a      	ldr	r2, [pc, #232]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007698:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800769a:	e007      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	75fb      	strb	r3, [r7, #23]
      break;
 80076a0:	e004      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80076a2:	bf00      	nop
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80076aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076b2:	4b32      	ldr	r3, [pc, #200]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c0:	492e      	ldr	r1, [pc, #184]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	654b      	str	r3, [r1, #84]	; 0x54
 80076c6:	e001      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076d8:	4b28      	ldr	r3, [pc, #160]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e4:	4925      	ldr	r1, [pc, #148]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d008      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076f6:	4b21      	ldr	r3, [pc, #132]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007702:	491e      	ldr	r1, [pc, #120]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007704:	4313      	orrs	r3, r2
 8007706:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007714:	4b19      	ldr	r3, [pc, #100]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007718:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	4916      	ldr	r1, [pc, #88]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007722:	4313      	orrs	r3, r2
 8007724:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00d      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	4a11      	ldr	r2, [pc, #68]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800773c:	6113      	str	r3, [r2, #16]
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007748:	490c      	ldr	r1, [pc, #48]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800774a:	4313      	orrs	r3, r2
 800774c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	da08      	bge.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	4906      	ldr	r1, [pc, #24]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007764:	4313      	orrs	r3, r2
 8007766:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007768:	7dbb      	ldrb	r3, [r7, #22]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	e000      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	58024400 	.word	0x58024400

08007780 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b090      	sub	sp, #64	; 0x40
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778e:	d150      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007790:	4ba1      	ldr	r3, [pc, #644]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b04      	cmp	r3, #4
 800779e:	d844      	bhi.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077bd 	.word	0x080077bd
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	08007825 	.word	0x08007825
 80077b8:	080077ed 	.word	0x080077ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fcb1 	bl	8008128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ca:	e1ef      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077cc:	f107 0318 	add.w	r3, r7, #24
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fa11 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077da:	e1e7      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077dc:	f107 030c 	add.w	r3, r7, #12
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fb55 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ea:	e1df      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077ec:	4b8a      	ldr	r3, [pc, #552]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80077fc:	4b87      	ldr	r3, [pc, #540]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007800:	e1d4      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007808:	d102      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800780a:	4b85      	ldr	r3, [pc, #532]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780e:	e1cd      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007816:	d102      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007818:	4b82      	ldr	r3, [pc, #520]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781c:	e1c6      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007822:	e1c3      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007824:	4b80      	ldr	r3, [pc, #512]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007828:	e1c0      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800782e:	bf00      	nop
 8007830:	e1bc      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007838:	d14f      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800783a:	4b77      	ldr	r3, [pc, #476]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007842:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d01c      	beq.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d804      	bhi.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d00e      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007856:	e03c      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007858:	2bc0      	cmp	r3, #192	; 0xc0
 800785a:	d037      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800785c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007860:	d018      	beq.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007862:	e036      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fc5d 	bl	8008128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007872:	e19b      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007874:	f107 0318 	add.w	r3, r7, #24
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f9bd 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007882:	e193      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fb01 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007892:	e18b      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007894:	4b60      	ldr	r3, [pc, #384]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800789c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078a4:	4b5d      	ldr	r3, [pc, #372]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80078a8:	e180      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b0:	d102      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80078b2:	4b5b      	ldr	r3, [pc, #364]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b6:	e179      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80078c0:	4b58      	ldr	r3, [pc, #352]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c4:	e172      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ca:	e16f      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078cc:	4b56      	ldr	r3, [pc, #344]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80078ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d0:	e16c      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d6:	bf00      	nop
 80078d8:	e168      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d153      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80078e2:	4b4d      	ldr	r3, [pc, #308]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80078ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f2:	d01f      	beq.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80078f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f8:	d805      	bhi.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80078fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007902:	d00f      	beq.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007904:	e03d      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007906:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800790a:	d037      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800790c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007910:	d018      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007912:	e036      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fc05 	bl	8008128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007922:	e143      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007924:	f107 0318 	add.w	r3, r7, #24
 8007928:	4618      	mov	r0, r3
 800792a:	f000 f965 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007932:	e13b      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f000 faa9 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007942:	e133      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007944:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800794c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8007958:	e128      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007960:	d102      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007962:	4b2f      	ldr	r3, [pc, #188]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007966:	e121      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800796e:	d102      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007970:	4b2c      	ldr	r3, [pc, #176]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007974:	e11a      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e117      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800797c:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007980:	e114      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007986:	bf00      	nop
 8007988:	e110      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007990:	d15d      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007992:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800799a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a2:	d01f      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80079a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a8:	d805      	bhi.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80079ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b2:	d00f      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80079b4:	e047      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80079b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079ba:	d041      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80079bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079c0:	d018      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80079c2:	e040      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fbad 	bl	8008128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d2:	e0eb      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d4:	f107 0318 	add.w	r3, r7, #24
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 f90d 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e2:	e0e3      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fa51 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f2:	e0db      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079f4:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a08:	e0d0      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a10:	d10c      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007a12:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a16:	e0c9      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	03d09000 	.word	0x03d09000
 8007a20:	003d0900 	.word	0x003d0900
 8007a24:	007a1200 	.word	0x007a1200
 8007a28:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a32:	d102      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007a34:	4b60      	ldr	r3, [pc, #384]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a38:	e0b8      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a3e:	e0b5      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a40:	4b5e      	ldr	r3, [pc, #376]	; (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a44:	e0b2      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a4a:	bf00      	nop
 8007a4c:	e0ae      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a54:	d13d      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007a56:	4b5a      	ldr	r3, [pc, #360]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a66:	d00c      	beq.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a6c:	d011      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d12b      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a72:	f107 0318 	add.w	r3, r7, #24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f8be 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a80:	e094      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a82:	f107 030c 	add.w	r3, r7, #12
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fa02 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a90:	e08c      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a92:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007aa2:	4b48      	ldr	r3, [pc, #288]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007aa6:	e081      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aae:	d102      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 8007ab0:	4b45      	ldr	r3, [pc, #276]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab4:	e07a      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007abc:	d102      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 8007abe:	4b3e      	ldr	r3, [pc, #248]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac2:	e073      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac8:	e070      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ace:	bf00      	nop
 8007ad0:	e06c      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad8:	d11f      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007ada:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aee:	d008      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8007af0:	e00f      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fb16 	bl	8008128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b00:	e054      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b02:	f107 0318 	add.w	r3, r7, #24
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f876 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b10:	e04c      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b16:	bf00      	nop
 8007b18:	e048      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b20:	d142      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b26:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007b2a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b32:	d029      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007b34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b38:	d808      	bhi.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b3e:	d013      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b44:	d018      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007b4a:	e029      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b50:	d020      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007b52:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007b56:	d020      	beq.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5c:	d017      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007b5e:	e01f      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007b60:	f000 f834 	bl	8007bcc <HAL_RCCEx_GetD3PCLK1Freq>
 8007b64:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007b66:	e021      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b68:	f107 0318 	add.w	r3, r7, #24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 f843 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b76:	e019      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f987 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b86:	e011      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b8c:	e00e      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b92:	e00b      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007b94:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b98:	e008      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b9a:	4b08      	ldr	r3, [pc, #32]	; (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9e:	e005      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba4:	bf00      	nop
 8007ba6:	e001      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3740      	adds	r7, #64	; 0x40
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	007a1200 	.word	0x007a1200
 8007bbc:	00bb8000 	.word	0x00bb8000
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	003d0900 	.word	0x003d0900

08007bcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007bd0:	f7fe fec6 	bl	8006960 <HAL_RCC_GetHCLKFreq>
 8007bd4:	4601      	mov	r1, r0
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	091b      	lsrs	r3, r3, #4
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007be2:	5cd3      	ldrb	r3, [r2, r3]
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	0800b5d0 	.word	0x0800b5d0

08007bf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b089      	sub	sp, #36	; 0x24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c00:	4b9d      	ldr	r3, [pc, #628]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	f003 0303 	and.w	r3, r3, #3
 8007c08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007c0a:	4b9b      	ldr	r3, [pc, #620]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	0b1b      	lsrs	r3, r3, #12
 8007c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c16:	4b98      	ldr	r3, [pc, #608]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	091b      	lsrs	r3, r3, #4
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c22:	4b95      	ldr	r3, [pc, #596]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c26:	08db      	lsrs	r3, r3, #3
 8007c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	fb02 f303 	mul.w	r3, r2, r3
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 810a 	beq.w	8007e5a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d05a      	beq.n	8007d02 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d302      	bcc.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d078      	beq.n	8007d46 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007c54:	e099      	b.n	8007d8a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c56:	4b88      	ldr	r3, [pc, #544]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d02d      	beq.n	8007cbe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c62:	4b85      	ldr	r3, [pc, #532]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	08db      	lsrs	r3, r3, #3
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	4a83      	ldr	r2, [pc, #524]	; (8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8c:	4b7a      	ldr	r3, [pc, #488]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007cbc:	e087      	b.n	8007dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	ee07 3a90 	vmov	s15, r3
 8007cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd0:	4b69      	ldr	r3, [pc, #420]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd8:	ee07 3a90 	vmov	s15, r3
 8007cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d00:	e065      	b.n	8007dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	ee07 3a90 	vmov	s15, r3
 8007d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d14:	4b58      	ldr	r3, [pc, #352]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d28:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d44:	e043      	b.n	8007dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	ee07 3a90 	vmov	s15, r3
 8007d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d58:	4b47      	ldr	r3, [pc, #284]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d88:	e021      	b.n	8007dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d94:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9c:	4b36      	ldr	r3, [pc, #216]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dcc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007dce:	4b2a      	ldr	r3, [pc, #168]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	0a5b      	lsrs	r3, r3, #9
 8007dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007de4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df4:	ee17 2a90 	vmov	r2, s15
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007dfc:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	0c1b      	lsrs	r3, r3, #16
 8007e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e22:	ee17 2a90 	vmov	r2, s15
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007e2a:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	0e1b      	lsrs	r3, r3, #24
 8007e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e50:	ee17 2a90 	vmov	r2, s15
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e58:	e008      	b.n	8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	3724      	adds	r7, #36	; 0x24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	03d09000 	.word	0x03d09000
 8007e80:	46000000 	.word	0x46000000
 8007e84:	4c742400 	.word	0x4c742400
 8007e88:	4a742400 	.word	0x4a742400
 8007e8c:	4af42400 	.word	0x4af42400

08007e90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e98:	4b9d      	ldr	r3, [pc, #628]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007ea2:	4b9b      	ldr	r3, [pc, #620]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	0d1b      	lsrs	r3, r3, #20
 8007ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007eae:	4b98      	ldr	r3, [pc, #608]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007eba:	4b95      	ldr	r3, [pc, #596]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebe:	08db      	lsrs	r3, r3, #3
 8007ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	fb02 f303 	mul.w	r3, r2, r3
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 810a 	beq.w	80080f2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d05a      	beq.n	8007f9a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d302      	bcc.n	8007eee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d078      	beq.n	8007fde <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007eec:	e099      	b.n	8008022 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eee:	4b88      	ldr	r3, [pc, #544]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d02d      	beq.n	8007f56 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007efa:	4b85      	ldr	r3, [pc, #532]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	4a83      	ldr	r2, [pc, #524]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f24:	4b7a      	ldr	r3, [pc, #488]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f54:	e087      	b.n	8008066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800811c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f68:	4b69      	ldr	r3, [pc, #420]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f98:	e065      	b.n	8008066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fac:	4b58      	ldr	r3, [pc, #352]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fdc:	e043      	b.n	8008066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff0:	4b47      	ldr	r3, [pc, #284]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008000:	ed97 6a03 	vldr	s12, [r7, #12]
 8008004:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008020:	e021      	b.n	8008066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008034:	4b36      	ldr	r3, [pc, #216]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008044:	ed97 6a03 	vldr	s12, [r7, #12]
 8008048:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800804c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008064:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008066:	4b2a      	ldr	r3, [pc, #168]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	0a5b      	lsrs	r3, r3, #9
 800806c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800807c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008080:	edd7 6a07 	vldr	s13, [r7, #28]
 8008084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808c:	ee17 2a90 	vmov	r2, s15
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ba:	ee17 2a90 	vmov	r2, s15
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80080c2:	4b13      	ldr	r3, [pc, #76]	; (8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	0e1b      	lsrs	r3, r3, #24
 80080c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e8:	ee17 2a90 	vmov	r2, s15
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080f0:	e008      	b.n	8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3724      	adds	r7, #36	; 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	46000000 	.word	0x46000000
 800811c:	4c742400 	.word	0x4c742400
 8008120:	4a742400 	.word	0x4a742400
 8008124:	4af42400 	.word	0x4af42400

08008128 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008128:	b480      	push	{r7}
 800812a:	b089      	sub	sp, #36	; 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008130:	4b9d      	ldr	r3, [pc, #628]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	f003 0303 	and.w	r3, r3, #3
 8008138:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800813a:	4b9b      	ldr	r3, [pc, #620]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	091b      	lsrs	r3, r3, #4
 8008140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008144:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008146:	4b98      	ldr	r3, [pc, #608]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008150:	4b95      	ldr	r3, [pc, #596]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	08db      	lsrs	r3, r3, #3
 8008156:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008168:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 810a 	beq.w	8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d05a      	beq.n	8008230 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800817a:	2b01      	cmp	r3, #1
 800817c:	d302      	bcc.n	8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800817e:	2b02      	cmp	r3, #2
 8008180:	d078      	beq.n	8008274 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008182:	e099      	b.n	80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008184:	4b88      	ldr	r3, [pc, #544]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d02d      	beq.n	80081ec <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008190:	4b85      	ldr	r3, [pc, #532]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	08db      	lsrs	r3, r3, #3
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	4a84      	ldr	r2, [pc, #528]	; (80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
 80081a0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ba:	4b7b      	ldr	r3, [pc, #492]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081ea:	e087      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80081fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fe:	4b6a      	ldr	r3, [pc, #424]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008212:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800822e:	e065      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80083b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800823e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008242:	4b59      	ldr	r3, [pc, #356]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008252:	ed97 6a03 	vldr	s12, [r7, #12]
 8008256:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800825a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008272:	e043      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80083bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008286:	4b48      	ldr	r3, [pc, #288]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008296:	ed97 6a03 	vldr	s12, [r7, #12]
 800829a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800829e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082b6:	e021      	b.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80083b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80082c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ca:	4b37      	ldr	r3, [pc, #220]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082da:	ed97 6a03 	vldr	s12, [r7, #12]
 80082de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80082e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082fa:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80082fc:	4b2a      	ldr	r3, [pc, #168]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	0a5b      	lsrs	r3, r3, #9
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008316:	edd7 6a07 	vldr	s13, [r7, #28]
 800831a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800831e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008322:	ee17 2a90 	vmov	r2, s15
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800832a:	4b1f      	ldr	r3, [pc, #124]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	0c1b      	lsrs	r3, r3, #16
 8008330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008340:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008344:	edd7 6a07 	vldr	s13, [r7, #28]
 8008348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008350:	ee17 2a90 	vmov	r2, s15
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008358:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	0e1b      	lsrs	r3, r3, #24
 800835e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800836e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008372:	edd7 6a07 	vldr	s13, [r7, #28]
 8008376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800837a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837e:	ee17 2a90 	vmov	r2, s15
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008386:	e008      	b.n	800839a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	609a      	str	r2, [r3, #8]
}
 800839a:	bf00      	nop
 800839c:	3724      	adds	r7, #36	; 0x24
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	58024400 	.word	0x58024400
 80083ac:	03d09000 	.word	0x03d09000
 80083b0:	46000000 	.word	0x46000000
 80083b4:	4c742400 	.word	0x4c742400
 80083b8:	4a742400 	.word	0x4a742400
 80083bc:	4af42400 	.word	0x4af42400

080083c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083ce:	4b53      	ldr	r3, [pc, #332]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d101      	bne.n	80083de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e099      	b.n	8008512 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083de:	4b4f      	ldr	r3, [pc, #316]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a4e      	ldr	r2, [pc, #312]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80083e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7f9 fa79 	bl	80018e0 <HAL_GetTick>
 80083ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083f0:	e008      	b.n	8008404 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083f2:	f7f9 fa75 	bl	80018e0 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e086      	b.n	8008512 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008404:	4b45      	ldr	r3, [pc, #276]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f0      	bne.n	80083f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008410:	4b42      	ldr	r3, [pc, #264]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	031b      	lsls	r3, r3, #12
 800841e:	493f      	ldr	r1, [pc, #252]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008420:	4313      	orrs	r3, r2
 8008422:	628b      	str	r3, [r1, #40]	; 0x28
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	3b01      	subs	r3, #1
 800842a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	025b      	lsls	r3, r3, #9
 8008436:	b29b      	uxth	r3, r3
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	3b01      	subs	r3, #1
 800844e:	061b      	lsls	r3, r3, #24
 8008450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008454:	4931      	ldr	r1, [pc, #196]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800845a:	4b30      	ldr	r3, [pc, #192]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	492d      	ldr	r1, [pc, #180]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008468:	4313      	orrs	r3, r2
 800846a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800846c:	4b2b      	ldr	r3, [pc, #172]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f023 0220 	bic.w	r2, r3, #32
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	4928      	ldr	r1, [pc, #160]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 800847a:	4313      	orrs	r3, r2
 800847c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800847e:	4b27      	ldr	r3, [pc, #156]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	4a26      	ldr	r2, [pc, #152]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008484:	f023 0310 	bic.w	r3, r3, #16
 8008488:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800848a:	4b24      	ldr	r3, [pc, #144]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 800848c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800848e:	4b24      	ldr	r3, [pc, #144]	; (8008520 <RCCEx_PLL2_Config+0x160>)
 8008490:	4013      	ands	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	69d2      	ldr	r2, [r2, #28]
 8008496:	00d2      	lsls	r2, r2, #3
 8008498:	4920      	ldr	r1, [pc, #128]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800849e:	4b1f      	ldr	r3, [pc, #124]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	4a1e      	ldr	r2, [pc, #120]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084a4:	f043 0310 	orr.w	r3, r3, #16
 80084a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084b0:	4b1a      	ldr	r3, [pc, #104]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a19      	ldr	r2, [pc, #100]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084bc:	e00f      	b.n	80084de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d106      	bne.n	80084d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084c4:	4b15      	ldr	r3, [pc, #84]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a14      	ldr	r2, [pc, #80]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084d0:	e005      	b.n	80084de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084d2:	4b12      	ldr	r3, [pc, #72]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	4a11      	ldr	r2, [pc, #68]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a0e      	ldr	r2, [pc, #56]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 80084e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ea:	f7f9 f9f9 	bl	80018e0 <HAL_GetTick>
 80084ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084f0:	e008      	b.n	8008504 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084f2:	f7f9 f9f5 	bl	80018e0 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d901      	bls.n	8008504 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e006      	b.n	8008512 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <RCCEx_PLL2_Config+0x15c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0f0      	beq.n	80084f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	58024400 	.word	0x58024400
 8008520:	ffff0007 	.word	0xffff0007

08008524 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008532:	4b53      	ldr	r3, [pc, #332]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	2b03      	cmp	r3, #3
 800853c:	d101      	bne.n	8008542 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e099      	b.n	8008676 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008542:	4b4f      	ldr	r3, [pc, #316]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a4e      	ldr	r2, [pc, #312]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800854c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800854e:	f7f9 f9c7 	bl	80018e0 <HAL_GetTick>
 8008552:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008554:	e008      	b.n	8008568 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008556:	f7f9 f9c3 	bl	80018e0 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e086      	b.n	8008676 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008568:	4b45      	ldr	r3, [pc, #276]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f0      	bne.n	8008556 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008574:	4b42      	ldr	r3, [pc, #264]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	051b      	lsls	r3, r3, #20
 8008582:	493f      	ldr	r1, [pc, #252]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008584:	4313      	orrs	r3, r2
 8008586:	628b      	str	r3, [r1, #40]	; 0x28
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	3b01      	subs	r3, #1
 800858e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	3b01      	subs	r3, #1
 8008598:	025b      	lsls	r3, r3, #9
 800859a:	b29b      	uxth	r3, r3
 800859c:	431a      	orrs	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	041b      	lsls	r3, r3, #16
 80085a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	061b      	lsls	r3, r3, #24
 80085b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085b8:	4931      	ldr	r1, [pc, #196]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085be:	4b30      	ldr	r3, [pc, #192]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	492d      	ldr	r1, [pc, #180]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085d0:	4b2b      	ldr	r3, [pc, #172]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	4928      	ldr	r1, [pc, #160]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085e2:	4b27      	ldr	r3, [pc, #156]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	4a26      	ldr	r2, [pc, #152]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085ee:	4b24      	ldr	r3, [pc, #144]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f2:	4b24      	ldr	r3, [pc, #144]	; (8008684 <RCCEx_PLL3_Config+0x160>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	69d2      	ldr	r2, [r2, #28]
 80085fa:	00d2      	lsls	r2, r2, #3
 80085fc:	4920      	ldr	r1, [pc, #128]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008602:	4b1f      	ldr	r3, [pc, #124]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800860c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008614:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	4a19      	ldr	r2, [pc, #100]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 800861a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800861e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008620:	e00f      	b.n	8008642 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d106      	bne.n	8008636 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008628:	4b15      	ldr	r3, [pc, #84]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	4a14      	ldr	r2, [pc, #80]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 800862e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008632:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008634:	e005      	b.n	8008642 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008636:	4b12      	ldr	r3, [pc, #72]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863a:	4a11      	ldr	r2, [pc, #68]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 800863c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008640:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008642:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a0e      	ldr	r2, [pc, #56]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 8008648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800864c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800864e:	f7f9 f947 	bl	80018e0 <HAL_GetTick>
 8008652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008654:	e008      	b.n	8008668 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008656:	f7f9 f943 	bl	80018e0 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d901      	bls.n	8008668 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e006      	b.n	8008676 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <RCCEx_PLL3_Config+0x15c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0f0      	beq.n	8008656 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	58024400 	.word	0x58024400
 8008684:	ffff0007 	.word	0xffff0007

08008688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e049      	b.n	800872e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7f8 fe7e 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f000 f864 	bl	8008794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e019      	b.n	8008784 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <HAL_TIM_Base_Start+0x58>)
 8008760:	4013      	ands	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b06      	cmp	r3, #6
 8008768:	d00b      	beq.n	8008782 <HAL_TIM_Base_Start+0x4a>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008770:	d007      	beq.n	8008782 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	00010007 	.word	0x00010007

08008794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a40      	ldr	r2, [pc, #256]	; (80088a8 <TIM_Base_SetConfig+0x114>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d013      	beq.n	80087d4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b2:	d00f      	beq.n	80087d4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3d      	ldr	r2, [pc, #244]	; (80088ac <TIM_Base_SetConfig+0x118>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00b      	beq.n	80087d4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <TIM_Base_SetConfig+0x11c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d007      	beq.n	80087d4 <TIM_Base_SetConfig+0x40>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a3b      	ldr	r2, [pc, #236]	; (80088b4 <TIM_Base_SetConfig+0x120>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d003      	beq.n	80087d4 <TIM_Base_SetConfig+0x40>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a3a      	ldr	r2, [pc, #232]	; (80088b8 <TIM_Base_SetConfig+0x124>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d108      	bne.n	80087e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2f      	ldr	r2, [pc, #188]	; (80088a8 <TIM_Base_SetConfig+0x114>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01f      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f4:	d01b      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2c      	ldr	r2, [pc, #176]	; (80088ac <TIM_Base_SetConfig+0x118>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d017      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2b      	ldr	r2, [pc, #172]	; (80088b0 <TIM_Base_SetConfig+0x11c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d013      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2a      	ldr	r2, [pc, #168]	; (80088b4 <TIM_Base_SetConfig+0x120>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00f      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a29      	ldr	r2, [pc, #164]	; (80088b8 <TIM_Base_SetConfig+0x124>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00b      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a28      	ldr	r2, [pc, #160]	; (80088bc <TIM_Base_SetConfig+0x128>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d007      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a27      	ldr	r2, [pc, #156]	; (80088c0 <TIM_Base_SetConfig+0x12c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d003      	beq.n	800882e <TIM_Base_SetConfig+0x9a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a26      	ldr	r2, [pc, #152]	; (80088c4 <TIM_Base_SetConfig+0x130>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d108      	bne.n	8008840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a10      	ldr	r2, [pc, #64]	; (80088a8 <TIM_Base_SetConfig+0x114>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00f      	beq.n	800888c <TIM_Base_SetConfig+0xf8>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <TIM_Base_SetConfig+0x124>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00b      	beq.n	800888c <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a11      	ldr	r2, [pc, #68]	; (80088bc <TIM_Base_SetConfig+0x128>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d007      	beq.n	800888c <TIM_Base_SetConfig+0xf8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a10      	ldr	r2, [pc, #64]	; (80088c0 <TIM_Base_SetConfig+0x12c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d003      	beq.n	800888c <TIM_Base_SetConfig+0xf8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <TIM_Base_SetConfig+0x130>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d103      	bne.n	8008894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	691a      	ldr	r2, [r3, #16]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	615a      	str	r2, [r3, #20]
}
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40000c00 	.word	0x40000c00
 80088b8:	40010400 	.word	0x40010400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088dc:	2302      	movs	r3, #2
 80088de:	e068      	b.n	80089b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a2e      	ldr	r2, [pc, #184]	; (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d004      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a2d      	ldr	r2, [pc, #180]	; (80089c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d108      	bne.n	8008926 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800891a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a1e      	ldr	r2, [pc, #120]	; (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d01d      	beq.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008952:	d018      	beq.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1b      	ldr	r2, [pc, #108]	; (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1a      	ldr	r2, [pc, #104]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00e      	beq.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d009      	beq.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a13      	ldr	r2, [pc, #76]	; (80089c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a14      	ldr	r2, [pc, #80]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d10c      	bne.n	80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800898c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	4313      	orrs	r3, r2
 8008996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40010000 	.word	0x40010000
 80089c4:	40010400 	.word	0x40010400
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40001800 	.word	0x40001800

080089d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e042      	b.n	8008a70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7f8 fcf9 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f82c 	bl	8008a78 <UART_SetConfig>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e022      	b.n	8008a70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fecc 	bl	80097d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 ff53 	bl	8009914 <UART_CheckIdleState>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008a7c:	b08e      	sub	sp, #56	; 0x38
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	4bc1      	ldr	r3, [pc, #772]	; (8008db8 <UART_SetConfig+0x340>)
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008aba:	430b      	orrs	r3, r1
 8008abc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4ab7      	ldr	r2, [pc, #732]	; (8008dbc <UART_SetConfig+0x344>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aea:	4313      	orrs	r3, r2
 8008aec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	4bb2      	ldr	r3, [pc, #712]	; (8008dc0 <UART_SetConfig+0x348>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008afe:	430b      	orrs	r3, r1
 8008b00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	f023 010f 	bic.w	r1, r3, #15
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4aa9      	ldr	r2, [pc, #676]	; (8008dc4 <UART_SetConfig+0x34c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d177      	bne.n	8008c12 <UART_SetConfig+0x19a>
 8008b22:	4ba9      	ldr	r3, [pc, #676]	; (8008dc8 <UART_SetConfig+0x350>)
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b2a:	2b28      	cmp	r3, #40	; 0x28
 8008b2c:	d86c      	bhi.n	8008c08 <UART_SetConfig+0x190>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <UART_SetConfig+0xbc>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008bd9 	.word	0x08008bd9
 8008b38:	08008c09 	.word	0x08008c09
 8008b3c:	08008c09 	.word	0x08008c09
 8008b40:	08008c09 	.word	0x08008c09
 8008b44:	08008c09 	.word	0x08008c09
 8008b48:	08008c09 	.word	0x08008c09
 8008b4c:	08008c09 	.word	0x08008c09
 8008b50:	08008c09 	.word	0x08008c09
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008c09 	.word	0x08008c09
 8008b5c:	08008c09 	.word	0x08008c09
 8008b60:	08008c09 	.word	0x08008c09
 8008b64:	08008c09 	.word	0x08008c09
 8008b68:	08008c09 	.word	0x08008c09
 8008b6c:	08008c09 	.word	0x08008c09
 8008b70:	08008c09 	.word	0x08008c09
 8008b74:	08008be9 	.word	0x08008be9
 8008b78:	08008c09 	.word	0x08008c09
 8008b7c:	08008c09 	.word	0x08008c09
 8008b80:	08008c09 	.word	0x08008c09
 8008b84:	08008c09 	.word	0x08008c09
 8008b88:	08008c09 	.word	0x08008c09
 8008b8c:	08008c09 	.word	0x08008c09
 8008b90:	08008c09 	.word	0x08008c09
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008c09 	.word	0x08008c09
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008c09 	.word	0x08008c09
 8008ba4:	08008c09 	.word	0x08008c09
 8008ba8:	08008c09 	.word	0x08008c09
 8008bac:	08008c09 	.word	0x08008c09
 8008bb0:	08008c09 	.word	0x08008c09
 8008bb4:	08008bf9 	.word	0x08008bf9
 8008bb8:	08008c09 	.word	0x08008c09
 8008bbc:	08008c09 	.word	0x08008c09
 8008bc0:	08008c09 	.word	0x08008c09
 8008bc4:	08008c09 	.word	0x08008c09
 8008bc8:	08008c09 	.word	0x08008c09
 8008bcc:	08008c09 	.word	0x08008c09
 8008bd0:	08008c09 	.word	0x08008c09
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e339      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	e335      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e331      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e32d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	e329      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c06:	e325      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0e:	bf00      	nop
 8008c10:	e320      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6d      	ldr	r2, [pc, #436]	; (8008dcc <UART_SetConfig+0x354>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d132      	bne.n	8008c82 <UART_SetConfig+0x20a>
 8008c1c:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <UART_SetConfig+0x350>)
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	2b05      	cmp	r3, #5
 8008c26:	d827      	bhi.n	8008c78 <UART_SetConfig+0x200>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <UART_SetConfig+0x1b8>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e301      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e2fd      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e2f9      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e2f5      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e2f1      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	e2ed      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c78:	2380      	movs	r3, #128	; 0x80
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	bf00      	nop
 8008c80:	e2e8      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a52      	ldr	r2, [pc, #328]	; (8008dd0 <UART_SetConfig+0x358>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d132      	bne.n	8008cf2 <UART_SetConfig+0x27a>
 8008c8c:	4b4e      	ldr	r3, [pc, #312]	; (8008dc8 <UART_SetConfig+0x350>)
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	d827      	bhi.n	8008ce8 <UART_SetConfig+0x270>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <UART_SetConfig+0x228>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb9 	.word	0x08008cb9
 8008ca4:	08008cc1 	.word	0x08008cc1
 8008ca8:	08008cc9 	.word	0x08008cc9
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cbe:	e2c9      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc6:	e2c5      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008cc8:	2308      	movs	r3, #8
 8008cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cce:	e2c1      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd6:	e2bd      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008cd8:	2320      	movs	r3, #32
 8008cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cde:	e2b9      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ce0:	2340      	movs	r3, #64	; 0x40
 8008ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce6:	e2b5      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ce8:	2380      	movs	r3, #128	; 0x80
 8008cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cee:	bf00      	nop
 8008cf0:	e2b0      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a37      	ldr	r2, [pc, #220]	; (8008dd4 <UART_SetConfig+0x35c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d132      	bne.n	8008d62 <UART_SetConfig+0x2ea>
 8008cfc:	4b32      	ldr	r3, [pc, #200]	; (8008dc8 <UART_SetConfig+0x350>)
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	2b05      	cmp	r3, #5
 8008d06:	d827      	bhi.n	8008d58 <UART_SetConfig+0x2e0>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0x298>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d29 	.word	0x08008d29
 8008d14:	08008d31 	.word	0x08008d31
 8008d18:	08008d39 	.word	0x08008d39
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2e:	e291      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d30:	2304      	movs	r3, #4
 8008d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d36:	e28d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3e:	e289      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d40:	2310      	movs	r3, #16
 8008d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d46:	e285      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4e:	e281      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d50:	2340      	movs	r3, #64	; 0x40
 8008d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d56:	e27d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5e:	bf00      	nop
 8008d60:	e278      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1c      	ldr	r2, [pc, #112]	; (8008dd8 <UART_SetConfig+0x360>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d144      	bne.n	8008df6 <UART_SetConfig+0x37e>
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <UART_SetConfig+0x350>)
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d839      	bhi.n	8008dec <UART_SetConfig+0x374>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x308>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008ddd 	.word	0x08008ddd
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d9e:	e259      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008da6:	e255      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dae:	e251      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008db6:	e24d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008db8:	cfff69f3 	.word	0xcfff69f3
 8008dbc:	58000c00 	.word	0x58000c00
 8008dc0:	11fff4ff 	.word	0x11fff4ff
 8008dc4:	40011000 	.word	0x40011000
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	40004400 	.word	0x40004400
 8008dd0:	40004800 	.word	0x40004800
 8008dd4:	40004c00 	.word	0x40004c00
 8008dd8:	40005000 	.word	0x40005000
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de2:	e237      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008de4:	2340      	movs	r3, #64	; 0x40
 8008de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dea:	e233      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008df2:	bf00      	nop
 8008df4:	e22e      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4ab5      	ldr	r2, [pc, #724]	; (80090d0 <UART_SetConfig+0x658>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d178      	bne.n	8008ef2 <UART_SetConfig+0x47a>
 8008e00:	4bb4      	ldr	r3, [pc, #720]	; (80090d4 <UART_SetConfig+0x65c>)
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e08:	2b28      	cmp	r3, #40	; 0x28
 8008e0a:	d86d      	bhi.n	8008ee8 <UART_SetConfig+0x470>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x39c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008eb9 	.word	0x08008eb9
 8008e18:	08008ee9 	.word	0x08008ee9
 8008e1c:	08008ee9 	.word	0x08008ee9
 8008e20:	08008ee9 	.word	0x08008ee9
 8008e24:	08008ee9 	.word	0x08008ee9
 8008e28:	08008ee9 	.word	0x08008ee9
 8008e2c:	08008ee9 	.word	0x08008ee9
 8008e30:	08008ee9 	.word	0x08008ee9
 8008e34:	08008ec1 	.word	0x08008ec1
 8008e38:	08008ee9 	.word	0x08008ee9
 8008e3c:	08008ee9 	.word	0x08008ee9
 8008e40:	08008ee9 	.word	0x08008ee9
 8008e44:	08008ee9 	.word	0x08008ee9
 8008e48:	08008ee9 	.word	0x08008ee9
 8008e4c:	08008ee9 	.word	0x08008ee9
 8008e50:	08008ee9 	.word	0x08008ee9
 8008e54:	08008ec9 	.word	0x08008ec9
 8008e58:	08008ee9 	.word	0x08008ee9
 8008e5c:	08008ee9 	.word	0x08008ee9
 8008e60:	08008ee9 	.word	0x08008ee9
 8008e64:	08008ee9 	.word	0x08008ee9
 8008e68:	08008ee9 	.word	0x08008ee9
 8008e6c:	08008ee9 	.word	0x08008ee9
 8008e70:	08008ee9 	.word	0x08008ee9
 8008e74:	08008ed1 	.word	0x08008ed1
 8008e78:	08008ee9 	.word	0x08008ee9
 8008e7c:	08008ee9 	.word	0x08008ee9
 8008e80:	08008ee9 	.word	0x08008ee9
 8008e84:	08008ee9 	.word	0x08008ee9
 8008e88:	08008ee9 	.word	0x08008ee9
 8008e8c:	08008ee9 	.word	0x08008ee9
 8008e90:	08008ee9 	.word	0x08008ee9
 8008e94:	08008ed9 	.word	0x08008ed9
 8008e98:	08008ee9 	.word	0x08008ee9
 8008e9c:	08008ee9 	.word	0x08008ee9
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008ee9 	.word	0x08008ee9
 8008ea8:	08008ee9 	.word	0x08008ee9
 8008eac:	08008ee9 	.word	0x08008ee9
 8008eb0:	08008ee9 	.word	0x08008ee9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ebe:	e1c9      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec6:	e1c5      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ece:	e1c1      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed6:	e1bd      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ede:	e1b9      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ee0:	2340      	movs	r3, #64	; 0x40
 8008ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee6:	e1b5      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ee8:	2380      	movs	r3, #128	; 0x80
 8008eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eee:	bf00      	nop
 8008ef0:	e1b0      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a78      	ldr	r2, [pc, #480]	; (80090d8 <UART_SetConfig+0x660>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d132      	bne.n	8008f62 <UART_SetConfig+0x4ea>
 8008efc:	4b75      	ldr	r3, [pc, #468]	; (80090d4 <UART_SetConfig+0x65c>)
 8008efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f00:	f003 0307 	and.w	r3, r3, #7
 8008f04:	2b05      	cmp	r3, #5
 8008f06:	d827      	bhi.n	8008f58 <UART_SetConfig+0x4e0>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <UART_SetConfig+0x498>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f31 	.word	0x08008f31
 8008f18:	08008f39 	.word	0x08008f39
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2e:	e191      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f30:	2304      	movs	r3, #4
 8008f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f36:	e18d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f38:	2308      	movs	r3, #8
 8008f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3e:	e189      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f40:	2310      	movs	r3, #16
 8008f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f46:	e185      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4e:	e181      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f50:	2340      	movs	r3, #64	; 0x40
 8008f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f56:	e17d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5e:	bf00      	nop
 8008f60:	e178      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a5d      	ldr	r2, [pc, #372]	; (80090dc <UART_SetConfig+0x664>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d132      	bne.n	8008fd2 <UART_SetConfig+0x55a>
 8008f6c:	4b59      	ldr	r3, [pc, #356]	; (80090d4 <UART_SetConfig+0x65c>)
 8008f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	d827      	bhi.n	8008fc8 <UART_SetConfig+0x550>
 8008f78:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <UART_SetConfig+0x508>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	08008f99 	.word	0x08008f99
 8008f84:	08008fa1 	.word	0x08008fa1
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb9 	.word	0x08008fb9
 8008f94:	08008fc1 	.word	0x08008fc1
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e159      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e155      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fa8:	2308      	movs	r3, #8
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e151      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e14d      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fb8:	2320      	movs	r3, #32
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e149      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e145      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	bf00      	nop
 8008fd0:	e140      	b.n	8009254 <UART_SetConfig+0x7dc>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a42      	ldr	r2, [pc, #264]	; (80090e0 <UART_SetConfig+0x668>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	f040 8083 	bne.w	80090e4 <UART_SetConfig+0x66c>
 8008fde:	4b3d      	ldr	r3, [pc, #244]	; (80090d4 <UART_SetConfig+0x65c>)
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fe6:	2b28      	cmp	r3, #40	; 0x28
 8008fe8:	d86c      	bhi.n	80090c4 <UART_SetConfig+0x64c>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x578>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009095 	.word	0x08009095
 8008ff4:	080090c5 	.word	0x080090c5
 8008ff8:	080090c5 	.word	0x080090c5
 8008ffc:	080090c5 	.word	0x080090c5
 8009000:	080090c5 	.word	0x080090c5
 8009004:	080090c5 	.word	0x080090c5
 8009008:	080090c5 	.word	0x080090c5
 800900c:	080090c5 	.word	0x080090c5
 8009010:	0800909d 	.word	0x0800909d
 8009014:	080090c5 	.word	0x080090c5
 8009018:	080090c5 	.word	0x080090c5
 800901c:	080090c5 	.word	0x080090c5
 8009020:	080090c5 	.word	0x080090c5
 8009024:	080090c5 	.word	0x080090c5
 8009028:	080090c5 	.word	0x080090c5
 800902c:	080090c5 	.word	0x080090c5
 8009030:	080090a5 	.word	0x080090a5
 8009034:	080090c5 	.word	0x080090c5
 8009038:	080090c5 	.word	0x080090c5
 800903c:	080090c5 	.word	0x080090c5
 8009040:	080090c5 	.word	0x080090c5
 8009044:	080090c5 	.word	0x080090c5
 8009048:	080090c5 	.word	0x080090c5
 800904c:	080090c5 	.word	0x080090c5
 8009050:	080090ad 	.word	0x080090ad
 8009054:	080090c5 	.word	0x080090c5
 8009058:	080090c5 	.word	0x080090c5
 800905c:	080090c5 	.word	0x080090c5
 8009060:	080090c5 	.word	0x080090c5
 8009064:	080090c5 	.word	0x080090c5
 8009068:	080090c5 	.word	0x080090c5
 800906c:	080090c5 	.word	0x080090c5
 8009070:	080090b5 	.word	0x080090b5
 8009074:	080090c5 	.word	0x080090c5
 8009078:	080090c5 	.word	0x080090c5
 800907c:	080090c5 	.word	0x080090c5
 8009080:	080090c5 	.word	0x080090c5
 8009084:	080090c5 	.word	0x080090c5
 8009088:	080090c5 	.word	0x080090c5
 800908c:	080090c5 	.word	0x080090c5
 8009090:	080090bd 	.word	0x080090bd
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909a:	e0db      	b.n	8009254 <UART_SetConfig+0x7dc>
 800909c:	2304      	movs	r3, #4
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e0d7      	b.n	8009254 <UART_SetConfig+0x7dc>
 80090a4:	2308      	movs	r3, #8
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e0d3      	b.n	8009254 <UART_SetConfig+0x7dc>
 80090ac:	2310      	movs	r3, #16
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e0cf      	b.n	8009254 <UART_SetConfig+0x7dc>
 80090b4:	2320      	movs	r3, #32
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e0cb      	b.n	8009254 <UART_SetConfig+0x7dc>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e0c7      	b.n	8009254 <UART_SetConfig+0x7dc>
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ca:	bf00      	nop
 80090cc:	e0c2      	b.n	8009254 <UART_SetConfig+0x7dc>
 80090ce:	bf00      	nop
 80090d0:	40011400 	.word	0x40011400
 80090d4:	58024400 	.word	0x58024400
 80090d8:	40007800 	.word	0x40007800
 80090dc:	40007c00 	.word	0x40007c00
 80090e0:	40011800 	.word	0x40011800
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4ab2      	ldr	r2, [pc, #712]	; (80093b4 <UART_SetConfig+0x93c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d177      	bne.n	80091de <UART_SetConfig+0x766>
 80090ee:	4bb2      	ldr	r3, [pc, #712]	; (80093b8 <UART_SetConfig+0x940>)
 80090f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f6:	2b28      	cmp	r3, #40	; 0x28
 80090f8:	d86c      	bhi.n	80091d4 <UART_SetConfig+0x75c>
 80090fa:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <UART_SetConfig+0x688>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	080091a5 	.word	0x080091a5
 8009104:	080091d5 	.word	0x080091d5
 8009108:	080091d5 	.word	0x080091d5
 800910c:	080091d5 	.word	0x080091d5
 8009110:	080091d5 	.word	0x080091d5
 8009114:	080091d5 	.word	0x080091d5
 8009118:	080091d5 	.word	0x080091d5
 800911c:	080091d5 	.word	0x080091d5
 8009120:	080091ad 	.word	0x080091ad
 8009124:	080091d5 	.word	0x080091d5
 8009128:	080091d5 	.word	0x080091d5
 800912c:	080091d5 	.word	0x080091d5
 8009130:	080091d5 	.word	0x080091d5
 8009134:	080091d5 	.word	0x080091d5
 8009138:	080091d5 	.word	0x080091d5
 800913c:	080091d5 	.word	0x080091d5
 8009140:	080091b5 	.word	0x080091b5
 8009144:	080091d5 	.word	0x080091d5
 8009148:	080091d5 	.word	0x080091d5
 800914c:	080091d5 	.word	0x080091d5
 8009150:	080091d5 	.word	0x080091d5
 8009154:	080091d5 	.word	0x080091d5
 8009158:	080091d5 	.word	0x080091d5
 800915c:	080091d5 	.word	0x080091d5
 8009160:	080091bd 	.word	0x080091bd
 8009164:	080091d5 	.word	0x080091d5
 8009168:	080091d5 	.word	0x080091d5
 800916c:	080091d5 	.word	0x080091d5
 8009170:	080091d5 	.word	0x080091d5
 8009174:	080091d5 	.word	0x080091d5
 8009178:	080091d5 	.word	0x080091d5
 800917c:	080091d5 	.word	0x080091d5
 8009180:	080091c5 	.word	0x080091c5
 8009184:	080091d5 	.word	0x080091d5
 8009188:	080091d5 	.word	0x080091d5
 800918c:	080091d5 	.word	0x080091d5
 8009190:	080091d5 	.word	0x080091d5
 8009194:	080091d5 	.word	0x080091d5
 8009198:	080091d5 	.word	0x080091d5
 800919c:	080091d5 	.word	0x080091d5
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e053      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b2:	e04f      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091b4:	2308      	movs	r3, #8
 80091b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ba:	e04b      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091bc:	2310      	movs	r3, #16
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c2:	e047      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091c4:	2320      	movs	r3, #32
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e043      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091cc:	2340      	movs	r3, #64	; 0x40
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	e03f      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091d4:	2380      	movs	r3, #128	; 0x80
 80091d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091da:	bf00      	nop
 80091dc:	e03a      	b.n	8009254 <UART_SetConfig+0x7dc>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a76      	ldr	r2, [pc, #472]	; (80093bc <UART_SetConfig+0x944>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d132      	bne.n	800924e <UART_SetConfig+0x7d6>
 80091e8:	4b73      	ldr	r3, [pc, #460]	; (80093b8 <UART_SetConfig+0x940>)
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	2b05      	cmp	r3, #5
 80091f2:	d827      	bhi.n	8009244 <UART_SetConfig+0x7cc>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <UART_SetConfig+0x784>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009215 	.word	0x08009215
 8009200:	0800921d 	.word	0x0800921d
 8009204:	08009225 	.word	0x08009225
 8009208:	0800922d 	.word	0x0800922d
 800920c:	08009235 	.word	0x08009235
 8009210:	0800923d 	.word	0x0800923d
 8009214:	2302      	movs	r3, #2
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921a:	e01b      	b.n	8009254 <UART_SetConfig+0x7dc>
 800921c:	2304      	movs	r3, #4
 800921e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009222:	e017      	b.n	8009254 <UART_SetConfig+0x7dc>
 8009224:	2308      	movs	r3, #8
 8009226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922a:	e013      	b.n	8009254 <UART_SetConfig+0x7dc>
 800922c:	2310      	movs	r3, #16
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e00f      	b.n	8009254 <UART_SetConfig+0x7dc>
 8009234:	2320      	movs	r3, #32
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e00b      	b.n	8009254 <UART_SetConfig+0x7dc>
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e007      	b.n	8009254 <UART_SetConfig+0x7dc>
 8009244:	2380      	movs	r3, #128	; 0x80
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	bf00      	nop
 800924c:	e002      	b.n	8009254 <UART_SetConfig+0x7dc>
 800924e:	2380      	movs	r3, #128	; 0x80
 8009250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a58      	ldr	r2, [pc, #352]	; (80093bc <UART_SetConfig+0x944>)
 800925a:	4293      	cmp	r3, r2
 800925c:	f040 80b6 	bne.w	80093cc <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009260:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009264:	2b08      	cmp	r3, #8
 8009266:	d019      	beq.n	800929c <UART_SetConfig+0x824>
 8009268:	2b08      	cmp	r3, #8
 800926a:	dc04      	bgt.n	8009276 <UART_SetConfig+0x7fe>
 800926c:	2b02      	cmp	r3, #2
 800926e:	d009      	beq.n	8009284 <UART_SetConfig+0x80c>
 8009270:	2b04      	cmp	r3, #4
 8009272:	d00b      	beq.n	800928c <UART_SetConfig+0x814>
 8009274:	e034      	b.n	80092e0 <UART_SetConfig+0x868>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d02b      	beq.n	80092d2 <UART_SetConfig+0x85a>
 800927a:	2b40      	cmp	r3, #64	; 0x40
 800927c:	d02c      	beq.n	80092d8 <UART_SetConfig+0x860>
 800927e:	2b10      	cmp	r3, #16
 8009280:	d014      	beq.n	80092ac <UART_SetConfig+0x834>
 8009282:	e02d      	b.n	80092e0 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009284:	f7fe fca2 	bl	8007bcc <HAL_RCCEx_GetD3PCLK1Freq>
 8009288:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800928a:	e02f      	b.n	80092ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928c:	f107 0314 	add.w	r3, r7, #20
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fcb1 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800929a:	e027      	b.n	80092ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929c:	f107 0308 	add.w	r3, r7, #8
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fe fdf5 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092aa:	e01f      	b.n	80092ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ac:	4b42      	ldr	r3, [pc, #264]	; (80093b8 <UART_SetConfig+0x940>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0320 	and.w	r3, r3, #32
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092b8:	4b3f      	ldr	r3, [pc, #252]	; (80093b8 <UART_SetConfig+0x940>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	08db      	lsrs	r3, r3, #3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	4a3f      	ldr	r2, [pc, #252]	; (80093c0 <UART_SetConfig+0x948>)
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
 80092c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092ca:	e00f      	b.n	80092ec <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80092cc:	4b3c      	ldr	r3, [pc, #240]	; (80093c0 <UART_SetConfig+0x948>)
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092d0:	e00c      	b.n	80092ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092d2:	4b3c      	ldr	r3, [pc, #240]	; (80093c4 <UART_SetConfig+0x94c>)
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092d6:	e009      	b.n	80092ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092de:	e005      	b.n	80092ec <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 8251 	beq.w	8009796 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	4a33      	ldr	r2, [pc, #204]	; (80093c8 <UART_SetConfig+0x950>)
 80092fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092fe:	461a      	mov	r2, r3
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	fbb3 f3f2 	udiv	r3, r3, r2
 8009306:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	005b      	lsls	r3, r3, #1
 8009310:	4413      	add	r3, r2
 8009312:	6a3a      	ldr	r2, [r7, #32]
 8009314:	429a      	cmp	r2, r3
 8009316:	d305      	bcc.n	8009324 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800931e:	6a3a      	ldr	r2, [r7, #32]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800932a:	e234      	b.n	8009796 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	4618      	mov	r0, r3
 8009330:	f04f 0100 	mov.w	r1, #0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	4a23      	ldr	r2, [pc, #140]	; (80093c8 <UART_SetConfig+0x950>)
 800933a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f04f 0400 	mov.w	r4, #0
 8009344:	461a      	mov	r2, r3
 8009346:	4623      	mov	r3, r4
 8009348:	f7f6 ffd2 	bl	80002f0 <__aeabi_uldivmod>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	4619      	mov	r1, r3
 8009352:	4622      	mov	r2, r4
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	f04f 0400 	mov.w	r4, #0
 800935c:	0214      	lsls	r4, r2, #8
 800935e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009362:	020b      	lsls	r3, r1, #8
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6852      	ldr	r2, [r2, #4]
 8009368:	0852      	lsrs	r2, r2, #1
 800936a:	4611      	mov	r1, r2
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	eb13 0b01 	adds.w	fp, r3, r1
 8009374:	eb44 0c02 	adc.w	ip, r4, r2
 8009378:	4658      	mov	r0, fp
 800937a:	4661      	mov	r1, ip
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f04f 0400 	mov.w	r4, #0
 8009384:	461a      	mov	r2, r3
 8009386:	4623      	mov	r3, r4
 8009388:	f7f6 ffb2 	bl	80002f0 <__aeabi_uldivmod>
 800938c:	4603      	mov	r3, r0
 800938e:	460c      	mov	r4, r1
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009398:	d308      	bcc.n	80093ac <UART_SetConfig+0x934>
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093a0:	d204      	bcs.n	80093ac <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a8:	60da      	str	r2, [r3, #12]
 80093aa:	e1f4      	b.n	8009796 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80093b2:	e1f0      	b.n	8009796 <UART_SetConfig+0xd1e>
 80093b4:	40011c00 	.word	0x40011c00
 80093b8:	58024400 	.word	0x58024400
 80093bc:	58000c00 	.word	0x58000c00
 80093c0:	03d09000 	.word	0x03d09000
 80093c4:	003d0900 	.word	0x003d0900
 80093c8:	0800b5e8 	.word	0x0800b5e8
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093d4:	f040 80f8 	bne.w	80095c8 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80093d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	f200 80b7 	bhi.w	8009550 <UART_SetConfig+0xad8>
 80093e2:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0x970>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	080094ed 	.word	0x080094ed
 80093ec:	080094f5 	.word	0x080094f5
 80093f0:	08009551 	.word	0x08009551
 80093f4:	08009551 	.word	0x08009551
 80093f8:	080094fd 	.word	0x080094fd
 80093fc:	08009551 	.word	0x08009551
 8009400:	08009551 	.word	0x08009551
 8009404:	08009551 	.word	0x08009551
 8009408:	0800950d 	.word	0x0800950d
 800940c:	08009551 	.word	0x08009551
 8009410:	08009551 	.word	0x08009551
 8009414:	08009551 	.word	0x08009551
 8009418:	08009551 	.word	0x08009551
 800941c:	08009551 	.word	0x08009551
 8009420:	08009551 	.word	0x08009551
 8009424:	08009551 	.word	0x08009551
 8009428:	0800951d 	.word	0x0800951d
 800942c:	08009551 	.word	0x08009551
 8009430:	08009551 	.word	0x08009551
 8009434:	08009551 	.word	0x08009551
 8009438:	08009551 	.word	0x08009551
 800943c:	08009551 	.word	0x08009551
 8009440:	08009551 	.word	0x08009551
 8009444:	08009551 	.word	0x08009551
 8009448:	08009551 	.word	0x08009551
 800944c:	08009551 	.word	0x08009551
 8009450:	08009551 	.word	0x08009551
 8009454:	08009551 	.word	0x08009551
 8009458:	08009551 	.word	0x08009551
 800945c:	08009551 	.word	0x08009551
 8009460:	08009551 	.word	0x08009551
 8009464:	08009551 	.word	0x08009551
 8009468:	08009543 	.word	0x08009543
 800946c:	08009551 	.word	0x08009551
 8009470:	08009551 	.word	0x08009551
 8009474:	08009551 	.word	0x08009551
 8009478:	08009551 	.word	0x08009551
 800947c:	08009551 	.word	0x08009551
 8009480:	08009551 	.word	0x08009551
 8009484:	08009551 	.word	0x08009551
 8009488:	08009551 	.word	0x08009551
 800948c:	08009551 	.word	0x08009551
 8009490:	08009551 	.word	0x08009551
 8009494:	08009551 	.word	0x08009551
 8009498:	08009551 	.word	0x08009551
 800949c:	08009551 	.word	0x08009551
 80094a0:	08009551 	.word	0x08009551
 80094a4:	08009551 	.word	0x08009551
 80094a8:	08009551 	.word	0x08009551
 80094ac:	08009551 	.word	0x08009551
 80094b0:	08009551 	.word	0x08009551
 80094b4:	08009551 	.word	0x08009551
 80094b8:	08009551 	.word	0x08009551
 80094bc:	08009551 	.word	0x08009551
 80094c0:	08009551 	.word	0x08009551
 80094c4:	08009551 	.word	0x08009551
 80094c8:	08009551 	.word	0x08009551
 80094cc:	08009551 	.word	0x08009551
 80094d0:	08009551 	.word	0x08009551
 80094d4:	08009551 	.word	0x08009551
 80094d8:	08009551 	.word	0x08009551
 80094dc:	08009551 	.word	0x08009551
 80094e0:	08009551 	.word	0x08009551
 80094e4:	08009551 	.word	0x08009551
 80094e8:	08009549 	.word	0x08009549
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094ec:	f7fd fa68 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 80094f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094f2:	e033      	b.n	800955c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f4:	f7fd fa7a 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 80094f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094fa:	e02f      	b.n	800955c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fc:	f107 0314 	add.w	r3, r7, #20
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fb79 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800950a:	e027      	b.n	800955c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fcbd 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800951a:	e01f      	b.n	800955c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800951c:	4ba8      	ldr	r3, [pc, #672]	; (80097c0 <UART_SetConfig+0xd48>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009528:	4ba5      	ldr	r3, [pc, #660]	; (80097c0 <UART_SetConfig+0xd48>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	08db      	lsrs	r3, r3, #3
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	4aa4      	ldr	r2, [pc, #656]	; (80097c4 <UART_SetConfig+0xd4c>)
 8009534:	fa22 f303 	lsr.w	r3, r2, r3
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800953a:	e00f      	b.n	800955c <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 800953c:	4ba1      	ldr	r3, [pc, #644]	; (80097c4 <UART_SetConfig+0xd4c>)
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009540:	e00c      	b.n	800955c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009542:	4ba1      	ldr	r3, [pc, #644]	; (80097c8 <UART_SetConfig+0xd50>)
 8009544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009546:	e009      	b.n	800955c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800954c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800954e:	e005      	b.n	800955c <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800955a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800955c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 8119 	beq.w	8009796 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	4a98      	ldr	r2, [pc, #608]	; (80097cc <UART_SetConfig+0xd54>)
 800956a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800956e:	461a      	mov	r2, r3
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	fbb3 f3f2 	udiv	r3, r3, r2
 8009576:	005a      	lsls	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	085b      	lsrs	r3, r3, #1
 800957e:	441a      	add	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	fbb2 f3f3 	udiv	r3, r2, r3
 8009588:	b29b      	uxth	r3, r3
 800958a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	2b0f      	cmp	r3, #15
 8009590:	d916      	bls.n	80095c0 <UART_SetConfig+0xb48>
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009598:	d212      	bcs.n	80095c0 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	b29b      	uxth	r3, r3
 800959e:	f023 030f 	bic.w	r3, r3, #15
 80095a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095b2:	4313      	orrs	r3, r2
 80095b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095bc:	60da      	str	r2, [r3, #12]
 80095be:	e0ea      	b.n	8009796 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80095c6:	e0e6      	b.n	8009796 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	f200 80b7 	bhi.w	8009740 <UART_SetConfig+0xcc8>
 80095d2:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <UART_SetConfig+0xb60>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	080096dd 	.word	0x080096dd
 80095dc:	080096e5 	.word	0x080096e5
 80095e0:	08009741 	.word	0x08009741
 80095e4:	08009741 	.word	0x08009741
 80095e8:	080096ed 	.word	0x080096ed
 80095ec:	08009741 	.word	0x08009741
 80095f0:	08009741 	.word	0x08009741
 80095f4:	08009741 	.word	0x08009741
 80095f8:	080096fd 	.word	0x080096fd
 80095fc:	08009741 	.word	0x08009741
 8009600:	08009741 	.word	0x08009741
 8009604:	08009741 	.word	0x08009741
 8009608:	08009741 	.word	0x08009741
 800960c:	08009741 	.word	0x08009741
 8009610:	08009741 	.word	0x08009741
 8009614:	08009741 	.word	0x08009741
 8009618:	0800970d 	.word	0x0800970d
 800961c:	08009741 	.word	0x08009741
 8009620:	08009741 	.word	0x08009741
 8009624:	08009741 	.word	0x08009741
 8009628:	08009741 	.word	0x08009741
 800962c:	08009741 	.word	0x08009741
 8009630:	08009741 	.word	0x08009741
 8009634:	08009741 	.word	0x08009741
 8009638:	08009741 	.word	0x08009741
 800963c:	08009741 	.word	0x08009741
 8009640:	08009741 	.word	0x08009741
 8009644:	08009741 	.word	0x08009741
 8009648:	08009741 	.word	0x08009741
 800964c:	08009741 	.word	0x08009741
 8009650:	08009741 	.word	0x08009741
 8009654:	08009741 	.word	0x08009741
 8009658:	08009733 	.word	0x08009733
 800965c:	08009741 	.word	0x08009741
 8009660:	08009741 	.word	0x08009741
 8009664:	08009741 	.word	0x08009741
 8009668:	08009741 	.word	0x08009741
 800966c:	08009741 	.word	0x08009741
 8009670:	08009741 	.word	0x08009741
 8009674:	08009741 	.word	0x08009741
 8009678:	08009741 	.word	0x08009741
 800967c:	08009741 	.word	0x08009741
 8009680:	08009741 	.word	0x08009741
 8009684:	08009741 	.word	0x08009741
 8009688:	08009741 	.word	0x08009741
 800968c:	08009741 	.word	0x08009741
 8009690:	08009741 	.word	0x08009741
 8009694:	08009741 	.word	0x08009741
 8009698:	08009741 	.word	0x08009741
 800969c:	08009741 	.word	0x08009741
 80096a0:	08009741 	.word	0x08009741
 80096a4:	08009741 	.word	0x08009741
 80096a8:	08009741 	.word	0x08009741
 80096ac:	08009741 	.word	0x08009741
 80096b0:	08009741 	.word	0x08009741
 80096b4:	08009741 	.word	0x08009741
 80096b8:	08009741 	.word	0x08009741
 80096bc:	08009741 	.word	0x08009741
 80096c0:	08009741 	.word	0x08009741
 80096c4:	08009741 	.word	0x08009741
 80096c8:	08009741 	.word	0x08009741
 80096cc:	08009741 	.word	0x08009741
 80096d0:	08009741 	.word	0x08009741
 80096d4:	08009741 	.word	0x08009741
 80096d8:	08009739 	.word	0x08009739
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096dc:	f7fd f970 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 80096e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096e2:	e033      	b.n	800974c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096e4:	f7fd f982 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 80096e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096ea:	e02f      	b.n	800974c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ec:	f107 0314 	add.w	r3, r7, #20
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fa81 	bl	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096fa:	e027      	b.n	800974c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096fc:	f107 0308 	add.w	r3, r7, #8
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fbc5 	bl	8007e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800970a:	e01f      	b.n	800974c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800970c:	4b2c      	ldr	r3, [pc, #176]	; (80097c0 <UART_SetConfig+0xd48>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0320 	and.w	r3, r3, #32
 8009714:	2b00      	cmp	r3, #0
 8009716:	d009      	beq.n	800972c <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009718:	4b29      	ldr	r3, [pc, #164]	; (80097c0 <UART_SetConfig+0xd48>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	08db      	lsrs	r3, r3, #3
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	4a28      	ldr	r2, [pc, #160]	; (80097c4 <UART_SetConfig+0xd4c>)
 8009724:	fa22 f303 	lsr.w	r3, r2, r3
 8009728:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800972a:	e00f      	b.n	800974c <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 800972c:	4b25      	ldr	r3, [pc, #148]	; (80097c4 <UART_SetConfig+0xd4c>)
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009730:	e00c      	b.n	800974c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009732:	4b25      	ldr	r3, [pc, #148]	; (80097c8 <UART_SetConfig+0xd50>)
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009736:	e009      	b.n	800974c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800973c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800973e:	e005      	b.n	800974c <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800974a:	bf00      	nop
    }

    if (pclk != 0U)
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d021      	beq.n	8009796 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	4a1d      	ldr	r2, [pc, #116]	; (80097cc <UART_SetConfig+0xd54>)
 8009758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800975c:	461a      	mov	r2, r3
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	fbb3 f2f2 	udiv	r2, r3, r2
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	441a      	add	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	fbb2 f3f3 	udiv	r3, r2, r3
 8009774:	b29b      	uxth	r3, r3
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	2b0f      	cmp	r3, #15
 800977c:	d908      	bls.n	8009790 <UART_SetConfig+0xd18>
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009784:	d204      	bcs.n	8009790 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800978c:	60da      	str	r2, [r3, #12]
 800978e:	e002      	b.n	8009796 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80097b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3738      	adds	r7, #56	; 0x38
 80097ba:	46bd      	mov	sp, r7
 80097bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80097c0:	58024400 	.word	0x58024400
 80097c4:	03d09000 	.word	0x03d09000
 80097c8:	003d0900 	.word	0x003d0900
 80097cc:	0800b5e8 	.word	0x0800b5e8

080097d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00a      	beq.n	80097fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00a      	beq.n	800981c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00a      	beq.n	800983e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	f003 0308 	and.w	r3, r3, #8
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01a      	beq.n	80098e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ce:	d10a      	bne.n	80098e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	605a      	str	r2, [r3, #4]
  }
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af02      	add	r7, sp, #8
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009924:	f7f7 ffdc 	bl	80018e0 <HAL_GetTick>
 8009928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b08      	cmp	r3, #8
 8009936:	d10e      	bne.n	8009956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f82c 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e022      	b.n	800999c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b04      	cmp	r3, #4
 8009962:	d10e      	bne.n	8009982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f816 	bl	80099a4 <UART_WaitOnFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e00c      	b.n	800999c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2220      	movs	r2, #32
 800998e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	4613      	mov	r3, r2
 80099b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b4:	e062      	b.n	8009a7c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d05e      	beq.n	8009a7c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099be:	f7f7 ff8f 	bl	80018e0 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d302      	bcc.n	80099d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d11d      	bne.n	8009a10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0201 	bic.w	r2, r2, #1
 80099f2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e045      	b.n	8009a9c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d02e      	beq.n	8009a7c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a2c:	d126      	bne.n	8009a7c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a46:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689a      	ldr	r2, [r3, #8]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 0201 	bic.w	r2, r2, #1
 8009a56:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e00f      	b.n	8009a9c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69da      	ldr	r2, [r3, #28]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	4013      	ands	r3, r2
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	bf0c      	ite	eq
 8009a8c:	2301      	moveq	r3, #1
 8009a8e:	2300      	movne	r3, #0
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	461a      	mov	r2, r3
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d08d      	beq.n	80099b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_UARTEx_DisableFifoMode+0x16>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e027      	b.n	8009b0a <HAL_UARTEx_DisableFifoMode+0x66>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2224      	movs	r2, #36	; 0x24
 8009ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ae8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e02d      	b.n	8009b8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	; 0x24
 8009b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f850 	bl	8009c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e02d      	b.n	8009c06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2224      	movs	r2, #36	; 0x24
 8009bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f812 	bl	8009c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b089      	sub	sp, #36	; 0x24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009c18:	4a2f      	ldr	r2, [pc, #188]	; (8009cd8 <UARTEx_SetNbDataToProcess+0xc8>)
 8009c1a:	f107 0314 	add.w	r3, r7, #20
 8009c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c22:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009c26:	4a2d      	ldr	r2, [pc, #180]	; (8009cdc <UARTEx_SetNbDataToProcess+0xcc>)
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c30:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d108      	bne.n	8009c4e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c4c:	e03d      	b.n	8009cca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c4e:	2310      	movs	r3, #16
 8009c50:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c52:	2310      	movs	r3, #16
 8009c54:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	0e5b      	lsrs	r3, r3, #25
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	0f5b      	lsrs	r3, r3, #29
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009c76:	7fbb      	ldrb	r3, [r7, #30]
 8009c78:	7f3a      	ldrb	r2, [r7, #28]
 8009c7a:	f107 0120 	add.w	r1, r7, #32
 8009c7e:	440a      	add	r2, r1
 8009c80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c84:	fb02 f303 	mul.w	r3, r2, r3
 8009c88:	7f3a      	ldrb	r2, [r7, #28]
 8009c8a:	f107 0120 	add.w	r1, r7, #32
 8009c8e:	440a      	add	r2, r1
 8009c90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009ca0:	7ffb      	ldrb	r3, [r7, #31]
 8009ca2:	7f7a      	ldrb	r2, [r7, #29]
 8009ca4:	f107 0120 	add.w	r1, r7, #32
 8009ca8:	440a      	add	r2, r1
 8009caa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	7f7a      	ldrb	r2, [r7, #29]
 8009cb4:	f107 0120 	add.w	r1, r7, #32
 8009cb8:	440a      	add	r2, r1
 8009cba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cca:	bf00      	nop
 8009ccc:	3724      	adds	r7, #36	; 0x24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	0800abd8 	.word	0x0800abd8
 8009cdc:	0800abe0 	.word	0x0800abe0

08009ce0 <arm_fir_init_f32>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	9e06      	ldr	r6, [sp, #24]
 8009ce4:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8009ce8:	460f      	mov	r7, r1
 8009cea:	6082      	str	r2, [r0, #8]
 8009cec:	4434      	add	r4, r6
 8009cee:	4605      	mov	r5, r0
 8009cf0:	461e      	mov	r6, r3
 8009cf2:	8007      	strh	r7, [r0, #0]
 8009cf4:	19e2      	adds	r2, r4, r7
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	f000 fabe 	bl	800a27c <memset>
 8009d00:	606e      	str	r6, [r5, #4]
 8009d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d04 <arm_fir_f32>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4606      	mov	r6, r0
 8009d0a:	ed2d 8b10 	vpush	{d8-d15}
 8009d0e:	b089      	sub	sp, #36	; 0x24
 8009d10:	8834      	ldrh	r4, [r6, #0]
 8009d12:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8009d16:	9004      	str	r0, [sp, #16]
 8009d18:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	08db      	lsrs	r3, r3, #3
 8009d20:	4420      	add	r0, r4
 8009d22:	9402      	str	r4, [sp, #8]
 8009d24:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8009d28:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	9001      	str	r0, [sp, #4]
 8009d30:	f000 81eb 	beq.w	800a10a <arm_fir_f32+0x406>
 8009d34:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8009d38:	469e      	mov	lr, r3
 8009d3a:	f004 0a07 	and.w	sl, r4, #7
 8009d3e:	f100 0720 	add.w	r7, r0, #32
 8009d42:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009d46:	f101 0620 	add.w	r6, r1, #32
 8009d4a:	9107      	str	r1, [sp, #28]
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	eb08 0003 	add.w	r0, r8, r3
 8009d52:	3b04      	subs	r3, #4
 8009d54:	f10c 0420 	add.w	r4, ip, #32
 8009d58:	f102 0520 	add.w	r5, r2, #32
 8009d5c:	f8cd c018 	str.w	ip, [sp, #24]
 8009d60:	4652      	mov	r2, sl
 8009d62:	4684      	mov	ip, r0
 8009d64:	468a      	mov	sl, r1
 8009d66:	4648      	mov	r0, r9
 8009d68:	4699      	mov	r9, r3
 8009d6a:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8009d6e:	1f21      	subs	r1, r4, #4
 8009d70:	ed9f 3aef 	vldr	s6, [pc, #956]	; 800a130 <arm_fir_f32+0x42c>
 8009d74:	f847 3c20 	str.w	r3, [r7, #-32]
 8009d78:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8009d7c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8009d80:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8009d84:	f847 3c18 	str.w	r3, [r7, #-24]
 8009d88:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8009d8c:	f847 3c14 	str.w	r3, [r7, #-20]
 8009d90:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8009d94:	f847 3c10 	str.w	r3, [r7, #-16]
 8009d98:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8009d9c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8009da0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009da4:	f847 3c08 	str.w	r3, [r7, #-8]
 8009da8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009dac:	f847 3c04 	str.w	r3, [r7, #-4]
 8009db0:	ed14 8a08 	vldr	s16, [r4, #-32]	; 0xffffffe0
 8009db4:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8009db8:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009dbc:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8009dc0:	ed14 1a04 	vldr	s2, [r4, #-16]
 8009dc4:	ed54 0a03 	vldr	s1, [r4, #-12]
 8009dc8:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	f000 81f6 	beq.w	800a1be <arm_fir_f32+0x4ba>
 8009dd2:	eeb0 9a43 	vmov.f32	s18, s6
 8009dd6:	f108 0120 	add.w	r1, r8, #32
 8009dda:	eeb0 aa43 	vmov.f32	s20, s6
 8009dde:	f104 031c 	add.w	r3, r4, #28
 8009de2:	eef0 aa43 	vmov.f32	s21, s6
 8009de6:	4683      	mov	fp, r0
 8009de8:	eeb0 ba43 	vmov.f32	s22, s6
 8009dec:	eef0 ba43 	vmov.f32	s23, s6
 8009df0:	eeb0 ca43 	vmov.f32	s24, s6
 8009df4:	eeb0 4a43 	vmov.f32	s8, s6
 8009df8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8009dfc:	f1bb 0b01 	subs.w	fp, fp, #1
 8009e00:	ed53 8a08 	vldr	s17, [r3, #-32]	; 0xffffffe0
 8009e04:	f101 0120 	add.w	r1, r1, #32
 8009e08:	ee28 fa23 	vmul.f32	s30, s16, s7
 8009e0c:	ed51 4a0f 	vldr	s9, [r1, #-60]	; 0xffffffc4
 8009e10:	ee62 eaa3 	vmul.f32	s29, s5, s7
 8009e14:	ed13 8a07 	vldr	s16, [r3, #-28]	; 0xffffffe4
 8009e18:	ee22 ea23 	vmul.f32	s28, s4, s7
 8009e1c:	ed11 5a0e 	vldr	s10, [r1, #-56]	; 0xffffffc8
 8009e20:	ee61 daa3 	vmul.f32	s27, s3, s7
 8009e24:	ed51 5a0d 	vldr	s11, [r1, #-52]	; 0xffffffcc
 8009e28:	ee21 da23 	vmul.f32	s26, s2, s7
 8009e2c:	ed11 6a0c 	vldr	s12, [r1, #-48]	; 0xffffffd0
 8009e30:	ee60 caa3 	vmul.f32	s25, s1, s7
 8009e34:	ed51 6a0b 	vldr	s13, [r1, #-44]	; 0xffffffd4
 8009e38:	ee60 9a23 	vmul.f32	s19, s0, s7
 8009e3c:	ed11 7a0a 	vldr	s14, [r1, #-40]	; 0xffffffd8
 8009e40:	ee68 3aa3 	vmul.f32	s7, s17, s7
 8009e44:	ed51 7a09 	vldr	s15, [r1, #-36]	; 0xffffffdc
 8009e48:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009e4c:	f103 0320 	add.w	r3, r3, #32
 8009e50:	ee22 faa4 	vmul.f32	s30, s5, s9
 8009e54:	ed53 2a0e 	vldr	s5, [r3, #-56]	; 0xffffffc8
 8009e58:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009e5c:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009e60:	ee62 ea24 	vmul.f32	s29, s4, s9
 8009e64:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8009e68:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009e6c:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009e70:	ee61 da24 	vmul.f32	s27, s2, s9
 8009e74:	ee20 daa4 	vmul.f32	s26, s1, s9
 8009e78:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009e7c:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009e80:	ee60 ca24 	vmul.f32	s25, s0, s9
 8009e84:	ee68 9aa4 	vmul.f32	s19, s17, s9
 8009e88:	ee33 3a83 	vadd.f32	s6, s7, s6
 8009e8c:	ee68 4a24 	vmul.f32	s9, s16, s9
 8009e90:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009e94:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009e98:	ee22 fa05 	vmul.f32	s30, s4, s10
 8009e9c:	ed13 2a0d 	vldr	s4, [r3, #-52]	; 0xffffffcc
 8009ea0:	ee61 ea85 	vmul.f32	s29, s3, s10
 8009ea4:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009ea8:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009eac:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009eb0:	ee21 ea05 	vmul.f32	s28, s2, s10
 8009eb4:	ee60 da85 	vmul.f32	s27, s1, s10
 8009eb8:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009ebc:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009ec0:	ee20 da05 	vmul.f32	s26, s0, s10
 8009ec4:	ee68 ca85 	vmul.f32	s25, s17, s10
 8009ec8:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009ecc:	ee68 9a05 	vmul.f32	s19, s16, s10
 8009ed0:	ee22 5a85 	vmul.f32	s10, s5, s10
 8009ed4:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009ed8:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009edc:	ee21 faa5 	vmul.f32	s30, s3, s11
 8009ee0:	ed53 1a0c 	vldr	s3, [r3, #-48]	; 0xffffffd0
 8009ee4:	ee61 ea25 	vmul.f32	s29, s2, s11
 8009ee8:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009eec:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009ef0:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009ef4:	ee20 eaa5 	vmul.f32	s28, s1, s11
 8009ef8:	ee60 da25 	vmul.f32	s27, s0, s11
 8009efc:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009f00:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009f04:	ee28 daa5 	vmul.f32	s26, s17, s11
 8009f08:	ee68 ca25 	vmul.f32	s25, s16, s11
 8009f0c:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009f10:	ee62 9aa5 	vmul.f32	s19, s5, s11
 8009f14:	ee62 5a25 	vmul.f32	s11, s4, s11
 8009f18:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009f1c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009f20:	ee75 5a85 	vadd.f32	s11, s11, s10
 8009f24:	ee21 fa06 	vmul.f32	s30, s2, s12
 8009f28:	ed13 1a0b 	vldr	s2, [r3, #-44]	; 0xffffffd4
 8009f2c:	ee22 5a06 	vmul.f32	s10, s4, s12
 8009f30:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009f34:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009f38:	ee60 ea86 	vmul.f32	s29, s1, s12
 8009f3c:	ee20 ea06 	vmul.f32	s28, s0, s12
 8009f40:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009f44:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009f48:	ee68 da86 	vmul.f32	s27, s17, s12
 8009f4c:	ee28 da06 	vmul.f32	s26, s16, s12
 8009f50:	ee62 ca86 	vmul.f32	s25, s5, s12
 8009f54:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009f58:	ee21 6a86 	vmul.f32	s12, s3, s12
 8009f5c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009f60:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009f64:	ee20 faa6 	vmul.f32	s30, s1, s13
 8009f68:	ed53 0a0a 	vldr	s1, [r3, #-40]	; 0xffffffd8
 8009f6c:	ee60 ea26 	vmul.f32	s29, s0, s13
 8009f70:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009f74:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009f78:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8009f7c:	ee28 eaa6 	vmul.f32	s28, s17, s13
 8009f80:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009f84:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009f88:	ee68 da26 	vmul.f32	s27, s16, s13
 8009f8c:	ee22 daa6 	vmul.f32	s26, s5, s13
 8009f90:	ee7c ca8a 	vadd.f32	s25, s25, s20
 8009f94:	ee35 9a09 	vadd.f32	s18, s10, s18
 8009f98:	ee22 aa26 	vmul.f32	s20, s4, s13
 8009f9c:	ee61 6a26 	vmul.f32	s13, s2, s13
 8009fa0:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009fa4:	ee35 9a89 	vadd.f32	s18, s11, s18
 8009fa8:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009fac:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009fb0:	ee20 fa07 	vmul.f32	s30, s0, s14
 8009fb4:	ed13 0a09 	vldr	s0, [r3, #-36]	; 0xffffffdc
 8009fb8:	ee68 ea87 	vmul.f32	s29, s17, s14
 8009fbc:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009fc0:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009fc4:	ee28 ea07 	vmul.f32	s28, s16, s14
 8009fc8:	ee62 da87 	vmul.f32	s27, s5, s14
 8009fcc:	ee22 da07 	vmul.f32	s26, s4, s14
 8009fd0:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8009fd4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009fd8:	ee21 aa87 	vmul.f32	s20, s3, s14
 8009fdc:	ee20 3a87 	vmul.f32	s6, s1, s14
 8009fe0:	ee21 6a07 	vmul.f32	s12, s2, s14
 8009fe4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009fe8:	ee68 5a27 	vmul.f32	s11, s16, s15
 8009fec:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8009ff0:	ee62 4a27 	vmul.f32	s9, s4, s15
 8009ff4:	ee3d da2a 	vadd.f32	s26, s26, s21
 8009ff8:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8009ffc:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800a000:	ee21 aa27 	vmul.f32	s20, s2, s15
 800a004:	ee36 7a09 	vadd.f32	s14, s12, s18
 800a008:	ee3f 4a04 	vadd.f32	s8, s30, s8
 800a00c:	ee20 9aa7 	vmul.f32	s18, s1, s15
 800a010:	ee3e ca8c 	vadd.f32	s24, s29, s24
 800a014:	ee7e ba2b 	vadd.f32	s23, s28, s23
 800a018:	ee3d ba8b 	vadd.f32	s22, s27, s22
 800a01c:	ee33 3a26 	vadd.f32	s6, s6, s13
 800a020:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a024:	ee38 4a84 	vadd.f32	s8, s17, s8
 800a028:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800a02c:	ee75 ba2b 	vadd.f32	s23, s10, s23
 800a030:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800a034:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800a038:	ee3a aa2c 	vadd.f32	s20, s20, s25
 800a03c:	ee39 9a07 	vadd.f32	s18, s18, s14
 800a040:	ee37 3a83 	vadd.f32	s6, s15, s6
 800a044:	f47f aed8 	bne.w	8009df8 <arm_fir_f32+0xf4>
 800a048:	eb09 0104 	add.w	r1, r9, r4
 800a04c:	46e3      	mov	fp, ip
 800a04e:	b3a2      	cbz	r2, 800a0ba <arm_fir_f32+0x3b6>
 800a050:	4613      	mov	r3, r2
 800a052:	ecbb 6a01 	vldmia	fp!, {s12}
 800a056:	3b01      	subs	r3, #1
 800a058:	ecf1 5a01 	vldmia	r1!, {s11}
 800a05c:	ee68 8a06 	vmul.f32	s17, s16, s12
 800a060:	ee62 3a86 	vmul.f32	s7, s5, s12
 800a064:	ee62 4a06 	vmul.f32	s9, s4, s12
 800a068:	ee21 5a86 	vmul.f32	s10, s3, s12
 800a06c:	ee61 6a06 	vmul.f32	s13, s2, s12
 800a070:	ee20 7a86 	vmul.f32	s14, s1, s12
 800a074:	ee60 7a06 	vmul.f32	s15, s0, s12
 800a078:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a07c:	eeb0 8a62 	vmov.f32	s16, s5
 800a080:	ee34 4a28 	vadd.f32	s8, s8, s17
 800a084:	eef0 2a42 	vmov.f32	s5, s4
 800a088:	ee3c ca23 	vadd.f32	s24, s24, s7
 800a08c:	eeb0 2a61 	vmov.f32	s4, s3
 800a090:	ee7b baa4 	vadd.f32	s23, s23, s9
 800a094:	eef0 1a41 	vmov.f32	s3, s2
 800a098:	ee3b ba05 	vadd.f32	s22, s22, s10
 800a09c:	eeb0 1a60 	vmov.f32	s2, s1
 800a0a0:	ee7a aaa6 	vadd.f32	s21, s21, s13
 800a0a4:	eef0 0a40 	vmov.f32	s1, s0
 800a0a8:	ee3a aa07 	vadd.f32	s20, s20, s14
 800a0ac:	eeb0 0a65 	vmov.f32	s0, s11
 800a0b0:	ee39 9a27 	vadd.f32	s18, s18, s15
 800a0b4:	ee33 3a06 	vadd.f32	s6, s6, s12
 800a0b8:	d1cb      	bne.n	800a052 <arm_fir_f32+0x34e>
 800a0ba:	f1be 0e01 	subs.w	lr, lr, #1
 800a0be:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800a0c2:	ed05 ca07 	vstr	s24, [r5, #-28]	; 0xffffffe4
 800a0c6:	f107 0720 	add.w	r7, r7, #32
 800a0ca:	ed45 ba06 	vstr	s23, [r5, #-24]	; 0xffffffe8
 800a0ce:	f106 0620 	add.w	r6, r6, #32
 800a0d2:	ed05 ba05 	vstr	s22, [r5, #-20]	; 0xffffffec
 800a0d6:	f104 0420 	add.w	r4, r4, #32
 800a0da:	ed45 aa04 	vstr	s21, [r5, #-16]
 800a0de:	f105 0520 	add.w	r5, r5, #32
 800a0e2:	ed05 aa0b 	vstr	s20, [r5, #-44]	; 0xffffffd4
 800a0e6:	ed05 9a0a 	vstr	s18, [r5, #-40]	; 0xffffffd8
 800a0ea:	ed05 3a09 	vstr	s6, [r5, #-36]	; 0xffffffdc
 800a0ee:	f47f ae3c 	bne.w	8009d6a <arm_fir_f32+0x66>
 800a0f2:	9b03      	ldr	r3, [sp, #12]
 800a0f4:	4652      	mov	r2, sl
 800a0f6:	9801      	ldr	r0, [sp, #4]
 800a0f8:	015b      	lsls	r3, r3, #5
 800a0fa:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a0fe:	9907      	ldr	r1, [sp, #28]
 800a100:	4418      	add	r0, r3
 800a102:	449c      	add	ip, r3
 800a104:	4419      	add	r1, r3
 800a106:	441a      	add	r2, r3
 800a108:	9001      	str	r0, [sp, #4]
 800a10a:	9b05      	ldr	r3, [sp, #20]
 800a10c:	f013 0e07 	ands.w	lr, r3, #7
 800a110:	d022      	beq.n	800a158 <arm_fir_f32+0x454>
 800a112:	9f01      	ldr	r7, [sp, #4]
 800a114:	4676      	mov	r6, lr
 800a116:	4665      	mov	r5, ip
 800a118:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a11c:	f851 9b04 	ldr.w	r9, [r1], #4
 800a120:	4653      	mov	r3, sl
 800a122:	4644      	mov	r4, r8
 800a124:	eddf 6a02 	vldr	s13, [pc, #8]	; 800a130 <arm_fir_f32+0x42c>
 800a128:	4628      	mov	r0, r5
 800a12a:	f847 9b04 	str.w	r9, [r7], #4
 800a12e:	e001      	b.n	800a134 <arm_fir_f32+0x430>
 800a130:	00000000 	.word	0x00000000
 800a134:	ecb0 7a01 	vldmia	r0!, {s14}
 800a138:	3b01      	subs	r3, #1
 800a13a:	ecf4 7a01 	vldmia	r4!, {s15}
 800a13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a142:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a146:	d1f5      	bne.n	800a134 <arm_fir_f32+0x430>
 800a148:	3e01      	subs	r6, #1
 800a14a:	ece2 6a01 	vstmia	r2!, {s13}
 800a14e:	f105 0504 	add.w	r5, r5, #4
 800a152:	d1e3      	bne.n	800a11c <arm_fir_f32+0x418>
 800a154:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800a158:	9b02      	ldr	r3, [sp, #8]
 800a15a:	1e59      	subs	r1, r3, #1
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	088e      	lsrs	r6, r1, #2
 800a160:	685c      	ldr	r4, [r3, #4]
 800a162:	d01d      	beq.n	800a1a0 <arm_fir_f32+0x49c>
 800a164:	f104 0210 	add.w	r2, r4, #16
 800a168:	f10c 0310 	add.w	r3, ip, #16
 800a16c:	4630      	mov	r0, r6
 800a16e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800a172:	3801      	subs	r0, #1
 800a174:	f103 0310 	add.w	r3, r3, #16
 800a178:	f102 0210 	add.w	r2, r2, #16
 800a17c:	f842 5c20 	str.w	r5, [r2, #-32]
 800a180:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800a184:	f842 5c1c 	str.w	r5, [r2, #-28]
 800a188:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800a18c:	f842 5c18 	str.w	r5, [r2, #-24]
 800a190:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800a194:	f842 5c14 	str.w	r5, [r2, #-20]
 800a198:	d1e9      	bne.n	800a16e <arm_fir_f32+0x46a>
 800a19a:	0133      	lsls	r3, r6, #4
 800a19c:	441c      	add	r4, r3
 800a19e:	449c      	add	ip, r3
 800a1a0:	f011 0303 	ands.w	r3, r1, #3
 800a1a4:	d006      	beq.n	800a1b4 <arm_fir_f32+0x4b0>
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	f842 1b04 	str.w	r1, [r2], #4
 800a1b2:	d1f9      	bne.n	800a1a8 <arm_fir_f32+0x4a4>
 800a1b4:	b009      	add	sp, #36	; 0x24
 800a1b6:	ecbd 8b10 	vpop	{d8-d15}
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1be:	46c3      	mov	fp, r8
 800a1c0:	eeb0 9a43 	vmov.f32	s18, s6
 800a1c4:	eeb0 aa43 	vmov.f32	s20, s6
 800a1c8:	eef0 aa43 	vmov.f32	s21, s6
 800a1cc:	eeb0 ba43 	vmov.f32	s22, s6
 800a1d0:	eef0 ba43 	vmov.f32	s23, s6
 800a1d4:	eeb0 ca43 	vmov.f32	s24, s6
 800a1d8:	eeb0 4a43 	vmov.f32	s8, s6
 800a1dc:	e737      	b.n	800a04e <arm_fir_f32+0x34a>
 800a1de:	bf00      	nop

0800a1e0 <calloc>:
 800a1e0:	4b02      	ldr	r3, [pc, #8]	; (800a1ec <calloc+0xc>)
 800a1e2:	460a      	mov	r2, r1
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	f000 b850 	b.w	800a28c <_calloc_r>
 800a1ec:	24000014 	.word	0x24000014

0800a1f0 <__errno>:
 800a1f0:	4b01      	ldr	r3, [pc, #4]	; (800a1f8 <__errno+0x8>)
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	24000014 	.word	0x24000014

0800a1fc <exit>:
 800a1fc:	b508      	push	{r3, lr}
 800a1fe:	4b07      	ldr	r3, [pc, #28]	; (800a21c <exit+0x20>)
 800a200:	4604      	mov	r4, r0
 800a202:	b113      	cbz	r3, 800a20a <exit+0xe>
 800a204:	2100      	movs	r1, #0
 800a206:	f3af 8000 	nop.w
 800a20a:	4b05      	ldr	r3, [pc, #20]	; (800a220 <exit+0x24>)
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a210:	b103      	cbz	r3, 800a214 <exit+0x18>
 800a212:	4798      	blx	r3
 800a214:	4620      	mov	r0, r4
 800a216:	f7f7 f989 	bl	800152c <_exit>
 800a21a:	bf00      	nop
 800a21c:	00000000 	.word	0x00000000
 800a220:	0800b600 	.word	0x0800b600

0800a224 <__libc_init_array>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	4e0d      	ldr	r6, [pc, #52]	; (800a25c <__libc_init_array+0x38>)
 800a228:	4c0d      	ldr	r4, [pc, #52]	; (800a260 <__libc_init_array+0x3c>)
 800a22a:	1ba4      	subs	r4, r4, r6
 800a22c:	10a4      	asrs	r4, r4, #2
 800a22e:	2500      	movs	r5, #0
 800a230:	42a5      	cmp	r5, r4
 800a232:	d109      	bne.n	800a248 <__libc_init_array+0x24>
 800a234:	4e0b      	ldr	r6, [pc, #44]	; (800a264 <__libc_init_array+0x40>)
 800a236:	4c0c      	ldr	r4, [pc, #48]	; (800a268 <__libc_init_array+0x44>)
 800a238:	f000 fc9e 	bl	800ab78 <_init>
 800a23c:	1ba4      	subs	r4, r4, r6
 800a23e:	10a4      	asrs	r4, r4, #2
 800a240:	2500      	movs	r5, #0
 800a242:	42a5      	cmp	r5, r4
 800a244:	d105      	bne.n	800a252 <__libc_init_array+0x2e>
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24c:	4798      	blx	r3
 800a24e:	3501      	adds	r5, #1
 800a250:	e7ee      	b.n	800a230 <__libc_init_array+0xc>
 800a252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a256:	4798      	blx	r3
 800a258:	3501      	adds	r5, #1
 800a25a:	e7f2      	b.n	800a242 <__libc_init_array+0x1e>
 800a25c:	0800b66c 	.word	0x0800b66c
 800a260:	0800b66c 	.word	0x0800b66c
 800a264:	0800b66c 	.word	0x0800b66c
 800a268:	0800b670 	.word	0x0800b670

0800a26c <malloc>:
 800a26c:	4b02      	ldr	r3, [pc, #8]	; (800a278 <malloc+0xc>)
 800a26e:	4601      	mov	r1, r0
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	f000 b867 	b.w	800a344 <_malloc_r>
 800a276:	bf00      	nop
 800a278:	24000014 	.word	0x24000014

0800a27c <memset>:
 800a27c:	4402      	add	r2, r0
 800a27e:	4603      	mov	r3, r0
 800a280:	4293      	cmp	r3, r2
 800a282:	d100      	bne.n	800a286 <memset+0xa>
 800a284:	4770      	bx	lr
 800a286:	f803 1b01 	strb.w	r1, [r3], #1
 800a28a:	e7f9      	b.n	800a280 <memset+0x4>

0800a28c <_calloc_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	fb02 f401 	mul.w	r4, r2, r1
 800a292:	4621      	mov	r1, r4
 800a294:	f000 f856 	bl	800a344 <_malloc_r>
 800a298:	4605      	mov	r5, r0
 800a29a:	b118      	cbz	r0, 800a2a4 <_calloc_r+0x18>
 800a29c:	4622      	mov	r2, r4
 800a29e:	2100      	movs	r1, #0
 800a2a0:	f7ff ffec 	bl	800a27c <memset>
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}

0800a2a8 <_free_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	2900      	cmp	r1, #0
 800a2ae:	d045      	beq.n	800a33c <_free_r+0x94>
 800a2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b4:	1f0c      	subs	r4, r1, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfb8      	it	lt
 800a2ba:	18e4      	addlt	r4, r4, r3
 800a2bc:	f000 fbae 	bl	800aa1c <__malloc_lock>
 800a2c0:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <_free_r+0x98>)
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	b933      	cbnz	r3, 800a2d6 <_free_r+0x2e>
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	6014      	str	r4, [r2, #0]
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d2:	f000 bba4 	b.w	800aa1e <__malloc_unlock>
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	d90c      	bls.n	800a2f4 <_free_r+0x4c>
 800a2da:	6821      	ldr	r1, [r4, #0]
 800a2dc:	1862      	adds	r2, r4, r1
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	bf04      	itt	eq
 800a2e2:	681a      	ldreq	r2, [r3, #0]
 800a2e4:	685b      	ldreq	r3, [r3, #4]
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	bf04      	itt	eq
 800a2ea:	1852      	addeq	r2, r2, r1
 800a2ec:	6022      	streq	r2, [r4, #0]
 800a2ee:	6004      	str	r4, [r0, #0]
 800a2f0:	e7ec      	b.n	800a2cc <_free_r+0x24>
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	b10a      	cbz	r2, 800a2fc <_free_r+0x54>
 800a2f8:	42a2      	cmp	r2, r4
 800a2fa:	d9fa      	bls.n	800a2f2 <_free_r+0x4a>
 800a2fc:	6819      	ldr	r1, [r3, #0]
 800a2fe:	1858      	adds	r0, r3, r1
 800a300:	42a0      	cmp	r0, r4
 800a302:	d10b      	bne.n	800a31c <_free_r+0x74>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	4401      	add	r1, r0
 800a308:	1858      	adds	r0, r3, r1
 800a30a:	4282      	cmp	r2, r0
 800a30c:	6019      	str	r1, [r3, #0]
 800a30e:	d1dd      	bne.n	800a2cc <_free_r+0x24>
 800a310:	6810      	ldr	r0, [r2, #0]
 800a312:	6852      	ldr	r2, [r2, #4]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	4401      	add	r1, r0
 800a318:	6019      	str	r1, [r3, #0]
 800a31a:	e7d7      	b.n	800a2cc <_free_r+0x24>
 800a31c:	d902      	bls.n	800a324 <_free_r+0x7c>
 800a31e:	230c      	movs	r3, #12
 800a320:	602b      	str	r3, [r5, #0]
 800a322:	e7d3      	b.n	800a2cc <_free_r+0x24>
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	1821      	adds	r1, r4, r0
 800a328:	428a      	cmp	r2, r1
 800a32a:	bf04      	itt	eq
 800a32c:	6811      	ldreq	r1, [r2, #0]
 800a32e:	6852      	ldreq	r2, [r2, #4]
 800a330:	6062      	str	r2, [r4, #4]
 800a332:	bf04      	itt	eq
 800a334:	1809      	addeq	r1, r1, r0
 800a336:	6021      	streq	r1, [r4, #0]
 800a338:	605c      	str	r4, [r3, #4]
 800a33a:	e7c7      	b.n	800a2cc <_free_r+0x24>
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	bf00      	nop
 800a340:	240000b0 	.word	0x240000b0

0800a344 <_malloc_r>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	1ccd      	adds	r5, r1, #3
 800a348:	f025 0503 	bic.w	r5, r5, #3
 800a34c:	3508      	adds	r5, #8
 800a34e:	2d0c      	cmp	r5, #12
 800a350:	bf38      	it	cc
 800a352:	250c      	movcc	r5, #12
 800a354:	2d00      	cmp	r5, #0
 800a356:	4606      	mov	r6, r0
 800a358:	db01      	blt.n	800a35e <_malloc_r+0x1a>
 800a35a:	42a9      	cmp	r1, r5
 800a35c:	d903      	bls.n	800a366 <_malloc_r+0x22>
 800a35e:	230c      	movs	r3, #12
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	2000      	movs	r0, #0
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	f000 fb59 	bl	800aa1c <__malloc_lock>
 800a36a:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <_malloc_r+0xac>)
 800a36c:	6814      	ldr	r4, [r2, #0]
 800a36e:	4621      	mov	r1, r4
 800a370:	b991      	cbnz	r1, 800a398 <_malloc_r+0x54>
 800a372:	4c20      	ldr	r4, [pc, #128]	; (800a3f4 <_malloc_r+0xb0>)
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	b91b      	cbnz	r3, 800a380 <_malloc_r+0x3c>
 800a378:	4630      	mov	r0, r6
 800a37a:	f000 f8a1 	bl	800a4c0 <_sbrk_r>
 800a37e:	6020      	str	r0, [r4, #0]
 800a380:	4629      	mov	r1, r5
 800a382:	4630      	mov	r0, r6
 800a384:	f000 f89c 	bl	800a4c0 <_sbrk_r>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d124      	bne.n	800a3d6 <_malloc_r+0x92>
 800a38c:	230c      	movs	r3, #12
 800a38e:	6033      	str	r3, [r6, #0]
 800a390:	4630      	mov	r0, r6
 800a392:	f000 fb44 	bl	800aa1e <__malloc_unlock>
 800a396:	e7e4      	b.n	800a362 <_malloc_r+0x1e>
 800a398:	680b      	ldr	r3, [r1, #0]
 800a39a:	1b5b      	subs	r3, r3, r5
 800a39c:	d418      	bmi.n	800a3d0 <_malloc_r+0x8c>
 800a39e:	2b0b      	cmp	r3, #11
 800a3a0:	d90f      	bls.n	800a3c2 <_malloc_r+0x7e>
 800a3a2:	600b      	str	r3, [r1, #0]
 800a3a4:	50cd      	str	r5, [r1, r3]
 800a3a6:	18cc      	adds	r4, r1, r3
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 fb38 	bl	800aa1e <__malloc_unlock>
 800a3ae:	f104 000b 	add.w	r0, r4, #11
 800a3b2:	1d23      	adds	r3, r4, #4
 800a3b4:	f020 0007 	bic.w	r0, r0, #7
 800a3b8:	1ac3      	subs	r3, r0, r3
 800a3ba:	d0d3      	beq.n	800a364 <_malloc_r+0x20>
 800a3bc:	425a      	negs	r2, r3
 800a3be:	50e2      	str	r2, [r4, r3]
 800a3c0:	e7d0      	b.n	800a364 <_malloc_r+0x20>
 800a3c2:	428c      	cmp	r4, r1
 800a3c4:	684b      	ldr	r3, [r1, #4]
 800a3c6:	bf16      	itet	ne
 800a3c8:	6063      	strne	r3, [r4, #4]
 800a3ca:	6013      	streq	r3, [r2, #0]
 800a3cc:	460c      	movne	r4, r1
 800a3ce:	e7eb      	b.n	800a3a8 <_malloc_r+0x64>
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	6849      	ldr	r1, [r1, #4]
 800a3d4:	e7cc      	b.n	800a370 <_malloc_r+0x2c>
 800a3d6:	1cc4      	adds	r4, r0, #3
 800a3d8:	f024 0403 	bic.w	r4, r4, #3
 800a3dc:	42a0      	cmp	r0, r4
 800a3de:	d005      	beq.n	800a3ec <_malloc_r+0xa8>
 800a3e0:	1a21      	subs	r1, r4, r0
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f86c 	bl	800a4c0 <_sbrk_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d0cf      	beq.n	800a38c <_malloc_r+0x48>
 800a3ec:	6025      	str	r5, [r4, #0]
 800a3ee:	e7db      	b.n	800a3a8 <_malloc_r+0x64>
 800a3f0:	240000b0 	.word	0x240000b0
 800a3f4:	240000b4 	.word	0x240000b4

0800a3f8 <_puts_r>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	460e      	mov	r6, r1
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	b118      	cbz	r0, 800a408 <_puts_r+0x10>
 800a400:	6983      	ldr	r3, [r0, #24]
 800a402:	b90b      	cbnz	r3, 800a408 <_puts_r+0x10>
 800a404:	f000 fa1c 	bl	800a840 <__sinit>
 800a408:	69ab      	ldr	r3, [r5, #24]
 800a40a:	68ac      	ldr	r4, [r5, #8]
 800a40c:	b913      	cbnz	r3, 800a414 <_puts_r+0x1c>
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fa16 	bl	800a840 <__sinit>
 800a414:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <_puts_r+0xac>)
 800a416:	429c      	cmp	r4, r3
 800a418:	d117      	bne.n	800a44a <_puts_r+0x52>
 800a41a:	686c      	ldr	r4, [r5, #4]
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	071b      	lsls	r3, r3, #28
 800a420:	d51d      	bpl.n	800a45e <_puts_r+0x66>
 800a422:	6923      	ldr	r3, [r4, #16]
 800a424:	b1db      	cbz	r3, 800a45e <_puts_r+0x66>
 800a426:	3e01      	subs	r6, #1
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a42e:	3b01      	subs	r3, #1
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	b9e9      	cbnz	r1, 800a470 <_puts_r+0x78>
 800a434:	2b00      	cmp	r3, #0
 800a436:	da2e      	bge.n	800a496 <_puts_r+0x9e>
 800a438:	4622      	mov	r2, r4
 800a43a:	210a      	movs	r1, #10
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 f84f 	bl	800a4e0 <__swbuf_r>
 800a442:	3001      	adds	r0, #1
 800a444:	d011      	beq.n	800a46a <_puts_r+0x72>
 800a446:	200a      	movs	r0, #10
 800a448:	e011      	b.n	800a46e <_puts_r+0x76>
 800a44a:	4b17      	ldr	r3, [pc, #92]	; (800a4a8 <_puts_r+0xb0>)
 800a44c:	429c      	cmp	r4, r3
 800a44e:	d101      	bne.n	800a454 <_puts_r+0x5c>
 800a450:	68ac      	ldr	r4, [r5, #8]
 800a452:	e7e3      	b.n	800a41c <_puts_r+0x24>
 800a454:	4b15      	ldr	r3, [pc, #84]	; (800a4ac <_puts_r+0xb4>)
 800a456:	429c      	cmp	r4, r3
 800a458:	bf08      	it	eq
 800a45a:	68ec      	ldreq	r4, [r5, #12]
 800a45c:	e7de      	b.n	800a41c <_puts_r+0x24>
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f000 f88f 	bl	800a584 <__swsetup_r>
 800a466:	2800      	cmp	r0, #0
 800a468:	d0dd      	beq.n	800a426 <_puts_r+0x2e>
 800a46a:	f04f 30ff 	mov.w	r0, #4294967295
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	2b00      	cmp	r3, #0
 800a472:	da04      	bge.n	800a47e <_puts_r+0x86>
 800a474:	69a2      	ldr	r2, [r4, #24]
 800a476:	429a      	cmp	r2, r3
 800a478:	dc06      	bgt.n	800a488 <_puts_r+0x90>
 800a47a:	290a      	cmp	r1, #10
 800a47c:	d004      	beq.n	800a488 <_puts_r+0x90>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	7019      	strb	r1, [r3, #0]
 800a486:	e7cf      	b.n	800a428 <_puts_r+0x30>
 800a488:	4622      	mov	r2, r4
 800a48a:	4628      	mov	r0, r5
 800a48c:	f000 f828 	bl	800a4e0 <__swbuf_r>
 800a490:	3001      	adds	r0, #1
 800a492:	d1c9      	bne.n	800a428 <_puts_r+0x30>
 800a494:	e7e9      	b.n	800a46a <_puts_r+0x72>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	200a      	movs	r0, #10
 800a49a:	1c5a      	adds	r2, r3, #1
 800a49c:	6022      	str	r2, [r4, #0]
 800a49e:	7018      	strb	r0, [r3, #0]
 800a4a0:	e7e5      	b.n	800a46e <_puts_r+0x76>
 800a4a2:	bf00      	nop
 800a4a4:	0800b624 	.word	0x0800b624
 800a4a8:	0800b644 	.word	0x0800b644
 800a4ac:	0800b604 	.word	0x0800b604

0800a4b0 <puts>:
 800a4b0:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <puts+0xc>)
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	f7ff bf9f 	b.w	800a3f8 <_puts_r>
 800a4ba:	bf00      	nop
 800a4bc:	24000014 	.word	0x24000014

0800a4c0 <_sbrk_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4c06      	ldr	r4, [pc, #24]	; (800a4dc <_sbrk_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	6023      	str	r3, [r4, #0]
 800a4cc:	f7f7 f8a6 	bl	800161c <_sbrk>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_sbrk_r+0x1a>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_sbrk_r+0x1a>
 800a4d8:	602b      	str	r3, [r5, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	24000300 	.word	0x24000300

0800a4e0 <__swbuf_r>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	460e      	mov	r6, r1
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	b118      	cbz	r0, 800a4f2 <__swbuf_r+0x12>
 800a4ea:	6983      	ldr	r3, [r0, #24]
 800a4ec:	b90b      	cbnz	r3, 800a4f2 <__swbuf_r+0x12>
 800a4ee:	f000 f9a7 	bl	800a840 <__sinit>
 800a4f2:	4b21      	ldr	r3, [pc, #132]	; (800a578 <__swbuf_r+0x98>)
 800a4f4:	429c      	cmp	r4, r3
 800a4f6:	d12a      	bne.n	800a54e <__swbuf_r+0x6e>
 800a4f8:	686c      	ldr	r4, [r5, #4]
 800a4fa:	69a3      	ldr	r3, [r4, #24]
 800a4fc:	60a3      	str	r3, [r4, #8]
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	071a      	lsls	r2, r3, #28
 800a502:	d52e      	bpl.n	800a562 <__swbuf_r+0x82>
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	b363      	cbz	r3, 800a562 <__swbuf_r+0x82>
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	6820      	ldr	r0, [r4, #0]
 800a50c:	1ac0      	subs	r0, r0, r3
 800a50e:	6963      	ldr	r3, [r4, #20]
 800a510:	b2f6      	uxtb	r6, r6
 800a512:	4283      	cmp	r3, r0
 800a514:	4637      	mov	r7, r6
 800a516:	dc04      	bgt.n	800a522 <__swbuf_r+0x42>
 800a518:	4621      	mov	r1, r4
 800a51a:	4628      	mov	r0, r5
 800a51c:	f000 f926 	bl	800a76c <_fflush_r>
 800a520:	bb28      	cbnz	r0, 800a56e <__swbuf_r+0x8e>
 800a522:	68a3      	ldr	r3, [r4, #8]
 800a524:	3b01      	subs	r3, #1
 800a526:	60a3      	str	r3, [r4, #8]
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	6022      	str	r2, [r4, #0]
 800a52e:	701e      	strb	r6, [r3, #0]
 800a530:	6963      	ldr	r3, [r4, #20]
 800a532:	3001      	adds	r0, #1
 800a534:	4283      	cmp	r3, r0
 800a536:	d004      	beq.n	800a542 <__swbuf_r+0x62>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	07db      	lsls	r3, r3, #31
 800a53c:	d519      	bpl.n	800a572 <__swbuf_r+0x92>
 800a53e:	2e0a      	cmp	r6, #10
 800a540:	d117      	bne.n	800a572 <__swbuf_r+0x92>
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f000 f911 	bl	800a76c <_fflush_r>
 800a54a:	b190      	cbz	r0, 800a572 <__swbuf_r+0x92>
 800a54c:	e00f      	b.n	800a56e <__swbuf_r+0x8e>
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <__swbuf_r+0x9c>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d101      	bne.n	800a558 <__swbuf_r+0x78>
 800a554:	68ac      	ldr	r4, [r5, #8]
 800a556:	e7d0      	b.n	800a4fa <__swbuf_r+0x1a>
 800a558:	4b09      	ldr	r3, [pc, #36]	; (800a580 <__swbuf_r+0xa0>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	bf08      	it	eq
 800a55e:	68ec      	ldreq	r4, [r5, #12]
 800a560:	e7cb      	b.n	800a4fa <__swbuf_r+0x1a>
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f000 f80d 	bl	800a584 <__swsetup_r>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d0cc      	beq.n	800a508 <__swbuf_r+0x28>
 800a56e:	f04f 37ff 	mov.w	r7, #4294967295
 800a572:	4638      	mov	r0, r7
 800a574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a576:	bf00      	nop
 800a578:	0800b624 	.word	0x0800b624
 800a57c:	0800b644 	.word	0x0800b644
 800a580:	0800b604 	.word	0x0800b604

0800a584 <__swsetup_r>:
 800a584:	4b32      	ldr	r3, [pc, #200]	; (800a650 <__swsetup_r+0xcc>)
 800a586:	b570      	push	{r4, r5, r6, lr}
 800a588:	681d      	ldr	r5, [r3, #0]
 800a58a:	4606      	mov	r6, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	b125      	cbz	r5, 800a59a <__swsetup_r+0x16>
 800a590:	69ab      	ldr	r3, [r5, #24]
 800a592:	b913      	cbnz	r3, 800a59a <__swsetup_r+0x16>
 800a594:	4628      	mov	r0, r5
 800a596:	f000 f953 	bl	800a840 <__sinit>
 800a59a:	4b2e      	ldr	r3, [pc, #184]	; (800a654 <__swsetup_r+0xd0>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d10f      	bne.n	800a5c0 <__swsetup_r+0x3c>
 800a5a0:	686c      	ldr	r4, [r5, #4]
 800a5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	0715      	lsls	r5, r2, #28
 800a5aa:	d42c      	bmi.n	800a606 <__swsetup_r+0x82>
 800a5ac:	06d0      	lsls	r0, r2, #27
 800a5ae:	d411      	bmi.n	800a5d4 <__swsetup_r+0x50>
 800a5b0:	2209      	movs	r2, #9
 800a5b2:	6032      	str	r2, [r6, #0]
 800a5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a5be:	e03e      	b.n	800a63e <__swsetup_r+0xba>
 800a5c0:	4b25      	ldr	r3, [pc, #148]	; (800a658 <__swsetup_r+0xd4>)
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d101      	bne.n	800a5ca <__swsetup_r+0x46>
 800a5c6:	68ac      	ldr	r4, [r5, #8]
 800a5c8:	e7eb      	b.n	800a5a2 <__swsetup_r+0x1e>
 800a5ca:	4b24      	ldr	r3, [pc, #144]	; (800a65c <__swsetup_r+0xd8>)
 800a5cc:	429c      	cmp	r4, r3
 800a5ce:	bf08      	it	eq
 800a5d0:	68ec      	ldreq	r4, [r5, #12]
 800a5d2:	e7e6      	b.n	800a5a2 <__swsetup_r+0x1e>
 800a5d4:	0751      	lsls	r1, r2, #29
 800a5d6:	d512      	bpl.n	800a5fe <__swsetup_r+0x7a>
 800a5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5da:	b141      	cbz	r1, 800a5ee <__swsetup_r+0x6a>
 800a5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	d002      	beq.n	800a5ea <__swsetup_r+0x66>
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff fe5f 	bl	800a2a8 <_free_r>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	6063      	str	r3, [r4, #4]
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f043 0308 	orr.w	r3, r3, #8
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	6923      	ldr	r3, [r4, #16]
 800a608:	b94b      	cbnz	r3, 800a61e <__swsetup_r+0x9a>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a614:	d003      	beq.n	800a61e <__swsetup_r+0x9a>
 800a616:	4621      	mov	r1, r4
 800a618:	4630      	mov	r0, r6
 800a61a:	f000 f9bf 	bl	800a99c <__smakebuf_r>
 800a61e:	89a2      	ldrh	r2, [r4, #12]
 800a620:	f012 0301 	ands.w	r3, r2, #1
 800a624:	d00c      	beq.n	800a640 <__swsetup_r+0xbc>
 800a626:	2300      	movs	r3, #0
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	6963      	ldr	r3, [r4, #20]
 800a62c:	425b      	negs	r3, r3
 800a62e:	61a3      	str	r3, [r4, #24]
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	b953      	cbnz	r3, 800a64a <__swsetup_r+0xc6>
 800a634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a63c:	d1ba      	bne.n	800a5b4 <__swsetup_r+0x30>
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	0792      	lsls	r2, r2, #30
 800a642:	bf58      	it	pl
 800a644:	6963      	ldrpl	r3, [r4, #20]
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	e7f2      	b.n	800a630 <__swsetup_r+0xac>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e7f7      	b.n	800a63e <__swsetup_r+0xba>
 800a64e:	bf00      	nop
 800a650:	24000014 	.word	0x24000014
 800a654:	0800b624 	.word	0x0800b624
 800a658:	0800b644 	.word	0x0800b644
 800a65c:	0800b604 	.word	0x0800b604

0800a660 <__sflush_r>:
 800a660:	898a      	ldrh	r2, [r1, #12]
 800a662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a666:	4605      	mov	r5, r0
 800a668:	0710      	lsls	r0, r2, #28
 800a66a:	460c      	mov	r4, r1
 800a66c:	d458      	bmi.n	800a720 <__sflush_r+0xc0>
 800a66e:	684b      	ldr	r3, [r1, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc05      	bgt.n	800a680 <__sflush_r+0x20>
 800a674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	dc02      	bgt.n	800a680 <__sflush_r+0x20>
 800a67a:	2000      	movs	r0, #0
 800a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a682:	2e00      	cmp	r6, #0
 800a684:	d0f9      	beq.n	800a67a <__sflush_r+0x1a>
 800a686:	2300      	movs	r3, #0
 800a688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a68c:	682f      	ldr	r7, [r5, #0]
 800a68e:	6a21      	ldr	r1, [r4, #32]
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	d032      	beq.n	800a6fa <__sflush_r+0x9a>
 800a694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	075a      	lsls	r2, r3, #29
 800a69a:	d505      	bpl.n	800a6a8 <__sflush_r+0x48>
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	1ac0      	subs	r0, r0, r3
 800a6a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6a2:	b10b      	cbz	r3, 800a6a8 <__sflush_r+0x48>
 800a6a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6a6:	1ac0      	subs	r0, r0, r3
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ae:	6a21      	ldr	r1, [r4, #32]
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b0      	blx	r6
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	d106      	bne.n	800a6c8 <__sflush_r+0x68>
 800a6ba:	6829      	ldr	r1, [r5, #0]
 800a6bc:	291d      	cmp	r1, #29
 800a6be:	d848      	bhi.n	800a752 <__sflush_r+0xf2>
 800a6c0:	4a29      	ldr	r2, [pc, #164]	; (800a768 <__sflush_r+0x108>)
 800a6c2:	40ca      	lsrs	r2, r1
 800a6c4:	07d6      	lsls	r6, r2, #31
 800a6c6:	d544      	bpl.n	800a752 <__sflush_r+0xf2>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	6062      	str	r2, [r4, #4]
 800a6cc:	04d9      	lsls	r1, r3, #19
 800a6ce:	6922      	ldr	r2, [r4, #16]
 800a6d0:	6022      	str	r2, [r4, #0]
 800a6d2:	d504      	bpl.n	800a6de <__sflush_r+0x7e>
 800a6d4:	1c42      	adds	r2, r0, #1
 800a6d6:	d101      	bne.n	800a6dc <__sflush_r+0x7c>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b903      	cbnz	r3, 800a6de <__sflush_r+0x7e>
 800a6dc:	6560      	str	r0, [r4, #84]	; 0x54
 800a6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6e0:	602f      	str	r7, [r5, #0]
 800a6e2:	2900      	cmp	r1, #0
 800a6e4:	d0c9      	beq.n	800a67a <__sflush_r+0x1a>
 800a6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	d002      	beq.n	800a6f4 <__sflush_r+0x94>
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f7ff fdda 	bl	800a2a8 <_free_r>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	6360      	str	r0, [r4, #52]	; 0x34
 800a6f8:	e7c0      	b.n	800a67c <__sflush_r+0x1c>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	47b0      	blx	r6
 800a700:	1c41      	adds	r1, r0, #1
 800a702:	d1c8      	bne.n	800a696 <__sflush_r+0x36>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0c5      	beq.n	800a696 <__sflush_r+0x36>
 800a70a:	2b1d      	cmp	r3, #29
 800a70c:	d001      	beq.n	800a712 <__sflush_r+0xb2>
 800a70e:	2b16      	cmp	r3, #22
 800a710:	d101      	bne.n	800a716 <__sflush_r+0xb6>
 800a712:	602f      	str	r7, [r5, #0]
 800a714:	e7b1      	b.n	800a67a <__sflush_r+0x1a>
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	e7ad      	b.n	800a67c <__sflush_r+0x1c>
 800a720:	690f      	ldr	r7, [r1, #16]
 800a722:	2f00      	cmp	r7, #0
 800a724:	d0a9      	beq.n	800a67a <__sflush_r+0x1a>
 800a726:	0793      	lsls	r3, r2, #30
 800a728:	680e      	ldr	r6, [r1, #0]
 800a72a:	bf08      	it	eq
 800a72c:	694b      	ldreq	r3, [r1, #20]
 800a72e:	600f      	str	r7, [r1, #0]
 800a730:	bf18      	it	ne
 800a732:	2300      	movne	r3, #0
 800a734:	eba6 0807 	sub.w	r8, r6, r7
 800a738:	608b      	str	r3, [r1, #8]
 800a73a:	f1b8 0f00 	cmp.w	r8, #0
 800a73e:	dd9c      	ble.n	800a67a <__sflush_r+0x1a>
 800a740:	4643      	mov	r3, r8
 800a742:	463a      	mov	r2, r7
 800a744:	6a21      	ldr	r1, [r4, #32]
 800a746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a748:	4628      	mov	r0, r5
 800a74a:	47b0      	blx	r6
 800a74c:	2800      	cmp	r0, #0
 800a74e:	dc06      	bgt.n	800a75e <__sflush_r+0xfe>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e78e      	b.n	800a67c <__sflush_r+0x1c>
 800a75e:	4407      	add	r7, r0
 800a760:	eba8 0800 	sub.w	r8, r8, r0
 800a764:	e7e9      	b.n	800a73a <__sflush_r+0xda>
 800a766:	bf00      	nop
 800a768:	20400001 	.word	0x20400001

0800a76c <_fflush_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	690b      	ldr	r3, [r1, #16]
 800a770:	4605      	mov	r5, r0
 800a772:	460c      	mov	r4, r1
 800a774:	b1db      	cbz	r3, 800a7ae <_fflush_r+0x42>
 800a776:	b118      	cbz	r0, 800a780 <_fflush_r+0x14>
 800a778:	6983      	ldr	r3, [r0, #24]
 800a77a:	b90b      	cbnz	r3, 800a780 <_fflush_r+0x14>
 800a77c:	f000 f860 	bl	800a840 <__sinit>
 800a780:	4b0c      	ldr	r3, [pc, #48]	; (800a7b4 <_fflush_r+0x48>)
 800a782:	429c      	cmp	r4, r3
 800a784:	d109      	bne.n	800a79a <_fflush_r+0x2e>
 800a786:	686c      	ldr	r4, [r5, #4]
 800a788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78c:	b17b      	cbz	r3, 800a7ae <_fflush_r+0x42>
 800a78e:	4621      	mov	r1, r4
 800a790:	4628      	mov	r0, r5
 800a792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a796:	f7ff bf63 	b.w	800a660 <__sflush_r>
 800a79a:	4b07      	ldr	r3, [pc, #28]	; (800a7b8 <_fflush_r+0x4c>)
 800a79c:	429c      	cmp	r4, r3
 800a79e:	d101      	bne.n	800a7a4 <_fflush_r+0x38>
 800a7a0:	68ac      	ldr	r4, [r5, #8]
 800a7a2:	e7f1      	b.n	800a788 <_fflush_r+0x1c>
 800a7a4:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <_fflush_r+0x50>)
 800a7a6:	429c      	cmp	r4, r3
 800a7a8:	bf08      	it	eq
 800a7aa:	68ec      	ldreq	r4, [r5, #12]
 800a7ac:	e7ec      	b.n	800a788 <_fflush_r+0x1c>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800b624 	.word	0x0800b624
 800a7b8:	0800b644 	.word	0x0800b644
 800a7bc:	0800b604 	.word	0x0800b604

0800a7c0 <std>:
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ca:	6083      	str	r3, [r0, #8]
 800a7cc:	8181      	strh	r1, [r0, #12]
 800a7ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a7d0:	81c2      	strh	r2, [r0, #14]
 800a7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7d6:	6183      	str	r3, [r0, #24]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	2208      	movs	r2, #8
 800a7dc:	305c      	adds	r0, #92	; 0x5c
 800a7de:	f7ff fd4d 	bl	800a27c <memset>
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <std+0x38>)
 800a7e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <std+0x3c>)
 800a7e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <std+0x40>)
 800a7ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ee:	4b05      	ldr	r3, [pc, #20]	; (800a804 <std+0x44>)
 800a7f0:	6224      	str	r4, [r4, #32]
 800a7f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800aa21 	.word	0x0800aa21
 800a7fc:	0800aa43 	.word	0x0800aa43
 800a800:	0800aa7b 	.word	0x0800aa7b
 800a804:	0800aa9f 	.word	0x0800aa9f

0800a808 <_cleanup_r>:
 800a808:	4901      	ldr	r1, [pc, #4]	; (800a810 <_cleanup_r+0x8>)
 800a80a:	f000 b885 	b.w	800a918 <_fwalk_reent>
 800a80e:	bf00      	nop
 800a810:	0800a76d 	.word	0x0800a76d

0800a814 <__sfmoreglue>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	1e4a      	subs	r2, r1, #1
 800a818:	2568      	movs	r5, #104	; 0x68
 800a81a:	4355      	muls	r5, r2
 800a81c:	460e      	mov	r6, r1
 800a81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a822:	f7ff fd8f 	bl	800a344 <_malloc_r>
 800a826:	4604      	mov	r4, r0
 800a828:	b140      	cbz	r0, 800a83c <__sfmoreglue+0x28>
 800a82a:	2100      	movs	r1, #0
 800a82c:	e9c0 1600 	strd	r1, r6, [r0]
 800a830:	300c      	adds	r0, #12
 800a832:	60a0      	str	r0, [r4, #8]
 800a834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a838:	f7ff fd20 	bl	800a27c <memset>
 800a83c:	4620      	mov	r0, r4
 800a83e:	bd70      	pop	{r4, r5, r6, pc}

0800a840 <__sinit>:
 800a840:	6983      	ldr	r3, [r0, #24]
 800a842:	b510      	push	{r4, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	bb33      	cbnz	r3, 800a896 <__sinit+0x56>
 800a848:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a84c:	6503      	str	r3, [r0, #80]	; 0x50
 800a84e:	4b12      	ldr	r3, [pc, #72]	; (800a898 <__sinit+0x58>)
 800a850:	4a12      	ldr	r2, [pc, #72]	; (800a89c <__sinit+0x5c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6282      	str	r2, [r0, #40]	; 0x28
 800a856:	4298      	cmp	r0, r3
 800a858:	bf04      	itt	eq
 800a85a:	2301      	moveq	r3, #1
 800a85c:	6183      	streq	r3, [r0, #24]
 800a85e:	f000 f81f 	bl	800a8a0 <__sfp>
 800a862:	6060      	str	r0, [r4, #4]
 800a864:	4620      	mov	r0, r4
 800a866:	f000 f81b 	bl	800a8a0 <__sfp>
 800a86a:	60a0      	str	r0, [r4, #8]
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 f817 	bl	800a8a0 <__sfp>
 800a872:	2200      	movs	r2, #0
 800a874:	60e0      	str	r0, [r4, #12]
 800a876:	2104      	movs	r1, #4
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	f7ff ffa1 	bl	800a7c0 <std>
 800a87e:	2201      	movs	r2, #1
 800a880:	2109      	movs	r1, #9
 800a882:	68a0      	ldr	r0, [r4, #8]
 800a884:	f7ff ff9c 	bl	800a7c0 <std>
 800a888:	2202      	movs	r2, #2
 800a88a:	2112      	movs	r1, #18
 800a88c:	68e0      	ldr	r0, [r4, #12]
 800a88e:	f7ff ff97 	bl	800a7c0 <std>
 800a892:	2301      	movs	r3, #1
 800a894:	61a3      	str	r3, [r4, #24]
 800a896:	bd10      	pop	{r4, pc}
 800a898:	0800b600 	.word	0x0800b600
 800a89c:	0800a809 	.word	0x0800a809

0800a8a0 <__sfp>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	4b1b      	ldr	r3, [pc, #108]	; (800a910 <__sfp+0x70>)
 800a8a4:	681e      	ldr	r6, [r3, #0]
 800a8a6:	69b3      	ldr	r3, [r6, #24]
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	b913      	cbnz	r3, 800a8b2 <__sfp+0x12>
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ffc7 	bl	800a840 <__sinit>
 800a8b2:	3648      	adds	r6, #72	; 0x48
 800a8b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	d503      	bpl.n	800a8c4 <__sfp+0x24>
 800a8bc:	6833      	ldr	r3, [r6, #0]
 800a8be:	b133      	cbz	r3, 800a8ce <__sfp+0x2e>
 800a8c0:	6836      	ldr	r6, [r6, #0]
 800a8c2:	e7f7      	b.n	800a8b4 <__sfp+0x14>
 800a8c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8c8:	b16d      	cbz	r5, 800a8e6 <__sfp+0x46>
 800a8ca:	3468      	adds	r4, #104	; 0x68
 800a8cc:	e7f4      	b.n	800a8b8 <__sfp+0x18>
 800a8ce:	2104      	movs	r1, #4
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff ff9f 	bl	800a814 <__sfmoreglue>
 800a8d6:	6030      	str	r0, [r6, #0]
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d1f1      	bne.n	800a8c0 <__sfp+0x20>
 800a8dc:	230c      	movs	r3, #12
 800a8de:	603b      	str	r3, [r7, #0]
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <__sfp+0x74>)
 800a8e8:	6665      	str	r5, [r4, #100]	; 0x64
 800a8ea:	e9c4 5500 	strd	r5, r5, [r4]
 800a8ee:	60a5      	str	r5, [r4, #8]
 800a8f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a8f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a8f8:	2208      	movs	r2, #8
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a900:	f7ff fcbc 	bl	800a27c <memset>
 800a904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a90c:	e7e9      	b.n	800a8e2 <__sfp+0x42>
 800a90e:	bf00      	nop
 800a910:	0800b600 	.word	0x0800b600
 800a914:	ffff0001 	.word	0xffff0001

0800a918 <_fwalk_reent>:
 800a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a91c:	4680      	mov	r8, r0
 800a91e:	4689      	mov	r9, r1
 800a920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a924:	2600      	movs	r6, #0
 800a926:	b914      	cbnz	r4, 800a92e <_fwalk_reent+0x16>
 800a928:	4630      	mov	r0, r6
 800a92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a932:	3f01      	subs	r7, #1
 800a934:	d501      	bpl.n	800a93a <_fwalk_reent+0x22>
 800a936:	6824      	ldr	r4, [r4, #0]
 800a938:	e7f5      	b.n	800a926 <_fwalk_reent+0xe>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d907      	bls.n	800a950 <_fwalk_reent+0x38>
 800a940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a944:	3301      	adds	r3, #1
 800a946:	d003      	beq.n	800a950 <_fwalk_reent+0x38>
 800a948:	4629      	mov	r1, r5
 800a94a:	4640      	mov	r0, r8
 800a94c:	47c8      	blx	r9
 800a94e:	4306      	orrs	r6, r0
 800a950:	3568      	adds	r5, #104	; 0x68
 800a952:	e7ee      	b.n	800a932 <_fwalk_reent+0x1a>

0800a954 <__swhatbuf_r>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	460e      	mov	r6, r1
 800a958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95c:	2900      	cmp	r1, #0
 800a95e:	b096      	sub	sp, #88	; 0x58
 800a960:	4614      	mov	r4, r2
 800a962:	461d      	mov	r5, r3
 800a964:	da07      	bge.n	800a976 <__swhatbuf_r+0x22>
 800a966:	2300      	movs	r3, #0
 800a968:	602b      	str	r3, [r5, #0]
 800a96a:	89b3      	ldrh	r3, [r6, #12]
 800a96c:	061a      	lsls	r2, r3, #24
 800a96e:	d410      	bmi.n	800a992 <__swhatbuf_r+0x3e>
 800a970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a974:	e00e      	b.n	800a994 <__swhatbuf_r+0x40>
 800a976:	466a      	mov	r2, sp
 800a978:	f000 f8b8 	bl	800aaec <_fstat_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	dbf2      	blt.n	800a966 <__swhatbuf_r+0x12>
 800a980:	9a01      	ldr	r2, [sp, #4]
 800a982:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a986:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a98a:	425a      	negs	r2, r3
 800a98c:	415a      	adcs	r2, r3
 800a98e:	602a      	str	r2, [r5, #0]
 800a990:	e7ee      	b.n	800a970 <__swhatbuf_r+0x1c>
 800a992:	2340      	movs	r3, #64	; 0x40
 800a994:	2000      	movs	r0, #0
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	b016      	add	sp, #88	; 0x58
 800a99a:	bd70      	pop	{r4, r5, r6, pc}

0800a99c <__smakebuf_r>:
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9a0:	079d      	lsls	r5, r3, #30
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	d507      	bpl.n	800a9b8 <__smakebuf_r+0x1c>
 800a9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	6123      	str	r3, [r4, #16]
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	b002      	add	sp, #8
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	ab01      	add	r3, sp, #4
 800a9ba:	466a      	mov	r2, sp
 800a9bc:	f7ff ffca 	bl	800a954 <__swhatbuf_r>
 800a9c0:	9900      	ldr	r1, [sp, #0]
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff fcbd 	bl	800a344 <_malloc_r>
 800a9ca:	b948      	cbnz	r0, 800a9e0 <__smakebuf_r+0x44>
 800a9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d0:	059a      	lsls	r2, r3, #22
 800a9d2:	d4ef      	bmi.n	800a9b4 <__smakebuf_r+0x18>
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	f043 0302 	orr.w	r3, r3, #2
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	e7e3      	b.n	800a9a8 <__smakebuf_r+0xc>
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <__smakebuf_r+0x7c>)
 800a9e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	6020      	str	r0, [r4, #0]
 800a9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	6163      	str	r3, [r4, #20]
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	6120      	str	r0, [r4, #16]
 800a9f6:	b15b      	cbz	r3, 800aa10 <__smakebuf_r+0x74>
 800a9f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f887 	bl	800ab10 <_isatty_r>
 800aa02:	b128      	cbz	r0, 800aa10 <__smakebuf_r+0x74>
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f023 0303 	bic.w	r3, r3, #3
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	431d      	orrs	r5, r3
 800aa14:	81a5      	strh	r5, [r4, #12]
 800aa16:	e7cd      	b.n	800a9b4 <__smakebuf_r+0x18>
 800aa18:	0800a809 	.word	0x0800a809

0800aa1c <__malloc_lock>:
 800aa1c:	4770      	bx	lr

0800aa1e <__malloc_unlock>:
 800aa1e:	4770      	bx	lr

0800aa20 <__sread>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	f000 f894 	bl	800ab54 <_read_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	bfab      	itete	ge
 800aa30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa32:	89a3      	ldrhlt	r3, [r4, #12]
 800aa34:	181b      	addge	r3, r3, r0
 800aa36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa3a:	bfac      	ite	ge
 800aa3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3e:	81a3      	strhlt	r3, [r4, #12]
 800aa40:	bd10      	pop	{r4, pc}

0800aa42 <__swrite>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	461f      	mov	r7, r3
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	05db      	lsls	r3, r3, #23
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4616      	mov	r6, r2
 800aa52:	d505      	bpl.n	800aa60 <__swrite+0x1e>
 800aa54:	2302      	movs	r3, #2
 800aa56:	2200      	movs	r2, #0
 800aa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5c:	f000 f868 	bl	800ab30 <_lseek_r>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	463b      	mov	r3, r7
 800aa70:	4628      	mov	r0, r5
 800aa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	f000 b817 	b.w	800aaa8 <_write_r>

0800aa7a <__sseek>:
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa82:	f000 f855 	bl	800ab30 <_lseek_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	bf15      	itete	ne
 800aa8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa96:	81a3      	strheq	r3, [r4, #12]
 800aa98:	bf18      	it	ne
 800aa9a:	81a3      	strhne	r3, [r4, #12]
 800aa9c:	bd10      	pop	{r4, pc}

0800aa9e <__sclose>:
 800aa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa2:	f000 b813 	b.w	800aacc <_close_r>
	...

0800aaa8 <_write_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4c07      	ldr	r4, [pc, #28]	; (800aac8 <_write_r+0x20>)
 800aaac:	4605      	mov	r5, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f6 fd5f 	bl	800157a <_write>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_write_r+0x1e>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_write_r+0x1e>
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	24000300 	.word	0x24000300

0800aacc <_close_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4c06      	ldr	r4, [pc, #24]	; (800aae8 <_close_r+0x1c>)
 800aad0:	2300      	movs	r3, #0
 800aad2:	4605      	mov	r5, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	f7f6 fd6b 	bl	80015b2 <_close>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_close_r+0x1a>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_close_r+0x1a>
 800aae4:	602b      	str	r3, [r5, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	24000300 	.word	0x24000300

0800aaec <_fstat_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4c07      	ldr	r4, [pc, #28]	; (800ab0c <_fstat_r+0x20>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	f7f6 fd66 	bl	80015ca <_fstat>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d102      	bne.n	800ab08 <_fstat_r+0x1c>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	b103      	cbz	r3, 800ab08 <_fstat_r+0x1c>
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop
 800ab0c:	24000300 	.word	0x24000300

0800ab10 <_isatty_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4c06      	ldr	r4, [pc, #24]	; (800ab2c <_isatty_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4605      	mov	r5, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	f7f6 fd65 	bl	80015ea <_isatty>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_isatty_r+0x1a>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_isatty_r+0x1a>
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	24000300 	.word	0x24000300

0800ab30 <_lseek_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4c07      	ldr	r4, [pc, #28]	; (800ab50 <_lseek_r+0x20>)
 800ab34:	4605      	mov	r5, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	4611      	mov	r1, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7f6 fd5e 	bl	8001600 <_lseek>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_lseek_r+0x1e>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_lseek_r+0x1e>
 800ab4c:	602b      	str	r3, [r5, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	24000300 	.word	0x24000300

0800ab54 <_read_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4c07      	ldr	r4, [pc, #28]	; (800ab74 <_read_r+0x20>)
 800ab58:	4605      	mov	r5, r0
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	6022      	str	r2, [r4, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f6 fcec 	bl	8001540 <_read>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_read_r+0x1e>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_read_r+0x1e>
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	24000300 	.word	0x24000300

0800ab78 <_init>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr

0800ab84 <_fini>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr
