
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acfc  0800acfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800acfc  0800acfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad04  0800ad04  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800ad0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  24000074  0800ad80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000ae4  0800ad80  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024378  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039c2  00000000  00000000  0004441a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  00047de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001568  00000000  00000000  000494b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032797  00000000  00000000  0004aa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001456d  00000000  00000000  0007d1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00156179  00000000  00000000  0009171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e7895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  001e7910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a3f8 	.word	0x0800a3f8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a3f8 	.word	0x0800a3f8

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ff99 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f869 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 faa3 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fa69 	bl	8000ad8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fa13 	bl	8000a30 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fa5d 	bl	8000ac8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f92f 	bl	8000870 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 f9a5 	bl	8000960 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 f9d5 	bl	80009c4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  s_sin = init_nco(10. / 4550., 0);
 800061a:	eddf 0a25 	vldr	s1, [pc, #148]	; 80006b0 <main+0xc0>
 800061e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80006b4 <main+0xc4>
 8000622:	f000 fbc5 	bl	8000db0 <init_nco>
 8000626:	60b8      	str	r0, [r7, #8]
  sin_buffer = calloc(ADC_BUF_SIZE, sizeof(uint16_t));
 8000628:	2102      	movs	r1, #2
 800062a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800062e:	f009 fa17 	bl	8009a60 <calloc>
 8000632:	4603      	mov	r3, r0
 8000634:	607b      	str	r3, [r7, #4]
  extra_buff = calloc(ADC_BUF_SIZE, sizeof(uint16_t));
 8000636:	2102      	movs	r1, #2
 8000638:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800063c:	f009 fa10 	bl	8009a60 <calloc>
 8000640:	4603      	mov	r3, r0
 8000642:	603b      	str	r3, [r7, #0]

  if ((sin_buffer == NULL) || (extra_buff == NULL)) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <main+0x60>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d105      	bne.n	800065c <main+0x6c>
	  printf("Failed to allocate memory for arrays\n");
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <main+0xc8>)
 8000652:	f009 fb6d 	bl	8009d30 <puts>
	  exit(EXIT_FAILURE);
 8000656:	2001      	movs	r0, #1
 8000658:	f009 fa10 	bl	8009a7c <exit>
  }

  //Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_SIZE);
 800065c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000660:	4916      	ldr	r1, [pc, #88]	; (80006bc <main+0xcc>)
 8000662:	4817      	ldr	r0, [pc, #92]	; (80006c0 <main+0xd0>)
 8000664:	f001 fb58 	bl	8001d18 <HAL_ADC_Start_DMA>

  //Start TIM6 and DAC with DMA
  HAL_TIM_Base_Start(&htim6);
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <main+0xd4>)
 800066a:	f007 ff25 	bl	80084b8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	4815      	ldr	r0, [pc, #84]	; (80006c8 <main+0xd8>)
 8000672:	f002 fa82 	bl	8002b7a <HAL_DAC_Start>
//  HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, 4095);
//  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);

//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)adc_buf, ADC_BUF_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, ADC_BUF_SIZE, DAC_ALIGN_12B_R);
 8000676:	2300      	movs	r3, #0
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	2100      	movs	r1, #0
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <main+0xd8>)
 8000684:	f002 facc 	bl	8002c20 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  i = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800068c:	2101      	movs	r1, #1
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <main+0xdc>)
 8000690:	f005 f8a1 	bl	80057d6 <HAL_GPIO_TogglePin>
	nco_get_samples(s_sin, sin_buffer, ADC_BUF_SIZE);
 8000694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	68b8      	ldr	r0, [r7, #8]
 800069c:	f000 fbd0 	bl	8000e40 <nco_get_samples>
//	for (i = 0; i < ADC_BUF_SIZE; i++) {
//		extra_buff[i] = sin_buffer[i];
//	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006a0:	2101      	movs	r1, #1
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <main+0xdc>)
 80006a4:	f005 f897 	bl	80057d6 <HAL_GPIO_TogglePin>
	i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006ae:	e7ed      	b.n	800068c <main+0x9c>
 80006b0:	00000000 	.word	0x00000000
 80006b4:	3b100901 	.word	0x3b100901
 80006b8:	0800a410 	.word	0x0800a410
 80006bc:	240002dc 	.word	0x240002dc
 80006c0:	240001b4 	.word	0x240001b4
 80006c4:	24000290 	.word	0x24000290
 80006c8:	2400009c 	.word	0x2400009c
 80006cc:	58020400 	.word	0x58020400

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ca      	sub	sp, #296	; 0x128
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006da:	224c      	movs	r2, #76	; 0x4c
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 fa0c 	bl	8009afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80006e8:	2220      	movs	r2, #32
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f009 fa05 	bl	8009afc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	23b8      	movs	r3, #184	; 0xb8
 80006f8:	461a      	mov	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f009 f9fe 	bl	8009afc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000700:	2004      	movs	r0, #4
 8000702:	f005 f883 	bl	800580c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <SystemClock_Config+0x194>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a54      	ldr	r2, [pc, #336]	; (8000864 <SystemClock_Config+0x194>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <SystemClock_Config+0x194>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000720:	463b      	mov	r3, r7
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	463b      	mov	r3, r7
 8000726:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000728:	bf00      	nop
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <SystemClock_Config+0x194>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000736:	d1f8      	bne.n	800072a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000738:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <SystemClock_Config+0x198>)
 800073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073c:	f023 0303 	bic.w	r3, r3, #3
 8000740:	4a49      	ldr	r2, [pc, #292]	; (8000868 <SystemClock_Config+0x198>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000748:	2329      	movs	r3, #41	; 0x29
 800074a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800074e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000768:	2302      	movs	r3, #2
 800076a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000774:	2318      	movs	r3, #24
 8000776:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800078c:	230c      	movs	r3, #12
 800078e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 f88c 	bl	80058c0 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007ae:	f000 faf5 	bl	8000d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	233f      	movs	r3, #63	; 0x3f
 80007b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2303      	movs	r3, #3
 80007ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007e6:	2102      	movs	r1, #2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 fc51 	bl	8006090 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80007f4:	f000 fad2 	bl	8000d9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <SystemClock_Config+0x19c>)
 80007fc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2210      	movs	r2, #16
 8000808:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2202      	movs	r2, #2
 800080e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2202      	movs	r2, #2
 8000814:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2202      	movs	r2, #2
 800081a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	22c0      	movs	r2, #192	; 0xc0
 8000820:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800083a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4618      	mov	r0, r3
 800084a:	f005 ffa5 	bl	8006798 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x188>
  {
    Error_Handler();
 8000854:	f000 faa2 	bl	8000d9c <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800
 8000868:	58024400 	.word	0x58024400
 800086c:	000c0002 	.word	0x000c0002

08000870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <MX_ADC1_Init+0xe4>)
 8000896:	4a30      	ldr	r2, [pc, #192]	; (8000958 <MX_ADC1_Init+0xe8>)
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <MX_ADC1_Init+0xe4>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008a2:	2208      	movs	r2, #8
 80008a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008d8:	2203      	movs	r2, #3
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f0:	4818      	ldr	r0, [pc, #96]	; (8000954 <MX_ADC1_Init+0xe4>)
 80008f2:	f001 f8b7 	bl	8001a64 <HAL_ADC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008fc:	f000 fa4e 	bl	8000d9c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4812      	ldr	r0, [pc, #72]	; (8000954 <MX_ADC1_Init+0xe4>)
 800090c:	f001 ff6c 	bl	80027e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000916:	f000 fa41 	bl	8000d9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_ADC1_Init+0xec>)
 800091c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091e:	2306      	movs	r3, #6
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000926:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_ADC1_Init+0xe4>)
 800093e:	f001 fabd 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000948:	f000 fa28 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	240001b4 	.word	0x240001b4
 8000958:	40022000 	.word	0x40022000
 800095c:	14f00020 	.word	0x14f00020

08000960 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2224      	movs	r2, #36	; 0x24
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f009 f8c5 	bl	8009afc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_DAC1_Init+0x5c>)
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_DAC1_Init+0x60>)
 8000976:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000978:	4810      	ldr	r0, [pc, #64]	; (80009bc <MX_DAC1_Init+0x5c>)
 800097a:	f002 f8dc 	bl	8002b36 <HAL_DAC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000984:	f000 fa0a 	bl	8000d9c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800098c:	2316      	movs	r3, #22
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000994:	2302      	movs	r3, #2
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_DAC1_Init+0x5c>)
 80009a4:	f002 fa18 	bl	8002dd8 <HAL_DAC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 f9f5 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2400009c 	.word	0x2400009c
 80009c0:	40007400 	.word	0x40007400

080009c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_TIM6_Init+0x64>)
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_TIM6_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_TIM6_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_TIM6_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_TIM6_Init+0x64>)
 80009e8:	2214      	movs	r2, #20
 80009ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_TIM6_Init+0x64>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_TIM6_Init+0x64>)
 80009f4:	f007 fd08 	bl	8008408 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009fe:	f000 f9cd 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a02:	2320      	movs	r3, #32
 8000a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_TIM6_Init+0x64>)
 8000a10:	f007 fe1a 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a1a:	f000 f9bf 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000290 	.word	0x24000290
 8000a2c:	40001000 	.word	0x40001000

08000a30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <MX_USART3_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	f007 fe6d 	bl	8008758 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f98a 	bl	8000d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f008 ff03 	bl	8009896 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 f981 	bl	8000d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f008 ff38 	bl	8009912 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 f978 	bl	8000d9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000aae:	f008 feb9 	bl	8009824 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f970 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	240000b0 	.word	0x240000b0
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_DMA_Init+0x6c>)
 8000ae0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <MX_DMA_Init+0x6c>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_DMA_Init+0x6c>)
 8000af0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_DMA_Init+0x6c>)
 8000afe:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <MX_DMA_Init+0x6c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_DMA_Init+0x6c>)
 8000b0e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200b      	movs	r0, #11
 8000b20:	f001 ffd5 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b24:	200b      	movs	r0, #11
 8000b26:	f001 ffec 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2038      	movs	r0, #56	; 0x38
 8000b30:	f001 ffcd 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b34:	2038      	movs	r0, #56	; 0x38
 8000b36:	f001 ffe4 	bl	8002b02 <HAL_NVIC_EnableIRQ>

}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	58024400 	.word	0x58024400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b87      	ldr	r3, [pc, #540]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	4a85      	ldr	r2, [pc, #532]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6e:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7c:	4b7f      	ldr	r3, [pc, #508]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	4a7e      	ldr	r2, [pc, #504]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8c:	4b7b      	ldr	r3, [pc, #492]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba0:	4a76      	ldr	r2, [pc, #472]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b70      	ldr	r3, [pc, #448]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbe:	4a6f      	ldr	r2, [pc, #444]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc8:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	4a67      	ldr	r2, [pc, #412]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be6:	4b65      	ldr	r3, [pc, #404]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf4:	4b61      	ldr	r3, [pc, #388]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	4a60      	ldr	r2, [pc, #384]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c04:	4b5d      	ldr	r3, [pc, #372]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c12:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c18:	4a58      	ldr	r2, [pc, #352]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c36:	4a51      	ldr	r2, [pc, #324]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c40:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <MX_GPIO_Init+0x234>)
 8000c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	484a      	ldr	r0, [pc, #296]	; (8000d80 <MX_GPIO_Init+0x238>)
 8000c56:	f004 fda5 	bl	80057a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c60:	4848      	ldr	r0, [pc, #288]	; (8000d84 <MX_GPIO_Init+0x23c>)
 8000c62:	f004 fd9f 	bl	80057a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4847      	ldr	r0, [pc, #284]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c6c:	f004 fd9a 	bl	80057a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4841      	ldr	r0, [pc, #260]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c86:	f004 fbdd 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4837      	ldr	r0, [pc, #220]	; (8000d80 <MX_GPIO_Init+0x238>)
 8000ca4:	f004 fbce 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ca8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4830      	ldr	r0, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x23c>)
 8000cc2:	f004 fbbf 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482e      	ldr	r0, [pc, #184]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000cda:	f004 fbb3 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4829      	ldr	r0, [pc, #164]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000cf4:	f004 fba6 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4820      	ldr	r0, [pc, #128]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000d16:	f004 fb95 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4819      	ldr	r0, [pc, #100]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000d34:	f004 fb86 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d38:	23c0      	movs	r3, #192	; 0xc0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_GPIO_Init+0x23c>)
 8000d54:	f004 fb76 	bl	8005444 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000d70:	f004 fb68 	bl	8005444 <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3738      	adds	r7, #56	; 0x38
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58021400 	.word	0x58021400
 8000d84:	58020400 	.word	0x58020400
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	11110000 	.word	0x11110000
 8000d94:	58021800 	.word	0x58021800
 8000d98:	58020000 	.word	0x58020000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	0000      	movs	r0, r0
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dba:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8000dbe:	200c      	movs	r0, #12
 8000dc0:	f008 fe94 	bl	8009aec <malloc>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d105      	bne.n	8000dda <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <init_nco+0x88>)
 8000dd0:	f008 ffae 	bl	8009d30 <puts>
        exit(EXIT_FAILURE);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f008 fe51 	bl	8009a7c <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 8000dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000de2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e3c <init_nco+0x8c>
 8000de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dee:	ee17 2a90 	vmov	r2, s15
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8000df6:	edd7 7a00 	vldr	s15, [r7]
 8000dfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dfe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e3c <init_nco+0x8c>
 8000e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e06:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e0a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000e30 <init_nco+0x80>
 8000e0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e16:	ee17 2a90 	vmov	r2, s15
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	53c8d4f1 	.word	0x53c8d4f1
 8000e34:	401921fb 	.word	0x401921fb
 8000e38:	0800a438 	.word	0x0800a438
 8000e3c:	4f000000 	.word	0x4f000000

08000e40 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	e03c      	b.n	8000ecc <nco_get_samples+0x8c>

        if ((i == 0) && (s->acc == 0)) {
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d107      	bne.n	8000e68 <nco_get_samples+0x28>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <nco_get_samples+0x28>
            s->acc = 0;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	e008      	b.n	8000e7a <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	609a      	str	r2, [r3, #8]
        }
        //kprime[n]
        kprime = s->acc + s->theta;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	0ddb      	lsrs	r3, r3, #23
 8000e8c:	617b      	str	r3, [r7, #20]
//        if ((i > 0) && (index < 10) && (y[i - 1] < 500) && (y[i - 1] > 100)) {
//        	y[i] = index;
//        }
//		y[i] = index;
//        y[i] = (int)((cosine[i / 2] * 2048)/2 + 2047);
        y[i] = (unsigned int)((cosine[index] * 2048)/2 + 2047);
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <nco_get_samples+0xa0>)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000ee4 <nco_get_samples+0xa4>
 8000e9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ea2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eaa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ee8 <nco_get_samples+0xa8>
 8000eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	ee17 2a90 	vmov	r2, s15
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3be      	bcc.n	8000e52 <nco_get_samples+0x12>
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	3724      	adds	r7, #36	; 0x24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	0800a468 	.word	0x0800a468
 8000ee4:	45000000 	.word	0x45000000
 8000ee8:	44ffe000 	.word	0x44ffe000

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_MspInit+0x30>)
 8000ef4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ef8:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x30>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x30>)
 8000f04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	58024400 	.word	0x58024400

08000f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a30      	ldr	r2, [pc, #192]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d159      	bne.n	8000ff6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f48:	4a2e      	ldr	r2, [pc, #184]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481d      	ldr	r0, [pc, #116]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000f92:	f004 fa57 	bl	8005444 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_ADC_MspInit+0xf0>)
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000f9e:	2209      	movs	r2, #9
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fdc:	f002 f8b6 	bl	800314c <HAL_DMA_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000fe6:	f7ff fed9 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000fee:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40022000 	.word	0x40022000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020400 	.word	0x58020400
 800100c:	24000218 	.word	0x24000218
 8001010:	40020010 	.word	0x40020010

08001014 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <HAL_DAC_MspInit+0xe0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d159      	bne.n	80010ea <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_DAC_MspInit+0xe4>)
 8001038:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <HAL_DAC_MspInit+0xe4>)
 800103e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001042:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <HAL_DAC_MspInit+0xe4>)
 8001048:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800104c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_DAC_MspInit+0xe4>)
 8001056:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <HAL_DAC_MspInit+0xe4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_DAC_MspInit+0xe4>)
 8001066:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001072:	2310      	movs	r3, #16
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001076:	2303      	movs	r3, #3
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	481d      	ldr	r0, [pc, #116]	; (80010fc <HAL_DAC_MspInit+0xe8>)
 8001086:	f004 f9dd 	bl	8005444 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_DAC_MspInit+0xec>)
 800108c:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <HAL_DAC_MspInit+0xf0>)
 800108e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_DAC_MspInit+0xec>)
 8001092:	2243      	movs	r2, #67	; 0x43
 8001094:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_DAC_MspInit+0xec>)
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_DAC_MspInit+0xec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010d0:	f002 f83c 	bl	800314c <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80010da:	f7ff fe5f 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_DAC_MspInit+0xec>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40007400 	.word	0x40007400
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020000 	.word	0x58020000
 8001100:	2400013c 	.word	0x2400013c
 8001104:	40020410 	.word	0x40020410

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10e      	bne.n	8001138 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x40>)
 800111c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x40>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_TIM_Base_MspInit+0x40>)
 800112c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40001000 	.word	0x40001000
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0x88>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12e      	bne.n	80011cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001170:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001180:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 800118e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 800119e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x90>)
 80011c8:	f004 f93c 	bl	8005444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004800 	.word	0x40004800
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020c00 	.word	0x58020c00

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f9ec 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <DMA1_Stream0_IRQHandler+0x10>)
 8001242:	f002 fd7d 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	24000218 	.word	0x24000218

08001250 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA2_Stream0_IRQHandler+0x10>)
 8001256:	f002 fd73 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2400013c 	.word	0x2400013c

08001264 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800126e:	f008 fbff 	bl	8009a70 <__errno>
 8001272:	4602      	mov	r2, r0
 8001274:	2316      	movs	r3, #22
 8001276:	6013      	str	r3, [r2, #0]
	return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_exit>:

void _exit (int status)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffe7 	bl	8001264 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001296:	e7fe      	b.n	8001296 <_exit+0x12>

08001298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e00a      	b.n	80012c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012aa:	f3af 8000 	nop.w
 80012ae:	4601      	mov	r1, r0
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf0      	blt.n	80012aa <_read+0x12>
	}

return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e009      	b.n	80012f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf1      	blt.n	80012e4 <_write+0x12>
	}
	return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_close>:

int _close(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	return -1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001332:	605a      	str	r2, [r3, #4]
	return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_isatty>:

int _isatty(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return 1;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f008 fb64 	bl	8009a70 <__errno>
 80013a8:	4602      	mov	r2, r0
 80013aa:	230c      	movs	r3, #12
 80013ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	24100000 	.word	0x24100000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	24000090 	.word	0x24000090
 80013dc:	24000ae8 	.word	0x24000ae8

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <SystemInit+0xd8>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <SystemInit+0xd8>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <SystemInit+0xdc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d807      	bhi.n	8001410 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <SystemInit+0xdc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 030f 	bic.w	r3, r3, #15
 8001408:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <SystemInit+0xdc>)
 800140a:	f043 0303 	orr.w	r3, r3, #3
 800140e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <SystemInit+0xe0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <SystemInit+0xe0>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <SystemInit+0xe0>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <SystemInit+0xe0>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4926      	ldr	r1, [pc, #152]	; (80014c0 <SystemInit+0xe0>)
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <SystemInit+0xe4>)
 800142a:	4013      	ands	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <SystemInit+0xdc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	2b03      	cmp	r3, #3
 8001438:	d907      	bls.n	800144a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <SystemInit+0xdc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 030f 	bic.w	r3, r3, #15
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <SystemInit+0xdc>)
 8001444:	f043 0303 	orr.w	r3, r3, #3
 8001448:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <SystemInit+0xe0>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <SystemInit+0xe0>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <SystemInit+0xe0>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <SystemInit+0xe0>)
 800145e:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <SystemInit+0xe8>)
 8001460:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <SystemInit+0xe0>)
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <SystemInit+0xec>)
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <SystemInit+0xe0>)
 800146a:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <SystemInit+0xf0>)
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <SystemInit+0xe0>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <SystemInit+0xe0>)
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <SystemInit+0xf0>)
 8001478:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <SystemInit+0xe0>)
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <SystemInit+0xe0>)
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <SystemInit+0xf0>)
 8001484:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <SystemInit+0xe0>)
 8001488:	2200      	movs	r2, #0
 800148a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <SystemInit+0xe0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <SystemInit+0xe0>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <SystemInit+0xe0>)
 800149a:	2200      	movs	r2, #0
 800149c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <SystemInit+0xf4>)
 80014a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SystemInit+0xd8>)
 80014a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	52002000 	.word	0x52002000
 80014c0:	58024400 	.word	0x58024400
 80014c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014c8:	02020200 	.word	0x02020200
 80014cc:	01ff0000 	.word	0x01ff0000
 80014d0:	01010280 	.word	0x01010280
 80014d4:	52004000 	.word	0x52004000

080014d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014dc:	f7ff ff80 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80014e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014e2:	e003      	b.n	80014ec <LoopCopyDataInit>

080014e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80014e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ea:	3104      	adds	r1, #4

080014ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80014f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014f4:	d3f6      	bcc.n	80014e4 <CopyDataInit>
  ldr  r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80014f8:	e002      	b.n	8001500 <LoopFillZerobss>

080014fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80014fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014fc:	f842 3b04 	str.w	r3, [r2], #4

08001500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001504:	d3f9      	bcc.n	80014fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001506:	f008 facd 	bl	8009aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150a:	f7ff f871 	bl	80005f0 <main>
  bx  lr
 800150e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001510:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001514:	0800ad0c 	.word	0x0800ad0c
  ldr  r0, =_sdata
 8001518:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800151c:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8001520:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8001524:	24000ae4 	.word	0x24000ae4

08001528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f001 fac0 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001538:	f004 ff60 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 800153c:	4601      	mov	r1, r0
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_Init+0x68>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_Init+0x6c>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa21 f303 	lsr.w	r3, r1, r3
 8001554:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_Init+0x68>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_Init+0x6c>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_Init+0x70>)
 800156e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_Init+0x74>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f814 	bl	80015a4 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e002      	b.n	800158c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001586:	f7ff fcb1 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	58024400 	.word	0x58024400
 8001598:	0800ac68 	.word	0x0800ac68
 800159c:	24000004 	.word	0x24000004
 80015a0:	24000000 	.word	0x24000000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_InitTick+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e021      	b.n	80015fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_InitTick+0x64>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 faa5 	bl	8002b1e <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f001 fa6f 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x68>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2400000c 	.word	0x2400000c
 8001608:	24000000 	.word	0x24000000
 800160c:	24000008 	.word	0x24000008

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2400000c 	.word	0x2400000c
 8001634:	24000adc 	.word	0x24000adc

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	24000adc 	.word	0x24000adc

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_Delay+0x40>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2400000c 	.word	0x2400000c

08001694 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3360      	adds	r3, #96	; 0x60
 800170e:	461a      	mov	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	430b      	orrs	r3, r1
 800172a:	431a      	orrs	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800176e:	b480      	push	{r7}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3360      	adds	r3, #96	; 0x60
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]
  }
}
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	4413      	add	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	211f      	movs	r1, #31
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	401a      	ands	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 011f 	and.w	r1, r3, #31
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f023 0203 	bic.w	r2, r3, #3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3314      	adds	r3, #20
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0e5b      	lsrs	r3, r3, #25
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	0d1b      	lsrs	r3, r3, #20
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2107      	movs	r1, #7
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	0d1b      	lsrs	r3, r3, #20
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0318 	and.w	r3, r3, #24
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c4:	40d9      	lsrs	r1, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	400b      	ands	r3, r1
 80018ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ce:	431a      	orrs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	000fffff 	.word	0x000fffff

080018e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 031f 	and.w	r3, r3, #31
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001912:	4013      	ands	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6093      	str	r3, [r2, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	5fffffc0 	.word	0x5fffffc0

08001928 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800193c:	d101      	bne.n	8001942 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <LL_ADC_EnableInternalRegulator+0x24>)
 800195e:	4013      	ands	r3, r2
 8001960:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	6fffffc0 	.word	0x6fffffc0

08001978 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LL_ADC_Enable+0x24>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	7fffffc0 	.word	0x7fffffc0

080019c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <LL_ADC_IsEnabled+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_IsEnabled+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <LL_ADC_REG_StartConversion+0x24>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	7fffffc0 	.word	0x7fffffc0

08001a18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e137      	b.n	8001cee <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fa47 	bl	8000f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff3f 	bl	8001928 <LL_ADC_IsDeepPowerDownEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff25 	bl	8001904 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff5a 	bl	8001978 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d113      	bne.n	8001af2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff3e 	bl	8001950 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_ADC_Init+0x294>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	4a88      	ldr	r2, [pc, #544]	; (8001cfc <HAL_ADC_Init+0x298>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ae4:	e002      	b.n	8001aec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f9      	bne.n	8001ae6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff3e 	bl	8001978 <LL_ADC_IsInternalRegulatorEnabled>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10d      	bne.n	8001b1e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f043 0210 	orr.w	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff78 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001b28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80d2 	bne.w	8001cdc <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80ce 	bne.w	8001cdc <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b48:	f043 0202 	orr.w	r2, r3, #2
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff37 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d110      	bne.n	8001b82 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b60:	4867      	ldr	r0, [pc, #412]	; (8001d00 <HAL_ADC_Init+0x29c>)
 8001b62:	f7ff ff31 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b66:	4604      	mov	r4, r0
 8001b68:	4866      	ldr	r0, [pc, #408]	; (8001d04 <HAL_ADC_Init+0x2a0>)
 8001b6a:	f7ff ff2d 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4323      	orrs	r3, r4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d105      	bne.n	8001b82 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4862      	ldr	r0, [pc, #392]	; (8001d08 <HAL_ADC_Init+0x2a4>)
 8001b7e:	f7ff fd89 	bl	8001694 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7d5b      	ldrb	r3, [r3, #21]
 8001b86:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b8c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001b92:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7f1b      	ldrb	r3, [r3, #28]
 8001b98:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7f1b      	ldrb	r3, [r3, #28]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	045b      	lsls	r3, r3, #17
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <HAL_ADC_Init+0x2a8>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff15 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001bee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff22 	bl	8001a3e <LL_ADC_INJ_IsConversionOngoing>
 8001bfa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d14a      	bne.n	8001c98 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d147      	bne.n	8001c98 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7d1b      	ldrb	r3, [r3, #20]
 8001c0c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <HAL_ADC_Init+0x2ac>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	69b9      	ldr	r1, [r7, #24]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11b      	bne.n	8001c6c <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_ADC_Init+0x2b0>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	0411      	lsls	r1, r2, #16
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	e007      	b.n	8001c7c <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fcc8 	bl	8002628 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10c      	bne.n	8001cba <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f023 010f 	bic.w	r1, r3, #15
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb8:	e007      	b.n	8001cca <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 020f 	bic.w	r2, r2, #15
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
 8001cda:	e007      	b.n	8001cec <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f043 0210 	orr.w	r2, r3, #16
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	053e2d63 	.word	0x053e2d63
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022100 	.word	0x40022100
 8001d08:	40022300 	.word	0x40022300
 8001d0c:	fff0c003 	.word	0xfff0c003
 8001d10:	ffffbffc 	.word	0xffffbffc
 8001d14:	fc00f81e 	.word	0xfc00f81e

08001d18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d24:	484f      	ldr	r0, [pc, #316]	; (8001e64 <HAL_ADC_Start_DMA+0x14c>)
 8001d26:	f7ff fddf 	bl	80018e8 <LL_ADC_GetMultimode>
 8001d2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe71 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f040 808c 	bne.w	8001e56 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_Start_DMA+0x34>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e087      	b.n	8001e5c <HAL_ADC_Start_DMA+0x144>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d002      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	d170      	bne.n	8001e48 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fb56 	bl	8002418 <ADC_Enable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d163      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_ADC_Start_DMA+0x150>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_ADC_Start_DMA+0x154>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_Start_DMA+0x7e>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e000      	b.n	8001d98 <HAL_ADC_Start_DMA+0x80>
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_ADC_Start_DMA+0x158>)
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d002      	beq.n	8001da6 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_ADC_Start_DMA+0x15c>)
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_ADC_Start_DMA+0x160>)
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <HAL_ADC_Start_DMA+0x164>)
 8001de8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	221c      	movs	r2, #28
 8001df0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0210 	orr.w	r2, r2, #16
 8001e08:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f7ff fd04 	bl	8001822 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3340      	adds	r3, #64	; 0x40
 8001e24:	4619      	mov	r1, r3
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f001 fd1f 	bl	800386c <HAL_DMA_Start_IT>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fdda 	bl	80019f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e3c:	e00d      	b.n	8001e5a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e46:	e008      	b.n	8001e5a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e54:	e001      	b.n	8001e5a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022300 	.word	0x40022300
 8001e68:	fffff0fe 	.word	0xfffff0fe
 8001e6c:	40022100 	.word	0x40022100
 8001e70:	40022000 	.word	0x40022000
 8001e74:	08002501 	.word	0x08002501
 8001e78:	080025d9 	.word	0x080025d9
 8001e7c:	080025f5 	.word	0x080025f5

08001e80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b099      	sub	sp, #100	; 0x64
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4aa1      	ldr	r2, [pc, #644]	; (800215c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ed6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x2a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e283      	b.n	80023ee <HAL_ADC_ConfigChannel+0x532>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd90 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8268 	bne.w	80023d0 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x62>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2201      	movs	r2, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	e00f      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x82>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2201      	movs	r2, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	69d1      	ldr	r1, [r2, #28]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f7ff fc36 	bl	80017ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fd58 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001f68:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fd65 	bl	8001a3e <LL_ADC_INJ_IsConversionOngoing>
 8001f74:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 80a0 	bne.w	80020be <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 809c 	bne.w	80020be <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f7ff fc58 	bl	8001848 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x102>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	e00a      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x118>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d027      	beq.n	800202e <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fec:	f7ff fb86 	bl	80016fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6919      	ldr	r1, [r3, #16]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	7e5b      	ldrb	r3, [r3, #25]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x14a>
 8002000:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002004:	e000      	b.n	8002008 <HAL_ADC_ConfigChannel+0x14c>
 8002006:	2300      	movs	r3, #0
 8002008:	461a      	mov	r2, r3
 800200a:	f7ff fbb0 	bl	800176e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7e1b      	ldrb	r3, [r3, #24]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x168>
 800201e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002022:	e000      	b.n	8002026 <HAL_ADC_ConfigChannel+0x16a>
 8002024:	2300      	movs	r3, #0
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff fb88 	bl	800173c <LL_ADC_SetDataRightShift>
 800202c:	e047      	b.n	80020be <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	069b      	lsls	r3, r3, #26
 800203e:	429a      	cmp	r2, r3
 8002040:	d107      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002050:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	069b      	lsls	r3, r3, #26
 8002062:	429a      	cmp	r2, r3
 8002064:	d107      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002074:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800207c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	069b      	lsls	r3, r3, #26
 8002086:	429a      	cmp	r2, r3
 8002088:	d107      	bne.n	800209a <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002098:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	069b      	lsls	r3, r3, #26
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d107      	bne.n	80020be <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020bc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fc80 	bl	80019c8 <LL_ADC_IsEnabled>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 8189 	bne.w	80023e2 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	461a      	mov	r2, r3
 80020de:	f7ff fbdf 	bl	80018a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_ADC_ConfigChannel+0x2a0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	f040 80ff 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x25a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	3301      	adds	r3, #1
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2b09      	cmp	r3, #9
 800210c:	bf94      	ite	ls
 800210e:	2301      	movls	r3, #1
 8002110:	2300      	movhi	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	e012      	b.n	800213c <HAL_ADC_ConfigChannel+0x280>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2b09      	cmp	r3, #9
 8002134:	bf94      	ite	ls
 8002136:	2301      	movls	r3, #1
 8002138:	2300      	movhi	r3, #0
 800213a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213c:	2b00      	cmp	r3, #0
 800213e:	d066      	beq.n	800220e <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x2a4>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	3301      	adds	r3, #1
 8002154:	069b      	lsls	r3, r3, #26
 8002156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215a:	e010      	b.n	800217e <HAL_ADC_ConfigChannel+0x2c2>
 800215c:	47ff0000 	.word	0x47ff0000
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800216e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_ADC_ConfigChannel+0x2e2>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	e010      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x304>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	ea42 0103 	orr.w	r1, r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x32a>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	051b      	lsls	r3, r3, #20
 80021e4:	e011      	b.n	800220a <HAL_ADC_ConfigChannel+0x34e>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220a:	430b      	orrs	r3, r1
 800220c:	e069      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_ADC_ConfigChannel+0x36e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	3301      	adds	r3, #1
 8002222:	069b      	lsls	r3, r3, #26
 8002224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002228:	e00e      	b.n	8002248 <HAL_ADC_ConfigChannel+0x38c>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	61fb      	str	r3, [r7, #28]
  return result;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3301      	adds	r3, #1
 8002242:	069b      	lsls	r3, r3, #26
 8002244:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x3ac>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	3301      	adds	r3, #1
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	e010      	b.n	800228a <HAL_ADC_ConfigChannel+0x3ce>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	617b      	str	r3, [r7, #20]
  return result;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	ea42 0103 	orr.w	r1, r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x3fa>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	051b      	lsls	r3, r3, #20
 80022b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b4:	e014      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x424>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	60fb      	str	r3, [r7, #12]
  return result;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	051b      	lsls	r3, r3, #20
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff faae 	bl	8001848 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da76      	bge.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f4:	4840      	ldr	r0, [pc, #256]	; (80023f8 <HAL_ADC_ConfigChannel+0x53c>)
 80022f6:	f7ff f9f3 	bl	80016e0 <LL_ADC_GetCommonPathInternalCh>
 80022fa:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022fc:	483f      	ldr	r0, [pc, #252]	; (80023fc <HAL_ADC_ConfigChannel+0x540>)
 80022fe:	f7ff fb63 	bl	80019c8 <LL_ADC_IsEnabled>
 8002302:	4604      	mov	r4, r0
 8002304:	483e      	ldr	r0, [pc, #248]	; (8002400 <HAL_ADC_ConfigChannel+0x544>)
 8002306:	f7ff fb5f 	bl	80019c8 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	4323      	orrs	r3, r4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d154      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_ADC_ConfigChannel+0x548>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d121      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x4a4>
 800231c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11c      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_ADC_ConfigChannel+0x544>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d158      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002336:	4619      	mov	r1, r3
 8002338:	482f      	ldr	r0, [pc, #188]	; (80023f8 <HAL_ADC_ConfigChannel+0x53c>)
 800233a:	f7ff f9be 	bl	80016ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_ADC_ConfigChannel+0x54c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_ADC_ConfigChannel+0x550>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800235e:	e040      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_ADC_ConfigChannel+0x554>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x4d2>
 800236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10c      	bne.n	800238e <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_ADC_ConfigChannel+0x544>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d131      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002384:	4619      	mov	r1, r3
 8002386:	481c      	ldr	r0, [pc, #112]	; (80023f8 <HAL_ADC_ConfigChannel+0x53c>)
 8002388:	f7ff f997 	bl	80016ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238c:	e029      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a20      	ldr	r2, [pc, #128]	; (8002414 <HAL_ADC_ConfigChannel+0x558>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d124      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_ADC_ConfigChannel+0x544>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d11a      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b2:	4619      	mov	r1, r3
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <HAL_ADC_ConfigChannel+0x53c>)
 80023b6:	f7ff f980 	bl	80016ba <LL_ADC_SetCommonPathInternalCh>
 80023ba:	e012      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80023ce:	e008      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3764      	adds	r7, #100	; 0x64
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022300 	.word	0x40022300
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022100 	.word	0x40022100
 8002404:	cb840000 	.word	0xcb840000
 8002408:	24000000 	.word	0x24000000
 800240c:	053e2d63 	.word	0x053e2d63
 8002410:	bac04000 	.word	0xbac04000
 8002414:	cfb80000 	.word	0xcfb80000

08002418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff facf 	bl	80019c8 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d15a      	bne.n	80024e6 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <ADC_Enable+0xd8>)
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e046      	b.n	80024e8 <ADC_Enable+0xd0>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fa9e 	bl	80019a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002464:	f7ff f8e8 	bl	8001638 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800246a:	4822      	ldr	r0, [pc, #136]	; (80024f4 <ADC_Enable+0xdc>)
 800246c:	f7ff fa3c 	bl	80018e8 <LL_ADC_GetMultimode>
 8002470:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <ADC_Enable+0xe0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d002      	beq.n	8002482 <ADC_Enable+0x6a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	e000      	b.n	8002484 <ADC_Enable+0x6c>
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <ADC_Enable+0xe4>)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4293      	cmp	r3, r2
 800248a:	d025      	beq.n	80024d8 <ADC_Enable+0xc0>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d129      	bne.n	80024e6 <ADC_Enable+0xce>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002492:	e021      	b.n	80024d8 <ADC_Enable+0xc0>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fa95 	bl	80019c8 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d104      	bne.n	80024ae <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fa79 	bl	80019a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ae:	f7ff f8c3 	bl	8001638 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d90d      	bls.n	80024d8 <ADC_Enable+0xc0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0210 	orr.w	r2, r3, #16
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e007      	b.n	80024e8 <ADC_Enable+0xd0>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d1d6      	bne.n	8002494 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	8000003f 	.word	0x8000003f
 80024f4:	40022300 	.word	0x40022300
 80024f8:	40022100 	.word	0x40022100
 80024fc:	40022000 	.word	0x40022000

08002500 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14b      	bne.n	80025b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d021      	beq.n	8002578 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f933 	bl	80017a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d032      	beq.n	80025aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12b      	bne.n	80025aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11f      	bne.n	80025aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
 8002576:	e018      	b.n	80025aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d111      	bne.n	80025aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff fc68 	bl	8001e80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025b0:	e00e      	b.n	80025d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff fc72 	bl	8001ea8 <HAL_ADC_ErrorCallback>
}
 80025c4:	e004      	b.n	80025d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fc54 	bl	8001e94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff fc44 	bl	8001ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002630:	4b56      	ldr	r3, [pc, #344]	; (800278c <ADC_ConfigureBoostMode+0x164>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01a      	beq.n	8002672 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800263c:	f004 f850 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8002640:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800264a:	d006      	beq.n	800265a <ADC_ConfigureBoostMode+0x32>
 800264c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002650:	d00b      	beq.n	800266a <ADC_ConfigureBoostMode+0x42>
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002656:	d000      	beq.n	800265a <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002658:	e05d      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	60fb      	str	r3, [r7, #12]
        break;
 8002668:	e055      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
        break;
 8002670:	e051      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002672:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002676:	f004 ff43 	bl	8007500 <HAL_RCCEx_GetPeriphCLKFreq>
 800267a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002684:	d02a      	beq.n	80026dc <ADC_ConfigureBoostMode+0xb4>
 8002686:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800268a:	d813      	bhi.n	80026b4 <ADC_ConfigureBoostMode+0x8c>
 800268c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002690:	d024      	beq.n	80026dc <ADC_ConfigureBoostMode+0xb4>
 8002692:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002696:	d806      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0x7e>
 8002698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800269c:	d01e      	beq.n	80026dc <ADC_ConfigureBoostMode+0xb4>
 800269e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026a2:	d01b      	beq.n	80026dc <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80026a4:	e037      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80026a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026aa:	d017      	beq.n	80026dc <ADC_ConfigureBoostMode+0xb4>
 80026ac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80026b0:	d014      	beq.n	80026dc <ADC_ConfigureBoostMode+0xb4>
        break;
 80026b2:	e030      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80026b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026b8:	d021      	beq.n	80026fe <ADC_ConfigureBoostMode+0xd6>
 80026ba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026be:	d806      	bhi.n	80026ce <ADC_ConfigureBoostMode+0xa6>
 80026c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026c4:	d013      	beq.n	80026ee <ADC_ConfigureBoostMode+0xc6>
 80026c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ca:	d014      	beq.n	80026f6 <ADC_ConfigureBoostMode+0xce>
        break;
 80026cc:	e023      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80026ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026d2:	d018      	beq.n	8002706 <ADC_ConfigureBoostMode+0xde>
 80026d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026d8:	d019      	beq.n	800270e <ADC_ConfigureBoostMode+0xe6>
        break;
 80026da:	e01c      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c9b      	lsrs	r3, r3, #18
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
        break;
 80026ec:	e013      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
        break;
 80026f4:	e00f      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	60fb      	str	r3, [r7, #12]
        break;
 80026fc:	e00b      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	60fb      	str	r3, [r7, #12]
        break;
 8002704:	e007      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	09db      	lsrs	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
        break;
 800270c:	e003      	b.n	8002716 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
        break;
 8002714:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <ADC_ConfigureBoostMode+0x168>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d808      	bhi.n	8002736 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002732:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002734:	e025      	b.n	8002782 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <ADC_ConfigureBoostMode+0x16c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d80a      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002750:	609a      	str	r2, [r3, #8]
}
 8002752:	e016      	b.n	8002782 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <ADC_ConfigureBoostMode+0x170>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d80a      	bhi.n	8002772 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	e007      	b.n	8002782 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022300 	.word	0x40022300
 8002790:	005f5e10 	.word	0x005f5e10
 8002794:	00bebc20 	.word	0x00bebc20
 8002798:	017d7840 	.word	0x017d7840

0800279c <LL_ADC_IsEnabled>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <LL_ADC_IsEnabled+0x18>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <LL_ADC_IsEnabled+0x1a>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d101      	bne.n	80027da <LL_ADC_REG_IsConversionOngoing+0x18>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b09f      	sub	sp, #124	; 0x7c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002802:	2302      	movs	r3, #2
 8002804:	e07c      	b.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d102      	bne.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002818:	4b3c      	ldr	r3, [pc, #240]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	e001      	b.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e05f      	b.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ffbd 	bl	80027c2 <LL_ADC_REG_IsConversionOngoing>
 8002848:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ffb7 	bl	80027c2 <LL_ADC_REG_IsConversionOngoing>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d141      	bne.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800285a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285c:	2b00      	cmp	r3, #0
 800285e:	d13e      	bne.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	431a      	orrs	r2, r3
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800287e:	4822      	ldr	r0, [pc, #136]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002880:	f7ff ff8c 	bl	800279c <LL_ADC_IsEnabled>
 8002884:	4604      	mov	r4, r0
 8002886:	4821      	ldr	r0, [pc, #132]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002888:	f7ff ff88 	bl	800279c <LL_ADC_IsEnabled>
 800288c:	4603      	mov	r3, r0
 800288e:	4323      	orrs	r3, r4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d12e      	bne.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800289a:	4013      	ands	r3, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	6892      	ldr	r2, [r2, #8]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ac:	e021      	b.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ba:	4813      	ldr	r0, [pc, #76]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80028bc:	f7ff ff6e 	bl	800279c <LL_ADC_IsEnabled>
 80028c0:	4604      	mov	r4, r0
 80028c2:	4812      	ldr	r0, [pc, #72]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80028c4:	f7ff ff6a 	bl	800279c <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4323      	orrs	r3, r4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d110      	bne.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028dc:	e009      	b.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80028f0:	e000      	b.n	80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002900:	4618      	mov	r0, r3
 8002902:	377c      	adds	r7, #124	; 0x7c
 8002904:	46bd      	mov	sp, r7
 8002906:	bd90      	pop	{r4, r7, pc}
 8002908:	40022000 	.word	0x40022000
 800290c:	40022100 	.word	0x40022100
 8002910:	40022300 	.word	0x40022300
 8002914:	fffff0e0 	.word	0xfffff0e0

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <__NVIC_SetPriorityGrouping+0x40>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	4313      	orrs	r3, r2
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x40>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00
 800295c:	05fa0000 	.word	0x05fa0000

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <__NVIC_EnableIRQ+0x38>)
 8002996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	; (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff8e 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff29 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff40 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff90 	bl	8002a0c <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5f 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff33 	bl	800297c <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa4 	bl	8002a74 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e014      	b.n	8002b72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe fa5b 	bl	8001014 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	795b      	ldrb	r3, [r3, #5]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_DAC_Start+0x16>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e040      	b.n	8002c12 <HAL_DAC_Start+0x98>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2201      	movs	r2, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d11d      	bne.n	8002c04 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	e014      	b.n	8002c04 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2102      	movs	r1, #2
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0202 	orr.w	r2, r2, #2
 8002c02:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	795b      	ldrb	r3, [r3, #5]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_DAC_Start_DMA+0x1e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e09e      	b.n	8002d7c <HAL_DAC_Start_DMA+0x15c>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2202      	movs	r2, #2
 8002c48:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d12a      	bne.n	8002ca6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_DAC_Start_DMA+0x164>)
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_DAC_Start_DMA+0x168>)
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_DAC_Start_DMA+0x16c>)
 8002c66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c76:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d009      	beq.n	8002c92 <HAL_DAC_Start_DMA+0x72>
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d00c      	beq.n	8002c9c <HAL_DAC_Start_DMA+0x7c>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d000      	beq.n	8002c88 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c86:	e039      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	613b      	str	r3, [r7, #16]
        break;
 8002c90:	e034      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	613b      	str	r3, [r7, #16]
        break;
 8002c9a:	e02f      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	613b      	str	r3, [r7, #16]
        break;
 8002ca4:	e02a      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_DAC_Start_DMA+0x170>)
 8002cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_DAC_Start_DMA+0x174>)
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <HAL_DAC_Start_DMA+0x178>)
 8002cbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d009      	beq.n	8002ce8 <HAL_DAC_Start_DMA+0xc8>
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_DAC_Start_DMA+0xd2>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d000      	beq.n	8002cde <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002cdc:	e00e      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	613b      	str	r3, [r7, #16]
        break;
 8002ce6:	e009      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3318      	adds	r3, #24
 8002cee:	613b      	str	r3, [r7, #16]
        break;
 8002cf0:	e004      	b.n	8002cfc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	331c      	adds	r3, #28
 8002cf8:	613b      	str	r3, [r7, #16]
        break;
 8002cfa:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d111      	bne.n	8002d26 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6898      	ldr	r0, [r3, #8]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	f000 fda6 	bl	800386c <HAL_DMA_Start_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
 8002d24:	e010      	b.n	8002d48 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	68d8      	ldr	r0, [r3, #12]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	f000 fd94 	bl	800386c <HAL_DMA_Start_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10c      	bne.n	8002d6e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2201      	movs	r2, #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e005      	b.n	8002d7a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	08003039 	.word	0x08003039
 8002d88:	0800305b 	.word	0x0800305b
 8002d8c:	08003077 	.word	0x08003077
 8002d90:	080030e1 	.word	0x080030e1
 8002d94:	08003103 	.word	0x08003103
 8002d98:	0800311f 	.word	0x0800311f

08002d9c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	795b      	ldrb	r3, [r3, #5]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_DAC_ConfigChannel+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e11d      	b.n	800302c <HAL_DAC_ConfigChannel+0x254>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d174      	bne.n	8002eee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fc18 	bl	8001638 <HAL_GetTick>
 8002e08:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d134      	bne.n	8002e7a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e10:	e011      	b.n	8002e36 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e12:	f7fe fc11 	bl	8001638 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d90a      	bls.n	8002e36 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f043 0208 	orr.w	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0fa      	b.n	800302c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3c:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_DAC_ConfigChannel+0x25c>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e6      	bne.n	8002e12 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7fe fc03 	bl	8001650 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	6992      	ldr	r2, [r2, #24]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
 8002e54:	e01e      	b.n	8002e94 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e56:	f7fe fbef 	bl	8001638 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d90a      	bls.n	8002e7a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f043 0208 	orr.w	r2, r3, #8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2203      	movs	r2, #3
 8002e74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0d8      	b.n	800302c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	dbe8      	blt.n	8002e56 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7fe fbe3 	bl	8001650 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	6992      	ldr	r2, [r2, #24]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	ea02 0103 	and.w	r1, r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	21ff      	movs	r1, #255	; 0xff
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	ea02 0103 	and.w	r1, r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d11d      	bne.n	8002f32 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	221f      	movs	r2, #31
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2207      	movs	r2, #7
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e00f      	b.n	8002f7c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d102      	bne.n	8002f6a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002f64:	2301      	movs	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	e008      	b.n	8002f7c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e001      	b.n	8002f7c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	22c0      	movs	r2, #192	; 0xc0
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43da      	mvns	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	400a      	ands	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20008000 	.word	0x20008000

08003038 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fea8 	bl	8002d9c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	711a      	strb	r2, [r3, #4]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff fea1 	bl	8002db0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff fe97 	bl	8002dc4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	711a      	strb	r2, [r3, #4]
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ffd8 	bl	80030a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	711a      	strb	r2, [r3, #4]
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ffd1 	bl	80030b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff ffc7 	bl	80030cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	711a      	strb	r2, [r3, #4]
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7fe fa70 	bl	8001638 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e37f      	b.n	8003864 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a66      	ldr	r2, [pc, #408]	; (8003304 <HAL_DMA_Init+0x1b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a65      	ldr	r2, [pc, #404]	; (8003308 <HAL_DMA_Init+0x1bc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a63      	ldr	r2, [pc, #396]	; (800330c <HAL_DMA_Init+0x1c0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a62      	ldr	r2, [pc, #392]	; (8003310 <HAL_DMA_Init+0x1c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a60      	ldr	r2, [pc, #384]	; (8003314 <HAL_DMA_Init+0x1c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5f      	ldr	r2, [pc, #380]	; (8003318 <HAL_DMA_Init+0x1cc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5d      	ldr	r2, [pc, #372]	; (800331c <HAL_DMA_Init+0x1d0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_DMA_Init+0x1d4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_DMA_Init+0x1d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a59      	ldr	r2, [pc, #356]	; (8003328 <HAL_DMA_Init+0x1dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a57      	ldr	r2, [pc, #348]	; (800332c <HAL_DMA_Init+0x1e0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a56      	ldr	r2, [pc, #344]	; (8003330 <HAL_DMA_Init+0x1e4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_DMA_Init+0x1e8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_DMA_Init+0x1ec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_DMA_Init+0x1f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_DMA_Init+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_DMA_Init+0xbc>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_DMA_Init+0xbe>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 813c 	beq.w	8003488 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a37      	ldr	r2, [pc, #220]	; (8003304 <HAL_DMA_Init+0x1b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a36      	ldr	r2, [pc, #216]	; (8003308 <HAL_DMA_Init+0x1bc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_DMA_Init+0x1c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_DMA_Init+0x1c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_DMA_Init+0x1c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a30      	ldr	r2, [pc, #192]	; (8003318 <HAL_DMA_Init+0x1cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2e      	ldr	r2, [pc, #184]	; (800331c <HAL_DMA_Init+0x1d0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <HAL_DMA_Init+0x1d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <HAL_DMA_Init+0x1d8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_DMA_Init+0x1dc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_DMA_Init+0x1e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_DMA_Init+0x1e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <HAL_DMA_Init+0x1e8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a24      	ldr	r2, [pc, #144]	; (8003338 <HAL_DMA_Init+0x1ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_DMA_Init+0x1f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_DMA_Init+0x1f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <HAL_DMA_Init+0x186>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e007      	b.n	80032e2 <HAL_DMA_Init+0x196>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e2:	e02f      	b.n	8003344 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e4:	f7fe f9a8 	bl	8001638 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d928      	bls.n	8003344 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2203      	movs	r2, #3
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e2af      	b.n	8003864 <HAL_DMA_Init+0x718>
 8003304:	40020010 	.word	0x40020010
 8003308:	40020028 	.word	0x40020028
 800330c:	40020040 	.word	0x40020040
 8003310:	40020058 	.word	0x40020058
 8003314:	40020070 	.word	0x40020070
 8003318:	40020088 	.word	0x40020088
 800331c:	400200a0 	.word	0x400200a0
 8003320:	400200b8 	.word	0x400200b8
 8003324:	40020410 	.word	0x40020410
 8003328:	40020428 	.word	0x40020428
 800332c:	40020440 	.word	0x40020440
 8003330:	40020458 	.word	0x40020458
 8003334:	40020470 	.word	0x40020470
 8003338:	40020488 	.word	0x40020488
 800333c:	400204a0 	.word	0x400204a0
 8003340:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1c8      	bne.n	80032e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_DMA_Init+0x3e0>)
 800335e:	4013      	ands	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800336a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003376:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003382:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b04      	cmp	r3, #4
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4313      	orrs	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b28      	cmp	r3, #40	; 0x28
 80033ae:	d903      	bls.n	80033b8 <HAL_DMA_Init+0x26c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b2e      	cmp	r3, #46	; 0x2e
 80033b6:	d91f      	bls.n	80033f8 <HAL_DMA_Init+0x2ac>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b3e      	cmp	r3, #62	; 0x3e
 80033be:	d903      	bls.n	80033c8 <HAL_DMA_Init+0x27c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b42      	cmp	r3, #66	; 0x42
 80033c6:	d917      	bls.n	80033f8 <HAL_DMA_Init+0x2ac>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b46      	cmp	r3, #70	; 0x46
 80033ce:	d903      	bls.n	80033d8 <HAL_DMA_Init+0x28c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b48      	cmp	r3, #72	; 0x48
 80033d6:	d90f      	bls.n	80033f8 <HAL_DMA_Init+0x2ac>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b4e      	cmp	r3, #78	; 0x4e
 80033de:	d903      	bls.n	80033e8 <HAL_DMA_Init+0x29c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b52      	cmp	r3, #82	; 0x52
 80033e6:	d907      	bls.n	80033f8 <HAL_DMA_Init+0x2ac>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b73      	cmp	r3, #115	; 0x73
 80033ee:	d905      	bls.n	80033fc <HAL_DMA_Init+0x2b0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b77      	cmp	r3, #119	; 0x77
 80033f6:	d801      	bhi.n	80033fc <HAL_DMA_Init+0x2b0>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_DMA_Init+0x2b2>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003408:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0307 	bic.w	r3, r3, #7
 8003420:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b04      	cmp	r3, #4
 8003432:	d117      	bne.n	8003464 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00e      	beq.n	8003464 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f001 fe72 	bl	8005130 <DMA_CheckFifoParam>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e1ff      	b.n	8003864 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f001 fdad 	bl	8004fcc <DMA_CalcBaseAndBitshift>
 8003472:	4603      	mov	r3, r0
 8003474:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	223f      	movs	r2, #63	; 0x3f
 8003480:	409a      	lsls	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	e0fe      	b.n	8003686 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <HAL_DMA_Init+0x3e4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04a      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a27      	ldr	r2, [pc, #156]	; (8003534 <HAL_DMA_Init+0x3e8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d045      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <HAL_DMA_Init+0x3ec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d040      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <HAL_DMA_Init+0x3f0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d03b      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_DMA_Init+0x3f4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d036      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_DMA_Init+0x3f8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_DMA_Init+0x3fc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02c      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_DMA_Init+0x400>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d027      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <HAL_DMA_Init+0x404>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d022      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_DMA_Init+0x408>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d01d      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <HAL_DMA_Init+0x40c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_DMA_Init+0x410>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <HAL_DMA_Init+0x414>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_DMA_Init+0x418>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_DMA_Init+0x41c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_DMA_Init+0x3dc>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <HAL_DMA_Init+0x420>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d123      	bne.n	8003570 <HAL_DMA_Init+0x424>
 8003528:	2301      	movs	r3, #1
 800352a:	e022      	b.n	8003572 <HAL_DMA_Init+0x426>
 800352c:	fe10803f 	.word	0xfe10803f
 8003530:	48022c08 	.word	0x48022c08
 8003534:	48022c1c 	.word	0x48022c1c
 8003538:	48022c30 	.word	0x48022c30
 800353c:	48022c44 	.word	0x48022c44
 8003540:	48022c58 	.word	0x48022c58
 8003544:	48022c6c 	.word	0x48022c6c
 8003548:	48022c80 	.word	0x48022c80
 800354c:	48022c94 	.word	0x48022c94
 8003550:	58025408 	.word	0x58025408
 8003554:	5802541c 	.word	0x5802541c
 8003558:	58025430 	.word	0x58025430
 800355c:	58025444 	.word	0x58025444
 8003560:	58025458 	.word	0x58025458
 8003564:	5802546c 	.word	0x5802546c
 8003568:	58025480 	.word	0x58025480
 800356c:	58025494 	.word	0x58025494
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07e      	beq.n	8003674 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_DMA_Init+0x630>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d021      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a7e      	ldr	r2, [pc, #504]	; (8003780 <HAL_DMA_Init+0x634>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01c      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7d      	ldr	r2, [pc, #500]	; (8003784 <HAL_DMA_Init+0x638>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d017      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a7b      	ldr	r2, [pc, #492]	; (8003788 <HAL_DMA_Init+0x63c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d012      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7a      	ldr	r2, [pc, #488]	; (800378c <HAL_DMA_Init+0x640>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00d      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a78      	ldr	r2, [pc, #480]	; (8003790 <HAL_DMA_Init+0x644>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d008      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_DMA_Init+0x648>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <HAL_DMA_Init+0x478>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a75      	ldr	r2, [pc, #468]	; (8003798 <HAL_DMA_Init+0x64c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4b6e      	ldr	r3, [pc, #440]	; (800379c <HAL_DMA_Init+0x650>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d008      	beq.n	8003600 <HAL_DMA_Init+0x4b4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d102      	bne.n	80035fc <HAL_DMA_Init+0x4b0>
 80035f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035fa:	e002      	b.n	8003602 <HAL_DMA_Init+0x4b6>
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_DMA_Init+0x4b6>
 8003600:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003618:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003630:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <HAL_DMA_Init+0x654>)
 8003648:	4413      	add	r3, r2
 800364a:	4a56      	ldr	r2, [pc, #344]	; (80037a4 <HAL_DMA_Init+0x658>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f001 fcb7 	bl	8004fcc <DMA_CalcBaseAndBitshift>
 800365e:	4603      	mov	r3, r0
 8003660:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e008      	b.n	8003686 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2203      	movs	r2, #3
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0ee      	b.n	8003864 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a47      	ldr	r2, [pc, #284]	; (80037a8 <HAL_DMA_Init+0x65c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d072      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a45      	ldr	r2, [pc, #276]	; (80037ac <HAL_DMA_Init+0x660>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d06d      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a44      	ldr	r2, [pc, #272]	; (80037b0 <HAL_DMA_Init+0x664>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d068      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_DMA_Init+0x668>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d063      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a41      	ldr	r2, [pc, #260]	; (80037b8 <HAL_DMA_Init+0x66c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d05e      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <HAL_DMA_Init+0x670>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d059      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3e      	ldr	r2, [pc, #248]	; (80037c0 <HAL_DMA_Init+0x674>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d054      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a3c      	ldr	r2, [pc, #240]	; (80037c4 <HAL_DMA_Init+0x678>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04f      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a3b      	ldr	r2, [pc, #236]	; (80037c8 <HAL_DMA_Init+0x67c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d04a      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a39      	ldr	r2, [pc, #228]	; (80037cc <HAL_DMA_Init+0x680>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d045      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a38      	ldr	r2, [pc, #224]	; (80037d0 <HAL_DMA_Init+0x684>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d040      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a36      	ldr	r2, [pc, #216]	; (80037d4 <HAL_DMA_Init+0x688>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d03b      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <HAL_DMA_Init+0x68c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d036      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a33      	ldr	r2, [pc, #204]	; (80037dc <HAL_DMA_Init+0x690>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d031      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a32      	ldr	r2, [pc, #200]	; (80037e0 <HAL_DMA_Init+0x694>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d02c      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a30      	ldr	r2, [pc, #192]	; (80037e4 <HAL_DMA_Init+0x698>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d027      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_DMA_Init+0x630>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a12      	ldr	r2, [pc, #72]	; (8003780 <HAL_DMA_Init+0x634>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01d      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_DMA_Init+0x638>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <HAL_DMA_Init+0x63c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_DMA_Init+0x640>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <HAL_DMA_Init+0x644>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_DMA_Init+0x648>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_DMA_Init+0x62a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_DMA_Init+0x64c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d138      	bne.n	80037e8 <HAL_DMA_Init+0x69c>
 8003776:	2301      	movs	r3, #1
 8003778:	e037      	b.n	80037ea <HAL_DMA_Init+0x69e>
 800377a:	bf00      	nop
 800377c:	58025408 	.word	0x58025408
 8003780:	5802541c 	.word	0x5802541c
 8003784:	58025430 	.word	0x58025430
 8003788:	58025444 	.word	0x58025444
 800378c:	58025458 	.word	0x58025458
 8003790:	5802546c 	.word	0x5802546c
 8003794:	58025480 	.word	0x58025480
 8003798:	58025494 	.word	0x58025494
 800379c:	fffe000f 	.word	0xfffe000f
 80037a0:	a7fdabf8 	.word	0xa7fdabf8
 80037a4:	cccccccd 	.word	0xcccccccd
 80037a8:	40020010 	.word	0x40020010
 80037ac:	40020028 	.word	0x40020028
 80037b0:	40020040 	.word	0x40020040
 80037b4:	40020058 	.word	0x40020058
 80037b8:	40020070 	.word	0x40020070
 80037bc:	40020088 	.word	0x40020088
 80037c0:	400200a0 	.word	0x400200a0
 80037c4:	400200b8 	.word	0x400200b8
 80037c8:	40020410 	.word	0x40020410
 80037cc:	40020428 	.word	0x40020428
 80037d0:	40020440 	.word	0x40020440
 80037d4:	40020458 	.word	0x40020458
 80037d8:	40020470 	.word	0x40020470
 80037dc:	40020488 	.word	0x40020488
 80037e0:	400204a0 	.word	0x400204a0
 80037e4:	400204b8 	.word	0x400204b8
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d032      	beq.n	8003854 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f001 fd1a 	bl	8005228 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d102      	bne.n	8003802 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003816:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d010      	beq.n	8003842 <HAL_DMA_Init+0x6f6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d80c      	bhi.n	8003842 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f001 fd97 	bl	800535c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	e008      	b.n	8003854 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e226      	b.n	8003cd6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Start_IT+0x2a>
 8003892:	2302      	movs	r3, #2
 8003894:	e21f      	b.n	8003cd6 <HAL_DMA_Start_IT+0x46a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	f040 820a 	bne.w	8003cc0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a68      	ldr	r2, [pc, #416]	; (8003a60 <HAL_DMA_Start_IT+0x1f4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d04a      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a66      	ldr	r2, [pc, #408]	; (8003a64 <HAL_DMA_Start_IT+0x1f8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d045      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a65      	ldr	r2, [pc, #404]	; (8003a68 <HAL_DMA_Start_IT+0x1fc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d040      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a63      	ldr	r2, [pc, #396]	; (8003a6c <HAL_DMA_Start_IT+0x200>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d03b      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a62      	ldr	r2, [pc, #392]	; (8003a70 <HAL_DMA_Start_IT+0x204>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d036      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a60      	ldr	r2, [pc, #384]	; (8003a74 <HAL_DMA_Start_IT+0x208>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5f      	ldr	r2, [pc, #380]	; (8003a78 <HAL_DMA_Start_IT+0x20c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02c      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5d      	ldr	r2, [pc, #372]	; (8003a7c <HAL_DMA_Start_IT+0x210>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d027      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <HAL_DMA_Start_IT+0x214>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <HAL_DMA_Start_IT+0x218>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a59      	ldr	r2, [pc, #356]	; (8003a88 <HAL_DMA_Start_IT+0x21c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a57      	ldr	r2, [pc, #348]	; (8003a8c <HAL_DMA_Start_IT+0x220>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_DMA_Start_IT+0x224>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a54      	ldr	r2, [pc, #336]	; (8003a94 <HAL_DMA_Start_IT+0x228>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <HAL_DMA_Start_IT+0x22c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_DMA_Start_IT+0xee>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_DMA_Start_IT+0x230>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <HAL_DMA_Start_IT+0x100>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <HAL_DMA_Start_IT+0x110>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f001 f93e 	bl	8004c04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_DMA_Start_IT+0x1f4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d04a      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a33      	ldr	r2, [pc, #204]	; (8003a64 <HAL_DMA_Start_IT+0x1f8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d045      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_DMA_Start_IT+0x1fc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d040      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a30      	ldr	r2, [pc, #192]	; (8003a6c <HAL_DMA_Start_IT+0x200>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d03b      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_DMA_Start_IT+0x204>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d036      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <HAL_DMA_Start_IT+0x208>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d031      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_DMA_Start_IT+0x20c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02c      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_DMA_Start_IT+0x210>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d027      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_DMA_Start_IT+0x214>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d022      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <HAL_DMA_Start_IT+0x218>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d01d      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <HAL_DMA_Start_IT+0x21c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d018      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_DMA_Start_IT+0x220>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_DMA_Start_IT+0x224>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00e      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <HAL_DMA_Start_IT+0x228>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_DMA_Start_IT+0x22c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_Start_IT+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_DMA_Start_IT+0x230>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Start_IT+0x1c0>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_DMA_Start_IT+0x1c2>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 021e 	bic.w	r2, r3, #30
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0216 	orr.w	r2, r2, #22
 8003a44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03e      	beq.n	8003acc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0208 	orr.w	r2, r2, #8
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e035      	b.n	8003acc <HAL_DMA_Start_IT+0x260>
 8003a60:	40020010 	.word	0x40020010
 8003a64:	40020028 	.word	0x40020028
 8003a68:	40020040 	.word	0x40020040
 8003a6c:	40020058 	.word	0x40020058
 8003a70:	40020070 	.word	0x40020070
 8003a74:	40020088 	.word	0x40020088
 8003a78:	400200a0 	.word	0x400200a0
 8003a7c:	400200b8 	.word	0x400200b8
 8003a80:	40020410 	.word	0x40020410
 8003a84:	40020428 	.word	0x40020428
 8003a88:	40020440 	.word	0x40020440
 8003a8c:	40020458 	.word	0x40020458
 8003a90:	40020470 	.word	0x40020470
 8003a94:	40020488 	.word	0x40020488
 8003a98:	400204a0 	.word	0x400204a0
 8003a9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 020e 	bic.w	r2, r3, #14
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 020a 	orr.w	r2, r2, #10
 8003ab2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0204 	orr.w	r2, r2, #4
 8003aca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a83      	ldr	r2, [pc, #524]	; (8003ce0 <HAL_DMA_Start_IT+0x474>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d072      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a82      	ldr	r2, [pc, #520]	; (8003ce4 <HAL_DMA_Start_IT+0x478>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d06d      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_DMA_Start_IT+0x47c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d068      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7f      	ldr	r2, [pc, #508]	; (8003cec <HAL_DMA_Start_IT+0x480>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d063      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_DMA_Start_IT+0x484>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d05e      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7c      	ldr	r2, [pc, #496]	; (8003cf4 <HAL_DMA_Start_IT+0x488>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d059      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7a      	ldr	r2, [pc, #488]	; (8003cf8 <HAL_DMA_Start_IT+0x48c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d054      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a79      	ldr	r2, [pc, #484]	; (8003cfc <HAL_DMA_Start_IT+0x490>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d04f      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a77      	ldr	r2, [pc, #476]	; (8003d00 <HAL_DMA_Start_IT+0x494>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d04a      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <HAL_DMA_Start_IT+0x498>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d045      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a74      	ldr	r2, [pc, #464]	; (8003d08 <HAL_DMA_Start_IT+0x49c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d040      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a73      	ldr	r2, [pc, #460]	; (8003d0c <HAL_DMA_Start_IT+0x4a0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d03b      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a71      	ldr	r2, [pc, #452]	; (8003d10 <HAL_DMA_Start_IT+0x4a4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d036      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a70      	ldr	r2, [pc, #448]	; (8003d14 <HAL_DMA_Start_IT+0x4a8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d031      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_DMA_Start_IT+0x4ac>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02c      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6d      	ldr	r2, [pc, #436]	; (8003d1c <HAL_DMA_Start_IT+0x4b0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d027      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6b      	ldr	r2, [pc, #428]	; (8003d20 <HAL_DMA_Start_IT+0x4b4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d022      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6a      	ldr	r2, [pc, #424]	; (8003d24 <HAL_DMA_Start_IT+0x4b8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d01d      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a68      	ldr	r2, [pc, #416]	; (8003d28 <HAL_DMA_Start_IT+0x4bc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d018      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <HAL_DMA_Start_IT+0x4c0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d013      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a65      	ldr	r2, [pc, #404]	; (8003d30 <HAL_DMA_Start_IT+0x4c4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a64      	ldr	r2, [pc, #400]	; (8003d34 <HAL_DMA_Start_IT+0x4c8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a62      	ldr	r2, [pc, #392]	; (8003d38 <HAL_DMA_Start_IT+0x4cc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_DMA_Start_IT+0x350>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a61      	ldr	r2, [pc, #388]	; (8003d3c <HAL_DMA_Start_IT+0x4d0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Start_IT+0x354>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_Start_IT+0x356>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01a      	beq.n	8003bfc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a37      	ldr	r2, [pc, #220]	; (8003ce0 <HAL_DMA_Start_IT+0x474>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d04a      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a36      	ldr	r2, [pc, #216]	; (8003ce4 <HAL_DMA_Start_IT+0x478>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d045      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <HAL_DMA_Start_IT+0x47c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d040      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a33      	ldr	r2, [pc, #204]	; (8003cec <HAL_DMA_Start_IT+0x480>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d03b      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <HAL_DMA_Start_IT+0x484>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <HAL_DMA_Start_IT+0x488>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d031      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_DMA_Start_IT+0x48c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02c      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <HAL_DMA_Start_IT+0x490>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d027      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <HAL_DMA_Start_IT+0x494>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <HAL_DMA_Start_IT+0x498>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d01d      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <HAL_DMA_Start_IT+0x49c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <HAL_DMA_Start_IT+0x4a0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_DMA_Start_IT+0x4a4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_DMA_Start_IT+0x4a8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <HAL_DMA_Start_IT+0x4ac>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_DMA_Start_IT+0x430>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <HAL_DMA_Start_IT+0x4b0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <HAL_DMA_Start_IT+0x442>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e012      	b.n	8003cd4 <HAL_DMA_Start_IT+0x468>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e009      	b.n	8003cd4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8
 8003d20:	58025408 	.word	0x58025408
 8003d24:	5802541c 	.word	0x5802541c
 8003d28:	58025430 	.word	0x58025430
 8003d2c:	58025444 	.word	0x58025444
 8003d30:	58025458 	.word	0x58025458
 8003d34:	5802546c 	.word	0x5802546c
 8003d38:	58025480 	.word	0x58025480
 8003d3c:	58025494 	.word	0x58025494

08003d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d4c:	4b67      	ldr	r3, [pc, #412]	; (8003eec <HAL_DMA_IRQHandler+0x1ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_DMA_IRQHandler+0x1b0>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5f      	ldr	r2, [pc, #380]	; (8003ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	; (8003ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <HAL_DMA_IRQHandler+0x1bc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5a      	ldr	r2, [pc, #360]	; (8003f00 <HAL_DMA_IRQHandler+0x1c0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	; (8003f04 <HAL_DMA_IRQHandler+0x1c4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_DMA_IRQHandler+0x1c8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a56      	ldr	r2, [pc, #344]	; (8003f0c <HAL_DMA_IRQHandler+0x1cc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	; (8003f10 <HAL_DMA_IRQHandler+0x1d0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a53      	ldr	r2, [pc, #332]	; (8003f14 <HAL_DMA_IRQHandler+0x1d4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_DMA_IRQHandler+0x1d8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a50      	ldr	r2, [pc, #320]	; (8003f1c <HAL_DMA_IRQHandler+0x1dc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a4e      	ldr	r2, [pc, #312]	; (8003f20 <HAL_DMA_IRQHandler+0x1e0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4d      	ldr	r2, [pc, #308]	; (8003f24 <HAL_DMA_IRQHandler+0x1e4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <HAL_DMA_IRQHandler+0x1e8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_DMA_IRQHandler+0x1ec>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a48      	ldr	r2, [pc, #288]	; (8003f30 <HAL_DMA_IRQHandler+0x1f0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_IRQHandler+0xd6>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 842b 	beq.w	8004674 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2208      	movs	r2, #8
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80a2 	beq.w	8003f78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d04a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d045      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <HAL_DMA_IRQHandler+0x1bc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d040      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <HAL_DMA_IRQHandler+0x1c0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d03b      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <HAL_DMA_IRQHandler+0x1c4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d036      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <HAL_DMA_IRQHandler+0x1c8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <HAL_DMA_IRQHandler+0x1cc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02c      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_DMA_IRQHandler+0x1d0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d027      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <HAL_DMA_IRQHandler+0x1d4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <HAL_DMA_IRQHandler+0x1d8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01d      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_DMA_IRQHandler+0x1dc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_DMA_IRQHandler+0x1e0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_DMA_IRQHandler+0x1e4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_DMA_IRQHandler+0x1e8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_DMA_IRQHandler+0x1ec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_DMA_IRQHandler+0x1f0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d12f      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x1f4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e02e      	b.n	8003f48 <HAL_DMA_IRQHandler+0x208>
 8003eea:	bf00      	nop
 8003eec:	24000000 	.word	0x24000000
 8003ef0:	1b4e81b5 	.word	0x1b4e81b5
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0204 	bic.w	r2, r2, #4
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2208      	movs	r2, #8
 8003f66:	409a      	lsls	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06e      	beq.n	800406c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a69      	ldr	r2, [pc, #420]	; (8004138 <HAL_DMA_IRQHandler+0x3f8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04a      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a67      	ldr	r2, [pc, #412]	; (800413c <HAL_DMA_IRQHandler+0x3fc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d045      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a66      	ldr	r2, [pc, #408]	; (8004140 <HAL_DMA_IRQHandler+0x400>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d040      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a64      	ldr	r2, [pc, #400]	; (8004144 <HAL_DMA_IRQHandler+0x404>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d03b      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a63      	ldr	r2, [pc, #396]	; (8004148 <HAL_DMA_IRQHandler+0x408>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d036      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a61      	ldr	r2, [pc, #388]	; (800414c <HAL_DMA_IRQHandler+0x40c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a60      	ldr	r2, [pc, #384]	; (8004150 <HAL_DMA_IRQHandler+0x410>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02c      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5e      	ldr	r2, [pc, #376]	; (8004154 <HAL_DMA_IRQHandler+0x414>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d027      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5d      	ldr	r2, [pc, #372]	; (8004158 <HAL_DMA_IRQHandler+0x418>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5b      	ldr	r2, [pc, #364]	; (800415c <HAL_DMA_IRQHandler+0x41c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5a      	ldr	r2, [pc, #360]	; (8004160 <HAL_DMA_IRQHandler+0x420>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a58      	ldr	r2, [pc, #352]	; (8004164 <HAL_DMA_IRQHandler+0x424>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a57      	ldr	r2, [pc, #348]	; (8004168 <HAL_DMA_IRQHandler+0x428>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a55      	ldr	r2, [pc, #340]	; (800416c <HAL_DMA_IRQHandler+0x42c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a54      	ldr	r2, [pc, #336]	; (8004170 <HAL_DMA_IRQHandler+0x430>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_DMA_IRQHandler+0x434>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10a      	bne.n	8004044 <HAL_DMA_IRQHandler+0x304>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e003      	b.n	800404c <HAL_DMA_IRQHandler+0x30c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f043 0202 	orr.w	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2204      	movs	r2, #4
 8004076:	409a      	lsls	r2, r3
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 808f 	beq.w	80041a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2c      	ldr	r2, [pc, #176]	; (8004138 <HAL_DMA_IRQHandler+0x3f8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d04a      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <HAL_DMA_IRQHandler+0x3fc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d045      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a29      	ldr	r2, [pc, #164]	; (8004140 <HAL_DMA_IRQHandler+0x400>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d040      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <HAL_DMA_IRQHandler+0x404>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d03b      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a26      	ldr	r2, [pc, #152]	; (8004148 <HAL_DMA_IRQHandler+0x408>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d036      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a24      	ldr	r2, [pc, #144]	; (800414c <HAL_DMA_IRQHandler+0x40c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a23      	ldr	r2, [pc, #140]	; (8004150 <HAL_DMA_IRQHandler+0x410>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d02c      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a21      	ldr	r2, [pc, #132]	; (8004154 <HAL_DMA_IRQHandler+0x414>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d027      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a20      	ldr	r2, [pc, #128]	; (8004158 <HAL_DMA_IRQHandler+0x418>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d022      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1e      	ldr	r2, [pc, #120]	; (800415c <HAL_DMA_IRQHandler+0x41c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01d      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_DMA_IRQHandler+0x420>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_DMA_IRQHandler+0x424>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_DMA_IRQHandler+0x428>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_DMA_IRQHandler+0x42c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_DMA_IRQHandler+0x430>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <HAL_DMA_IRQHandler+0x434>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d12a      	bne.n	8004178 <HAL_DMA_IRQHandler+0x438>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e023      	b.n	8004180 <HAL_DMA_IRQHandler+0x440>
 8004138:	40020010 	.word	0x40020010
 800413c:	40020028 	.word	0x40020028
 8004140:	40020040 	.word	0x40020040
 8004144:	40020058 	.word	0x40020058
 8004148:	40020070 	.word	0x40020070
 800414c:	40020088 	.word	0x40020088
 8004150:	400200a0 	.word	0x400200a0
 8004154:	400200b8 	.word	0x400200b8
 8004158:	40020410 	.word	0x40020410
 800415c:	40020428 	.word	0x40020428
 8004160:	40020440 	.word	0x40020440
 8004164:	40020458 	.word	0x40020458
 8004168:	40020470 	.word	0x40020470
 800416c:	40020488 	.word	0x40020488
 8004170:	400204a0 	.word	0x400204a0
 8004174:	400204b8 	.word	0x400204b8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2204      	movs	r2, #4
 800418e:	409a      	lsls	r2, r3
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2210      	movs	r2, #16
 80041aa:	409a      	lsls	r2, r3
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a6 	beq.w	8004302 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a85      	ldr	r2, [pc, #532]	; (80043d0 <HAL_DMA_IRQHandler+0x690>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04a      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a83      	ldr	r2, [pc, #524]	; (80043d4 <HAL_DMA_IRQHandler+0x694>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d045      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a82      	ldr	r2, [pc, #520]	; (80043d8 <HAL_DMA_IRQHandler+0x698>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d040      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a80      	ldr	r2, [pc, #512]	; (80043dc <HAL_DMA_IRQHandler+0x69c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7f      	ldr	r2, [pc, #508]	; (80043e0 <HAL_DMA_IRQHandler+0x6a0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a7d      	ldr	r2, [pc, #500]	; (80043e4 <HAL_DMA_IRQHandler+0x6a4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7c      	ldr	r2, [pc, #496]	; (80043e8 <HAL_DMA_IRQHandler+0x6a8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d02c      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a7a      	ldr	r2, [pc, #488]	; (80043ec <HAL_DMA_IRQHandler+0x6ac>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a79      	ldr	r2, [pc, #484]	; (80043f0 <HAL_DMA_IRQHandler+0x6b0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a76      	ldr	r2, [pc, #472]	; (80043f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a74      	ldr	r2, [pc, #464]	; (80043fc <HAL_DMA_IRQHandler+0x6bc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a73      	ldr	r2, [pc, #460]	; (8004400 <HAL_DMA_IRQHandler+0x6c0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a71      	ldr	r2, [pc, #452]	; (8004404 <HAL_DMA_IRQHandler+0x6c4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a70      	ldr	r2, [pc, #448]	; (8004408 <HAL_DMA_IRQHandler+0x6c8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_DMA_IRQHandler+0x6cc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10a      	bne.n	800426c <HAL_DMA_IRQHandler+0x52c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e009      	b.n	8004280 <HAL_DMA_IRQHandler+0x540>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf14      	ite	ne
 800427a:	2301      	movne	r3, #1
 800427c:	2300      	moveq	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03e      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2210      	movs	r2, #16
 800428e:	409a      	lsls	r2, r3
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d018      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d108      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d024      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
 80042c0:	e01f      	b.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01b      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
 80042d2:	e016      	b.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d107      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0208 	bic.w	r2, r2, #8
 80042f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2220      	movs	r2, #32
 800430c:	409a      	lsls	r2, r3
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8110 	beq.w	8004538 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <HAL_DMA_IRQHandler+0x690>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04a      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <HAL_DMA_IRQHandler+0x694>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d045      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a29      	ldr	r2, [pc, #164]	; (80043d8 <HAL_DMA_IRQHandler+0x698>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d040      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a28      	ldr	r2, [pc, #160]	; (80043dc <HAL_DMA_IRQHandler+0x69c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d03b      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <HAL_DMA_IRQHandler+0x6a0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d036      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <HAL_DMA_IRQHandler+0x6a4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d031      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a23      	ldr	r2, [pc, #140]	; (80043e8 <HAL_DMA_IRQHandler+0x6a8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02c      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a22      	ldr	r2, [pc, #136]	; (80043ec <HAL_DMA_IRQHandler+0x6ac>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d027      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <HAL_DMA_IRQHandler+0x6b0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_DMA_IRQHandler+0x6bc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_DMA_IRQHandler+0x6c0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_DMA_IRQHandler+0x6c4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_DMA_IRQHandler+0x6c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a16      	ldr	r2, [pc, #88]	; (800440c <HAL_DMA_IRQHandler+0x6cc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12b      	bne.n	8004410 <HAL_DMA_IRQHandler+0x6d0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf14      	ite	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	2300      	moveq	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e02a      	b.n	8004424 <HAL_DMA_IRQHandler+0x6e4>
 80043ce:	bf00      	nop
 80043d0:	40020010 	.word	0x40020010
 80043d4:	40020028 	.word	0x40020028
 80043d8:	40020040 	.word	0x40020040
 80043dc:	40020058 	.word	0x40020058
 80043e0:	40020070 	.word	0x40020070
 80043e4:	40020088 	.word	0x40020088
 80043e8:	400200a0 	.word	0x400200a0
 80043ec:	400200b8 	.word	0x400200b8
 80043f0:	40020410 	.word	0x40020410
 80043f4:	40020428 	.word	0x40020428
 80043f8:	40020440 	.word	0x40020440
 80043fc:	40020458 	.word	0x40020458
 8004400:	40020470 	.word	0x40020470
 8004404:	40020488 	.word	0x40020488
 8004408:	400204a0 	.word	0x400204a0
 800440c:	400204b8 	.word	0x400204b8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8087 	beq.w	8004538 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b04      	cmp	r3, #4
 8004444:	d139      	bne.n	80044ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0216 	bic.w	r2, r2, #22
 8004454:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004464:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <HAL_DMA_IRQHandler+0x736>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0208 	bic.w	r2, r2, #8
 8004484:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	223f      	movs	r2, #63	; 0x3f
 8004490:	409a      	lsls	r2, r3
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8382 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
          }
          return;
 80044b8:	e37c      	b.n	8004bb4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d018      	beq.n	80044fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d108      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02c      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
 80044e6:	e027      	b.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d023      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
 80044f8:	e01e      	b.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 833e 	beq.w	8004bbe <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8088 	beq.w	8004660 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2204      	movs	r2, #4
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a8e      	ldr	r2, [pc, #568]	; (8004798 <HAL_DMA_IRQHandler+0xa58>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04a      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a8d      	ldr	r2, [pc, #564]	; (800479c <HAL_DMA_IRQHandler+0xa5c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d045      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a8b      	ldr	r2, [pc, #556]	; (80047a0 <HAL_DMA_IRQHandler+0xa60>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d040      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a8a      	ldr	r2, [pc, #552]	; (80047a4 <HAL_DMA_IRQHandler+0xa64>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d03b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a88      	ldr	r2, [pc, #544]	; (80047a8 <HAL_DMA_IRQHandler+0xa68>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d036      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a87      	ldr	r2, [pc, #540]	; (80047ac <HAL_DMA_IRQHandler+0xa6c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d031      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_DMA_IRQHandler+0xa70>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02c      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a84      	ldr	r2, [pc, #528]	; (80047b4 <HAL_DMA_IRQHandler+0xa74>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d027      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a82      	ldr	r2, [pc, #520]	; (80047b8 <HAL_DMA_IRQHandler+0xa78>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a81      	ldr	r2, [pc, #516]	; (80047bc <HAL_DMA_IRQHandler+0xa7c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d01d      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7f      	ldr	r2, [pc, #508]	; (80047c0 <HAL_DMA_IRQHandler+0xa80>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7e      	ldr	r2, [pc, #504]	; (80047c4 <HAL_DMA_IRQHandler+0xa84>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_DMA_IRQHandler+0xa88>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7b      	ldr	r2, [pc, #492]	; (80047cc <HAL_DMA_IRQHandler+0xa8c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <HAL_DMA_IRQHandler+0xa90>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a78      	ldr	r2, [pc, #480]	; (80047d4 <HAL_DMA_IRQHandler+0xa94>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <HAL_DMA_IRQHandler+0x8ca>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e007      	b.n	800461a <HAL_DMA_IRQHandler+0x8da>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d307      	bcc.n	8004636 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f2      	bne.n	800461a <HAL_DMA_IRQHandler+0x8da>
 8004634:	e000      	b.n	8004638 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004636:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2203      	movs	r2, #3
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004656:	e003      	b.n	8004660 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 82aa 	beq.w	8004bbe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
 8004672:	e2a4      	b.n	8004bbe <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a57      	ldr	r2, [pc, #348]	; (80047d8 <HAL_DMA_IRQHandler+0xa98>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d04a      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a56      	ldr	r2, [pc, #344]	; (80047dc <HAL_DMA_IRQHandler+0xa9c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d045      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a54      	ldr	r2, [pc, #336]	; (80047e0 <HAL_DMA_IRQHandler+0xaa0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d040      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a53      	ldr	r2, [pc, #332]	; (80047e4 <HAL_DMA_IRQHandler+0xaa4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d03b      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a51      	ldr	r2, [pc, #324]	; (80047e8 <HAL_DMA_IRQHandler+0xaa8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d036      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a50      	ldr	r2, [pc, #320]	; (80047ec <HAL_DMA_IRQHandler+0xaac>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d031      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a4e      	ldr	r2, [pc, #312]	; (80047f0 <HAL_DMA_IRQHandler+0xab0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02c      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4d      	ldr	r2, [pc, #308]	; (80047f4 <HAL_DMA_IRQHandler+0xab4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d027      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a4b      	ldr	r2, [pc, #300]	; (80047f8 <HAL_DMA_IRQHandler+0xab8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <HAL_DMA_IRQHandler+0xabc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d01d      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a48      	ldr	r2, [pc, #288]	; (8004800 <HAL_DMA_IRQHandler+0xac0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a47      	ldr	r2, [pc, #284]	; (8004804 <HAL_DMA_IRQHandler+0xac4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a45      	ldr	r2, [pc, #276]	; (8004808 <HAL_DMA_IRQHandler+0xac8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a44      	ldr	r2, [pc, #272]	; (800480c <HAL_DMA_IRQHandler+0xacc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a42      	ldr	r2, [pc, #264]	; (8004810 <HAL_DMA_IRQHandler+0xad0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_DMA_IRQHandler+0x9d4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a41      	ldr	r2, [pc, #260]	; (8004814 <HAL_DMA_IRQHandler+0xad4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_DMA_IRQHandler+0x9d8>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_DMA_IRQHandler+0x9da>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 824f 	beq.w	8004bbe <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2204      	movs	r2, #4
 8004732:	409a      	lsls	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80dd 	beq.w	80048f8 <HAL_DMA_IRQHandler+0xbb8>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80d7 	beq.w	80048f8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2204      	movs	r2, #4
 8004754:	409a      	lsls	r2, r3
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d059      	beq.n	8004818 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8220 	beq.w	8004bb8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004780:	e21a      	b.n	8004bb8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8216 	beq.w	8004bb8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004794:	e210      	b.n	8004bb8 <HAL_DMA_IRQHandler+0xe78>
 8004796:	bf00      	nop
 8004798:	40020010 	.word	0x40020010
 800479c:	40020028 	.word	0x40020028
 80047a0:	40020040 	.word	0x40020040
 80047a4:	40020058 	.word	0x40020058
 80047a8:	40020070 	.word	0x40020070
 80047ac:	40020088 	.word	0x40020088
 80047b0:	400200a0 	.word	0x400200a0
 80047b4:	400200b8 	.word	0x400200b8
 80047b8:	40020410 	.word	0x40020410
 80047bc:	40020428 	.word	0x40020428
 80047c0:	40020440 	.word	0x40020440
 80047c4:	40020458 	.word	0x40020458
 80047c8:	40020470 	.word	0x40020470
 80047cc:	40020488 	.word	0x40020488
 80047d0:	400204a0 	.word	0x400204a0
 80047d4:	400204b8 	.word	0x400204b8
 80047d8:	48022c08 	.word	0x48022c08
 80047dc:	48022c1c 	.word	0x48022c1c
 80047e0:	48022c30 	.word	0x48022c30
 80047e4:	48022c44 	.word	0x48022c44
 80047e8:	48022c58 	.word	0x48022c58
 80047ec:	48022c6c 	.word	0x48022c6c
 80047f0:	48022c80 	.word	0x48022c80
 80047f4:	48022c94 	.word	0x48022c94
 80047f8:	58025408 	.word	0x58025408
 80047fc:	5802541c 	.word	0x5802541c
 8004800:	58025430 	.word	0x58025430
 8004804:	58025444 	.word	0x58025444
 8004808:	58025458 	.word	0x58025458
 800480c:	5802546c 	.word	0x5802546c
 8004810:	58025480 	.word	0x58025480
 8004814:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d160      	bne.n	80048e4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a8c      	ldr	r2, [pc, #560]	; (8004a58 <HAL_DMA_IRQHandler+0xd18>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d04a      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a8a      	ldr	r2, [pc, #552]	; (8004a5c <HAL_DMA_IRQHandler+0xd1c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d045      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a89      	ldr	r2, [pc, #548]	; (8004a60 <HAL_DMA_IRQHandler+0xd20>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d040      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a87      	ldr	r2, [pc, #540]	; (8004a64 <HAL_DMA_IRQHandler+0xd24>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d03b      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a86      	ldr	r2, [pc, #536]	; (8004a68 <HAL_DMA_IRQHandler+0xd28>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d036      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a84      	ldr	r2, [pc, #528]	; (8004a6c <HAL_DMA_IRQHandler+0xd2c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_DMA_IRQHandler+0xd30>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d02c      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a81      	ldr	r2, [pc, #516]	; (8004a74 <HAL_DMA_IRQHandler+0xd34>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d027      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a80      	ldr	r2, [pc, #512]	; (8004a78 <HAL_DMA_IRQHandler+0xd38>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d022      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7e      	ldr	r2, [pc, #504]	; (8004a7c <HAL_DMA_IRQHandler+0xd3c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01d      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_DMA_IRQHandler+0xd40>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a7b      	ldr	r2, [pc, #492]	; (8004a84 <HAL_DMA_IRQHandler+0xd44>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a7a      	ldr	r2, [pc, #488]	; (8004a88 <HAL_DMA_IRQHandler+0xd48>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a78      	ldr	r2, [pc, #480]	; (8004a8c <HAL_DMA_IRQHandler+0xd4c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <HAL_DMA_IRQHandler+0xd50>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xb82>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a75      	ldr	r2, [pc, #468]	; (8004a94 <HAL_DMA_IRQHandler+0xd54>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <HAL_DMA_IRQHandler+0xb94>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0208 	bic.w	r2, r2, #8
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e007      	b.n	80048e4 <HAL_DMA_IRQHandler+0xba4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8165 	beq.w	8004bb8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f6:	e15f      	b.n	8004bb8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2202      	movs	r2, #2
 8004902:	409a      	lsls	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80c5 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xd58>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80bf 	beq.w	8004a98 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2202      	movs	r2, #2
 8004924:	409a      	lsls	r2, r3
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 813a 	beq.w	8004bbc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004950:	e134      	b.n	8004bbc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8130 	beq.w	8004bbc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004964:	e12a      	b.n	8004bbc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d168      	bne.n	8004a42 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a38      	ldr	r2, [pc, #224]	; (8004a58 <HAL_DMA_IRQHandler+0xd18>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d04a      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a37      	ldr	r2, [pc, #220]	; (8004a5c <HAL_DMA_IRQHandler+0xd1c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d045      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a35      	ldr	r2, [pc, #212]	; (8004a60 <HAL_DMA_IRQHandler+0xd20>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d040      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <HAL_DMA_IRQHandler+0xd24>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d03b      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <HAL_DMA_IRQHandler+0xd28>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d036      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a31      	ldr	r2, [pc, #196]	; (8004a6c <HAL_DMA_IRQHandler+0xd2c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d031      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <HAL_DMA_IRQHandler+0xd30>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02c      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2e      	ldr	r2, [pc, #184]	; (8004a74 <HAL_DMA_IRQHandler+0xd34>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d027      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <HAL_DMA_IRQHandler+0xd38>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d022      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_DMA_IRQHandler+0xd3c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d01d      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <HAL_DMA_IRQHandler+0xd40>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d018      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <HAL_DMA_IRQHandler+0xd44>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <HAL_DMA_IRQHandler+0xd48>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <HAL_DMA_IRQHandler+0xd4c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a23      	ldr	r2, [pc, #140]	; (8004a90 <HAL_DMA_IRQHandler+0xd50>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_DMA_IRQHandler+0xcd0>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_DMA_IRQHandler+0xd54>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <HAL_DMA_IRQHandler+0xce2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0214 	bic.w	r2, r2, #20
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e007      	b.n	8004a32 <HAL_DMA_IRQHandler+0xcf2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 020a 	bic.w	r2, r2, #10
 8004a30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80b8 	beq.w	8004bbc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a54:	e0b2      	b.n	8004bbc <HAL_DMA_IRQHandler+0xe7c>
 8004a56:	bf00      	nop
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8088 	beq.w	8004bbe <HAL_DMA_IRQHandler+0xe7e>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8082 	beq.w	8004bbe <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a41      	ldr	r2, [pc, #260]	; (8004bc4 <HAL_DMA_IRQHandler+0xe84>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d04a      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3f      	ldr	r2, [pc, #252]	; (8004bc8 <HAL_DMA_IRQHandler+0xe88>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d045      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3e      	ldr	r2, [pc, #248]	; (8004bcc <HAL_DMA_IRQHandler+0xe8c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d040      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <HAL_DMA_IRQHandler+0xe90>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d03b      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <HAL_DMA_IRQHandler+0xe94>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d036      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a39      	ldr	r2, [pc, #228]	; (8004bd8 <HAL_DMA_IRQHandler+0xe98>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d031      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a38      	ldr	r2, [pc, #224]	; (8004bdc <HAL_DMA_IRQHandler+0xe9c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d02c      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a36      	ldr	r2, [pc, #216]	; (8004be0 <HAL_DMA_IRQHandler+0xea0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d027      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <HAL_DMA_IRQHandler+0xea4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d022      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a33      	ldr	r2, [pc, #204]	; (8004be8 <HAL_DMA_IRQHandler+0xea8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01d      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a32      	ldr	r2, [pc, #200]	; (8004bec <HAL_DMA_IRQHandler+0xeac>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a30      	ldr	r2, [pc, #192]	; (8004bf0 <HAL_DMA_IRQHandler+0xeb0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <HAL_DMA_IRQHandler+0xeb4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2d      	ldr	r2, [pc, #180]	; (8004bf8 <HAL_DMA_IRQHandler+0xeb8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2c      	ldr	r2, [pc, #176]	; (8004bfc <HAL_DMA_IRQHandler+0xebc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xe1a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <HAL_DMA_IRQHandler+0xec0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <HAL_DMA_IRQHandler+0xe2c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 021c 	bic.w	r2, r2, #28
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e007      	b.n	8004b7c <HAL_DMA_IRQHandler+0xe3c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 020e 	bic.w	r2, r2, #14
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	e004      	b.n	8004bbe <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004bb4:	bf00      	nop
 8004bb6:	e002      	b.n	8004bbe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb8:	bf00      	nop
 8004bba:	e000      	b.n	8004bbe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bbc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8

08004c04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a84      	ldr	r2, [pc, #528]	; (8004e34 <DMA_SetConfig+0x230>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d072      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a82      	ldr	r2, [pc, #520]	; (8004e38 <DMA_SetConfig+0x234>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d06d      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a81      	ldr	r2, [pc, #516]	; (8004e3c <DMA_SetConfig+0x238>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d068      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a7f      	ldr	r2, [pc, #508]	; (8004e40 <DMA_SetConfig+0x23c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d063      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a7e      	ldr	r2, [pc, #504]	; (8004e44 <DMA_SetConfig+0x240>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d05e      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a7c      	ldr	r2, [pc, #496]	; (8004e48 <DMA_SetConfig+0x244>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d059      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a7b      	ldr	r2, [pc, #492]	; (8004e4c <DMA_SetConfig+0x248>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d054      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a79      	ldr	r2, [pc, #484]	; (8004e50 <DMA_SetConfig+0x24c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d04f      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a78      	ldr	r2, [pc, #480]	; (8004e54 <DMA_SetConfig+0x250>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d04a      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a76      	ldr	r2, [pc, #472]	; (8004e58 <DMA_SetConfig+0x254>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d045      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a75      	ldr	r2, [pc, #468]	; (8004e5c <DMA_SetConfig+0x258>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d040      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a73      	ldr	r2, [pc, #460]	; (8004e60 <DMA_SetConfig+0x25c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d03b      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a72      	ldr	r2, [pc, #456]	; (8004e64 <DMA_SetConfig+0x260>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d036      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a70      	ldr	r2, [pc, #448]	; (8004e68 <DMA_SetConfig+0x264>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d031      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6f      	ldr	r2, [pc, #444]	; (8004e6c <DMA_SetConfig+0x268>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d02c      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a6d      	ldr	r2, [pc, #436]	; (8004e70 <DMA_SetConfig+0x26c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d027      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6c      	ldr	r2, [pc, #432]	; (8004e74 <DMA_SetConfig+0x270>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d022      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6a      	ldr	r2, [pc, #424]	; (8004e78 <DMA_SetConfig+0x274>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01d      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a69      	ldr	r2, [pc, #420]	; (8004e7c <DMA_SetConfig+0x278>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a67      	ldr	r2, [pc, #412]	; (8004e80 <DMA_SetConfig+0x27c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a66      	ldr	r2, [pc, #408]	; (8004e84 <DMA_SetConfig+0x280>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a64      	ldr	r2, [pc, #400]	; (8004e88 <DMA_SetConfig+0x284>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a63      	ldr	r2, [pc, #396]	; (8004e8c <DMA_SetConfig+0x288>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <DMA_SetConfig+0x10a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a61      	ldr	r2, [pc, #388]	; (8004e90 <DMA_SetConfig+0x28c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <DMA_SetConfig+0x10e>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <DMA_SetConfig+0x110>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00d      	beq.n	8004d34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d004      	beq.n	8004d34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3e      	ldr	r2, [pc, #248]	; (8004e34 <DMA_SetConfig+0x230>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d04a      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <DMA_SetConfig+0x234>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d045      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3b      	ldr	r2, [pc, #236]	; (8004e3c <DMA_SetConfig+0x238>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d040      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <DMA_SetConfig+0x23c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d03b      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a38      	ldr	r2, [pc, #224]	; (8004e44 <DMA_SetConfig+0x240>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d036      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <DMA_SetConfig+0x244>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d031      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <DMA_SetConfig+0x248>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d02c      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a34      	ldr	r2, [pc, #208]	; (8004e50 <DMA_SetConfig+0x24c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d027      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a32      	ldr	r2, [pc, #200]	; (8004e54 <DMA_SetConfig+0x250>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d022      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a31      	ldr	r2, [pc, #196]	; (8004e58 <DMA_SetConfig+0x254>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d01d      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <DMA_SetConfig+0x258>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <DMA_SetConfig+0x25c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <DMA_SetConfig+0x260>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <DMA_SetConfig+0x264>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <DMA_SetConfig+0x268>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <DMA_SetConfig+0x1d0>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a28      	ldr	r2, [pc, #160]	; (8004e70 <DMA_SetConfig+0x26c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d101      	bne.n	8004dd8 <DMA_SetConfig+0x1d4>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <DMA_SetConfig+0x1d6>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d05a      	beq.n	8004e94 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	223f      	movs	r2, #63	; 0x3f
 8004de8:	409a      	lsls	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dfc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d108      	bne.n	8004e20 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e1e:	e0af      	b.n	8004f80 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]
}
 8004e30:	e0a6      	b.n	8004f80 <DMA_SetConfig+0x37c>
 8004e32:	bf00      	nop
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8
 8004e74:	58025408 	.word	0x58025408
 8004e78:	5802541c 	.word	0x5802541c
 8004e7c:	58025430 	.word	0x58025430
 8004e80:	58025444 	.word	0x58025444
 8004e84:	58025458 	.word	0x58025458
 8004e88:	5802546c 	.word	0x5802546c
 8004e8c:	58025480 	.word	0x58025480
 8004e90:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a3c      	ldr	r2, [pc, #240]	; (8004f8c <DMA_SetConfig+0x388>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d04a      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3b      	ldr	r2, [pc, #236]	; (8004f90 <DMA_SetConfig+0x38c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d045      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a39      	ldr	r2, [pc, #228]	; (8004f94 <DMA_SetConfig+0x390>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d040      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a38      	ldr	r2, [pc, #224]	; (8004f98 <DMA_SetConfig+0x394>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d03b      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a36      	ldr	r2, [pc, #216]	; (8004f9c <DMA_SetConfig+0x398>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d036      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a35      	ldr	r2, [pc, #212]	; (8004fa0 <DMA_SetConfig+0x39c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d031      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <DMA_SetConfig+0x3a0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02c      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a32      	ldr	r2, [pc, #200]	; (8004fa8 <DMA_SetConfig+0x3a4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d027      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a30      	ldr	r2, [pc, #192]	; (8004fac <DMA_SetConfig+0x3a8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d022      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2f      	ldr	r2, [pc, #188]	; (8004fb0 <DMA_SetConfig+0x3ac>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d01d      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2d      	ldr	r2, [pc, #180]	; (8004fb4 <DMA_SetConfig+0x3b0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d018      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <DMA_SetConfig+0x3b4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <DMA_SetConfig+0x3b8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00e      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a29      	ldr	r2, [pc, #164]	; (8004fc0 <DMA_SetConfig+0x3bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d009      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <DMA_SetConfig+0x3c0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <DMA_SetConfig+0x330>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <DMA_SetConfig+0x3c4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d101      	bne.n	8004f38 <DMA_SetConfig+0x334>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <DMA_SetConfig+0x336>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	d108      	bne.n	8004f70 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
}
 8004f6e:	e007      	b.n	8004f80 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	60da      	str	r2, [r3, #12]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	48022c08 	.word	0x48022c08
 8004f90:	48022c1c 	.word	0x48022c1c
 8004f94:	48022c30 	.word	0x48022c30
 8004f98:	48022c44 	.word	0x48022c44
 8004f9c:	48022c58 	.word	0x48022c58
 8004fa0:	48022c6c 	.word	0x48022c6c
 8004fa4:	48022c80 	.word	0x48022c80
 8004fa8:	48022c94 	.word	0x48022c94
 8004fac:	58025408 	.word	0x58025408
 8004fb0:	5802541c 	.word	0x5802541c
 8004fb4:	58025430 	.word	0x58025430
 8004fb8:	58025444 	.word	0x58025444
 8004fbc:	58025458 	.word	0x58025458
 8004fc0:	5802546c 	.word	0x5802546c
 8004fc4:	58025480 	.word	0x58025480
 8004fc8:	58025494 	.word	0x58025494

08004fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a42      	ldr	r2, [pc, #264]	; (80050e4 <DMA_CalcBaseAndBitshift+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d04a      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a41      	ldr	r2, [pc, #260]	; (80050e8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d045      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a3f      	ldr	r2, [pc, #252]	; (80050ec <DMA_CalcBaseAndBitshift+0x120>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d040      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a3e      	ldr	r2, [pc, #248]	; (80050f0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d03b      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a3c      	ldr	r2, [pc, #240]	; (80050f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d036      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3b      	ldr	r2, [pc, #236]	; (80050f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d031      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a39      	ldr	r2, [pc, #228]	; (80050fc <DMA_CalcBaseAndBitshift+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d02c      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a38      	ldr	r2, [pc, #224]	; (8005100 <DMA_CalcBaseAndBitshift+0x134>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d027      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a36      	ldr	r2, [pc, #216]	; (8005104 <DMA_CalcBaseAndBitshift+0x138>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a35      	ldr	r2, [pc, #212]	; (8005108 <DMA_CalcBaseAndBitshift+0x13c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d01d      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a33      	ldr	r2, [pc, #204]	; (800510c <DMA_CalcBaseAndBitshift+0x140>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a32      	ldr	r2, [pc, #200]	; (8005110 <DMA_CalcBaseAndBitshift+0x144>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	; (8005114 <DMA_CalcBaseAndBitshift+0x148>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2f      	ldr	r2, [pc, #188]	; (8005118 <DMA_CalcBaseAndBitshift+0x14c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a2d      	ldr	r2, [pc, #180]	; (800511c <DMA_CalcBaseAndBitshift+0x150>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <DMA_CalcBaseAndBitshift+0xa8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2c      	ldr	r2, [pc, #176]	; (8005120 <DMA_CalcBaseAndBitshift+0x154>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <DMA_CalcBaseAndBitshift+0xac>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <DMA_CalcBaseAndBitshift+0xae>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d024      	beq.n	80050c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	3b10      	subs	r3, #16
 8005086:	4a27      	ldr	r2, [pc, #156]	; (8005124 <DMA_CalcBaseAndBitshift+0x158>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	4a24      	ldr	r2, [pc, #144]	; (8005128 <DMA_CalcBaseAndBitshift+0x15c>)
 8005098:	5cd3      	ldrb	r3, [r2, r3]
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d908      	bls.n	80050b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b1f      	ldr	r3, [pc, #124]	; (800512c <DMA_CalcBaseAndBitshift+0x160>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	659a      	str	r2, [r3, #88]	; 0x58
 80050b6:	e00d      	b.n	80050d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b1b      	ldr	r3, [pc, #108]	; (800512c <DMA_CalcBaseAndBitshift+0x160>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6593      	str	r3, [r2, #88]	; 0x58
 80050c6:	e005      	b.n	80050d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40020010 	.word	0x40020010
 80050e8:	40020028 	.word	0x40020028
 80050ec:	40020040 	.word	0x40020040
 80050f0:	40020058 	.word	0x40020058
 80050f4:	40020070 	.word	0x40020070
 80050f8:	40020088 	.word	0x40020088
 80050fc:	400200a0 	.word	0x400200a0
 8005100:	400200b8 	.word	0x400200b8
 8005104:	40020410 	.word	0x40020410
 8005108:	40020428 	.word	0x40020428
 800510c:	40020440 	.word	0x40020440
 8005110:	40020458 	.word	0x40020458
 8005114:	40020470 	.word	0x40020470
 8005118:	40020488 	.word	0x40020488
 800511c:	400204a0 	.word	0x400204a0
 8005120:	400204b8 	.word	0x400204b8
 8005124:	aaaaaaab 	.word	0xaaaaaaab
 8005128:	0800ac78 	.word	0x0800ac78
 800512c:	fffffc00 	.word	0xfffffc00

08005130 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d120      	bne.n	8005186 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	2b03      	cmp	r3, #3
 800514a:	d858      	bhi.n	80051fe <DMA_CheckFifoParam+0xce>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <DMA_CheckFifoParam+0x24>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005165 	.word	0x08005165
 8005158:	08005177 	.word	0x08005177
 800515c:	08005165 	.word	0x08005165
 8005160:	080051ff 	.word	0x080051ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d048      	beq.n	8005202 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005174:	e045      	b.n	8005202 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800517e:	d142      	bne.n	8005206 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005184:	e03f      	b.n	8005206 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518e:	d123      	bne.n	80051d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	2b03      	cmp	r3, #3
 8005196:	d838      	bhi.n	800520a <DMA_CheckFifoParam+0xda>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <DMA_CheckFifoParam+0x70>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051b7 	.word	0x080051b7
 80051a8:	080051b1 	.word	0x080051b1
 80051ac:	080051c9 	.word	0x080051c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
        break;
 80051b4:	e030      	b.n	8005218 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d025      	beq.n	800520e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051c6:	e022      	b.n	800520e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051d0:	d11f      	bne.n	8005212 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051d6:	e01c      	b.n	8005212 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d902      	bls.n	80051e6 <DMA_CheckFifoParam+0xb6>
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d003      	beq.n	80051ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051e4:	e018      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
        break;
 80051ea:	e015      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00e      	beq.n	8005216 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
    break;
 80051fc:	e00b      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
        break;
 80051fe:	bf00      	nop
 8005200:	e00a      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        break;
 8005202:	bf00      	nop
 8005204:	e008      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        break;
 8005206:	bf00      	nop
 8005208:	e006      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
        break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
    break;
 8005216:	bf00      	nop
    }
  }

  return status;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop

08005228 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a38      	ldr	r2, [pc, #224]	; (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a36      	ldr	r2, [pc, #216]	; (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01d      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a35      	ldr	r2, [pc, #212]	; (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a33      	ldr	r2, [pc, #204]	; (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a32      	ldr	r2, [pc, #200]	; (800532c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a30      	ldr	r2, [pc, #192]	; (8005330 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2f      	ldr	r2, [pc, #188]	; (8005334 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d101      	bne.n	800528a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01a      	beq.n	80052c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	3b08      	subs	r3, #8
 8005298:	4a28      	ldr	r2, [pc, #160]	; (800533c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4b26      	ldr	r3, [pc, #152]	; (8005340 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a24      	ldr	r2, [pc, #144]	; (8005344 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2201      	movs	r2, #1
 80052be:	409a      	lsls	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80052c4:	e024      	b.n	8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	3b10      	subs	r3, #16
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d806      	bhi.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d902      	bls.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3308      	adds	r3, #8
 80052ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4b18      	ldr	r3, [pc, #96]	; (8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a16      	ldr	r2, [pc, #88]	; (8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005300:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2201      	movs	r2, #1
 800530a:	409a      	lsls	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	58025408 	.word	0x58025408
 8005320:	5802541c 	.word	0x5802541c
 8005324:	58025430 	.word	0x58025430
 8005328:	58025444 	.word	0x58025444
 800532c:	58025458 	.word	0x58025458
 8005330:	5802546c 	.word	0x5802546c
 8005334:	58025480 	.word	0x58025480
 8005338:	58025494 	.word	0x58025494
 800533c:	cccccccd 	.word	0xcccccccd
 8005340:	16009600 	.word	0x16009600
 8005344:	58025880 	.word	0x58025880
 8005348:	aaaaaaab 	.word	0xaaaaaaab
 800534c:	400204b8 	.word	0x400204b8
 8005350:	4002040f 	.word	0x4002040f
 8005354:	10008200 	.word	0x10008200
 8005358:	40020880 	.word	0x40020880

0800535c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04a      	beq.n	8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d847      	bhi.n	8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a25      	ldr	r2, [pc, #148]	; (8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a22      	ldr	r2, [pc, #136]	; (800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4b17      	ldr	r3, [pc, #92]	; (8005434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a15      	ldr	r2, [pc, #84]	; (8005438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053e4:	671a      	str	r2, [r3, #112]	; 0x70
 80053e6:	e009      	b.n	80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	461a      	mov	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a11      	ldr	r2, [pc, #68]	; (8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3b01      	subs	r3, #1
 8005400:	2201      	movs	r2, #1
 8005402:	409a      	lsls	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	58025408 	.word	0x58025408
 8005418:	5802541c 	.word	0x5802541c
 800541c:	58025430 	.word	0x58025430
 8005420:	58025444 	.word	0x58025444
 8005424:	58025458 	.word	0x58025458
 8005428:	5802546c 	.word	0x5802546c
 800542c:	58025480 	.word	0x58025480
 8005430:	58025494 	.word	0x58025494
 8005434:	1600963f 	.word	0x1600963f
 8005438:	58025940 	.word	0x58025940
 800543c:	1000823f 	.word	0x1000823f
 8005440:	40020940 	.word	0x40020940

08005444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	; 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005452:	4b89      	ldr	r3, [pc, #548]	; (8005678 <HAL_GPIO_Init+0x234>)
 8005454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005456:	e194      	b.n	8005782 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2101      	movs	r1, #1
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	4013      	ands	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8186 	beq.w	800577c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d00b      	beq.n	8005490 <HAL_GPIO_Init+0x4c>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d007      	beq.n	8005490 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005484:	2b11      	cmp	r3, #17
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b12      	cmp	r3, #18
 800548e:	d130      	bne.n	80054f2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	2203      	movs	r2, #3
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4013      	ands	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054c6:	2201      	movs	r2, #1
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4013      	ands	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	f003 0201 	and.w	r2, r3, #1
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	2203      	movs	r2, #3
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0xee>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b12      	cmp	r3, #18
 8005530:	d123      	bne.n	800557a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	08da      	lsrs	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3208      	adds	r2, #8
 800553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	220f      	movs	r2, #15
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	08da      	lsrs	r2, r3, #3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3208      	adds	r2, #8
 8005574:	69b9      	ldr	r1, [r7, #24]
 8005576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	2203      	movs	r2, #3
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43db      	mvns	r3, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4013      	ands	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 0203 	and.w	r2, r3, #3
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80e0 	beq.w	800577c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <HAL_GPIO_Init+0x238>)
 80055be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80055c2:	4a2e      	ldr	r2, [pc, #184]	; (800567c <HAL_GPIO_Init+0x238>)
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80055cc:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_GPIO_Init+0x238>)
 80055ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055da:	4a29      	ldr	r2, [pc, #164]	; (8005680 <HAL_GPIO_Init+0x23c>)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	089b      	lsrs	r3, r3, #2
 80055e0:	3302      	adds	r3, #2
 80055e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	220f      	movs	r2, #15
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <HAL_GPIO_Init+0x240>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d052      	beq.n	80056ac <HAL_GPIO_Init+0x268>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <HAL_GPIO_Init+0x244>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_GPIO_Init+0x22e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1e      	ldr	r2, [pc, #120]	; (800568c <HAL_GPIO_Init+0x248>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02b      	beq.n	800566e <HAL_GPIO_Init+0x22a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1d      	ldr	r2, [pc, #116]	; (8005690 <HAL_GPIO_Init+0x24c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d025      	beq.n	800566a <HAL_GPIO_Init+0x226>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <HAL_GPIO_Init+0x250>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01f      	beq.n	8005666 <HAL_GPIO_Init+0x222>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_GPIO_Init+0x254>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d019      	beq.n	8005662 <HAL_GPIO_Init+0x21e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_GPIO_Init+0x258>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_GPIO_Init+0x21a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a19      	ldr	r2, [pc, #100]	; (80056a0 <HAL_GPIO_Init+0x25c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00d      	beq.n	800565a <HAL_GPIO_Init+0x216>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_GPIO_Init+0x260>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <HAL_GPIO_Init+0x212>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_GPIO_Init+0x264>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d101      	bne.n	8005652 <HAL_GPIO_Init+0x20e>
 800564e:	2309      	movs	r3, #9
 8005650:	e02d      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 8005652:	230a      	movs	r3, #10
 8005654:	e02b      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 8005656:	2308      	movs	r3, #8
 8005658:	e029      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 800565a:	2307      	movs	r3, #7
 800565c:	e027      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 800565e:	2306      	movs	r3, #6
 8005660:	e025      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 8005662:	2305      	movs	r3, #5
 8005664:	e023      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 8005666:	2304      	movs	r3, #4
 8005668:	e021      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 800566a:	2303      	movs	r3, #3
 800566c:	e01f      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 800566e:	2302      	movs	r3, #2
 8005670:	e01d      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 8005672:	2301      	movs	r3, #1
 8005674:	e01b      	b.n	80056ae <HAL_GPIO_Init+0x26a>
 8005676:	bf00      	nop
 8005678:	58000080 	.word	0x58000080
 800567c:	58024400 	.word	0x58024400
 8005680:	58000400 	.word	0x58000400
 8005684:	58020000 	.word	0x58020000
 8005688:	58020400 	.word	0x58020400
 800568c:	58020800 	.word	0x58020800
 8005690:	58020c00 	.word	0x58020c00
 8005694:	58021000 	.word	0x58021000
 8005698:	58021400 	.word	0x58021400
 800569c:	58021800 	.word	0x58021800
 80056a0:	58021c00 	.word	0x58021c00
 80056a4:	58022000 	.word	0x58022000
 80056a8:	58022400 	.word	0x58022400
 80056ac:	2300      	movs	r3, #0
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	f002 0203 	and.w	r2, r2, #3
 80056b4:	0092      	lsls	r2, r2, #2
 80056b6:	4093      	lsls	r3, r2
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056be:	4938      	ldr	r1, [pc, #224]	; (80057a0 <HAL_GPIO_Init+0x35c>)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	3302      	adds	r3, #2
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	43db      	mvns	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4013      	ands	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	f47f ae63 	bne.w	8005458 <HAL_GPIO_Init+0x14>
  }
}
 8005792:	bf00      	nop
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	58000400 	.word	0x58000400

080057a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
 80057b0:	4613      	mov	r3, r2
 80057b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057b4:	787b      	ldrb	r3, [r7, #1]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ba:	887a      	ldrh	r2, [r7, #2]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80057c0:	e003      	b.n	80057ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057c2:	887b      	ldrh	r3, [r7, #2]
 80057c4:	041a      	lsls	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	619a      	str	r2, [r3, #24]
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	887b      	ldrh	r3, [r7, #2]
 80057e8:	401a      	ands	r2, r3
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d104      	bne.n	80057fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057f0:	887b      	ldrh	r3, [r7, #2]
 80057f2:	041a      	lsls	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80057f8:	e002      	b.n	8005800 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005814:	4b29      	ldr	r3, [pc, #164]	; (80058bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	2b06      	cmp	r3, #6
 800581e:	d00a      	beq.n	8005836 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005820:	4b26      	ldr	r3, [pc, #152]	; (80058bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d001      	beq.n	8005832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e040      	b.n	80058b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e03e      	b.n	80058b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005836:	4b21      	ldr	r3, [pc, #132]	; (80058bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800583e:	491f      	ldr	r1, [pc, #124]	; (80058bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4313      	orrs	r3, r2
 8005844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005846:	f7fb fef7 	bl	8001638 <HAL_GetTick>
 800584a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800584c:	e009      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800584e:	f7fb fef3 	bl	8001638 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800585c:	d901      	bls.n	8005862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e028      	b.n	80058b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d1ee      	bne.n	800584e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b1e      	cmp	r3, #30
 8005874:	d008      	beq.n	8005888 <HAL_PWREx_ConfigSupply+0x7c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b2e      	cmp	r3, #46	; 0x2e
 800587a:	d005      	beq.n	8005888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b1d      	cmp	r3, #29
 8005880:	d002      	beq.n	8005888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b2d      	cmp	r3, #45	; 0x2d
 8005886:	d114      	bne.n	80058b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005888:	f7fb fed6 	bl	8001638 <HAL_GetTick>
 800588c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800588e:	e009      	b.n	80058a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005890:	f7fb fed2 	bl	8001638 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589e:	d901      	bls.n	80058a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e007      	b.n	80058b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_PWREx_ConfigSupply+0xb0>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d1ee      	bne.n	8005890 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	58024800 	.word	0x58024800

080058c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	; 0x30
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e3d7      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80b3 	beq.w	8005a46 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e0:	4b90      	ldr	r3, [pc, #576]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058ea:	4b8e      	ldr	r3, [pc, #568]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d007      	beq.n	8005906 <HAL_RCC_OscConfig+0x46>
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	2b18      	cmp	r3, #24
 80058fa:	d112      	bne.n	8005922 <HAL_RCC_OscConfig+0x62>
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d10d      	bne.n	8005922 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005906:	4b87      	ldr	r3, [pc, #540]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8098 	beq.w	8005a44 <HAL_RCC_OscConfig+0x184>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 8093 	bne.w	8005a44 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e3af      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x7a>
 800592c:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7c      	ldr	r2, [pc, #496]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e058      	b.n	80059ec <HAL_RCC_OscConfig+0x12c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d112      	bne.n	8005968 <HAL_RCC_OscConfig+0xa8>
 8005942:	4b78      	ldr	r3, [pc, #480]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a77      	ldr	r2, [pc, #476]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4b75      	ldr	r3, [pc, #468]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a74      	ldr	r2, [pc, #464]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005954:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	4b72      	ldr	r3, [pc, #456]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a71      	ldr	r2, [pc, #452]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e041      	b.n	80059ec <HAL_RCC_OscConfig+0x12c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005970:	d112      	bne.n	8005998 <HAL_RCC_OscConfig+0xd8>
 8005972:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a6b      	ldr	r2, [pc, #428]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b69      	ldr	r3, [pc, #420]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a68      	ldr	r2, [pc, #416]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005984:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4b66      	ldr	r3, [pc, #408]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a65      	ldr	r2, [pc, #404]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e029      	b.n	80059ec <HAL_RCC_OscConfig+0x12c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80059a0:	d112      	bne.n	80059c8 <HAL_RCC_OscConfig+0x108>
 80059a2:	4b60      	ldr	r3, [pc, #384]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5f      	ldr	r2, [pc, #380]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b5d      	ldr	r3, [pc, #372]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a5c      	ldr	r2, [pc, #368]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b5a      	ldr	r3, [pc, #360]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a59      	ldr	r2, [pc, #356]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e011      	b.n	80059ec <HAL_RCC_OscConfig+0x12c>
 80059c8:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a55      	ldr	r2, [pc, #340]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b53      	ldr	r3, [pc, #332]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a52      	ldr	r2, [pc, #328]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	4b50      	ldr	r3, [pc, #320]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a4f      	ldr	r2, [pc, #316]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 80059e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d013      	beq.n	8005a1c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fb fe20 	bl	8001638 <HAL_GetTick>
 80059f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059fc:	f7fb fe1c 	bl	8001638 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b64      	cmp	r3, #100	; 0x64
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e339      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a0e:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x13c>
 8005a1a:	e014      	b.n	8005a46 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1c:	f7fb fe0c 	bl	8001638 <HAL_GetTick>
 8005a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fb fe08 	bl	8001638 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e325      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a36:	4b3b      	ldr	r3, [pc, #236]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f0      	bne.n	8005a24 <HAL_RCC_OscConfig+0x164>
 8005a42:	e000      	b.n	8005a46 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d070      	beq.n	8005b34 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a52:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a5c:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_RCC_OscConfig+0x1b8>
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b18      	cmp	r3, #24
 8005a6c:	d11b      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x1e6>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d116      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a78:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCC_OscConfig+0x1d0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e2f8      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a90:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	4921      	ldr	r1, [pc, #132]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa4:	e046      	b.n	8005b34 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d026      	beq.n	8005afc <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 0219 	bic.w	r2, r3, #25
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	491a      	ldr	r1, [pc, #104]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fb fdba 	bl	8001638 <HAL_GetTick>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fb fdb6 	bl	8001638 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e2d3      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	490b      	ldr	r1, [pc, #44]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
 8005afa:	e01b      	b.n	8005b34 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <HAL_RCC_OscConfig+0x264>)
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fb fd96 	bl	8001638 <HAL_GetTick>
 8005b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b0e:	e00b      	b.n	8005b28 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b10:	f7fb fd92 	bl	8001638 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d904      	bls.n	8005b28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e2af      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b28:	4b99      	ldr	r3, [pc, #612]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ed      	bne.n	8005b10 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d06a      	beq.n	8005c16 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b40:	4b93      	ldr	r3, [pc, #588]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b4a:	4b91      	ldr	r3, [pc, #580]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d007      	beq.n	8005b66 <HAL_RCC_OscConfig+0x2a6>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b18      	cmp	r3, #24
 8005b5a:	d11b      	bne.n	8005b94 <HAL_RCC_OscConfig+0x2d4>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b66:	4b8a      	ldr	r3, [pc, #552]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2be>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e281      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b7e:	4b84      	ldr	r3, [pc, #528]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	061b      	lsls	r3, r3, #24
 8005b8c:	4980      	ldr	r1, [pc, #512]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b92:	e040      	b.n	8005c16 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d023      	beq.n	8005be4 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b9c:	4b7c      	ldr	r3, [pc, #496]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7b      	ldr	r2, [pc, #492]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fb fd46 	bl	8001638 <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005bb0:	f7fb fd42 	bl	8001638 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e25f      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bc2:	4b73      	ldr	r3, [pc, #460]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bce:	4b70      	ldr	r3, [pc, #448]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	061b      	lsls	r3, r3, #24
 8005bdc:	496c      	ldr	r1, [pc, #432]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60cb      	str	r3, [r1, #12]
 8005be2:	e018      	b.n	8005c16 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005be4:	4b6a      	ldr	r3, [pc, #424]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a69      	ldr	r2, [pc, #420]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fb fd22 	bl	8001638 <HAL_GetTick>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005bf8:	f7fb fd1e 	bl	8001638 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e23b      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c0a:	4b61      	ldr	r3, [pc, #388]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d036      	beq.n	8005c90 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d019      	beq.n	8005c5e <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c2a:	4b59      	ldr	r3, [pc, #356]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c36:	f7fb fcff 	bl	8001638 <HAL_GetTick>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c3e:	f7fb fcfb 	bl	8001638 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e218      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c50:	4b4f      	ldr	r3, [pc, #316]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x37e>
 8005c5c:	e018      	b.n	8005c90 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c5e:	4b4c      	ldr	r3, [pc, #304]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c62:	4a4b      	ldr	r2, [pc, #300]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6a:	f7fb fce5 	bl	8001638 <HAL_GetTick>
 8005c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c72:	f7fb fce1 	bl	8001638 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e1fe      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c84:	4b42      	ldr	r3, [pc, #264]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f0      	bne.n	8005c72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d036      	beq.n	8005d0a <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d019      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ca4:	4b3a      	ldr	r3, [pc, #232]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a39      	ldr	r2, [pc, #228]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cb0:	f7fb fcc2 	bl	8001638 <HAL_GetTick>
 8005cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005cb8:	f7fb fcbe 	bl	8001638 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e1db      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x3f8>
 8005cd6:	e018      	b.n	8005d0a <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ce4:	f7fb fca8 	bl	8001638 <HAL_GetTick>
 8005ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005cec:	f7fb fca4 	bl	8001638 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e1c1      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cfe:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80af 	beq.w	8005e76 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <HAL_RCC_OscConfig+0x4d4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_RCC_OscConfig+0x4d4>)
 8005d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d24:	f7fb fc88 	bl	8001638 <HAL_GetTick>
 8005d28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d2c:	f7fb fc84 	bl	8001638 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e1a1      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <HAL_RCC_OscConfig+0x4d4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d106      	bne.n	8005d60 <HAL_RCC_OscConfig+0x4a0>
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5e:	e05b      	b.n	8005e18 <HAL_RCC_OscConfig+0x558>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d117      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4d8>
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	6713      	str	r3, [r2, #112]	; 0x70
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a02      	ldr	r2, [pc, #8]	; (8005d90 <HAL_RCC_OscConfig+0x4d0>)
 8005d86:	f023 0304 	bic.w	r3, r3, #4
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8c:	e044      	b.n	8005e18 <HAL_RCC_OscConfig+0x558>
 8005d8e:	bf00      	nop
 8005d90:	58024400 	.word	0x58024400
 8005d94:	58024800 	.word	0x58024800
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d112      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x506>
 8005da0:	4b95      	ldr	r3, [pc, #596]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da4:	4a94      	ldr	r2, [pc, #592]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005da6:	f043 0304 	orr.w	r3, r3, #4
 8005daa:	6713      	str	r3, [r2, #112]	; 0x70
 8005dac:	4b92      	ldr	r3, [pc, #584]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	4a91      	ldr	r2, [pc, #580]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db6:	6713      	str	r3, [r2, #112]	; 0x70
 8005db8:	4b8f      	ldr	r3, [pc, #572]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4a8e      	ldr	r2, [pc, #568]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc4:	e028      	b.n	8005e18 <HAL_RCC_OscConfig+0x558>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b85      	cmp	r3, #133	; 0x85
 8005dcc:	d112      	bne.n	8005df4 <HAL_RCC_OscConfig+0x534>
 8005dce:	4b8a      	ldr	r3, [pc, #552]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	4a89      	ldr	r2, [pc, #548]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dd4:	f043 0304 	orr.w	r3, r3, #4
 8005dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dda:	4b87      	ldr	r3, [pc, #540]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	4a86      	ldr	r2, [pc, #536]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de4:	6713      	str	r3, [r2, #112]	; 0x70
 8005de6:	4b84      	ldr	r3, [pc, #528]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	4a83      	ldr	r2, [pc, #524]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	6713      	str	r3, [r2, #112]	; 0x70
 8005df2:	e011      	b.n	8005e18 <HAL_RCC_OscConfig+0x558>
 8005df4:	4b80      	ldr	r3, [pc, #512]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df8:	4a7f      	ldr	r2, [pc, #508]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005e00:	4b7d      	ldr	r3, [pc, #500]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	4a7c      	ldr	r2, [pc, #496]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e06:	f023 0304 	bic.w	r3, r3, #4
 8005e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0c:	4b7a      	ldr	r3, [pc, #488]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	4a79      	ldr	r2, [pc, #484]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d015      	beq.n	8005e4c <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e20:	f7fb fc0a 	bl	8001638 <HAL_GetTick>
 8005e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e28:	f7fb fc06 	bl	8001638 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e121      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3e:	4b6e      	ldr	r3, [pc, #440]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0ee      	beq.n	8005e28 <HAL_RCC_OscConfig+0x568>
 8005e4a:	e014      	b.n	8005e76 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4c:	f7fb fbf4 	bl	8001638 <HAL_GetTick>
 8005e50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e54:	f7fb fbf0 	bl	8001638 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e10b      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e6a:	4b63      	ldr	r3, [pc, #396]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1ee      	bne.n	8005e54 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8100 	beq.w	8006080 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e80:	4b5d      	ldr	r3, [pc, #372]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e88:	2b18      	cmp	r3, #24
 8005e8a:	f000 80bb 	beq.w	8006004 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	f040 8095 	bne.w	8005fc2 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e98:	4b57      	ldr	r3, [pc, #348]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a56      	ldr	r2, [pc, #344]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fb fbc8 	bl	8001638 <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eac:	f7fb fbc4 	bl	8001638 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0e1      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ebe:	4b4e      	ldr	r3, [pc, #312]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eca:	4b4b      	ldr	r3, [pc, #300]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ece:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <HAL_RCC_OscConfig+0x73c>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005eda:	0112      	lsls	r2, r2, #4
 8005edc:	430a      	orrs	r2, r1
 8005ede:	4946      	ldr	r1, [pc, #280]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	025b      	lsls	r3, r3, #9
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	3b01      	subs	r3, #1
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	061b      	lsls	r3, r3, #24
 8005f10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f14:	4938      	ldr	r1, [pc, #224]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f1a:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	4a36      	ldr	r2, [pc, #216]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2a:	4b35      	ldr	r3, [pc, #212]	; (8006000 <HAL_RCC_OscConfig+0x740>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f32:	00d2      	lsls	r2, r2, #3
 8005f34:	4930      	ldr	r1, [pc, #192]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	f023 020c 	bic.w	r2, r3, #12
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	492c      	ldr	r1, [pc, #176]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	f023 0202 	bic.w	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	4927      	ldr	r1, [pc, #156]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f5e:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6a:	4b23      	ldr	r3, [pc, #140]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4a22      	ldr	r2, [pc, #136]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f76:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005f82:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a19      	ldr	r2, [pc, #100]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fb fb4d 	bl	8001638 <HAL_GetTick>
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fb fb49 	bl	8001638 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e066      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x6e2>
 8005fc0:	e05e      	b.n	8006080 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fb fb33 	bl	8001638 <HAL_GetTick>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd6:	f7fb fb2f 	bl	8001638 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e04c      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <HAL_RCC_OscConfig+0x738>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x716>
 8005ff4:	e044      	b.n	8006080 <HAL_RCC_OscConfig+0x7c0>
 8005ff6:	bf00      	nop
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	fffffc0c 	.word	0xfffffc0c
 8006000:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <HAL_RCC_OscConfig+0x7cc>)
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <HAL_RCC_OscConfig+0x7cc>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2b01      	cmp	r3, #1
 8006016:	d031      	beq.n	800607c <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f003 0203 	and.w	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d12a      	bne.n	800607c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006032:	429a      	cmp	r2, r3
 8006034:	d122      	bne.n	800607c <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006042:	429a      	cmp	r2, r3
 8006044:	d11a      	bne.n	800607c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	0a5b      	lsrs	r3, r3, #9
 800604a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006054:	429a      	cmp	r2, r3
 8006056:	d111      	bne.n	800607c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d108      	bne.n	800607c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	0e1b      	lsrs	r3, r3, #24
 800606e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3730      	adds	r7, #48	; 0x30
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	58024400 	.word	0x58024400

08006090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e19c      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060a4:	4b8a      	ldr	r3, [pc, #552]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d910      	bls.n	80060d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b2:	4b87      	ldr	r3, [pc, #540]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 020f 	bic.w	r2, r3, #15
 80060ba:	4985      	ldr	r1, [pc, #532]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c2:	4b83      	ldr	r3, [pc, #524]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d001      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e184      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d010      	beq.n	8006102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	4b7b      	ldr	r3, [pc, #492]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d908      	bls.n	8006102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060f0:	4b78      	ldr	r3, [pc, #480]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	4975      	ldr	r1, [pc, #468]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d010      	beq.n	8006130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	4b70      	ldr	r3, [pc, #448]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800611a:	429a      	cmp	r2, r3
 800611c:	d908      	bls.n	8006130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800611e:	4b6d      	ldr	r3, [pc, #436]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	496a      	ldr	r1, [pc, #424]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800612c:	4313      	orrs	r3, r2
 800612e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	d010      	beq.n	800615e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	4b64      	ldr	r3, [pc, #400]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006148:	429a      	cmp	r2, r3
 800614a:	d908      	bls.n	800615e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800614c:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	495e      	ldr	r1, [pc, #376]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800615a:	4313      	orrs	r3, r2
 800615c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d010      	beq.n	800618c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006176:	429a      	cmp	r2, r3
 8006178:	d908      	bls.n	800618c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800617a:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	4953      	ldr	r1, [pc, #332]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006188:	4313      	orrs	r3, r2
 800618a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d010      	beq.n	80061ba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	4b4d      	ldr	r3, [pc, #308]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d908      	bls.n	80061ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a8:	4b4a      	ldr	r3, [pc, #296]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f023 020f 	bic.w	r2, r3, #15
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4947      	ldr	r1, [pc, #284]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d055      	beq.n	8006272 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	4940      	ldr	r1, [pc, #256]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d107      	bne.n	80061f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061e0:	4b3c      	ldr	r3, [pc, #240]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d121      	bne.n	8006230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0f6      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d107      	bne.n	8006208 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d115      	bne.n	8006230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0ea      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d107      	bne.n	8006220 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006210:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0de      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006220:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0d6      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006230:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f023 0207 	bic.w	r2, r3, #7
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4925      	ldr	r1, [pc, #148]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006242:	f7fb f9f9 	bl	8001638 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006248:	e00a      	b.n	8006260 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624a:	f7fb f9f5 	bl	8001638 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e0be      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006260:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	429a      	cmp	r2, r3
 8006270:	d1eb      	bne.n	800624a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	429a      	cmp	r2, r3
 800628c:	d208      	bcs.n	80062a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f023 020f 	bic.w	r2, r3, #15
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	490e      	ldr	r1, [pc, #56]	; (80062d4 <HAL_RCC_ClockConfig+0x244>)
 800629c:	4313      	orrs	r3, r2
 800629e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d214      	bcs.n	80062d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 020f 	bic.w	r2, r3, #15
 80062b6:	4906      	ldr	r1, [pc, #24]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <HAL_RCC_ClockConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d005      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e086      	b.n	80063de <HAL_RCC_ClockConfig+0x34e>
 80062d0:	52002000 	.word	0x52002000
 80062d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d010      	beq.n	8006306 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	4b3f      	ldr	r3, [pc, #252]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d208      	bcs.n	8006306 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062f4:	4b3c      	ldr	r3, [pc, #240]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4939      	ldr	r1, [pc, #228]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006302:	4313      	orrs	r3, r2
 8006304:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	4b34      	ldr	r3, [pc, #208]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800631e:	429a      	cmp	r2, r3
 8006320:	d208      	bcs.n	8006334 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006322:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	492e      	ldr	r1, [pc, #184]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006330:	4313      	orrs	r3, r2
 8006332:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800634c:	429a      	cmp	r2, r3
 800634e:	d208      	bcs.n	8006362 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	4922      	ldr	r1, [pc, #136]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 800635e:	4313      	orrs	r3, r2
 8006360:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800637a:	429a      	cmp	r2, r3
 800637c:	d208      	bcs.n	8006390 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	4917      	ldr	r1, [pc, #92]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 800638c:	4313      	orrs	r3, r2
 800638e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006390:	f000 f834 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 8006394:	4601      	mov	r1, r0
 8006396:	4b14      	ldr	r3, [pc, #80]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	4a12      	ldr	r2, [pc, #72]	; (80063ec <HAL_RCC_ClockConfig+0x35c>)
 80063a2:	5cd3      	ldrb	r3, [r2, r3]
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	fa21 f303 	lsr.w	r3, r1, r3
 80063ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80063ae:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <HAL_RCC_ClockConfig+0x358>)
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <HAL_RCC_ClockConfig+0x35c>)
 80063b8:	5cd3      	ldrb	r3, [r2, r3]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
 80063c4:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <HAL_RCC_ClockConfig+0x360>)
 80063c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063c8:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <HAL_RCC_ClockConfig+0x364>)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <HAL_RCC_ClockConfig+0x368>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fb f8e6 	bl	80015a4 <HAL_InitTick>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	58024400 	.word	0x58024400
 80063ec:	0800ac68 	.word	0x0800ac68
 80063f0:	24000004 	.word	0x24000004
 80063f4:	24000000 	.word	0x24000000
 80063f8:	24000008 	.word	0x24000008

080063fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b089      	sub	sp, #36	; 0x24
 8006400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006402:	4baf      	ldr	r3, [pc, #700]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800640a:	2b18      	cmp	r3, #24
 800640c:	f200 814e 	bhi.w	80066ac <HAL_RCC_GetSysClockFreq+0x2b0>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800647d 	.word	0x0800647d
 800641c:	080066ad 	.word	0x080066ad
 8006420:	080066ad 	.word	0x080066ad
 8006424:	080066ad 	.word	0x080066ad
 8006428:	080066ad 	.word	0x080066ad
 800642c:	080066ad 	.word	0x080066ad
 8006430:	080066ad 	.word	0x080066ad
 8006434:	080066ad 	.word	0x080066ad
 8006438:	080064a3 	.word	0x080064a3
 800643c:	080066ad 	.word	0x080066ad
 8006440:	080066ad 	.word	0x080066ad
 8006444:	080066ad 	.word	0x080066ad
 8006448:	080066ad 	.word	0x080066ad
 800644c:	080066ad 	.word	0x080066ad
 8006450:	080066ad 	.word	0x080066ad
 8006454:	080066ad 	.word	0x080066ad
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080066ad 	.word	0x080066ad
 8006460:	080066ad 	.word	0x080066ad
 8006464:	080066ad 	.word	0x080066ad
 8006468:	080066ad 	.word	0x080066ad
 800646c:	080066ad 	.word	0x080066ad
 8006470:	080066ad 	.word	0x080066ad
 8006474:	080066ad 	.word	0x080066ad
 8006478:	080064af 	.word	0x080064af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800647c:	4b90      	ldr	r3, [pc, #576]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d009      	beq.n	800649c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006488:	4b8d      	ldr	r3, [pc, #564]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	4a8c      	ldr	r2, [pc, #560]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800649a:	e10a      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800649c:	4b89      	ldr	r3, [pc, #548]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800649e:	61bb      	str	r3, [r7, #24]
    break;
 80064a0:	e107      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80064a2:	4b89      	ldr	r3, [pc, #548]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80064a4:	61bb      	str	r3, [r7, #24]
    break;
 80064a6:	e104      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80064a8:	4b88      	ldr	r3, [pc, #544]	; (80066cc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80064aa:	61bb      	str	r3, [r7, #24]
    break;
 80064ac:	e101      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064ae:	4b84      	ldr	r3, [pc, #528]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80064b8:	4b81      	ldr	r3, [pc, #516]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064c4:	4b7e      	ldr	r3, [pc, #504]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80064ce:	4b7c      	ldr	r3, [pc, #496]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	08db      	lsrs	r3, r3, #3
 80064d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80da 	beq.w	80066a6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d05a      	beq.n	80065ae <HAL_RCC_GetSysClockFreq+0x1b2>
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d302      	bcc.n	8006502 <HAL_RCC_GetSysClockFreq+0x106>
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d078      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006500:	e099      	b.n	8006636 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006502:	4b6f      	ldr	r3, [pc, #444]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02d      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800650e:	4b6c      	ldr	r3, [pc, #432]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	4a6a      	ldr	r2, [pc, #424]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006538:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006548:	ed97 6a02 	vldr	s12, [r7, #8]
 800654c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80066d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006564:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006568:	e087      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006574:	eddf 6a57 	vldr	s13, [pc, #348]	; 80066d4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657c:	4b50      	ldr	r3, [pc, #320]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006590:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80066d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ac:	e065      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80066d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80065bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80065d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80066d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80065d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065f0:	e043      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80066dc <HAL_RCC_GetSysClockFreq+0x2e0>
 8006600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006604:	4b2e      	ldr	r3, [pc, #184]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	ed97 6a02 	vldr	s12, [r7, #8]
 8006618:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80066d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800661c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006634:	e021      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006640:	eddf 6a25 	vldr	s13, [pc, #148]	; 80066d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006658:	ed97 6a02 	vldr	s12, [r7, #8]
 800665c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80066d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006678:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	0a5b      	lsrs	r3, r3, #9
 8006680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006684:	3301      	adds	r3, #1
 8006686:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006692:	edd7 6a07 	vldr	s13, [r7, #28]
 8006696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669e:	ee17 3a90 	vmov	r3, s15
 80066a2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80066a4:	e005      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
    break;
 80066aa:	e002      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80066ae:	61bb      	str	r3, [r7, #24]
    break;
 80066b0:	bf00      	nop
  }

  return sysclockfreq;
 80066b2:	69bb      	ldr	r3, [r7, #24]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3724      	adds	r7, #36	; 0x24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	58024400 	.word	0x58024400
 80066c4:	03d09000 	.word	0x03d09000
 80066c8:	003d0900 	.word	0x003d0900
 80066cc:	007a1200 	.word	0x007a1200
 80066d0:	46000000 	.word	0x46000000
 80066d4:	4c742400 	.word	0x4c742400
 80066d8:	4a742400 	.word	0x4a742400
 80066dc:	4af42400 	.word	0x4af42400

080066e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80066e6:	f7ff fe89 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 80066ea:	4601      	mov	r1, r0
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <HAL_RCC_GetHCLKFreq+0x50>)
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	4a0f      	ldr	r2, [pc, #60]	; (8006734 <HAL_RCC_GetHCLKFreq+0x54>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	fa21 f303 	lsr.w	r3, r1, r3
 8006702:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <HAL_RCC_GetHCLKFreq+0x50>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	4a09      	ldr	r2, [pc, #36]	; (8006734 <HAL_RCC_GetHCLKFreq+0x54>)
 800670e:	5cd3      	ldrb	r3, [r2, r3]
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	fa22 f303 	lsr.w	r3, r2, r3
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <HAL_RCC_GetHCLKFreq+0x58>)
 800671c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800671e:	4a07      	ldr	r2, [pc, #28]	; (800673c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <HAL_RCC_GetHCLKFreq+0x58>)
 8006726:	681b      	ldr	r3, [r3, #0]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	58024400 	.word	0x58024400
 8006734:	0800ac68 	.word	0x0800ac68
 8006738:	24000004 	.word	0x24000004
 800673c:	24000000 	.word	0x24000000

08006740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006744:	f7ff ffcc 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8006748:	4601      	mov	r1, r0
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	091b      	lsrs	r3, r3, #4
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	4a04      	ldr	r2, [pc, #16]	; (8006768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006756:	5cd3      	ldrb	r3, [r2, r3]
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006760:	4618      	mov	r0, r3
 8006762:	bd80      	pop	{r7, pc}
 8006764:	58024400 	.word	0x58024400
 8006768:	0800ac68 	.word	0x0800ac68

0800676c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006770:	f7ff ffb6 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8006774:	4601      	mov	r1, r0
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	4a04      	ldr	r2, [pc, #16]	; (8006794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006782:	5cd3      	ldrb	r3, [r2, r3]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800678c:	4618      	mov	r0, r3
 800678e:	bd80      	pop	{r7, pc}
 8006790:	58024400 	.word	0x58024400
 8006794:	0800ac68 	.word	0x0800ac68

08006798 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067a4:	2300      	movs	r3, #0
 80067a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d03d      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067bc:	d013      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80067be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c2:	d802      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80067c8:	e01f      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80067ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ce:	d013      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80067d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067d4:	d01c      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80067d6:	e018      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d8:	4bad      	ldr	r3, [pc, #692]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	4aac      	ldr	r2, [pc, #688]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80067e4:	e015      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3304      	adds	r3, #4
 80067ea:	2102      	movs	r1, #2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 fca7 	bl	8008140 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80067f6:	e00c      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3324      	adds	r3, #36	; 0x24
 80067fc:	2102      	movs	r1, #2
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fd50 	bl	80082a4 <RCCEx_PLL3_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
      break;
 800680e:	e000      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d109      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006818:	4b9d      	ldr	r3, [pc, #628]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006824:	499a      	ldr	r1, [pc, #616]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006826:	4313      	orrs	r3, r2
 8006828:	650b      	str	r3, [r1, #80]	; 0x50
 800682a:	e001      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d03d      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006840:	2b04      	cmp	r3, #4
 8006842:	d826      	bhi.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006861 	.word	0x08006861
 8006850:	0800686f 	.word	0x0800686f
 8006854:	08006881 	.word	0x08006881
 8006858:	08006899 	.word	0x08006899
 800685c:	08006899 	.word	0x08006899
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006860:	4b8b      	ldr	r3, [pc, #556]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4a8a      	ldr	r2, [pc, #552]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800686c:	e015      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3304      	adds	r3, #4
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f001 fc63 	bl	8008140 <RCCEx_PLL2_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800687e:	e00c      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3324      	adds	r3, #36	; 0x24
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fd0c 	bl	80082a4 <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006890:	e003      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]
      break;
 8006896:	e000      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068a0:	4b7b      	ldr	r3, [pc, #492]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a4:	f023 0207 	bic.w	r2, r3, #7
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	4978      	ldr	r1, [pc, #480]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	650b      	str	r3, [r1, #80]	; 0x50
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d043      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	2b80      	cmp	r3, #128	; 0x80
 80068ca:	d01f      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x174>
 80068cc:	2b80      	cmp	r3, #128	; 0x80
 80068ce:	d804      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x142>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d010      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x162>
 80068d8:	e021      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d021      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80068e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80068e4:	d020      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80068e6:	2bc0      	cmp	r3, #192	; 0xc0
 80068e8:	d020      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x194>
 80068ea:	e018      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ec:	4b68      	ldr	r3, [pc, #416]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	4a67      	ldr	r2, [pc, #412]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80068f8:	e019      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f001 fc1d 	bl	8008140 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800690a:	e010      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3324      	adds	r3, #36	; 0x24
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f001 fcc6 	bl	80082a4 <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800691c:	e007      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
      break;
 8006922:	e004      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006924:	bf00      	nop
 8006926:	e002      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006928:	bf00      	nop
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 800692c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006934:	4b56      	ldr	r3, [pc, #344]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006938:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	4953      	ldr	r1, [pc, #332]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006942:	4313      	orrs	r3, r2
 8006944:	650b      	str	r3, [r1, #80]	; 0x50
 8006946:	e001      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006954:	2b00      	cmp	r3, #0
 8006956:	d047      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006960:	d022      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006966:	d805      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800696c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006970:	d011      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006972:	e022      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006978:	d022      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800697a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800697e:	d021      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006984:	d020      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006986:	e018      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006988:	4b41      	ldr	r3, [pc, #260]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	4a40      	ldr	r2, [pc, #256]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800698e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006994:	e019      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	2100      	movs	r1, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fbcf 	bl	8008140 <RCCEx_PLL2_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80069a6:	e010      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 fc78 	bl	80082a4 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80069b8:	e007      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]
      break;
 80069be:	e004      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 80069c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80069d0:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	492c      	ldr	r1, [pc, #176]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	650b      	str	r3, [r1, #80]	; 0x50
 80069e2:	e001      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d032      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d009      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d802      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d018      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006a04:	e014      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d009      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006a0a:	2b30      	cmp	r3, #48	; 0x30
 8006a0c:	d015      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006a0e:	e00f      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a10:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006a1c:	e00e      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	2102      	movs	r1, #2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 fb8b 	bl	8008140 <RCCEx_PLL2_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006a2e:	e005      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
      break;
 8006a34:	e002      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a42:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4e:	4910      	ldr	r1, [pc, #64]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a54:	e001      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d044      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6e:	d021      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a74:	d805      	bhi.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006a80:	e021      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a86:	d021      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8c:	d020      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006a8e:	e01a      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006a90:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4ba6      	ldr	r3, [pc, #664]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4aa5      	ldr	r2, [pc, #660]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006aa0:	e017      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fb49 	bl	8008140 <RCCEx_PLL2_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ab2:	e00e      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3324      	adds	r3, #36	; 0x24
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fbf2 	bl	80082a4 <RCCEx_PLL3_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ac4:	e005      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ad8:	4b95      	ldr	r3, [pc, #596]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006adc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae4:	4992      	ldr	r1, [pc, #584]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8006aea:	e001      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d042      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b04:	d01b      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b0a:	d805      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d022      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b14:	d00a      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006b16:	e01b      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b1c:	d01d      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b22:	d01c      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006b24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b28:	d01b      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006b2a:	e011      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	2101      	movs	r1, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fb04 	bl	8008140 <RCCEx_PLL2_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b3c:	e012      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3324      	adds	r3, #36	; 0x24
 8006b42:	2101      	movs	r1, #1
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fbad 	bl	80082a4 <RCCEx_PLL3_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b4e:	e009      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	75fb      	strb	r3, [r7, #23]
      break;
 8006b54:	e006      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006b56:	bf00      	nop
 8006b58:	e004      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b6a:	4b71      	ldr	r3, [pc, #452]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b76:	496e      	ldr	r1, [pc, #440]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	650b      	str	r3, [r1, #80]	; 0x50
 8006b7c:	e001      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d049      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b98:	d02a      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b9e:	d808      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba4:	d00f      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006baa:	d015      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d021      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006bb0:	e01b      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bb6:	d01f      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006bb8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006bbc:	d01e      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc2:	d01d      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006bc4:	e011      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 fab7 	bl	8008140 <RCCEx_PLL2_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006bd6:	e014      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 fb60 	bl	80082a4 <RCCEx_PLL3_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006be8:	e00b      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
      break;
 8006bee:	e008      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e006      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e004      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e002      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006bfc:	bf00      	nop
 8006bfe:	e000      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c08:	4b49      	ldr	r3, [pc, #292]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c16:	4946      	ldr	r1, [pc, #280]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	658b      	str	r3, [r1, #88]	; 0x58
 8006c1c:	e001      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02d      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c36:	d005      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c3c:	d009      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d013      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c42:	e00f      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c44:	4b3a      	ldr	r3, [pc, #232]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4a39      	ldr	r2, [pc, #228]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c50:	e00c      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3304      	adds	r3, #4
 8006c56:	2101      	movs	r1, #1
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 fa71 	bl	8008140 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c62:	e003      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	75fb      	strb	r3, [r7, #23]
      break;
 8006c68:	e000      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c72:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	492c      	ldr	r1, [pc, #176]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	650b      	str	r3, [r1, #80]	; 0x50
 8006c84:	e001      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d031      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d81a      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cdb 	.word	0x08006cdb
 8006ca8:	08006cb5 	.word	0x08006cb5
 8006cac:	08006cc3 	.word	0x08006cc3
 8006cb0:	08006cdb 	.word	0x08006cdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb4:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006cc0:	e00c      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 fa39 	bl	8008140 <RCCEx_PLL2_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006cd2:	e003      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd8:	e000      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	f023 0203 	bic.w	r2, r3, #3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	4910      	ldr	r1, [pc, #64]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cf4:	e001      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 808a 	beq.w	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d14:	f7fa fc90 	bl	8001638 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1a:	e00d      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1c:	f7fa fc8c 	bl	8001638 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	; 0x64
 8006d28:	d906      	bls.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	75fb      	strb	r3, [r7, #23]
        break;
 8006d2e:	e009      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006d30:	58024400 	.word	0x58024400
 8006d34:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d38:	4bba      	ldr	r3, [pc, #744]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0eb      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d166      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d4a:	4bb7      	ldr	r3, [pc, #732]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d54:	4053      	eors	r3, r2
 8006d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d013      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d5e:	4bb2      	ldr	r3, [pc, #712]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d68:	4baf      	ldr	r3, [pc, #700]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	4aae      	ldr	r2, [pc, #696]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d72:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d74:	4bac      	ldr	r3, [pc, #688]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4aab      	ldr	r2, [pc, #684]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d80:	4aa9      	ldr	r2, [pc, #676]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	d115      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d92:	f7fa fc51 	bl	8001638 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d98:	e00b      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d9a:	f7fa fc4d 	bl	8001638 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d902      	bls.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	75fb      	strb	r3, [r7, #23]
            break;
 8006db0:	e005      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006db2:	4b9d      	ldr	r3, [pc, #628]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0ed      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d126      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd2:	d10d      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006dd4:	4b94      	ldr	r3, [pc, #592]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006de2:	0919      	lsrs	r1, r3, #4
 8006de4:	4b91      	ldr	r3, [pc, #580]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006de6:	400b      	ands	r3, r1
 8006de8:	498f      	ldr	r1, [pc, #572]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	610b      	str	r3, [r1, #16]
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006df0:	4b8d      	ldr	r3, [pc, #564]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	4a8c      	ldr	r2, [pc, #560]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dfa:	6113      	str	r3, [r2, #16]
 8006dfc:	4b8a      	ldr	r3, [pc, #552]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0a:	4987      	ldr	r1, [pc, #540]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	670b      	str	r3, [r1, #112]	; 0x70
 8006e10:	e004      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	75bb      	strb	r3, [r7, #22]
 8006e16:	e001      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d07f      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2e:	2b28      	cmp	r3, #40	; 0x28
 8006e30:	d866      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006f07 	.word	0x08006f07
 8006e3c:	08006f01 	.word	0x08006f01
 8006e40:	08006f01 	.word	0x08006f01
 8006e44:	08006f01 	.word	0x08006f01
 8006e48:	08006f01 	.word	0x08006f01
 8006e4c:	08006f01 	.word	0x08006f01
 8006e50:	08006f01 	.word	0x08006f01
 8006e54:	08006f01 	.word	0x08006f01
 8006e58:	08006edd 	.word	0x08006edd
 8006e5c:	08006f01 	.word	0x08006f01
 8006e60:	08006f01 	.word	0x08006f01
 8006e64:	08006f01 	.word	0x08006f01
 8006e68:	08006f01 	.word	0x08006f01
 8006e6c:	08006f01 	.word	0x08006f01
 8006e70:	08006f01 	.word	0x08006f01
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006eef 	.word	0x08006eef
 8006e7c:	08006f01 	.word	0x08006f01
 8006e80:	08006f01 	.word	0x08006f01
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006f01 	.word	0x08006f01
 8006e8c:	08006f01 	.word	0x08006f01
 8006e90:	08006f01 	.word	0x08006f01
 8006e94:	08006f01 	.word	0x08006f01
 8006e98:	08006f07 	.word	0x08006f07
 8006e9c:	08006f01 	.word	0x08006f01
 8006ea0:	08006f01 	.word	0x08006f01
 8006ea4:	08006f01 	.word	0x08006f01
 8006ea8:	08006f01 	.word	0x08006f01
 8006eac:	08006f01 	.word	0x08006f01
 8006eb0:	08006f01 	.word	0x08006f01
 8006eb4:	08006f01 	.word	0x08006f01
 8006eb8:	08006f07 	.word	0x08006f07
 8006ebc:	08006f01 	.word	0x08006f01
 8006ec0:	08006f01 	.word	0x08006f01
 8006ec4:	08006f01 	.word	0x08006f01
 8006ec8:	08006f01 	.word	0x08006f01
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	08006f01 	.word	0x08006f01
 8006ed4:	08006f01 	.word	0x08006f01
 8006ed8:	08006f07 	.word	0x08006f07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 f92c 	bl	8008140 <RCCEx_PLL2_Config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006eec:	e00c      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3324      	adds	r3, #36	; 0x24
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 f9d5 	bl	80082a4 <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006efe:	e003      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
      break;
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8006f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f0e:	4b46      	ldr	r3, [pc, #280]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f1c:	4942      	ldr	r1, [pc, #264]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	654b      	str	r3, [r1, #84]	; 0x54
 8006f22:	e001      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d038      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f38:	2b05      	cmp	r3, #5
 8006f3a:	d821      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f87 	.word	0x08006f87
 8006f48:	08006f5d 	.word	0x08006f5d
 8006f4c:	08006f6f 	.word	0x08006f6f
 8006f50:	08006f87 	.word	0x08006f87
 8006f54:	08006f87 	.word	0x08006f87
 8006f58:	08006f87 	.word	0x08006f87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 f8ec 	bl	8008140 <RCCEx_PLL2_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f6c:	e00c      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 f995 	bl	80082a4 <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f7e:	e003      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
      break;
 8006f84:	e000      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8006f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f8e:	4b26      	ldr	r3, [pc, #152]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	f023 0207 	bic.w	r2, r3, #7
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f9a:	4923      	ldr	r1, [pc, #140]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8006fa0:	e001      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d040      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d821      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08007007 	.word	0x08007007
 8006fc8:	08006fdd 	.word	0x08006fdd
 8006fcc:	08006fef 	.word	0x08006fef
 8006fd0:	08007007 	.word	0x08007007
 8006fd4:	08007007 	.word	0x08007007
 8006fd8:	08007007 	.word	0x08007007
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f8ac 	bl	8008140 <RCCEx_PLL2_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fec:	e00c      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f955 	bl	80082a4 <RCCEx_PLL3_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ffe:	e003      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      break;
 8007004:	e000      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d110      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	f023 0207 	bic.w	r2, r3, #7
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800701c:	4902      	ldr	r1, [pc, #8]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800701e:	4313      	orrs	r3, r2
 8007020:	658b      	str	r3, [r1, #88]	; 0x58
 8007022:	e007      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007024:	58024800 	.word	0x58024800
 8007028:	58024400 	.word	0x58024400
 800702c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d044      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704a:	d01b      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800704c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007050:	d805      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d022      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x904>
 8007056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800705a:	d00a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800705c:	e01b      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007062:	d01d      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8007064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007068:	d01c      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800706a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800706e:	d01b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007070:	e011      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3304      	adds	r3, #4
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f001 f861 	bl	8008140 <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007082:	e012      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3324      	adds	r3, #36	; 0x24
 8007088:	2102      	movs	r1, #2
 800708a:	4618      	mov	r0, r3
 800708c:	f001 f90a 	bl	80082a4 <RCCEx_PLL3_Config>
 8007090:	4603      	mov	r3, r0
 8007092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007094:	e009      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]
      break;
 800709a:	e006      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80070a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070b0:	4bb3      	ldr	r3, [pc, #716]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070be:	49b0      	ldr	r1, [pc, #704]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	654b      	str	r3, [r1, #84]	; 0x54
 80070c4:	e001      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d044      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e0:	d01b      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x982>
 80070e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e6:	d805      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d022      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f0:	d00a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x970>
 80070f2:	e01b      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x994>
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f8:	d01d      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80070fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070fe:	d01c      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007104:	d01b      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8007106:	e011      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f816 	bl	8008140 <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007118:	e012      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	2102      	movs	r1, #2
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f8bf 	bl	80082a4 <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800712a:	e009      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	e006      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007132:	bf00      	nop
 8007134:	e004      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800713e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007146:	4b8e      	ldr	r3, [pc, #568]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007154:	498a      	ldr	r1, [pc, #552]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007156:	4313      	orrs	r3, r2
 8007158:	658b      	str	r3, [r1, #88]	; 0x58
 800715a:	e001      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007168:	2b00      	cmp	r3, #0
 800716a:	d044      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007176:	d01b      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8007178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800717c:	d805      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d022      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007188:	e01b      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800718a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718e:	d01d      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007194:	d01c      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8007196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800719a:	d01b      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800719c:	e011      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 ffcb 	bl	8008140 <RCCEx_PLL2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071ae:	e012      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 f874 	bl	80082a4 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071c0:	e009      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
      break;
 80071c6:	e006      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80071c8:	bf00      	nop
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80071cc:	bf00      	nop
 80071ce:	e002      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80071d0:	bf00      	nop
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80071d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071dc:	4b68      	ldr	r3, [pc, #416]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071ea:	4965      	ldr	r1, [pc, #404]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	658b      	str	r3, [r1, #88]	; 0x58
 80071f0:	e001      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d01a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720c:	d10a      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3324      	adds	r3, #36	; 0x24
 8007212:	2102      	movs	r1, #2
 8007214:	4618      	mov	r0, r3
 8007216:	f001 f845 	bl	80082a4 <RCCEx_PLL3_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007224:	4b56      	ldr	r3, [pc, #344]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007232:	4953      	ldr	r1, [pc, #332]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007234:	4313      	orrs	r3, r2
 8007236:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800724a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724e:	d10a      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3324      	adds	r3, #36	; 0x24
 8007254:	2102      	movs	r1, #2
 8007256:	4618      	mov	r0, r3
 8007258:	f001 f824 	bl	80082a4 <RCCEx_PLL3_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007266:	4b46      	ldr	r3, [pc, #280]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007274:	4942      	ldr	r1, [pc, #264]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007276:	4313      	orrs	r3, r2
 8007278:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d030      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800728c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007290:	d00d      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8007292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007296:	d016      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d111      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3304      	adds	r3, #4
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 ff4c 	bl	8008140 <RCCEx_PLL2_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072ac:	e00c      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3324      	adds	r3, #36	; 0x24
 80072b2:	2102      	movs	r1, #2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fff5 	bl	80082a4 <RCCEx_PLL3_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
      break;
 80072c4:	e000      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80072c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ce:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072dc:	4928      	ldr	r1, [pc, #160]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	658b      	str	r3, [r1, #88]	; 0x58
 80072e2:	e001      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d02f      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fe:	d00c      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007304:	d015      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8007306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730a:	d10f      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730c:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	4a1b      	ldr	r2, [pc, #108]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007318:	e00c      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3324      	adds	r3, #36	; 0x24
 800731e:	2101      	movs	r1, #1
 8007320:	4618      	mov	r0, r3
 8007322:	f000 ffbf 	bl	80082a4 <RCCEx_PLL3_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800732a:	e003      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	75fb      	strb	r3, [r7, #23]
      break;
 8007330:	e000      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8007332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800733a:	4b11      	ldr	r3, [pc, #68]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007348:	490d      	ldr	r1, [pc, #52]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800734a:	4313      	orrs	r3, r2
 800734c:	654b      	str	r3, [r1, #84]	; 0x54
 800734e:	e001      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02c      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736c:	d00a      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800736e:	e012      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007370:	4b03      	ldr	r3, [pc, #12]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	4a02      	ldr	r2, [pc, #8]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800737c:	e00e      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800737e:	bf00      	nop
 8007380:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	2102      	movs	r1, #2
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fed8 	bl	8008140 <RCCEx_PLL2_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007394:	e002      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
      break;
 800739a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073a2:	4b56      	ldr	r3, [pc, #344]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ae:	4953      	ldr	r1, [pc, #332]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b4:	e001      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	2102      	movs	r1, #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 ff69 	bl	80082a4 <RCCEx_PLL3_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d031      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d00c      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80073f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f8:	d802      	bhi.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d011      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 80073fe:	e00d      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007404:	d00f      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 8007406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740a:	d00e      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800740c:	e006      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740e:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	4a3a      	ldr	r2, [pc, #232]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800741a:	e007      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	e004      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800742a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007432:	4b32      	ldr	r3, [pc, #200]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007440:	492e      	ldr	r1, [pc, #184]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007442:	4313      	orrs	r3, r2
 8007444:	654b      	str	r3, [r1, #84]	; 0x54
 8007446:	e001      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007458:	4b28      	ldr	r3, [pc, #160]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007464:	4925      	ldr	r1, [pc, #148]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007466:	4313      	orrs	r3, r2
 8007468:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007482:	491e      	ldr	r1, [pc, #120]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007484:	4313      	orrs	r3, r2
 8007486:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007498:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a0:	4916      	ldr	r1, [pc, #88]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00d      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074b2:	4b12      	ldr	r3, [pc, #72]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	4a11      	ldr	r2, [pc, #68]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074bc:	6113      	str	r3, [r2, #16]
 80074be:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074c8:	490c      	ldr	r1, [pc, #48]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da08      	bge.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e2:	4906      	ldr	r1, [pc, #24]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80074e8:	7dbb      	ldrb	r3, [r7, #22]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e000      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	58024400 	.word	0x58024400

08007500 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b090      	sub	sp, #64	; 0x40
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750e:	d150      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007510:	4ba1      	ldr	r3, [pc, #644]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	2b04      	cmp	r3, #4
 800751e:	d844      	bhi.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	0800753d 	.word	0x0800753d
 800752c:	0800754d 	.word	0x0800754d
 8007530:	0800755d 	.word	0x0800755d
 8007534:	080075a5 	.word	0x080075a5
 8007538:	0800756d 	.word	0x0800756d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800753c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fcb1 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800754a:	e1ef      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754c:	f107 0318 	add.w	r3, r7, #24
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fa11 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755a:	e1e7      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800755c:	f107 030c 	add.w	r3, r7, #12
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fb55 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800756a:	e1df      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800756c:	4b8a      	ldr	r3, [pc, #552]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800756e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007574:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800757c:	4b87      	ldr	r3, [pc, #540]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007580:	e1d4      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007588:	d102      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800758a:	4b85      	ldr	r3, [pc, #532]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800758e:	e1cd      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007596:	d102      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007598:	4b82      	ldr	r3, [pc, #520]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800759c:	e1c6      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a2:	e1c3      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075a4:	4b80      	ldr	r3, [pc, #512]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a8:	e1c0      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ae:	bf00      	nop
 80075b0:	e1bc      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b8:	d14f      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80075ba:	4b77      	ldr	r3, [pc, #476]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d01c      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d804      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d008      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d00e      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80075d6:	e03c      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80075d8:	2bc0      	cmp	r3, #192	; 0xc0
 80075da:	d037      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80075dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e0:	d018      	beq.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80075e2:	e036      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fc5d 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f2:	e19b      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f4:	f107 0318 	add.w	r3, r7, #24
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f9bd 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007602:	e193      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fb01 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007612:	e18b      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007614:	4b60      	ldr	r3, [pc, #384]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800761c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800761e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007624:	4b5d      	ldr	r3, [pc, #372]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007628:	e180      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007630:	d102      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007632:	4b5b      	ldr	r3, [pc, #364]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007636:	e179      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800763e:	d102      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007640:	4b58      	ldr	r3, [pc, #352]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007644:	e172      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800764a:	e16f      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800764c:	4b56      	ldr	r3, [pc, #344]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007650:	e16c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007656:	bf00      	nop
 8007658:	e168      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007660:	d153      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007666:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800766a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007672:	d01f      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007678:	d805      	bhi.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800767e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007682:	d00f      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007684:	e03d      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007686:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800768a:	d037      	beq.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007690:	d018      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007692:	e036      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fc05 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a2:	e143      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a4:	f107 0318 	add.w	r3, r7, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f965 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076b2:	e13b      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b4:	f107 030c 	add.w	r3, r7, #12
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 faa9 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c2:	e133      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80076c4:	4b34      	ldr	r3, [pc, #208]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80076d4:	4b31      	ldr	r3, [pc, #196]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 80076d8:	e128      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80076da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076e0:	d102      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80076e2:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076e6:	e121      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ee:	d102      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80076f0:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076f4:	e11a      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076fa:	e117      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076fc:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007700:	e114      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007706:	bf00      	nop
 8007708:	e110      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007710:	d15d      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007722:	d01f      	beq.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007728:	d805      	bhi.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800772e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007732:	d00f      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007734:	e047      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800773a:	d041      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800773c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007740:	d018      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007742:	e040      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fbad 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007752:	e0eb      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007754:	f107 0318 	add.w	r3, r7, #24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f90d 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007762:	e0e3      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007764:	f107 030c 	add.w	r3, r7, #12
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fa51 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007772:	e0db      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800777c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007788:	e0d0      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007790:	d10c      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007792:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007796:	e0c9      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007798:	58024400 	.word	0x58024400
 800779c:	03d09000 	.word	0x03d09000
 80077a0:	003d0900 	.word	0x003d0900
 80077a4:	007a1200 	.word	0x007a1200
 80077a8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b2:	d102      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80077b4:	4b60      	ldr	r3, [pc, #384]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b8:	e0b8      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077be:	e0b5      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077c0:	4b5e      	ldr	r3, [pc, #376]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c4:	e0b2      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ca:	bf00      	nop
 80077cc:	e0ae      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077d4:	d13d      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80077d6:	4b5a      	ldr	r3, [pc, #360]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80077d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e6:	d00c      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80077e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ec:	d011      	beq.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d12b      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077f2:	f107 0318 	add.w	r3, r7, #24
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 f8be 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007800:	e094      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007802:	f107 030c 	add.w	r3, r7, #12
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fa02 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007810:	e08c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007812:	4b4b      	ldr	r3, [pc, #300]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800781a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007822:	4b48      	ldr	r3, [pc, #288]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007826:	e081      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800782e:	d102      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 8007830:	4b45      	ldr	r3, [pc, #276]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007834:	e07a      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 800783e:	4b3e      	ldr	r3, [pc, #248]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007842:	e073      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007848:	e070      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784e:	bf00      	nop
 8007850:	e06c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007858:	d11f      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800785a:	4b39      	ldr	r3, [pc, #228]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800785c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800786a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786e:	d008      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8007870:	e00f      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fb16 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007880:	e054      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007882:	f107 0318 	add.w	r3, r7, #24
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f876 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007890:	e04c      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007896:	bf00      	nop
 8007898:	e048      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078a0:	d142      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80078a2:	4b27      	ldr	r3, [pc, #156]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80078a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80078aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078b2:	d029      	beq.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 80078b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078b8:	d808      	bhi.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80078ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078be:	d013      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c4:	d018      	beq.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80078ca:	e029      	b.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80078cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078d0:	d020      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80078d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80078d6:	d020      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d017      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80078de:	e01f      	b.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80078e0:	f000 f834 	bl	800794c <HAL_RCCEx_GetD3PCLK1Freq>
 80078e4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80078e6:	e021      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e8:	f107 0318 	add.w	r3, r7, #24
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f843 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f6:	e019      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f8:	f107 030c 	add.w	r3, r7, #12
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f987 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007906:	e011      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007908:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800790c:	e00e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007912:	e00b      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007914:	4b08      	ldr	r3, [pc, #32]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007918:	e008      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800791a:	4b08      	ldr	r3, [pc, #32]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800791e:	e005      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007924:	bf00      	nop
 8007926:	e001      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800792c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800792e:	4618      	mov	r0, r3
 8007930:	3740      	adds	r7, #64	; 0x40
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	007a1200 	.word	0x007a1200
 800793c:	00bb8000 	.word	0x00bb8000
 8007940:	58024400 	.word	0x58024400
 8007944:	03d09000 	.word	0x03d09000
 8007948:	003d0900 	.word	0x003d0900

0800794c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007950:	f7fe fec6 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8007954:	4601      	mov	r1, r0
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	091b      	lsrs	r3, r3, #4
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	4a04      	ldr	r2, [pc, #16]	; (8007974 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007962:	5cd3      	ldrb	r3, [r2, r3]
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800796c:	4618      	mov	r0, r3
 800796e:	bd80      	pop	{r7, pc}
 8007970:	58024400 	.word	0x58024400
 8007974:	0800ac68 	.word	0x0800ac68

08007978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007978:	b480      	push	{r7}
 800797a:	b089      	sub	sp, #36	; 0x24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007980:	4b9d      	ldr	r3, [pc, #628]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800798a:	4b9b      	ldr	r3, [pc, #620]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	0b1b      	lsrs	r3, r3, #12
 8007990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007994:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007996:	4b98      	ldr	r3, [pc, #608]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80079a2:	4b95      	ldr	r3, [pc, #596]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a6:	08db      	lsrs	r3, r3, #3
 80079a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 810a 	beq.w	8007bda <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d05a      	beq.n	8007a82 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d302      	bcc.n	80079d6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d078      	beq.n	8007ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80079d4:	e099      	b.n	8007b0a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d6:	4b88      	ldr	r3, [pc, #544]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d02d      	beq.n	8007a3e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079e2:	4b85      	ldr	r3, [pc, #532]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	08db      	lsrs	r3, r3, #3
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	4a83      	ldr	r2, [pc, #524]	; (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80079ee:	fa22 f303 	lsr.w	r3, r2, r3
 80079f2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0c:	4b7a      	ldr	r3, [pc, #488]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a20:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a38:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a3c:	e087      	b.n	8007b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a50:	4b69      	ldr	r3, [pc, #420]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a60:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a64:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a80:	e065      	b.n	8007b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a94:	4b58      	ldr	r3, [pc, #352]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ac4:	e043      	b.n	8007b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad8:	4b47      	ldr	r3, [pc, #284]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b08:	e021      	b.n	8007b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b14:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b30:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b4c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007b4e:	4b2a      	ldr	r3, [pc, #168]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	0a5b      	lsrs	r3, r3, #9
 8007b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b74:	ee17 2a90 	vmov	r2, s15
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007b7c:	4b1e      	ldr	r3, [pc, #120]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba2:	ee17 2a90 	vmov	r2, s15
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	0e1b      	lsrs	r3, r3, #24
 8007bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd0:	ee17 2a90 	vmov	r2, s15
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bd8:	e008      	b.n	8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
}
 8007bec:	bf00      	nop
 8007bee:	3724      	adds	r7, #36	; 0x24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	03d09000 	.word	0x03d09000
 8007c00:	46000000 	.word	0x46000000
 8007c04:	4c742400 	.word	0x4c742400
 8007c08:	4a742400 	.word	0x4a742400
 8007c0c:	4af42400 	.word	0x4af42400

08007c10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	; 0x24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c18:	4b9d      	ldr	r3, [pc, #628]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007c22:	4b9b      	ldr	r3, [pc, #620]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	0d1b      	lsrs	r3, r3, #20
 8007c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c2e:	4b98      	ldr	r3, [pc, #608]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	0a1b      	lsrs	r3, r3, #8
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007c3a:	4b95      	ldr	r3, [pc, #596]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	08db      	lsrs	r3, r3, #3
 8007c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 810a 	beq.w	8007e72 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d05a      	beq.n	8007d1a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d302      	bcc.n	8007c6e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d078      	beq.n	8007d5e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007c6c:	e099      	b.n	8007da2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c6e:	4b88      	ldr	r3, [pc, #544]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d02d      	beq.n	8007cd6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c7a:	4b85      	ldr	r3, [pc, #532]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	08db      	lsrs	r3, r3, #3
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	4a83      	ldr	r2, [pc, #524]	; (8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007c86:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca4:	4b7a      	ldr	r3, [pc, #488]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007cd4:	e087      	b.n	8007de6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	ee07 3a90 	vmov	s15, r3
 8007cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce8:	4b69      	ldr	r3, [pc, #420]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cfc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d18:	e065      	b.n	8007de6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2c:	4b58      	ldr	r3, [pc, #352]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d5c:	e043      	b.n	8007de6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d70:	4b47      	ldr	r3, [pc, #284]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007da0:	e021      	b.n	8007de6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db4:	4b36      	ldr	r3, [pc, #216]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007de4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007de6:	4b2a      	ldr	r3, [pc, #168]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	0a5b      	lsrs	r3, r3, #9
 8007dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0c:	ee17 2a90 	vmov	r2, s15
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e14:	4b1e      	ldr	r3, [pc, #120]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	0c1b      	lsrs	r3, r3, #16
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e3a:	ee17 2a90 	vmov	r2, s15
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	0e1b      	lsrs	r3, r3, #24
 8007e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4c:	ee07 3a90 	vmov	s15, r3
 8007e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e68:	ee17 2a90 	vmov	r2, s15
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e70:	e008      	b.n	8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	609a      	str	r2, [r3, #8]
}
 8007e84:	bf00      	nop
 8007e86:	3724      	adds	r7, #36	; 0x24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	58024400 	.word	0x58024400
 8007e94:	03d09000 	.word	0x03d09000
 8007e98:	46000000 	.word	0x46000000
 8007e9c:	4c742400 	.word	0x4c742400
 8007ea0:	4a742400 	.word	0x4a742400
 8007ea4:	4af42400 	.word	0x4af42400

08007ea8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	; 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eb0:	4b9d      	ldr	r3, [pc, #628]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007eba:	4b9b      	ldr	r3, [pc, #620]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ec6:	4b98      	ldr	r3, [pc, #608]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ed0:	4b95      	ldr	r3, [pc, #596]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed4:	08db      	lsrs	r3, r3, #3
 8007ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	ee07 3a90 	vmov	s15, r3
 8007ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 810a 	beq.w	8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d05a      	beq.n	8007fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d302      	bcc.n	8007f04 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d078      	beq.n	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007f02:	e099      	b.n	8008038 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f04:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02d      	beq.n	8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f10:	4b85      	ldr	r3, [pc, #532]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a84      	ldr	r2, [pc, #528]	; (800812c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3a:	4b7b      	ldr	r3, [pc, #492]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f6a:	e087      	b.n	800807c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7e:	4b6a      	ldr	r3, [pc, #424]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fae:	e065      	b.n	800807c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008138 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc2:	4b59      	ldr	r3, [pc, #356]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ff2:	e043      	b.n	800807c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800813c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008006:	4b48      	ldr	r3, [pc, #288]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008016:	ed97 6a03 	vldr	s12, [r7, #12]
 800801a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800801e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800802a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008036:	e021      	b.n	800807c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008138 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804a:	4b37      	ldr	r3, [pc, #220]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805a:	ed97 6a03 	vldr	s12, [r7, #12]
 800805e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800807a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	0a5b      	lsrs	r3, r3, #9
 8008082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008096:	edd7 6a07 	vldr	s13, [r7, #28]
 800809a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a2:	ee17 2a90 	vmov	r2, s15
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80080aa:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	0c1b      	lsrs	r3, r3, #16
 80080b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d0:	ee17 2a90 	vmov	r2, s15
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008106:	e008      	b.n	800811a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
}
 800811a:	bf00      	nop
 800811c:	3724      	adds	r7, #36	; 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	03d09000 	.word	0x03d09000
 8008130:	46000000 	.word	0x46000000
 8008134:	4c742400 	.word	0x4c742400
 8008138:	4a742400 	.word	0x4a742400
 800813c:	4af42400 	.word	0x4af42400

08008140 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800814e:	4b53      	ldr	r3, [pc, #332]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d101      	bne.n	800815e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e099      	b.n	8008292 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800815e:	4b4f      	ldr	r3, [pc, #316]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a4e      	ldr	r2, [pc, #312]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7f9 fa65 	bl	8001638 <HAL_GetTick>
 800816e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008170:	e008      	b.n	8008184 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008172:	f7f9 fa61 	bl	8001638 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e086      	b.n	8008292 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008184:	4b45      	ldr	r3, [pc, #276]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008190:	4b42      	ldr	r3, [pc, #264]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	031b      	lsls	r3, r3, #12
 800819e:	493f      	ldr	r1, [pc, #252]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	628b      	str	r3, [r1, #40]	; 0x28
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	025b      	lsls	r3, r3, #9
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	3b01      	subs	r3, #1
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081d4:	4931      	ldr	r1, [pc, #196]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081da:	4b30      	ldr	r3, [pc, #192]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	492d      	ldr	r1, [pc, #180]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081ec:	4b2b      	ldr	r3, [pc, #172]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	f023 0220 	bic.w	r2, r3, #32
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4928      	ldr	r1, [pc, #160]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	4a26      	ldr	r2, [pc, #152]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008204:	f023 0310 	bic.w	r3, r3, #16
 8008208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800820a:	4b24      	ldr	r3, [pc, #144]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 800820c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <RCCEx_PLL2_Config+0x160>)
 8008210:	4013      	ands	r3, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	69d2      	ldr	r2, [r2, #28]
 8008216:	00d2      	lsls	r2, r2, #3
 8008218:	4920      	ldr	r1, [pc, #128]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800821e:	4b1f      	ldr	r3, [pc, #124]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	4a1e      	ldr	r2, [pc, #120]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008224:	f043 0310 	orr.w	r3, r3, #16
 8008228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008230:	4b1a      	ldr	r3, [pc, #104]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a19      	ldr	r2, [pc, #100]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800823a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800823c:	e00f      	b.n	800825e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d106      	bne.n	8008252 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	4a14      	ldr	r2, [pc, #80]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008250:	e005      	b.n	800825e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	4a11      	ldr	r2, [pc, #68]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800825c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826a:	f7f9 f9e5 	bl	8001638 <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008270:	e008      	b.n	8008284 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008272:	f7f9 f9e1 	bl	8001638 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e006      	b.n	8008292 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <RCCEx_PLL2_Config+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	58024400 	.word	0x58024400
 80082a0:	ffff0007 	.word	0xffff0007

080082a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082b2:	4b53      	ldr	r3, [pc, #332]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d101      	bne.n	80082c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e099      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082c2:	4b4f      	ldr	r3, [pc, #316]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a4e      	ldr	r2, [pc, #312]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ce:	f7f9 f9b3 	bl	8001638 <HAL_GetTick>
 80082d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d4:	e008      	b.n	80082e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082d6:	f7f9 f9af 	bl	8001638 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e086      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082e8:	4b45      	ldr	r3, [pc, #276]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f0      	bne.n	80082d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082f4:	4b42      	ldr	r3, [pc, #264]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	051b      	lsls	r3, r3, #20
 8008302:	493f      	ldr	r1, [pc, #252]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	628b      	str	r3, [r1, #40]	; 0x28
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	3b01      	subs	r3, #1
 800830e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	3b01      	subs	r3, #1
 8008318:	025b      	lsls	r3, r3, #9
 800831a:	b29b      	uxth	r3, r3
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	3b01      	subs	r3, #1
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	3b01      	subs	r3, #1
 8008332:	061b      	lsls	r3, r3, #24
 8008334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008338:	4931      	ldr	r1, [pc, #196]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800833e:	4b30      	ldr	r3, [pc, #192]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	492d      	ldr	r1, [pc, #180]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800834c:	4313      	orrs	r3, r2
 800834e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008350:	4b2b      	ldr	r3, [pc, #172]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	4928      	ldr	r1, [pc, #160]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008362:	4b27      	ldr	r3, [pc, #156]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a26      	ldr	r2, [pc, #152]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800836e:	4b24      	ldr	r3, [pc, #144]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <RCCEx_PLL3_Config+0x160>)
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	69d2      	ldr	r2, [r2, #28]
 800837a:	00d2      	lsls	r2, r2, #3
 800837c:	4920      	ldr	r1, [pc, #128]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008382:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	4a1e      	ldr	r2, [pc, #120]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800838c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 800839a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800839e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083a0:	e00f      	b.n	80083c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	4a14      	ldr	r2, [pc, #80]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083b4:	e005      	b.n	80083c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083b6:	4b12      	ldr	r3, [pc, #72]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4a11      	ldr	r2, [pc, #68]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083c2:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a0e      	ldr	r2, [pc, #56]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ce:	f7f9 f933 	bl	8001638 <HAL_GetTick>
 80083d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083d4:	e008      	b.n	80083e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083d6:	f7f9 f92f 	bl	8001638 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e006      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0f0      	beq.n	80083d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	58024400 	.word	0x58024400
 8008404:	ffff0007 	.word	0xffff0007

08008408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e049      	b.n	80084ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7f8 fe6a 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f000 f864 	bl	8008514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d001      	beq.n	80084d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e019      	b.n	8008504 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HAL_TIM_Base_Start+0x58>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b06      	cmp	r3, #6
 80084e8:	d00b      	beq.n	8008502 <HAL_TIM_Base_Start+0x4a>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f0:	d007      	beq.n	8008502 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0201 	orr.w	r2, r2, #1
 8008500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	00010007 	.word	0x00010007

08008514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a40      	ldr	r2, [pc, #256]	; (8008628 <TIM_Base_SetConfig+0x114>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d013      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008532:	d00f      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a3d      	ldr	r2, [pc, #244]	; (800862c <TIM_Base_SetConfig+0x118>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00b      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a3c      	ldr	r2, [pc, #240]	; (8008630 <TIM_Base_SetConfig+0x11c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d007      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a3b      	ldr	r2, [pc, #236]	; (8008634 <TIM_Base_SetConfig+0x120>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_Base_SetConfig+0x40>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a3a      	ldr	r2, [pc, #232]	; (8008638 <TIM_Base_SetConfig+0x124>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d108      	bne.n	8008566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a2f      	ldr	r2, [pc, #188]	; (8008628 <TIM_Base_SetConfig+0x114>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d01f      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008574:	d01b      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a2c      	ldr	r2, [pc, #176]	; (800862c <TIM_Base_SetConfig+0x118>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d017      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a2b      	ldr	r2, [pc, #172]	; (8008630 <TIM_Base_SetConfig+0x11c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a2a      	ldr	r2, [pc, #168]	; (8008634 <TIM_Base_SetConfig+0x120>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00f      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a29      	ldr	r2, [pc, #164]	; (8008638 <TIM_Base_SetConfig+0x124>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00b      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a28      	ldr	r2, [pc, #160]	; (800863c <TIM_Base_SetConfig+0x128>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d007      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a27      	ldr	r2, [pc, #156]	; (8008640 <TIM_Base_SetConfig+0x12c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d003      	beq.n	80085ae <TIM_Base_SetConfig+0x9a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a26      	ldr	r2, [pc, #152]	; (8008644 <TIM_Base_SetConfig+0x130>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d108      	bne.n	80085c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a10      	ldr	r2, [pc, #64]	; (8008628 <TIM_Base_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00f      	beq.n	800860c <TIM_Base_SetConfig+0xf8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a12      	ldr	r2, [pc, #72]	; (8008638 <TIM_Base_SetConfig+0x124>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00b      	beq.n	800860c <TIM_Base_SetConfig+0xf8>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a11      	ldr	r2, [pc, #68]	; (800863c <TIM_Base_SetConfig+0x128>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d007      	beq.n	800860c <TIM_Base_SetConfig+0xf8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a10      	ldr	r2, [pc, #64]	; (8008640 <TIM_Base_SetConfig+0x12c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d003      	beq.n	800860c <TIM_Base_SetConfig+0xf8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a0f      	ldr	r2, [pc, #60]	; (8008644 <TIM_Base_SetConfig+0x130>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d103      	bne.n	8008614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	691a      	ldr	r2, [r3, #16]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	615a      	str	r2, [r3, #20]
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40010000 	.word	0x40010000
 800862c:	40000400 	.word	0x40000400
 8008630:	40000800 	.word	0x40000800
 8008634:	40000c00 	.word	0x40000c00
 8008638:	40010400 	.word	0x40010400
 800863c:	40014000 	.word	0x40014000
 8008640:	40014400 	.word	0x40014400
 8008644:	40014800 	.word	0x40014800

08008648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800865c:	2302      	movs	r3, #2
 800865e:	e068      	b.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a2e      	ldr	r2, [pc, #184]	; (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a2d      	ldr	r2, [pc, #180]	; (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d108      	bne.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800869a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01d      	beq.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d2:	d018      	beq.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a1b      	ldr	r2, [pc, #108]	; (8008748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d013      	beq.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a1a      	ldr	r2, [pc, #104]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00e      	beq.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a18      	ldr	r2, [pc, #96]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d009      	beq.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a13      	ldr	r2, [pc, #76]	; (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d004      	beq.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a14      	ldr	r2, [pc, #80]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d10c      	bne.n	8008720 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800870c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	4313      	orrs	r3, r2
 8008716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40010000 	.word	0x40010000
 8008744:	40010400 	.word	0x40010400
 8008748:	40000400 	.word	0x40000400
 800874c:	40000800 	.word	0x40000800
 8008750:	40000c00 	.word	0x40000c00
 8008754:	40001800 	.word	0x40001800

08008758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e042      	b.n	80087f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7f8 fce5 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2224      	movs	r2, #36	; 0x24
 8008786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f82c 	bl	80087f8 <UART_SetConfig>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e022      	b.n	80087f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fecc 	bl	8009550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 ff53 	bl	8009694 <UART_CheckIdleState>
 80087ee:	4603      	mov	r3, r0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80087fc:	b08e      	sub	sp, #56	; 0x38
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	4313      	orrs	r3, r2
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008826:	4313      	orrs	r3, r2
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	4bc1      	ldr	r3, [pc, #772]	; (8008b38 <UART_SetConfig+0x340>)
 8008832:	4013      	ands	r3, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6812      	ldr	r2, [r2, #0]
 8008838:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800883a:	430b      	orrs	r3, r1
 800883c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4ab7      	ldr	r2, [pc, #732]	; (8008b3c <UART_SetConfig+0x344>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800886a:	4313      	orrs	r3, r2
 800886c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	4bb2      	ldr	r3, [pc, #712]	; (8008b40 <UART_SetConfig+0x348>)
 8008876:	4013      	ands	r3, r2
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800887e:	430b      	orrs	r3, r1
 8008880:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	f023 010f 	bic.w	r1, r3, #15
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4aa9      	ldr	r2, [pc, #676]	; (8008b44 <UART_SetConfig+0x34c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d177      	bne.n	8008992 <UART_SetConfig+0x19a>
 80088a2:	4ba9      	ldr	r3, [pc, #676]	; (8008b48 <UART_SetConfig+0x350>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088aa:	2b28      	cmp	r3, #40	; 0x28
 80088ac:	d86c      	bhi.n	8008988 <UART_SetConfig+0x190>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <UART_SetConfig+0xbc>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008989 	.word	0x08008989
 80088bc:	08008989 	.word	0x08008989
 80088c0:	08008989 	.word	0x08008989
 80088c4:	08008989 	.word	0x08008989
 80088c8:	08008989 	.word	0x08008989
 80088cc:	08008989 	.word	0x08008989
 80088d0:	08008989 	.word	0x08008989
 80088d4:	08008961 	.word	0x08008961
 80088d8:	08008989 	.word	0x08008989
 80088dc:	08008989 	.word	0x08008989
 80088e0:	08008989 	.word	0x08008989
 80088e4:	08008989 	.word	0x08008989
 80088e8:	08008989 	.word	0x08008989
 80088ec:	08008989 	.word	0x08008989
 80088f0:	08008989 	.word	0x08008989
 80088f4:	08008969 	.word	0x08008969
 80088f8:	08008989 	.word	0x08008989
 80088fc:	08008989 	.word	0x08008989
 8008900:	08008989 	.word	0x08008989
 8008904:	08008989 	.word	0x08008989
 8008908:	08008989 	.word	0x08008989
 800890c:	08008989 	.word	0x08008989
 8008910:	08008989 	.word	0x08008989
 8008914:	08008971 	.word	0x08008971
 8008918:	08008989 	.word	0x08008989
 800891c:	08008989 	.word	0x08008989
 8008920:	08008989 	.word	0x08008989
 8008924:	08008989 	.word	0x08008989
 8008928:	08008989 	.word	0x08008989
 800892c:	08008989 	.word	0x08008989
 8008930:	08008989 	.word	0x08008989
 8008934:	08008979 	.word	0x08008979
 8008938:	08008989 	.word	0x08008989
 800893c:	08008989 	.word	0x08008989
 8008940:	08008989 	.word	0x08008989
 8008944:	08008989 	.word	0x08008989
 8008948:	08008989 	.word	0x08008989
 800894c:	08008989 	.word	0x08008989
 8008950:	08008989 	.word	0x08008989
 8008954:	08008981 	.word	0x08008981
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e339      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e335      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e331      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	e32d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008978:	2320      	movs	r3, #32
 800897a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897e:	e329      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008980:	2340      	movs	r3, #64	; 0x40
 8008982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008986:	e325      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898e:	bf00      	nop
 8008990:	e320      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a6d      	ldr	r2, [pc, #436]	; (8008b4c <UART_SetConfig+0x354>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d132      	bne.n	8008a02 <UART_SetConfig+0x20a>
 800899c:	4b6a      	ldr	r3, [pc, #424]	; (8008b48 <UART_SetConfig+0x350>)
 800899e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d827      	bhi.n	80089f8 <UART_SetConfig+0x200>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <UART_SetConfig+0x1b8>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	080089d9 	.word	0x080089d9
 80089bc:	080089e1 	.word	0x080089e1
 80089c0:	080089e9 	.word	0x080089e9
 80089c4:	080089f1 	.word	0x080089f1
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ce:	e301      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d6:	e2fd      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e2f9      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	e2f5      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 80089e8:	2320      	movs	r3, #32
 80089ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ee:	e2f1      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f6:	e2ed      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 80089f8:	2380      	movs	r3, #128	; 0x80
 80089fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fe:	bf00      	nop
 8008a00:	e2e8      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a52      	ldr	r2, [pc, #328]	; (8008b50 <UART_SetConfig+0x358>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d132      	bne.n	8008a72 <UART_SetConfig+0x27a>
 8008a0c:	4b4e      	ldr	r3, [pc, #312]	; (8008b48 <UART_SetConfig+0x350>)
 8008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	d827      	bhi.n	8008a68 <UART_SetConfig+0x270>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x228>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3e:	e2c9      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a46:	e2c5      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e2c1      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a56:	e2bd      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5e:	e2b9      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a60:	2340      	movs	r3, #64	; 0x40
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	e2b5      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	bf00      	nop
 8008a70:	e2b0      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a37      	ldr	r2, [pc, #220]	; (8008b54 <UART_SetConfig+0x35c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d132      	bne.n	8008ae2 <UART_SetConfig+0x2ea>
 8008a7c:	4b32      	ldr	r3, [pc, #200]	; (8008b48 <UART_SetConfig+0x350>)
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	2b05      	cmp	r3, #5
 8008a86:	d827      	bhi.n	8008ad8 <UART_SetConfig+0x2e0>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <UART_SetConfig+0x298>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa9 	.word	0x08008aa9
 8008a94:	08008ab1 	.word	0x08008ab1
 8008a98:	08008ab9 	.word	0x08008ab9
 8008a9c:	08008ac1 	.word	0x08008ac1
 8008aa0:	08008ac9 	.word	0x08008ac9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aae:	e291      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ab6:	e28d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008abe:	e289      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac6:	e285      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ace:	e281      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e27d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	bf00      	nop
 8008ae0:	e278      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1c      	ldr	r2, [pc, #112]	; (8008b58 <UART_SetConfig+0x360>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d144      	bne.n	8008b76 <UART_SetConfig+0x37e>
 8008aec:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <UART_SetConfig+0x350>)
 8008aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	2b05      	cmp	r3, #5
 8008af6:	d839      	bhi.n	8008b6c <UART_SetConfig+0x374>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <UART_SetConfig+0x308>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b19 	.word	0x08008b19
 8008b04:	08008b21 	.word	0x08008b21
 8008b08:	08008b29 	.word	0x08008b29
 8008b0c:	08008b31 	.word	0x08008b31
 8008b10:	08008b5d 	.word	0x08008b5d
 8008b14:	08008b65 	.word	0x08008b65
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1e:	e259      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b20:	2304      	movs	r3, #4
 8008b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b26:	e255      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b28:	2308      	movs	r3, #8
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	e251      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b30:	2310      	movs	r3, #16
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b36:	e24d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b38:	cfff69f3 	.word	0xcfff69f3
 8008b3c:	58000c00 	.word	0x58000c00
 8008b40:	11fff4ff 	.word	0x11fff4ff
 8008b44:	40011000 	.word	0x40011000
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	40004400 	.word	0x40004400
 8008b50:	40004800 	.word	0x40004800
 8008b54:	40004c00 	.word	0x40004c00
 8008b58:	40005000 	.word	0x40005000
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b62:	e237      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b64:	2340      	movs	r3, #64	; 0x40
 8008b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6a:	e233      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b6c:	2380      	movs	r3, #128	; 0x80
 8008b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b72:	bf00      	nop
 8008b74:	e22e      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4ab5      	ldr	r2, [pc, #724]	; (8008e50 <UART_SetConfig+0x658>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d178      	bne.n	8008c72 <UART_SetConfig+0x47a>
 8008b80:	4bb4      	ldr	r3, [pc, #720]	; (8008e54 <UART_SetConfig+0x65c>)
 8008b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b88:	2b28      	cmp	r3, #40	; 0x28
 8008b8a:	d86d      	bhi.n	8008c68 <UART_SetConfig+0x470>
 8008b8c:	a201      	add	r2, pc, #4	; (adr r2, 8008b94 <UART_SetConfig+0x39c>)
 8008b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b92:	bf00      	nop
 8008b94:	08008c39 	.word	0x08008c39
 8008b98:	08008c69 	.word	0x08008c69
 8008b9c:	08008c69 	.word	0x08008c69
 8008ba0:	08008c69 	.word	0x08008c69
 8008ba4:	08008c69 	.word	0x08008c69
 8008ba8:	08008c69 	.word	0x08008c69
 8008bac:	08008c69 	.word	0x08008c69
 8008bb0:	08008c69 	.word	0x08008c69
 8008bb4:	08008c41 	.word	0x08008c41
 8008bb8:	08008c69 	.word	0x08008c69
 8008bbc:	08008c69 	.word	0x08008c69
 8008bc0:	08008c69 	.word	0x08008c69
 8008bc4:	08008c69 	.word	0x08008c69
 8008bc8:	08008c69 	.word	0x08008c69
 8008bcc:	08008c69 	.word	0x08008c69
 8008bd0:	08008c69 	.word	0x08008c69
 8008bd4:	08008c49 	.word	0x08008c49
 8008bd8:	08008c69 	.word	0x08008c69
 8008bdc:	08008c69 	.word	0x08008c69
 8008be0:	08008c69 	.word	0x08008c69
 8008be4:	08008c69 	.word	0x08008c69
 8008be8:	08008c69 	.word	0x08008c69
 8008bec:	08008c69 	.word	0x08008c69
 8008bf0:	08008c69 	.word	0x08008c69
 8008bf4:	08008c51 	.word	0x08008c51
 8008bf8:	08008c69 	.word	0x08008c69
 8008bfc:	08008c69 	.word	0x08008c69
 8008c00:	08008c69 	.word	0x08008c69
 8008c04:	08008c69 	.word	0x08008c69
 8008c08:	08008c69 	.word	0x08008c69
 8008c0c:	08008c69 	.word	0x08008c69
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c59 	.word	0x08008c59
 8008c18:	08008c69 	.word	0x08008c69
 8008c1c:	08008c69 	.word	0x08008c69
 8008c20:	08008c69 	.word	0x08008c69
 8008c24:	08008c69 	.word	0x08008c69
 8008c28:	08008c69 	.word	0x08008c69
 8008c2c:	08008c69 	.word	0x08008c69
 8008c30:	08008c69 	.word	0x08008c69
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3e:	e1c9      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e1c5      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e1c1      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e1bd      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e1b9      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e1b5      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	bf00      	nop
 8008c70:	e1b0      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a78      	ldr	r2, [pc, #480]	; (8008e58 <UART_SetConfig+0x660>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d132      	bne.n	8008ce2 <UART_SetConfig+0x4ea>
 8008c7c:	4b75      	ldr	r3, [pc, #468]	; (8008e54 <UART_SetConfig+0x65c>)
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c80:	f003 0307 	and.w	r3, r3, #7
 8008c84:	2b05      	cmp	r3, #5
 8008c86:	d827      	bhi.n	8008cd8 <UART_SetConfig+0x4e0>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x498>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008ca9 	.word	0x08008ca9
 8008c94:	08008cb1 	.word	0x08008cb1
 8008c98:	08008cb9 	.word	0x08008cb9
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008cc9 	.word	0x08008cc9
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e191      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb6:	e18d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cbe:	e189      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cc6:	e185      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cce:	e181      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008cd0:	2340      	movs	r3, #64	; 0x40
 8008cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd6:	e17d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cde:	bf00      	nop
 8008ce0:	e178      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a5d      	ldr	r2, [pc, #372]	; (8008e5c <UART_SetConfig+0x664>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d132      	bne.n	8008d52 <UART_SetConfig+0x55a>
 8008cec:	4b59      	ldr	r3, [pc, #356]	; (8008e54 <UART_SetConfig+0x65c>)
 8008cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	2b05      	cmp	r3, #5
 8008cf6:	d827      	bhi.n	8008d48 <UART_SetConfig+0x550>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <UART_SetConfig+0x508>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d19 	.word	0x08008d19
 8008d04:	08008d21 	.word	0x08008d21
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008d31 	.word	0x08008d31
 8008d10:	08008d39 	.word	0x08008d39
 8008d14:	08008d41 	.word	0x08008d41
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1e:	e159      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d26:	e155      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2e:	e151      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d36:	e14d      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d38:	2320      	movs	r3, #32
 8008d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3e:	e149      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d40:	2340      	movs	r3, #64	; 0x40
 8008d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d46:	e145      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4e:	bf00      	nop
 8008d50:	e140      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a42      	ldr	r2, [pc, #264]	; (8008e60 <UART_SetConfig+0x668>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	f040 8083 	bne.w	8008e64 <UART_SetConfig+0x66c>
 8008d5e:	4b3d      	ldr	r3, [pc, #244]	; (8008e54 <UART_SetConfig+0x65c>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d66:	2b28      	cmp	r3, #40	; 0x28
 8008d68:	d86c      	bhi.n	8008e44 <UART_SetConfig+0x64c>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <UART_SetConfig+0x578>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008e15 	.word	0x08008e15
 8008d74:	08008e45 	.word	0x08008e45
 8008d78:	08008e45 	.word	0x08008e45
 8008d7c:	08008e45 	.word	0x08008e45
 8008d80:	08008e45 	.word	0x08008e45
 8008d84:	08008e45 	.word	0x08008e45
 8008d88:	08008e45 	.word	0x08008e45
 8008d8c:	08008e45 	.word	0x08008e45
 8008d90:	08008e1d 	.word	0x08008e1d
 8008d94:	08008e45 	.word	0x08008e45
 8008d98:	08008e45 	.word	0x08008e45
 8008d9c:	08008e45 	.word	0x08008e45
 8008da0:	08008e45 	.word	0x08008e45
 8008da4:	08008e45 	.word	0x08008e45
 8008da8:	08008e45 	.word	0x08008e45
 8008dac:	08008e45 	.word	0x08008e45
 8008db0:	08008e25 	.word	0x08008e25
 8008db4:	08008e45 	.word	0x08008e45
 8008db8:	08008e45 	.word	0x08008e45
 8008dbc:	08008e45 	.word	0x08008e45
 8008dc0:	08008e45 	.word	0x08008e45
 8008dc4:	08008e45 	.word	0x08008e45
 8008dc8:	08008e45 	.word	0x08008e45
 8008dcc:	08008e45 	.word	0x08008e45
 8008dd0:	08008e2d 	.word	0x08008e2d
 8008dd4:	08008e45 	.word	0x08008e45
 8008dd8:	08008e45 	.word	0x08008e45
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008e45 	.word	0x08008e45
 8008de4:	08008e45 	.word	0x08008e45
 8008de8:	08008e45 	.word	0x08008e45
 8008dec:	08008e45 	.word	0x08008e45
 8008df0:	08008e35 	.word	0x08008e35
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	08008e45 	.word	0x08008e45
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e45 	.word	0x08008e45
 8008e04:	08008e45 	.word	0x08008e45
 8008e08:	08008e45 	.word	0x08008e45
 8008e0c:	08008e45 	.word	0x08008e45
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1a:	e0db      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e22:	e0d7      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2a:	e0d3      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e32:	e0cf      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e34:	2320      	movs	r3, #32
 8008e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3a:	e0cb      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e3c:	2340      	movs	r3, #64	; 0x40
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e0c7      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4a:	bf00      	nop
 8008e4c:	e0c2      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008e4e:	bf00      	nop
 8008e50:	40011400 	.word	0x40011400
 8008e54:	58024400 	.word	0x58024400
 8008e58:	40007800 	.word	0x40007800
 8008e5c:	40007c00 	.word	0x40007c00
 8008e60:	40011800 	.word	0x40011800
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4ab2      	ldr	r2, [pc, #712]	; (8009134 <UART_SetConfig+0x93c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d177      	bne.n	8008f5e <UART_SetConfig+0x766>
 8008e6e:	4bb2      	ldr	r3, [pc, #712]	; (8009138 <UART_SetConfig+0x940>)
 8008e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e76:	2b28      	cmp	r3, #40	; 0x28
 8008e78:	d86c      	bhi.n	8008f54 <UART_SetConfig+0x75c>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <UART_SetConfig+0x688>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008f25 	.word	0x08008f25
 8008e84:	08008f55 	.word	0x08008f55
 8008e88:	08008f55 	.word	0x08008f55
 8008e8c:	08008f55 	.word	0x08008f55
 8008e90:	08008f55 	.word	0x08008f55
 8008e94:	08008f55 	.word	0x08008f55
 8008e98:	08008f55 	.word	0x08008f55
 8008e9c:	08008f55 	.word	0x08008f55
 8008ea0:	08008f2d 	.word	0x08008f2d
 8008ea4:	08008f55 	.word	0x08008f55
 8008ea8:	08008f55 	.word	0x08008f55
 8008eac:	08008f55 	.word	0x08008f55
 8008eb0:	08008f55 	.word	0x08008f55
 8008eb4:	08008f55 	.word	0x08008f55
 8008eb8:	08008f55 	.word	0x08008f55
 8008ebc:	08008f55 	.word	0x08008f55
 8008ec0:	08008f35 	.word	0x08008f35
 8008ec4:	08008f55 	.word	0x08008f55
 8008ec8:	08008f55 	.word	0x08008f55
 8008ecc:	08008f55 	.word	0x08008f55
 8008ed0:	08008f55 	.word	0x08008f55
 8008ed4:	08008f55 	.word	0x08008f55
 8008ed8:	08008f55 	.word	0x08008f55
 8008edc:	08008f55 	.word	0x08008f55
 8008ee0:	08008f3d 	.word	0x08008f3d
 8008ee4:	08008f55 	.word	0x08008f55
 8008ee8:	08008f55 	.word	0x08008f55
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008f55 	.word	0x08008f55
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f55 	.word	0x08008f55
 8008efc:	08008f55 	.word	0x08008f55
 8008f00:	08008f45 	.word	0x08008f45
 8008f04:	08008f55 	.word	0x08008f55
 8008f08:	08008f55 	.word	0x08008f55
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f55 	.word	0x08008f55
 8008f14:	08008f55 	.word	0x08008f55
 8008f18:	08008f55 	.word	0x08008f55
 8008f1c:	08008f55 	.word	0x08008f55
 8008f20:	08008f4d 	.word	0x08008f4d
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2a:	e053      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f2c:	2304      	movs	r3, #4
 8008f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f32:	e04f      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f34:	2308      	movs	r3, #8
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e04b      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e047      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f44:	2320      	movs	r3, #32
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e043      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f4c:	2340      	movs	r3, #64	; 0x40
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e03f      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f54:	2380      	movs	r3, #128	; 0x80
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	bf00      	nop
 8008f5c:	e03a      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a76      	ldr	r2, [pc, #472]	; (800913c <UART_SetConfig+0x944>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d132      	bne.n	8008fce <UART_SetConfig+0x7d6>
 8008f68:	4b73      	ldr	r3, [pc, #460]	; (8009138 <UART_SetConfig+0x940>)
 8008f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	2b05      	cmp	r3, #5
 8008f72:	d827      	bhi.n	8008fc4 <UART_SetConfig+0x7cc>
 8008f74:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <UART_SetConfig+0x784>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008f95 	.word	0x08008f95
 8008f80:	08008f9d 	.word	0x08008f9d
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fb5 	.word	0x08008fb5
 8008f90:	08008fbd 	.word	0x08008fbd
 8008f94:	2302      	movs	r3, #2
 8008f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9a:	e01b      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa2:	e017      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008fa4:	2308      	movs	r3, #8
 8008fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008faa:	e013      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008fac:	2310      	movs	r3, #16
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e00f      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008fb4:	2320      	movs	r3, #32
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e00b      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008fbc:	2340      	movs	r3, #64	; 0x40
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e007      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008fc4:	2380      	movs	r3, #128	; 0x80
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	bf00      	nop
 8008fcc:	e002      	b.n	8008fd4 <UART_SetConfig+0x7dc>
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a58      	ldr	r2, [pc, #352]	; (800913c <UART_SetConfig+0x944>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f040 80b6 	bne.w	800914c <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d019      	beq.n	800901c <UART_SetConfig+0x824>
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	dc04      	bgt.n	8008ff6 <UART_SetConfig+0x7fe>
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d009      	beq.n	8009004 <UART_SetConfig+0x80c>
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d00b      	beq.n	800900c <UART_SetConfig+0x814>
 8008ff4:	e034      	b.n	8009060 <UART_SetConfig+0x868>
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d02b      	beq.n	8009052 <UART_SetConfig+0x85a>
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d02c      	beq.n	8009058 <UART_SetConfig+0x860>
 8008ffe:	2b10      	cmp	r3, #16
 8009000:	d014      	beq.n	800902c <UART_SetConfig+0x834>
 8009002:	e02d      	b.n	8009060 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009004:	f7fe fca2 	bl	800794c <HAL_RCCEx_GetD3PCLK1Freq>
 8009008:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800900a:	e02f      	b.n	800906c <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900c:	f107 0314 	add.w	r3, r7, #20
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fcb1 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800901a:	e027      	b.n	800906c <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fdf5 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800902a:	e01f      	b.n	800906c <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800902c:	4b42      	ldr	r3, [pc, #264]	; (8009138 <UART_SetConfig+0x940>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d009      	beq.n	800904c <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009038:	4b3f      	ldr	r3, [pc, #252]	; (8009138 <UART_SetConfig+0x940>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	08db      	lsrs	r3, r3, #3
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	4a3f      	ldr	r2, [pc, #252]	; (8009140 <UART_SetConfig+0x948>)
 8009044:	fa22 f303 	lsr.w	r3, r2, r3
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800904a:	e00f      	b.n	800906c <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 800904c:	4b3c      	ldr	r3, [pc, #240]	; (8009140 <UART_SetConfig+0x948>)
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009050:	e00c      	b.n	800906c <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009052:	4b3c      	ldr	r3, [pc, #240]	; (8009144 <UART_SetConfig+0x94c>)
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009056:	e009      	b.n	800906c <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800905e:	e005      	b.n	800906c <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800906a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8251 	beq.w	8009516 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	4a33      	ldr	r2, [pc, #204]	; (8009148 <UART_SetConfig+0x950>)
 800907a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800907e:	461a      	mov	r2, r3
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	fbb3 f3f2 	udiv	r3, r3, r2
 8009086:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	4613      	mov	r3, r2
 800908e:	005b      	lsls	r3, r3, #1
 8009090:	4413      	add	r3, r2
 8009092:	6a3a      	ldr	r2, [r7, #32]
 8009094:	429a      	cmp	r2, r3
 8009096:	d305      	bcc.n	80090a4 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800909e:	6a3a      	ldr	r2, [r7, #32]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d903      	bls.n	80090ac <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80090aa:	e234      	b.n	8009516 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ae:	4618      	mov	r0, r3
 80090b0:	f04f 0100 	mov.w	r1, #0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	4a23      	ldr	r2, [pc, #140]	; (8009148 <UART_SetConfig+0x950>)
 80090ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f04f 0400 	mov.w	r4, #0
 80090c4:	461a      	mov	r2, r3
 80090c6:	4623      	mov	r3, r4
 80090c8:	f7f7 f912 	bl	80002f0 <__aeabi_uldivmod>
 80090cc:	4603      	mov	r3, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4619      	mov	r1, r3
 80090d2:	4622      	mov	r2, r4
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	f04f 0400 	mov.w	r4, #0
 80090dc:	0214      	lsls	r4, r2, #8
 80090de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80090e2:	020b      	lsls	r3, r1, #8
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6852      	ldr	r2, [r2, #4]
 80090e8:	0852      	lsrs	r2, r2, #1
 80090ea:	4611      	mov	r1, r2
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	eb13 0b01 	adds.w	fp, r3, r1
 80090f4:	eb44 0c02 	adc.w	ip, r4, r2
 80090f8:	4658      	mov	r0, fp
 80090fa:	4661      	mov	r1, ip
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f04f 0400 	mov.w	r4, #0
 8009104:	461a      	mov	r2, r3
 8009106:	4623      	mov	r3, r4
 8009108:	f7f7 f8f2 	bl	80002f0 <__aeabi_uldivmod>
 800910c:	4603      	mov	r3, r0
 800910e:	460c      	mov	r4, r1
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009118:	d308      	bcc.n	800912c <UART_SetConfig+0x934>
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009120:	d204      	bcs.n	800912c <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009128:	60da      	str	r2, [r3, #12]
 800912a:	e1f4      	b.n	8009516 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009132:	e1f0      	b.n	8009516 <UART_SetConfig+0xd1e>
 8009134:	40011c00 	.word	0x40011c00
 8009138:	58024400 	.word	0x58024400
 800913c:	58000c00 	.word	0x58000c00
 8009140:	03d09000 	.word	0x03d09000
 8009144:	003d0900 	.word	0x003d0900
 8009148:	0800ac80 	.word	0x0800ac80
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009154:	f040 80f8 	bne.w	8009348 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8009158:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	f200 80b7 	bhi.w	80092d0 <UART_SetConfig+0xad8>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <UART_SetConfig+0x970>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	0800926d 	.word	0x0800926d
 800916c:	08009275 	.word	0x08009275
 8009170:	080092d1 	.word	0x080092d1
 8009174:	080092d1 	.word	0x080092d1
 8009178:	0800927d 	.word	0x0800927d
 800917c:	080092d1 	.word	0x080092d1
 8009180:	080092d1 	.word	0x080092d1
 8009184:	080092d1 	.word	0x080092d1
 8009188:	0800928d 	.word	0x0800928d
 800918c:	080092d1 	.word	0x080092d1
 8009190:	080092d1 	.word	0x080092d1
 8009194:	080092d1 	.word	0x080092d1
 8009198:	080092d1 	.word	0x080092d1
 800919c:	080092d1 	.word	0x080092d1
 80091a0:	080092d1 	.word	0x080092d1
 80091a4:	080092d1 	.word	0x080092d1
 80091a8:	0800929d 	.word	0x0800929d
 80091ac:	080092d1 	.word	0x080092d1
 80091b0:	080092d1 	.word	0x080092d1
 80091b4:	080092d1 	.word	0x080092d1
 80091b8:	080092d1 	.word	0x080092d1
 80091bc:	080092d1 	.word	0x080092d1
 80091c0:	080092d1 	.word	0x080092d1
 80091c4:	080092d1 	.word	0x080092d1
 80091c8:	080092d1 	.word	0x080092d1
 80091cc:	080092d1 	.word	0x080092d1
 80091d0:	080092d1 	.word	0x080092d1
 80091d4:	080092d1 	.word	0x080092d1
 80091d8:	080092d1 	.word	0x080092d1
 80091dc:	080092d1 	.word	0x080092d1
 80091e0:	080092d1 	.word	0x080092d1
 80091e4:	080092d1 	.word	0x080092d1
 80091e8:	080092c3 	.word	0x080092c3
 80091ec:	080092d1 	.word	0x080092d1
 80091f0:	080092d1 	.word	0x080092d1
 80091f4:	080092d1 	.word	0x080092d1
 80091f8:	080092d1 	.word	0x080092d1
 80091fc:	080092d1 	.word	0x080092d1
 8009200:	080092d1 	.word	0x080092d1
 8009204:	080092d1 	.word	0x080092d1
 8009208:	080092d1 	.word	0x080092d1
 800920c:	080092d1 	.word	0x080092d1
 8009210:	080092d1 	.word	0x080092d1
 8009214:	080092d1 	.word	0x080092d1
 8009218:	080092d1 	.word	0x080092d1
 800921c:	080092d1 	.word	0x080092d1
 8009220:	080092d1 	.word	0x080092d1
 8009224:	080092d1 	.word	0x080092d1
 8009228:	080092d1 	.word	0x080092d1
 800922c:	080092d1 	.word	0x080092d1
 8009230:	080092d1 	.word	0x080092d1
 8009234:	080092d1 	.word	0x080092d1
 8009238:	080092d1 	.word	0x080092d1
 800923c:	080092d1 	.word	0x080092d1
 8009240:	080092d1 	.word	0x080092d1
 8009244:	080092d1 	.word	0x080092d1
 8009248:	080092d1 	.word	0x080092d1
 800924c:	080092d1 	.word	0x080092d1
 8009250:	080092d1 	.word	0x080092d1
 8009254:	080092d1 	.word	0x080092d1
 8009258:	080092d1 	.word	0x080092d1
 800925c:	080092d1 	.word	0x080092d1
 8009260:	080092d1 	.word	0x080092d1
 8009264:	080092d1 	.word	0x080092d1
 8009268:	080092c9 	.word	0x080092c9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800926c:	f7fd fa68 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 8009270:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009272:	e033      	b.n	80092dc <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009274:	f7fd fa7a 	bl	800676c <HAL_RCC_GetPCLK2Freq>
 8009278:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800927a:	e02f      	b.n	80092dc <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800927c:	f107 0314 	add.w	r3, r7, #20
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fb79 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800928a:	e027      	b.n	80092dc <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fcbd 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800929a:	e01f      	b.n	80092dc <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800929c:	4ba8      	ldr	r3, [pc, #672]	; (8009540 <UART_SetConfig+0xd48>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d009      	beq.n	80092bc <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092a8:	4ba5      	ldr	r3, [pc, #660]	; (8009540 <UART_SetConfig+0xd48>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	4aa4      	ldr	r2, [pc, #656]	; (8009544 <UART_SetConfig+0xd4c>)
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092ba:	e00f      	b.n	80092dc <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 80092bc:	4ba1      	ldr	r3, [pc, #644]	; (8009544 <UART_SetConfig+0xd4c>)
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092c0:	e00c      	b.n	80092dc <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092c2:	4ba1      	ldr	r3, [pc, #644]	; (8009548 <UART_SetConfig+0xd50>)
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092c6:	e009      	b.n	80092dc <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092ce:	e005      	b.n	80092dc <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8119 	beq.w	8009516 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	4a98      	ldr	r2, [pc, #608]	; (800954c <UART_SetConfig+0xd54>)
 80092ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f6:	005a      	lsls	r2, r3, #1
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	085b      	lsrs	r3, r3, #1
 80092fe:	441a      	add	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	fbb2 f3f3 	udiv	r3, r2, r3
 8009308:	b29b      	uxth	r3, r3
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	2b0f      	cmp	r3, #15
 8009310:	d916      	bls.n	8009340 <UART_SetConfig+0xb48>
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009318:	d212      	bcs.n	8009340 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	b29b      	uxth	r3, r3
 800931e:	f023 030f 	bic.w	r3, r3, #15
 8009322:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	b29a      	uxth	r2, r3
 8009330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009332:	4313      	orrs	r3, r2
 8009334:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800933c:	60da      	str	r2, [r3, #12]
 800933e:	e0ea      	b.n	8009516 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009346:	e0e6      	b.n	8009516 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009348:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	f200 80b7 	bhi.w	80094c0 <UART_SetConfig+0xcc8>
 8009352:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <UART_SetConfig+0xb60>)
 8009354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009358:	0800945d 	.word	0x0800945d
 800935c:	08009465 	.word	0x08009465
 8009360:	080094c1 	.word	0x080094c1
 8009364:	080094c1 	.word	0x080094c1
 8009368:	0800946d 	.word	0x0800946d
 800936c:	080094c1 	.word	0x080094c1
 8009370:	080094c1 	.word	0x080094c1
 8009374:	080094c1 	.word	0x080094c1
 8009378:	0800947d 	.word	0x0800947d
 800937c:	080094c1 	.word	0x080094c1
 8009380:	080094c1 	.word	0x080094c1
 8009384:	080094c1 	.word	0x080094c1
 8009388:	080094c1 	.word	0x080094c1
 800938c:	080094c1 	.word	0x080094c1
 8009390:	080094c1 	.word	0x080094c1
 8009394:	080094c1 	.word	0x080094c1
 8009398:	0800948d 	.word	0x0800948d
 800939c:	080094c1 	.word	0x080094c1
 80093a0:	080094c1 	.word	0x080094c1
 80093a4:	080094c1 	.word	0x080094c1
 80093a8:	080094c1 	.word	0x080094c1
 80093ac:	080094c1 	.word	0x080094c1
 80093b0:	080094c1 	.word	0x080094c1
 80093b4:	080094c1 	.word	0x080094c1
 80093b8:	080094c1 	.word	0x080094c1
 80093bc:	080094c1 	.word	0x080094c1
 80093c0:	080094c1 	.word	0x080094c1
 80093c4:	080094c1 	.word	0x080094c1
 80093c8:	080094c1 	.word	0x080094c1
 80093cc:	080094c1 	.word	0x080094c1
 80093d0:	080094c1 	.word	0x080094c1
 80093d4:	080094c1 	.word	0x080094c1
 80093d8:	080094b3 	.word	0x080094b3
 80093dc:	080094c1 	.word	0x080094c1
 80093e0:	080094c1 	.word	0x080094c1
 80093e4:	080094c1 	.word	0x080094c1
 80093e8:	080094c1 	.word	0x080094c1
 80093ec:	080094c1 	.word	0x080094c1
 80093f0:	080094c1 	.word	0x080094c1
 80093f4:	080094c1 	.word	0x080094c1
 80093f8:	080094c1 	.word	0x080094c1
 80093fc:	080094c1 	.word	0x080094c1
 8009400:	080094c1 	.word	0x080094c1
 8009404:	080094c1 	.word	0x080094c1
 8009408:	080094c1 	.word	0x080094c1
 800940c:	080094c1 	.word	0x080094c1
 8009410:	080094c1 	.word	0x080094c1
 8009414:	080094c1 	.word	0x080094c1
 8009418:	080094c1 	.word	0x080094c1
 800941c:	080094c1 	.word	0x080094c1
 8009420:	080094c1 	.word	0x080094c1
 8009424:	080094c1 	.word	0x080094c1
 8009428:	080094c1 	.word	0x080094c1
 800942c:	080094c1 	.word	0x080094c1
 8009430:	080094c1 	.word	0x080094c1
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094c1 	.word	0x080094c1
 800943c:	080094c1 	.word	0x080094c1
 8009440:	080094c1 	.word	0x080094c1
 8009444:	080094c1 	.word	0x080094c1
 8009448:	080094c1 	.word	0x080094c1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	080094c1 	.word	0x080094c1
 8009454:	080094c1 	.word	0x080094c1
 8009458:	080094b9 	.word	0x080094b9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800945c:	f7fd f970 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 8009460:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009462:	e033      	b.n	80094cc <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009464:	f7fd f982 	bl	800676c <HAL_RCC_GetPCLK2Freq>
 8009468:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800946a:	e02f      	b.n	80094cc <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946c:	f107 0314 	add.w	r3, r7, #20
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fa81 	bl	8007978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800947a:	e027      	b.n	80094cc <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800947c:	f107 0308 	add.w	r3, r7, #8
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fbc5 	bl	8007c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800948a:	e01f      	b.n	80094cc <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800948c:	4b2c      	ldr	r3, [pc, #176]	; (8009540 <UART_SetConfig+0xd48>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d009      	beq.n	80094ac <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009498:	4b29      	ldr	r3, [pc, #164]	; (8009540 <UART_SetConfig+0xd48>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	08db      	lsrs	r3, r3, #3
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	4a28      	ldr	r2, [pc, #160]	; (8009544 <UART_SetConfig+0xd4c>)
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094aa:	e00f      	b.n	80094cc <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 80094ac:	4b25      	ldr	r3, [pc, #148]	; (8009544 <UART_SetConfig+0xd4c>)
 80094ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094b0:	e00c      	b.n	80094cc <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094b2:	4b25      	ldr	r3, [pc, #148]	; (8009548 <UART_SetConfig+0xd50>)
 80094b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094b6:	e009      	b.n	80094cc <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094be:	e005      	b.n	80094cc <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80094ca:	bf00      	nop
    }

    if (pclk != 0U)
 80094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d021      	beq.n	8009516 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	4a1d      	ldr	r2, [pc, #116]	; (800954c <UART_SetConfig+0xd54>)
 80094d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094dc:	461a      	mov	r2, r3
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	085b      	lsrs	r3, r3, #1
 80094ea:	441a      	add	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	2b0f      	cmp	r3, #15
 80094fc:	d908      	bls.n	8009510 <UART_SetConfig+0xd18>
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009504:	d204      	bcs.n	8009510 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	e002      	b.n	8009516 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009532:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009536:	4618      	mov	r0, r3
 8009538:	3738      	adds	r7, #56	; 0x38
 800953a:	46bd      	mov	sp, r7
 800953c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	0800ac80 	.word	0x0800ac80

08009550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	f003 0302 	and.w	r3, r3, #2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	f003 0310 	and.w	r3, r3, #16
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00a      	beq.n	8009624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d01a      	beq.n	8009666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800964e:	d10a      	bne.n	8009666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80096a4:	f7f7 ffc8 	bl	8001638 <HAL_GetTick>
 80096a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d10e      	bne.n	80096d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f82c 	bl	8009724 <UART_WaitOnFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e022      	b.n	800971c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	d10e      	bne.n	8009702 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f816 	bl	8009724 <UART_WaitOnFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e00c      	b.n	800971c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2220      	movs	r2, #32
 800970e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	4613      	mov	r3, r2
 8009732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009734:	e062      	b.n	80097fc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973c:	d05e      	beq.n	80097fc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973e:	f7f7 ff7b 	bl	8001638 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	429a      	cmp	r2, r3
 800974c:	d302      	bcc.n	8009754 <UART_WaitOnFlagUntilTimeout+0x30>
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11d      	bne.n	8009790 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009762:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2220      	movs	r2, #32
 8009780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e045      	b.n	800981c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b00      	cmp	r3, #0
 800979c:	d02e      	beq.n	80097fc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ac:	d126      	bne.n	80097fc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0201 	bic.w	r2, r2, #1
 80097d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2220      	movs	r2, #32
 80097ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e00f      	b.n	800981c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69da      	ldr	r2, [r3, #28]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	4013      	ands	r3, r2
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	429a      	cmp	r2, r3
 800980a:	bf0c      	ite	eq
 800980c:	2301      	moveq	r3, #1
 800980e:	2300      	movne	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	461a      	mov	r2, r3
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	429a      	cmp	r2, r3
 8009818:	d08d      	beq.n	8009736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_UARTEx_DisableFifoMode+0x16>
 8009836:	2302      	movs	r3, #2
 8009838:	e027      	b.n	800988a <HAL_UARTEx_DisableFifoMode+0x66>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2224      	movs	r2, #36	; 0x24
 8009846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0201 	bic.w	r2, r2, #1
 8009860:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009868:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2220      	movs	r2, #32
 800987c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e02d      	b.n	800990a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	; 0x24
 80098ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0201 	bic.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f850 	bl	8009990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009926:	2302      	movs	r3, #2
 8009928:	e02d      	b.n	8009986 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2224      	movs	r2, #36	; 0x24
 8009936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 0201 	bic.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f812 	bl	8009990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2220      	movs	r2, #32
 8009978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009998:	4a2f      	ldr	r2, [pc, #188]	; (8009a58 <UARTEx_SetNbDataToProcess+0xc8>)
 800999a:	f107 0314 	add.w	r3, r7, #20
 800999e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099a2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80099a6:	4a2d      	ldr	r2, [pc, #180]	; (8009a5c <UARTEx_SetNbDataToProcess+0xcc>)
 80099a8:	f107 030c 	add.w	r3, r7, #12
 80099ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099b0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d108      	bne.n	80099ce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099cc:	e03d      	b.n	8009a4a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ce:	2310      	movs	r3, #16
 80099d0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099d2:	2310      	movs	r3, #16
 80099d4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	0e5b      	lsrs	r3, r3, #25
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	0f5b      	lsrs	r3, r3, #29
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0307 	and.w	r3, r3, #7
 80099f4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099f6:	7fbb      	ldrb	r3, [r7, #30]
 80099f8:	7f3a      	ldrb	r2, [r7, #28]
 80099fa:	f107 0120 	add.w	r1, r7, #32
 80099fe:	440a      	add	r2, r1
 8009a00:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009a04:	fb02 f303 	mul.w	r3, r2, r3
 8009a08:	7f3a      	ldrb	r2, [r7, #28]
 8009a0a:	f107 0120 	add.w	r1, r7, #32
 8009a0e:	440a      	add	r2, r1
 8009a10:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009a20:	7ffb      	ldrb	r3, [r7, #31]
 8009a22:	7f7a      	ldrb	r2, [r7, #29]
 8009a24:	f107 0120 	add.w	r1, r7, #32
 8009a28:	440a      	add	r2, r1
 8009a2a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	7f7a      	ldrb	r2, [r7, #29]
 8009a34:	f107 0120 	add.w	r1, r7, #32
 8009a38:	440a      	add	r2, r1
 8009a3a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a4a:	bf00      	nop
 8009a4c:	3724      	adds	r7, #36	; 0x24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	0800a458 	.word	0x0800a458
 8009a5c:	0800a460 	.word	0x0800a460

08009a60 <calloc>:
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <calloc+0xc>)
 8009a62:	460a      	mov	r2, r1
 8009a64:	4601      	mov	r1, r0
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	f000 b850 	b.w	8009b0c <_calloc_r>
 8009a6c:	24000010 	.word	0x24000010

08009a70 <__errno>:
 8009a70:	4b01      	ldr	r3, [pc, #4]	; (8009a78 <__errno+0x8>)
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	24000010 	.word	0x24000010

08009a7c <exit>:
 8009a7c:	b508      	push	{r3, lr}
 8009a7e:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <exit+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	b113      	cbz	r3, 8009a8a <exit+0xe>
 8009a84:	2100      	movs	r1, #0
 8009a86:	f3af 8000 	nop.w
 8009a8a:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <exit+0x24>)
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009a90:	b103      	cbz	r3, 8009a94 <exit+0x18>
 8009a92:	4798      	blx	r3
 8009a94:	4620      	mov	r0, r4
 8009a96:	f7f7 fbf5 	bl	8001284 <_exit>
 8009a9a:	bf00      	nop
 8009a9c:	00000000 	.word	0x00000000
 8009aa0:	0800ac98 	.word	0x0800ac98

08009aa4 <__libc_init_array>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	4e0d      	ldr	r6, [pc, #52]	; (8009adc <__libc_init_array+0x38>)
 8009aa8:	4c0d      	ldr	r4, [pc, #52]	; (8009ae0 <__libc_init_array+0x3c>)
 8009aaa:	1ba4      	subs	r4, r4, r6
 8009aac:	10a4      	asrs	r4, r4, #2
 8009aae:	2500      	movs	r5, #0
 8009ab0:	42a5      	cmp	r5, r4
 8009ab2:	d109      	bne.n	8009ac8 <__libc_init_array+0x24>
 8009ab4:	4e0b      	ldr	r6, [pc, #44]	; (8009ae4 <__libc_init_array+0x40>)
 8009ab6:	4c0c      	ldr	r4, [pc, #48]	; (8009ae8 <__libc_init_array+0x44>)
 8009ab8:	f000 fc9e 	bl	800a3f8 <_init>
 8009abc:	1ba4      	subs	r4, r4, r6
 8009abe:	10a4      	asrs	r4, r4, #2
 8009ac0:	2500      	movs	r5, #0
 8009ac2:	42a5      	cmp	r5, r4
 8009ac4:	d105      	bne.n	8009ad2 <__libc_init_array+0x2e>
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009acc:	4798      	blx	r3
 8009ace:	3501      	adds	r5, #1
 8009ad0:	e7ee      	b.n	8009ab0 <__libc_init_array+0xc>
 8009ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ad6:	4798      	blx	r3
 8009ad8:	3501      	adds	r5, #1
 8009ada:	e7f2      	b.n	8009ac2 <__libc_init_array+0x1e>
 8009adc:	0800ad04 	.word	0x0800ad04
 8009ae0:	0800ad04 	.word	0x0800ad04
 8009ae4:	0800ad04 	.word	0x0800ad04
 8009ae8:	0800ad08 	.word	0x0800ad08

08009aec <malloc>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <malloc+0xc>)
 8009aee:	4601      	mov	r1, r0
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	f000 b867 	b.w	8009bc4 <_malloc_r>
 8009af6:	bf00      	nop
 8009af8:	24000010 	.word	0x24000010

08009afc <memset>:
 8009afc:	4402      	add	r2, r0
 8009afe:	4603      	mov	r3, r0
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d100      	bne.n	8009b06 <memset+0xa>
 8009b04:	4770      	bx	lr
 8009b06:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0a:	e7f9      	b.n	8009b00 <memset+0x4>

08009b0c <_calloc_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	fb02 f401 	mul.w	r4, r2, r1
 8009b12:	4621      	mov	r1, r4
 8009b14:	f000 f856 	bl	8009bc4 <_malloc_r>
 8009b18:	4605      	mov	r5, r0
 8009b1a:	b118      	cbz	r0, 8009b24 <_calloc_r+0x18>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	2100      	movs	r1, #0
 8009b20:	f7ff ffec 	bl	8009afc <memset>
 8009b24:	4628      	mov	r0, r5
 8009b26:	bd38      	pop	{r3, r4, r5, pc}

08009b28 <_free_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	d045      	beq.n	8009bbc <_free_r+0x94>
 8009b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b34:	1f0c      	subs	r4, r1, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfb8      	it	lt
 8009b3a:	18e4      	addlt	r4, r4, r3
 8009b3c:	f000 fbae 	bl	800a29c <__malloc_lock>
 8009b40:	4a1f      	ldr	r2, [pc, #124]	; (8009bc0 <_free_r+0x98>)
 8009b42:	6813      	ldr	r3, [r2, #0]
 8009b44:	4610      	mov	r0, r2
 8009b46:	b933      	cbnz	r3, 8009b56 <_free_r+0x2e>
 8009b48:	6063      	str	r3, [r4, #4]
 8009b4a:	6014      	str	r4, [r2, #0]
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b52:	f000 bba4 	b.w	800a29e <__malloc_unlock>
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	d90c      	bls.n	8009b74 <_free_r+0x4c>
 8009b5a:	6821      	ldr	r1, [r4, #0]
 8009b5c:	1862      	adds	r2, r4, r1
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bf04      	itt	eq
 8009b62:	681a      	ldreq	r2, [r3, #0]
 8009b64:	685b      	ldreq	r3, [r3, #4]
 8009b66:	6063      	str	r3, [r4, #4]
 8009b68:	bf04      	itt	eq
 8009b6a:	1852      	addeq	r2, r2, r1
 8009b6c:	6022      	streq	r2, [r4, #0]
 8009b6e:	6004      	str	r4, [r0, #0]
 8009b70:	e7ec      	b.n	8009b4c <_free_r+0x24>
 8009b72:	4613      	mov	r3, r2
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	b10a      	cbz	r2, 8009b7c <_free_r+0x54>
 8009b78:	42a2      	cmp	r2, r4
 8009b7a:	d9fa      	bls.n	8009b72 <_free_r+0x4a>
 8009b7c:	6819      	ldr	r1, [r3, #0]
 8009b7e:	1858      	adds	r0, r3, r1
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d10b      	bne.n	8009b9c <_free_r+0x74>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	4401      	add	r1, r0
 8009b88:	1858      	adds	r0, r3, r1
 8009b8a:	4282      	cmp	r2, r0
 8009b8c:	6019      	str	r1, [r3, #0]
 8009b8e:	d1dd      	bne.n	8009b4c <_free_r+0x24>
 8009b90:	6810      	ldr	r0, [r2, #0]
 8009b92:	6852      	ldr	r2, [r2, #4]
 8009b94:	605a      	str	r2, [r3, #4]
 8009b96:	4401      	add	r1, r0
 8009b98:	6019      	str	r1, [r3, #0]
 8009b9a:	e7d7      	b.n	8009b4c <_free_r+0x24>
 8009b9c:	d902      	bls.n	8009ba4 <_free_r+0x7c>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	e7d3      	b.n	8009b4c <_free_r+0x24>
 8009ba4:	6820      	ldr	r0, [r4, #0]
 8009ba6:	1821      	adds	r1, r4, r0
 8009ba8:	428a      	cmp	r2, r1
 8009baa:	bf04      	itt	eq
 8009bac:	6811      	ldreq	r1, [r2, #0]
 8009bae:	6852      	ldreq	r2, [r2, #4]
 8009bb0:	6062      	str	r2, [r4, #4]
 8009bb2:	bf04      	itt	eq
 8009bb4:	1809      	addeq	r1, r1, r0
 8009bb6:	6021      	streq	r1, [r4, #0]
 8009bb8:	605c      	str	r4, [r3, #4]
 8009bba:	e7c7      	b.n	8009b4c <_free_r+0x24>
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	24000094 	.word	0x24000094

08009bc4 <_malloc_r>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	1ccd      	adds	r5, r1, #3
 8009bc8:	f025 0503 	bic.w	r5, r5, #3
 8009bcc:	3508      	adds	r5, #8
 8009bce:	2d0c      	cmp	r5, #12
 8009bd0:	bf38      	it	cc
 8009bd2:	250c      	movcc	r5, #12
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	db01      	blt.n	8009bde <_malloc_r+0x1a>
 8009bda:	42a9      	cmp	r1, r5
 8009bdc:	d903      	bls.n	8009be6 <_malloc_r+0x22>
 8009bde:	230c      	movs	r3, #12
 8009be0:	6033      	str	r3, [r6, #0]
 8009be2:	2000      	movs	r0, #0
 8009be4:	bd70      	pop	{r4, r5, r6, pc}
 8009be6:	f000 fb59 	bl	800a29c <__malloc_lock>
 8009bea:	4a21      	ldr	r2, [pc, #132]	; (8009c70 <_malloc_r+0xac>)
 8009bec:	6814      	ldr	r4, [r2, #0]
 8009bee:	4621      	mov	r1, r4
 8009bf0:	b991      	cbnz	r1, 8009c18 <_malloc_r+0x54>
 8009bf2:	4c20      	ldr	r4, [pc, #128]	; (8009c74 <_malloc_r+0xb0>)
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	b91b      	cbnz	r3, 8009c00 <_malloc_r+0x3c>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f000 f8a1 	bl	8009d40 <_sbrk_r>
 8009bfe:	6020      	str	r0, [r4, #0]
 8009c00:	4629      	mov	r1, r5
 8009c02:	4630      	mov	r0, r6
 8009c04:	f000 f89c 	bl	8009d40 <_sbrk_r>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d124      	bne.n	8009c56 <_malloc_r+0x92>
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	6033      	str	r3, [r6, #0]
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 fb44 	bl	800a29e <__malloc_unlock>
 8009c16:	e7e4      	b.n	8009be2 <_malloc_r+0x1e>
 8009c18:	680b      	ldr	r3, [r1, #0]
 8009c1a:	1b5b      	subs	r3, r3, r5
 8009c1c:	d418      	bmi.n	8009c50 <_malloc_r+0x8c>
 8009c1e:	2b0b      	cmp	r3, #11
 8009c20:	d90f      	bls.n	8009c42 <_malloc_r+0x7e>
 8009c22:	600b      	str	r3, [r1, #0]
 8009c24:	50cd      	str	r5, [r1, r3]
 8009c26:	18cc      	adds	r4, r1, r3
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fb38 	bl	800a29e <__malloc_unlock>
 8009c2e:	f104 000b 	add.w	r0, r4, #11
 8009c32:	1d23      	adds	r3, r4, #4
 8009c34:	f020 0007 	bic.w	r0, r0, #7
 8009c38:	1ac3      	subs	r3, r0, r3
 8009c3a:	d0d3      	beq.n	8009be4 <_malloc_r+0x20>
 8009c3c:	425a      	negs	r2, r3
 8009c3e:	50e2      	str	r2, [r4, r3]
 8009c40:	e7d0      	b.n	8009be4 <_malloc_r+0x20>
 8009c42:	428c      	cmp	r4, r1
 8009c44:	684b      	ldr	r3, [r1, #4]
 8009c46:	bf16      	itet	ne
 8009c48:	6063      	strne	r3, [r4, #4]
 8009c4a:	6013      	streq	r3, [r2, #0]
 8009c4c:	460c      	movne	r4, r1
 8009c4e:	e7eb      	b.n	8009c28 <_malloc_r+0x64>
 8009c50:	460c      	mov	r4, r1
 8009c52:	6849      	ldr	r1, [r1, #4]
 8009c54:	e7cc      	b.n	8009bf0 <_malloc_r+0x2c>
 8009c56:	1cc4      	adds	r4, r0, #3
 8009c58:	f024 0403 	bic.w	r4, r4, #3
 8009c5c:	42a0      	cmp	r0, r4
 8009c5e:	d005      	beq.n	8009c6c <_malloc_r+0xa8>
 8009c60:	1a21      	subs	r1, r4, r0
 8009c62:	4630      	mov	r0, r6
 8009c64:	f000 f86c 	bl	8009d40 <_sbrk_r>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d0cf      	beq.n	8009c0c <_malloc_r+0x48>
 8009c6c:	6025      	str	r5, [r4, #0]
 8009c6e:	e7db      	b.n	8009c28 <_malloc_r+0x64>
 8009c70:	24000094 	.word	0x24000094
 8009c74:	24000098 	.word	0x24000098

08009c78 <_puts_r>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	460e      	mov	r6, r1
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	b118      	cbz	r0, 8009c88 <_puts_r+0x10>
 8009c80:	6983      	ldr	r3, [r0, #24]
 8009c82:	b90b      	cbnz	r3, 8009c88 <_puts_r+0x10>
 8009c84:	f000 fa1c 	bl	800a0c0 <__sinit>
 8009c88:	69ab      	ldr	r3, [r5, #24]
 8009c8a:	68ac      	ldr	r4, [r5, #8]
 8009c8c:	b913      	cbnz	r3, 8009c94 <_puts_r+0x1c>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 fa16 	bl	800a0c0 <__sinit>
 8009c94:	4b23      	ldr	r3, [pc, #140]	; (8009d24 <_puts_r+0xac>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	d117      	bne.n	8009cca <_puts_r+0x52>
 8009c9a:	686c      	ldr	r4, [r5, #4]
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	071b      	lsls	r3, r3, #28
 8009ca0:	d51d      	bpl.n	8009cde <_puts_r+0x66>
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	b1db      	cbz	r3, 8009cde <_puts_r+0x66>
 8009ca6:	3e01      	subs	r6, #1
 8009ca8:	68a3      	ldr	r3, [r4, #8]
 8009caa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	b9e9      	cbnz	r1, 8009cf0 <_puts_r+0x78>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	da2e      	bge.n	8009d16 <_puts_r+0x9e>
 8009cb8:	4622      	mov	r2, r4
 8009cba:	210a      	movs	r1, #10
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 f84f 	bl	8009d60 <__swbuf_r>
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d011      	beq.n	8009cea <_puts_r+0x72>
 8009cc6:	200a      	movs	r0, #10
 8009cc8:	e011      	b.n	8009cee <_puts_r+0x76>
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <_puts_r+0xb0>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	d101      	bne.n	8009cd4 <_puts_r+0x5c>
 8009cd0:	68ac      	ldr	r4, [r5, #8]
 8009cd2:	e7e3      	b.n	8009c9c <_puts_r+0x24>
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <_puts_r+0xb4>)
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	bf08      	it	eq
 8009cda:	68ec      	ldreq	r4, [r5, #12]
 8009cdc:	e7de      	b.n	8009c9c <_puts_r+0x24>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f000 f88f 	bl	8009e04 <__swsetup_r>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d0dd      	beq.n	8009ca6 <_puts_r+0x2e>
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	da04      	bge.n	8009cfe <_puts_r+0x86>
 8009cf4:	69a2      	ldr	r2, [r4, #24]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	dc06      	bgt.n	8009d08 <_puts_r+0x90>
 8009cfa:	290a      	cmp	r1, #10
 8009cfc:	d004      	beq.n	8009d08 <_puts_r+0x90>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	6022      	str	r2, [r4, #0]
 8009d04:	7019      	strb	r1, [r3, #0]
 8009d06:	e7cf      	b.n	8009ca8 <_puts_r+0x30>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 f828 	bl	8009d60 <__swbuf_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d1c9      	bne.n	8009ca8 <_puts_r+0x30>
 8009d14:	e7e9      	b.n	8009cea <_puts_r+0x72>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	200a      	movs	r0, #10
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	7018      	strb	r0, [r3, #0]
 8009d20:	e7e5      	b.n	8009cee <_puts_r+0x76>
 8009d22:	bf00      	nop
 8009d24:	0800acbc 	.word	0x0800acbc
 8009d28:	0800acdc 	.word	0x0800acdc
 8009d2c:	0800ac9c 	.word	0x0800ac9c

08009d30 <puts>:
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <puts+0xc>)
 8009d32:	4601      	mov	r1, r0
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f7ff bf9f 	b.w	8009c78 <_puts_r>
 8009d3a:	bf00      	nop
 8009d3c:	24000010 	.word	0x24000010

08009d40 <_sbrk_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4c06      	ldr	r4, [pc, #24]	; (8009d5c <_sbrk_r+0x1c>)
 8009d44:	2300      	movs	r3, #0
 8009d46:	4605      	mov	r5, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	f7f7 fb12 	bl	8001374 <_sbrk>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_sbrk_r+0x1a>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_sbrk_r+0x1a>
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	24000ae0 	.word	0x24000ae0

08009d60 <__swbuf_r>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	460e      	mov	r6, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	4605      	mov	r5, r0
 8009d68:	b118      	cbz	r0, 8009d72 <__swbuf_r+0x12>
 8009d6a:	6983      	ldr	r3, [r0, #24]
 8009d6c:	b90b      	cbnz	r3, 8009d72 <__swbuf_r+0x12>
 8009d6e:	f000 f9a7 	bl	800a0c0 <__sinit>
 8009d72:	4b21      	ldr	r3, [pc, #132]	; (8009df8 <__swbuf_r+0x98>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	d12a      	bne.n	8009dce <__swbuf_r+0x6e>
 8009d78:	686c      	ldr	r4, [r5, #4]
 8009d7a:	69a3      	ldr	r3, [r4, #24]
 8009d7c:	60a3      	str	r3, [r4, #8]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	071a      	lsls	r2, r3, #28
 8009d82:	d52e      	bpl.n	8009de2 <__swbuf_r+0x82>
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	b363      	cbz	r3, 8009de2 <__swbuf_r+0x82>
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	6820      	ldr	r0, [r4, #0]
 8009d8c:	1ac0      	subs	r0, r0, r3
 8009d8e:	6963      	ldr	r3, [r4, #20]
 8009d90:	b2f6      	uxtb	r6, r6
 8009d92:	4283      	cmp	r3, r0
 8009d94:	4637      	mov	r7, r6
 8009d96:	dc04      	bgt.n	8009da2 <__swbuf_r+0x42>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f000 f926 	bl	8009fec <_fflush_r>
 8009da0:	bb28      	cbnz	r0, 8009dee <__swbuf_r+0x8e>
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	60a3      	str	r3, [r4, #8]
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	701e      	strb	r6, [r3, #0]
 8009db0:	6963      	ldr	r3, [r4, #20]
 8009db2:	3001      	adds	r0, #1
 8009db4:	4283      	cmp	r3, r0
 8009db6:	d004      	beq.n	8009dc2 <__swbuf_r+0x62>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	07db      	lsls	r3, r3, #31
 8009dbc:	d519      	bpl.n	8009df2 <__swbuf_r+0x92>
 8009dbe:	2e0a      	cmp	r6, #10
 8009dc0:	d117      	bne.n	8009df2 <__swbuf_r+0x92>
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f000 f911 	bl	8009fec <_fflush_r>
 8009dca:	b190      	cbz	r0, 8009df2 <__swbuf_r+0x92>
 8009dcc:	e00f      	b.n	8009dee <__swbuf_r+0x8e>
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <__swbuf_r+0x9c>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d101      	bne.n	8009dd8 <__swbuf_r+0x78>
 8009dd4:	68ac      	ldr	r4, [r5, #8]
 8009dd6:	e7d0      	b.n	8009d7a <__swbuf_r+0x1a>
 8009dd8:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <__swbuf_r+0xa0>)
 8009dda:	429c      	cmp	r4, r3
 8009ddc:	bf08      	it	eq
 8009dde:	68ec      	ldreq	r4, [r5, #12]
 8009de0:	e7cb      	b.n	8009d7a <__swbuf_r+0x1a>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4628      	mov	r0, r5
 8009de6:	f000 f80d 	bl	8009e04 <__swsetup_r>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d0cc      	beq.n	8009d88 <__swbuf_r+0x28>
 8009dee:	f04f 37ff 	mov.w	r7, #4294967295
 8009df2:	4638      	mov	r0, r7
 8009df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df6:	bf00      	nop
 8009df8:	0800acbc 	.word	0x0800acbc
 8009dfc:	0800acdc 	.word	0x0800acdc
 8009e00:	0800ac9c 	.word	0x0800ac9c

08009e04 <__swsetup_r>:
 8009e04:	4b32      	ldr	r3, [pc, #200]	; (8009ed0 <__swsetup_r+0xcc>)
 8009e06:	b570      	push	{r4, r5, r6, lr}
 8009e08:	681d      	ldr	r5, [r3, #0]
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	b125      	cbz	r5, 8009e1a <__swsetup_r+0x16>
 8009e10:	69ab      	ldr	r3, [r5, #24]
 8009e12:	b913      	cbnz	r3, 8009e1a <__swsetup_r+0x16>
 8009e14:	4628      	mov	r0, r5
 8009e16:	f000 f953 	bl	800a0c0 <__sinit>
 8009e1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ed4 <__swsetup_r+0xd0>)
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	d10f      	bne.n	8009e40 <__swsetup_r+0x3c>
 8009e20:	686c      	ldr	r4, [r5, #4]
 8009e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	0715      	lsls	r5, r2, #28
 8009e2a:	d42c      	bmi.n	8009e86 <__swsetup_r+0x82>
 8009e2c:	06d0      	lsls	r0, r2, #27
 8009e2e:	d411      	bmi.n	8009e54 <__swsetup_r+0x50>
 8009e30:	2209      	movs	r2, #9
 8009e32:	6032      	str	r2, [r6, #0]
 8009e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3e:	e03e      	b.n	8009ebe <__swsetup_r+0xba>
 8009e40:	4b25      	ldr	r3, [pc, #148]	; (8009ed8 <__swsetup_r+0xd4>)
 8009e42:	429c      	cmp	r4, r3
 8009e44:	d101      	bne.n	8009e4a <__swsetup_r+0x46>
 8009e46:	68ac      	ldr	r4, [r5, #8]
 8009e48:	e7eb      	b.n	8009e22 <__swsetup_r+0x1e>
 8009e4a:	4b24      	ldr	r3, [pc, #144]	; (8009edc <__swsetup_r+0xd8>)
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	bf08      	it	eq
 8009e50:	68ec      	ldreq	r4, [r5, #12]
 8009e52:	e7e6      	b.n	8009e22 <__swsetup_r+0x1e>
 8009e54:	0751      	lsls	r1, r2, #29
 8009e56:	d512      	bpl.n	8009e7e <__swsetup_r+0x7a>
 8009e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e5a:	b141      	cbz	r1, 8009e6e <__swsetup_r+0x6a>
 8009e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e60:	4299      	cmp	r1, r3
 8009e62:	d002      	beq.n	8009e6a <__swsetup_r+0x66>
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7ff fe5f 	bl	8009b28 <_free_r>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	2300      	movs	r3, #0
 8009e78:	6063      	str	r3, [r4, #4]
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f043 0308 	orr.w	r3, r3, #8
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	b94b      	cbnz	r3, 8009e9e <__swsetup_r+0x9a>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e94:	d003      	beq.n	8009e9e <__swsetup_r+0x9a>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f000 f9bf 	bl	800a21c <__smakebuf_r>
 8009e9e:	89a2      	ldrh	r2, [r4, #12]
 8009ea0:	f012 0301 	ands.w	r3, r2, #1
 8009ea4:	d00c      	beq.n	8009ec0 <__swsetup_r+0xbc>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60a3      	str	r3, [r4, #8]
 8009eaa:	6963      	ldr	r3, [r4, #20]
 8009eac:	425b      	negs	r3, r3
 8009eae:	61a3      	str	r3, [r4, #24]
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	b953      	cbnz	r3, 8009eca <__swsetup_r+0xc6>
 8009eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ebc:	d1ba      	bne.n	8009e34 <__swsetup_r+0x30>
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
 8009ec0:	0792      	lsls	r2, r2, #30
 8009ec2:	bf58      	it	pl
 8009ec4:	6963      	ldrpl	r3, [r4, #20]
 8009ec6:	60a3      	str	r3, [r4, #8]
 8009ec8:	e7f2      	b.n	8009eb0 <__swsetup_r+0xac>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e7f7      	b.n	8009ebe <__swsetup_r+0xba>
 8009ece:	bf00      	nop
 8009ed0:	24000010 	.word	0x24000010
 8009ed4:	0800acbc 	.word	0x0800acbc
 8009ed8:	0800acdc 	.word	0x0800acdc
 8009edc:	0800ac9c 	.word	0x0800ac9c

08009ee0 <__sflush_r>:
 8009ee0:	898a      	ldrh	r2, [r1, #12]
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	0710      	lsls	r0, r2, #28
 8009eea:	460c      	mov	r4, r1
 8009eec:	d458      	bmi.n	8009fa0 <__sflush_r+0xc0>
 8009eee:	684b      	ldr	r3, [r1, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dc05      	bgt.n	8009f00 <__sflush_r+0x20>
 8009ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dc02      	bgt.n	8009f00 <__sflush_r+0x20>
 8009efa:	2000      	movs	r0, #0
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f02:	2e00      	cmp	r6, #0
 8009f04:	d0f9      	beq.n	8009efa <__sflush_r+0x1a>
 8009f06:	2300      	movs	r3, #0
 8009f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f0c:	682f      	ldr	r7, [r5, #0]
 8009f0e:	6a21      	ldr	r1, [r4, #32]
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	d032      	beq.n	8009f7a <__sflush_r+0x9a>
 8009f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	075a      	lsls	r2, r3, #29
 8009f1a:	d505      	bpl.n	8009f28 <__sflush_r+0x48>
 8009f1c:	6863      	ldr	r3, [r4, #4]
 8009f1e:	1ac0      	subs	r0, r0, r3
 8009f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f22:	b10b      	cbz	r3, 8009f28 <__sflush_r+0x48>
 8009f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f26:	1ac0      	subs	r0, r0, r3
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f2e:	6a21      	ldr	r1, [r4, #32]
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b0      	blx	r6
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	d106      	bne.n	8009f48 <__sflush_r+0x68>
 8009f3a:	6829      	ldr	r1, [r5, #0]
 8009f3c:	291d      	cmp	r1, #29
 8009f3e:	d848      	bhi.n	8009fd2 <__sflush_r+0xf2>
 8009f40:	4a29      	ldr	r2, [pc, #164]	; (8009fe8 <__sflush_r+0x108>)
 8009f42:	40ca      	lsrs	r2, r1
 8009f44:	07d6      	lsls	r6, r2, #31
 8009f46:	d544      	bpl.n	8009fd2 <__sflush_r+0xf2>
 8009f48:	2200      	movs	r2, #0
 8009f4a:	6062      	str	r2, [r4, #4]
 8009f4c:	04d9      	lsls	r1, r3, #19
 8009f4e:	6922      	ldr	r2, [r4, #16]
 8009f50:	6022      	str	r2, [r4, #0]
 8009f52:	d504      	bpl.n	8009f5e <__sflush_r+0x7e>
 8009f54:	1c42      	adds	r2, r0, #1
 8009f56:	d101      	bne.n	8009f5c <__sflush_r+0x7c>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b903      	cbnz	r3, 8009f5e <__sflush_r+0x7e>
 8009f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8009f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f60:	602f      	str	r7, [r5, #0]
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d0c9      	beq.n	8009efa <__sflush_r+0x1a>
 8009f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f6a:	4299      	cmp	r1, r3
 8009f6c:	d002      	beq.n	8009f74 <__sflush_r+0x94>
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7ff fdda 	bl	8009b28 <_free_r>
 8009f74:	2000      	movs	r0, #0
 8009f76:	6360      	str	r0, [r4, #52]	; 0x34
 8009f78:	e7c0      	b.n	8009efc <__sflush_r+0x1c>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b0      	blx	r6
 8009f80:	1c41      	adds	r1, r0, #1
 8009f82:	d1c8      	bne.n	8009f16 <__sflush_r+0x36>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0c5      	beq.n	8009f16 <__sflush_r+0x36>
 8009f8a:	2b1d      	cmp	r3, #29
 8009f8c:	d001      	beq.n	8009f92 <__sflush_r+0xb2>
 8009f8e:	2b16      	cmp	r3, #22
 8009f90:	d101      	bne.n	8009f96 <__sflush_r+0xb6>
 8009f92:	602f      	str	r7, [r5, #0]
 8009f94:	e7b1      	b.n	8009efa <__sflush_r+0x1a>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	e7ad      	b.n	8009efc <__sflush_r+0x1c>
 8009fa0:	690f      	ldr	r7, [r1, #16]
 8009fa2:	2f00      	cmp	r7, #0
 8009fa4:	d0a9      	beq.n	8009efa <__sflush_r+0x1a>
 8009fa6:	0793      	lsls	r3, r2, #30
 8009fa8:	680e      	ldr	r6, [r1, #0]
 8009faa:	bf08      	it	eq
 8009fac:	694b      	ldreq	r3, [r1, #20]
 8009fae:	600f      	str	r7, [r1, #0]
 8009fb0:	bf18      	it	ne
 8009fb2:	2300      	movne	r3, #0
 8009fb4:	eba6 0807 	sub.w	r8, r6, r7
 8009fb8:	608b      	str	r3, [r1, #8]
 8009fba:	f1b8 0f00 	cmp.w	r8, #0
 8009fbe:	dd9c      	ble.n	8009efa <__sflush_r+0x1a>
 8009fc0:	4643      	mov	r3, r8
 8009fc2:	463a      	mov	r2, r7
 8009fc4:	6a21      	ldr	r1, [r4, #32]
 8009fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b0      	blx	r6
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	dc06      	bgt.n	8009fde <__sflush_r+0xfe>
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	e78e      	b.n	8009efc <__sflush_r+0x1c>
 8009fde:	4407      	add	r7, r0
 8009fe0:	eba8 0800 	sub.w	r8, r8, r0
 8009fe4:	e7e9      	b.n	8009fba <__sflush_r+0xda>
 8009fe6:	bf00      	nop
 8009fe8:	20400001 	.word	0x20400001

08009fec <_fflush_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	690b      	ldr	r3, [r1, #16]
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	b1db      	cbz	r3, 800a02e <_fflush_r+0x42>
 8009ff6:	b118      	cbz	r0, 800a000 <_fflush_r+0x14>
 8009ff8:	6983      	ldr	r3, [r0, #24]
 8009ffa:	b90b      	cbnz	r3, 800a000 <_fflush_r+0x14>
 8009ffc:	f000 f860 	bl	800a0c0 <__sinit>
 800a000:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <_fflush_r+0x48>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d109      	bne.n	800a01a <_fflush_r+0x2e>
 800a006:	686c      	ldr	r4, [r5, #4]
 800a008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00c:	b17b      	cbz	r3, 800a02e <_fflush_r+0x42>
 800a00e:	4621      	mov	r1, r4
 800a010:	4628      	mov	r0, r5
 800a012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a016:	f7ff bf63 	b.w	8009ee0 <__sflush_r>
 800a01a:	4b07      	ldr	r3, [pc, #28]	; (800a038 <_fflush_r+0x4c>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d101      	bne.n	800a024 <_fflush_r+0x38>
 800a020:	68ac      	ldr	r4, [r5, #8]
 800a022:	e7f1      	b.n	800a008 <_fflush_r+0x1c>
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <_fflush_r+0x50>)
 800a026:	429c      	cmp	r4, r3
 800a028:	bf08      	it	eq
 800a02a:	68ec      	ldreq	r4, [r5, #12]
 800a02c:	e7ec      	b.n	800a008 <_fflush_r+0x1c>
 800a02e:	2000      	movs	r0, #0
 800a030:	bd38      	pop	{r3, r4, r5, pc}
 800a032:	bf00      	nop
 800a034:	0800acbc 	.word	0x0800acbc
 800a038:	0800acdc 	.word	0x0800acdc
 800a03c:	0800ac9c 	.word	0x0800ac9c

0800a040 <std>:
 800a040:	2300      	movs	r3, #0
 800a042:	b510      	push	{r4, lr}
 800a044:	4604      	mov	r4, r0
 800a046:	e9c0 3300 	strd	r3, r3, [r0]
 800a04a:	6083      	str	r3, [r0, #8]
 800a04c:	8181      	strh	r1, [r0, #12]
 800a04e:	6643      	str	r3, [r0, #100]	; 0x64
 800a050:	81c2      	strh	r2, [r0, #14]
 800a052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a056:	6183      	str	r3, [r0, #24]
 800a058:	4619      	mov	r1, r3
 800a05a:	2208      	movs	r2, #8
 800a05c:	305c      	adds	r0, #92	; 0x5c
 800a05e:	f7ff fd4d 	bl	8009afc <memset>
 800a062:	4b05      	ldr	r3, [pc, #20]	; (800a078 <std+0x38>)
 800a064:	6263      	str	r3, [r4, #36]	; 0x24
 800a066:	4b05      	ldr	r3, [pc, #20]	; (800a07c <std+0x3c>)
 800a068:	62a3      	str	r3, [r4, #40]	; 0x28
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <std+0x40>)
 800a06c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a06e:	4b05      	ldr	r3, [pc, #20]	; (800a084 <std+0x44>)
 800a070:	6224      	str	r4, [r4, #32]
 800a072:	6323      	str	r3, [r4, #48]	; 0x30
 800a074:	bd10      	pop	{r4, pc}
 800a076:	bf00      	nop
 800a078:	0800a2a1 	.word	0x0800a2a1
 800a07c:	0800a2c3 	.word	0x0800a2c3
 800a080:	0800a2fb 	.word	0x0800a2fb
 800a084:	0800a31f 	.word	0x0800a31f

0800a088 <_cleanup_r>:
 800a088:	4901      	ldr	r1, [pc, #4]	; (800a090 <_cleanup_r+0x8>)
 800a08a:	f000 b885 	b.w	800a198 <_fwalk_reent>
 800a08e:	bf00      	nop
 800a090:	08009fed 	.word	0x08009fed

0800a094 <__sfmoreglue>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	1e4a      	subs	r2, r1, #1
 800a098:	2568      	movs	r5, #104	; 0x68
 800a09a:	4355      	muls	r5, r2
 800a09c:	460e      	mov	r6, r1
 800a09e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0a2:	f7ff fd8f 	bl	8009bc4 <_malloc_r>
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	b140      	cbz	r0, 800a0bc <__sfmoreglue+0x28>
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	e9c0 1600 	strd	r1, r6, [r0]
 800a0b0:	300c      	adds	r0, #12
 800a0b2:	60a0      	str	r0, [r4, #8]
 800a0b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0b8:	f7ff fd20 	bl	8009afc <memset>
 800a0bc:	4620      	mov	r0, r4
 800a0be:	bd70      	pop	{r4, r5, r6, pc}

0800a0c0 <__sinit>:
 800a0c0:	6983      	ldr	r3, [r0, #24]
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	bb33      	cbnz	r3, 800a116 <__sinit+0x56>
 800a0c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a0cc:	6503      	str	r3, [r0, #80]	; 0x50
 800a0ce:	4b12      	ldr	r3, [pc, #72]	; (800a118 <__sinit+0x58>)
 800a0d0:	4a12      	ldr	r2, [pc, #72]	; (800a11c <__sinit+0x5c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6282      	str	r2, [r0, #40]	; 0x28
 800a0d6:	4298      	cmp	r0, r3
 800a0d8:	bf04      	itt	eq
 800a0da:	2301      	moveq	r3, #1
 800a0dc:	6183      	streq	r3, [r0, #24]
 800a0de:	f000 f81f 	bl	800a120 <__sfp>
 800a0e2:	6060      	str	r0, [r4, #4]
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f000 f81b 	bl	800a120 <__sfp>
 800a0ea:	60a0      	str	r0, [r4, #8]
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 f817 	bl	800a120 <__sfp>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	60e0      	str	r0, [r4, #12]
 800a0f6:	2104      	movs	r1, #4
 800a0f8:	6860      	ldr	r0, [r4, #4]
 800a0fa:	f7ff ffa1 	bl	800a040 <std>
 800a0fe:	2201      	movs	r2, #1
 800a100:	2109      	movs	r1, #9
 800a102:	68a0      	ldr	r0, [r4, #8]
 800a104:	f7ff ff9c 	bl	800a040 <std>
 800a108:	2202      	movs	r2, #2
 800a10a:	2112      	movs	r1, #18
 800a10c:	68e0      	ldr	r0, [r4, #12]
 800a10e:	f7ff ff97 	bl	800a040 <std>
 800a112:	2301      	movs	r3, #1
 800a114:	61a3      	str	r3, [r4, #24]
 800a116:	bd10      	pop	{r4, pc}
 800a118:	0800ac98 	.word	0x0800ac98
 800a11c:	0800a089 	.word	0x0800a089

0800a120 <__sfp>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	4b1b      	ldr	r3, [pc, #108]	; (800a190 <__sfp+0x70>)
 800a124:	681e      	ldr	r6, [r3, #0]
 800a126:	69b3      	ldr	r3, [r6, #24]
 800a128:	4607      	mov	r7, r0
 800a12a:	b913      	cbnz	r3, 800a132 <__sfp+0x12>
 800a12c:	4630      	mov	r0, r6
 800a12e:	f7ff ffc7 	bl	800a0c0 <__sinit>
 800a132:	3648      	adds	r6, #72	; 0x48
 800a134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a138:	3b01      	subs	r3, #1
 800a13a:	d503      	bpl.n	800a144 <__sfp+0x24>
 800a13c:	6833      	ldr	r3, [r6, #0]
 800a13e:	b133      	cbz	r3, 800a14e <__sfp+0x2e>
 800a140:	6836      	ldr	r6, [r6, #0]
 800a142:	e7f7      	b.n	800a134 <__sfp+0x14>
 800a144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a148:	b16d      	cbz	r5, 800a166 <__sfp+0x46>
 800a14a:	3468      	adds	r4, #104	; 0x68
 800a14c:	e7f4      	b.n	800a138 <__sfp+0x18>
 800a14e:	2104      	movs	r1, #4
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ff9f 	bl	800a094 <__sfmoreglue>
 800a156:	6030      	str	r0, [r6, #0]
 800a158:	2800      	cmp	r0, #0
 800a15a:	d1f1      	bne.n	800a140 <__sfp+0x20>
 800a15c:	230c      	movs	r3, #12
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	4604      	mov	r4, r0
 800a162:	4620      	mov	r0, r4
 800a164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a166:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <__sfp+0x74>)
 800a168:	6665      	str	r5, [r4, #100]	; 0x64
 800a16a:	e9c4 5500 	strd	r5, r5, [r4]
 800a16e:	60a5      	str	r5, [r4, #8]
 800a170:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a174:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a178:	2208      	movs	r2, #8
 800a17a:	4629      	mov	r1, r5
 800a17c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a180:	f7ff fcbc 	bl	8009afc <memset>
 800a184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a18c:	e7e9      	b.n	800a162 <__sfp+0x42>
 800a18e:	bf00      	nop
 800a190:	0800ac98 	.word	0x0800ac98
 800a194:	ffff0001 	.word	0xffff0001

0800a198 <_fwalk_reent>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4680      	mov	r8, r0
 800a19e:	4689      	mov	r9, r1
 800a1a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	b914      	cbnz	r4, 800a1ae <_fwalk_reent+0x16>
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a1b2:	3f01      	subs	r7, #1
 800a1b4:	d501      	bpl.n	800a1ba <_fwalk_reent+0x22>
 800a1b6:	6824      	ldr	r4, [r4, #0]
 800a1b8:	e7f5      	b.n	800a1a6 <_fwalk_reent+0xe>
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d907      	bls.n	800a1d0 <_fwalk_reent+0x38>
 800a1c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	d003      	beq.n	800a1d0 <_fwalk_reent+0x38>
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	47c8      	blx	r9
 800a1ce:	4306      	orrs	r6, r0
 800a1d0:	3568      	adds	r5, #104	; 0x68
 800a1d2:	e7ee      	b.n	800a1b2 <_fwalk_reent+0x1a>

0800a1d4 <__swhatbuf_r>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	460e      	mov	r6, r1
 800a1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	b096      	sub	sp, #88	; 0x58
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	461d      	mov	r5, r3
 800a1e4:	da07      	bge.n	800a1f6 <__swhatbuf_r+0x22>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	89b3      	ldrh	r3, [r6, #12]
 800a1ec:	061a      	lsls	r2, r3, #24
 800a1ee:	d410      	bmi.n	800a212 <__swhatbuf_r+0x3e>
 800a1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f4:	e00e      	b.n	800a214 <__swhatbuf_r+0x40>
 800a1f6:	466a      	mov	r2, sp
 800a1f8:	f000 f8b8 	bl	800a36c <_fstat_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	dbf2      	blt.n	800a1e6 <__swhatbuf_r+0x12>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a20a:	425a      	negs	r2, r3
 800a20c:	415a      	adcs	r2, r3
 800a20e:	602a      	str	r2, [r5, #0]
 800a210:	e7ee      	b.n	800a1f0 <__swhatbuf_r+0x1c>
 800a212:	2340      	movs	r3, #64	; 0x40
 800a214:	2000      	movs	r0, #0
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	b016      	add	sp, #88	; 0x58
 800a21a:	bd70      	pop	{r4, r5, r6, pc}

0800a21c <__smakebuf_r>:
 800a21c:	898b      	ldrh	r3, [r1, #12]
 800a21e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a220:	079d      	lsls	r5, r3, #30
 800a222:	4606      	mov	r6, r0
 800a224:	460c      	mov	r4, r1
 800a226:	d507      	bpl.n	800a238 <__smakebuf_r+0x1c>
 800a228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	6123      	str	r3, [r4, #16]
 800a230:	2301      	movs	r3, #1
 800a232:	6163      	str	r3, [r4, #20]
 800a234:	b002      	add	sp, #8
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	ab01      	add	r3, sp, #4
 800a23a:	466a      	mov	r2, sp
 800a23c:	f7ff ffca 	bl	800a1d4 <__swhatbuf_r>
 800a240:	9900      	ldr	r1, [sp, #0]
 800a242:	4605      	mov	r5, r0
 800a244:	4630      	mov	r0, r6
 800a246:	f7ff fcbd 	bl	8009bc4 <_malloc_r>
 800a24a:	b948      	cbnz	r0, 800a260 <__smakebuf_r+0x44>
 800a24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a250:	059a      	lsls	r2, r3, #22
 800a252:	d4ef      	bmi.n	800a234 <__smakebuf_r+0x18>
 800a254:	f023 0303 	bic.w	r3, r3, #3
 800a258:	f043 0302 	orr.w	r3, r3, #2
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	e7e3      	b.n	800a228 <__smakebuf_r+0xc>
 800a260:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <__smakebuf_r+0x7c>)
 800a262:	62b3      	str	r3, [r6, #40]	; 0x28
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	6020      	str	r0, [r4, #0]
 800a268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a26c:	81a3      	strh	r3, [r4, #12]
 800a26e:	9b00      	ldr	r3, [sp, #0]
 800a270:	6163      	str	r3, [r4, #20]
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	6120      	str	r0, [r4, #16]
 800a276:	b15b      	cbz	r3, 800a290 <__smakebuf_r+0x74>
 800a278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 f887 	bl	800a390 <_isatty_r>
 800a282:	b128      	cbz	r0, 800a290 <__smakebuf_r+0x74>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	f043 0301 	orr.w	r3, r3, #1
 800a28e:	81a3      	strh	r3, [r4, #12]
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	431d      	orrs	r5, r3
 800a294:	81a5      	strh	r5, [r4, #12]
 800a296:	e7cd      	b.n	800a234 <__smakebuf_r+0x18>
 800a298:	0800a089 	.word	0x0800a089

0800a29c <__malloc_lock>:
 800a29c:	4770      	bx	lr

0800a29e <__malloc_unlock>:
 800a29e:	4770      	bx	lr

0800a2a0 <__sread>:
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a8:	f000 f894 	bl	800a3d4 <_read_r>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	bfab      	itete	ge
 800a2b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a2b4:	181b      	addge	r3, r3, r0
 800a2b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2ba:	bfac      	ite	ge
 800a2bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2be:	81a3      	strhlt	r3, [r4, #12]
 800a2c0:	bd10      	pop	{r4, pc}

0800a2c2 <__swrite>:
 800a2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	898b      	ldrh	r3, [r1, #12]
 800a2ca:	05db      	lsls	r3, r3, #23
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	4616      	mov	r6, r2
 800a2d2:	d505      	bpl.n	800a2e0 <__swrite+0x1e>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2dc:	f000 f868 	bl	800a3b0 <_lseek_r>
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	463b      	mov	r3, r7
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f6:	f000 b817 	b.w	800a328 <_write_r>

0800a2fa <__sseek>:
 800a2fa:	b510      	push	{r4, lr}
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a302:	f000 f855 	bl	800a3b0 <_lseek_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	bf15      	itete	ne
 800a30c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a30e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a316:	81a3      	strheq	r3, [r4, #12]
 800a318:	bf18      	it	ne
 800a31a:	81a3      	strhne	r3, [r4, #12]
 800a31c:	bd10      	pop	{r4, pc}

0800a31e <__sclose>:
 800a31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a322:	f000 b813 	b.w	800a34c <_close_r>
	...

0800a328 <_write_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4c07      	ldr	r4, [pc, #28]	; (800a348 <_write_r+0x20>)
 800a32c:	4605      	mov	r5, r0
 800a32e:	4608      	mov	r0, r1
 800a330:	4611      	mov	r1, r2
 800a332:	2200      	movs	r2, #0
 800a334:	6022      	str	r2, [r4, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	f7f6 ffcb 	bl	80012d2 <_write>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_write_r+0x1e>
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	b103      	cbz	r3, 800a346 <_write_r+0x1e>
 800a344:	602b      	str	r3, [r5, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	24000ae0 	.word	0x24000ae0

0800a34c <_close_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4c06      	ldr	r4, [pc, #24]	; (800a368 <_close_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4605      	mov	r5, r0
 800a354:	4608      	mov	r0, r1
 800a356:	6023      	str	r3, [r4, #0]
 800a358:	f7f6 ffd7 	bl	800130a <_close>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_close_r+0x1a>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	b103      	cbz	r3, 800a366 <_close_r+0x1a>
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	24000ae0 	.word	0x24000ae0

0800a36c <_fstat_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4c07      	ldr	r4, [pc, #28]	; (800a38c <_fstat_r+0x20>)
 800a370:	2300      	movs	r3, #0
 800a372:	4605      	mov	r5, r0
 800a374:	4608      	mov	r0, r1
 800a376:	4611      	mov	r1, r2
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	f7f6 ffd2 	bl	8001322 <_fstat>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d102      	bne.n	800a388 <_fstat_r+0x1c>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	b103      	cbz	r3, 800a388 <_fstat_r+0x1c>
 800a386:	602b      	str	r3, [r5, #0]
 800a388:	bd38      	pop	{r3, r4, r5, pc}
 800a38a:	bf00      	nop
 800a38c:	24000ae0 	.word	0x24000ae0

0800a390 <_isatty_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4c06      	ldr	r4, [pc, #24]	; (800a3ac <_isatty_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4605      	mov	r5, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	f7f6 ffd1 	bl	8001342 <_isatty>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_isatty_r+0x1a>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_isatty_r+0x1a>
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	24000ae0 	.word	0x24000ae0

0800a3b0 <_lseek_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4c07      	ldr	r4, [pc, #28]	; (800a3d0 <_lseek_r+0x20>)
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	6022      	str	r2, [r4, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f7f6 ffca 	bl	8001358 <_lseek>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_lseek_r+0x1e>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_lseek_r+0x1e>
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	24000ae0 	.word	0x24000ae0

0800a3d4 <_read_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4c07      	ldr	r4, [pc, #28]	; (800a3f4 <_read_r+0x20>)
 800a3d8:	4605      	mov	r5, r0
 800a3da:	4608      	mov	r0, r1
 800a3dc:	4611      	mov	r1, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f7f6 ff58 	bl	8001298 <_read>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_read_r+0x1e>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_read_r+0x1e>
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	24000ae0 	.word	0x24000ae0

0800a3f8 <_init>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr

0800a404 <_fini>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr
