
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7cc  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  0800aa7c  0800aa7c  0001aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b550  0800b550  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b550  0800b550  0001b550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b558  0800b558  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800b560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  24000074  0800b5d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240012ec  0800b5d4  000212ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002491c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b69  00000000  00000000  000449be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001710  00000000  00000000  00048528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00049c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032951  00000000  00000000  0004b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b46  00000000  00000000  0007db11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015747c  00000000  00000000  00092657  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001e9ad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000693c  00000000  00000000  001e9bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000b35  00000000  00000000  001f04fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800aa64 	.word	0x0800aa64

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800aa64 	.word	0x0800aa64

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f84f 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f935 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fb6f 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fb35 	bl	8000c70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fadf 	bl	8000bc8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fb29 	bl	8000c60 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f9fb 	bl	8000a08 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 fa71 	bl	8000af8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 faa1 	bl	8000b5c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  s_ref = init_nco(250. / 4550., 0);
  s_ref = init_nco(250. / 4000., 0);
 800061a:	eddf 0a87 	vldr	s1, [pc, #540]	; 8000838 <main+0x248>
 800061e:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800083c <main+0x24c>
 8000622:	f000 fc91 	bl	8000f48 <init_nco>
 8000626:	62b8      	str	r0, [r7, #40]	; 0x28
  s_2 = init_nco(251. / 4000., 0);
 8000628:	eddf 0a83 	vldr	s1, [pc, #524]	; 8000838 <main+0x248>
 800062c:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8000840 <main+0x250>
 8000630:	f000 fc8a 	bl	8000f48 <init_nco>
 8000634:	6278      	str	r0, [r7, #36]	; 0x24

  sin_buffer = calloc(ADC_BUF_SIZE, sizeof(float));
 8000636:	2104      	movs	r1, #4
 8000638:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800063c:	f009 fd46 	bl	800a0cc <calloc>
 8000640:	4603      	mov	r3, r0
 8000642:	623b      	str	r3, [r7, #32]
  sin2_buffer = calloc(ADC_BUF_SIZE, sizeof(float));
 8000644:	2104      	movs	r1, #4
 8000646:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800064a:	f009 fd3f 	bl	800a0cc <calloc>
 800064e:	4603      	mov	r3, r0
 8000650:	61fb      	str	r3, [r7, #28]
  extra_buff = calloc(ADC_BUF_SIZE, sizeof(uint16_t));
 8000652:	2102      	movs	r1, #2
 8000654:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000658:	f009 fd38 	bl	800a0cc <calloc>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b78      	ldr	r3, [pc, #480]	; (8000844 <main+0x254>)
 8000662:	601a      	str	r2, [r3, #0]
  dac_test = calloc(ADC_BUF_SIZE, sizeof(uint16_t));
 8000664:	2102      	movs	r1, #2
 8000666:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800066a:	f009 fd2f 	bl	800a0cc <calloc>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b75      	ldr	r3, [pc, #468]	; (8000848 <main+0x258>)
 8000674:	601a      	str	r2, [r3, #0]
  adc_float = calloc(ADC_BUF_SIZE, sizeof(float));
 8000676:	2104      	movs	r1, #4
 8000678:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800067c:	f009 fd26 	bl	800a0cc <calloc>
 8000680:	4603      	mov	r3, r0
 8000682:	61bb      	str	r3, [r7, #24]
  mixed_out = calloc(ADC_BUF_SIZE, sizeof(float));
 8000684:	2104      	movs	r1, #4
 8000686:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800068a:	f009 fd1f 	bl	800a0cc <calloc>
 800068e:	4603      	mov	r3, r0
 8000690:	617b      	str	r3, [r7, #20]
  fir_out = calloc(ADC_BUF_SIZE, sizeof(float));
 8000692:	2104      	movs	r1, #4
 8000694:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000698:	f009 fd18 	bl	800a0cc <calloc>
 800069c:	4603      	mov	r3, r0
 800069e:	613b      	str	r3, [r7, #16]
  fir_state = malloc(sizeof(float)*(ADC_BUF_SIZE+fir_coefs_len-1));
 80006a0:	237a      	movs	r3, #122	; 0x7a
 80006a2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f009 fd55 	bl	800a158 <malloc>
 80006ae:	4603      	mov	r3, r0
 80006b0:	60fb      	str	r3, [r7, #12]

  if ((sin_buffer == NULL) || (extra_buff == NULL)) {
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <main+0xd0>
 80006b8:	4b62      	ldr	r3, [pc, #392]	; (8000844 <main+0x254>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d105      	bne.n	80006cc <main+0xdc>
	  printf("Failed to allocate memory for arrays\n");
 80006c0:	4862      	ldr	r0, [pc, #392]	; (800084c <main+0x25c>)
 80006c2:	f009 fe6b 	bl	800a39c <puts>
	  exit(EXIT_FAILURE);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f009 fd0e 	bl	800a0e8 <exit>
  }

  //Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_SIZE);
 80006cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d0:	495f      	ldr	r1, [pc, #380]	; (8000850 <main+0x260>)
 80006d2:	4860      	ldr	r0, [pc, #384]	; (8000854 <main+0x264>)
 80006d4:	f001 fbd6 	bl	8001e84 <HAL_ADC_Start_DMA>

  //Start TIM6 and DAC with DMA
  HAL_TIM_Base_Start(&htim6);
 80006d8:	485f      	ldr	r0, [pc, #380]	; (8000858 <main+0x268>)
 80006da:	f007 ffa3 	bl	8008624 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	485e      	ldr	r0, [pc, #376]	; (800085c <main+0x26c>)
 80006e2:	f002 fb00 	bl	8002ce6 <HAL_DAC_Start>

//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)adc_buf, ADC_BUF_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_test, ADC_BUF_SIZE, DAC_ALIGN_12B_R);
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <main+0x258>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f2:	2100      	movs	r1, #0
 80006f4:	4859      	ldr	r0, [pc, #356]	; (800085c <main+0x26c>)
 80006f6:	f002 fb49 	bl	8002d8c <HAL_DAC_Start_DMA>

  arm_fir_init_f32(&fir_struct, fir_coefs_len, fir_coefs, fir_state, ADC_BUF_SIZE);
 80006fa:	237a      	movs	r3, #122	; 0x7a
 80006fc:	b299      	uxth	r1, r3
 80006fe:	4638      	mov	r0, r7
 8000700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4a55      	ldr	r2, [pc, #340]	; (8000860 <main+0x270>)
 800070a:	f009 fa5f 	bl	8009bcc <arm_fir_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800070e:	2101      	movs	r1, #1
 8000710:	4854      	ldr	r0, [pc, #336]	; (8000864 <main+0x274>)
 8000712:	f005 f916 	bl	8005942 <HAL_GPIO_TogglePin>
	nco_get_samples(s_ref, sin_buffer, ADC_BUF_SIZE);
 8000716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071a:	6a39      	ldr	r1, [r7, #32]
 800071c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800071e:	f000 fc5b 	bl	8000fd8 <nco_get_samples>
	nco_get_samples(s_2, sin2_buffer, ADC_BUF_SIZE);
 8000722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000726:	69f9      	ldr	r1, [r7, #28]
 8000728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800072a:	f000 fc55 	bl	8000fd8 <nco_get_samples>
	for (i = 0; i < ADC_BUF_SIZE; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000732:	e038      	b.n	80007a6 <main+0x1b6>
		adc_float[i] = (adc_buf[i] * 3.3) / 4095.;
 8000734:	4a46      	ldr	r2, [pc, #280]	; (8000850 <main+0x260>)
 8000736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073c:	ee07 3a90 	vmov	s15, r3
 8000740:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000744:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000818 <main+0x228>
 8000748:	ee27 6b06 	vmul.f64	d6, d7, d6
 800074c:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8000820 <main+0x230>
 8000750:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	4413      	add	r3, r2
 800075c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000760:	edc3 7a00 	vstr	s15, [r3]
//		mixed_out[i] = sin_buffer[i] * adc_float[i];
		mixed_out[i] = sin_buffer[i] * sin2_buffer[i];
 8000764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	6a3a      	ldr	r2, [r7, #32]
 800076a:	4413      	add	r3, r2
 800076c:	ed93 7a00 	vldr	s14, [r3]
 8000770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	69fa      	ldr	r2, [r7, #28]
 8000776:	4413      	add	r3, r2
 8000778:	edd3 7a00 	vldr	s15, [r3]
 800077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	4413      	add	r3, r2
 8000784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000788:	edc3 7a00 	vstr	s15, [r3]
//		dac_test[i] = (unsigned int)((sin_buffer[i] * 2048.) / 2. + 2047);
		dac_test[i] = adc_buf[i];//adc_float[i]*4095 / 3.3;
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <main+0x258>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	492e      	ldr	r1, [pc, #184]	; (8000850 <main+0x260>)
 8000798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800079a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800079e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ADC_BUF_SIZE; i++) {
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	3301      	adds	r3, #1
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007ac:	dbc2      	blt.n	8000734 <main+0x144>
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007ae:	2101      	movs	r1, #1
 80007b0:	482c      	ldr	r0, [pc, #176]	; (8000864 <main+0x274>)
 80007b2:	f005 f8c6 	bl	8005942 <HAL_GPIO_TogglePin>

	arm_fir_f32(&fir_struct, mixed_out, fir_out, ADC_BUF_SIZE);
 80007b6:	4638      	mov	r0, r7
 80007b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	6979      	ldr	r1, [r7, #20]
 80007c0:	f009 fa16 	bl	8009bf0 <arm_fir_f32>
	for (i = 0; i < ADC_BUF_SIZE; i++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c8:	e021      	b.n	800080e <main+0x21e>
		extra_buff[i] = (fir_out[i] * 2048.) / 2 + 2047;
 80007ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	4413      	add	r3, r2
 80007d2:	edd3 7a00 	vldr	s15, [r3]
 80007d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007da:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000828 <main+0x238>
 80007de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80007e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007ea:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000830 <main+0x240>
 80007ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <main+0x254>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000800:	ee17 2a90 	vmov	r2, s15
 8000804:	b292      	uxth	r2, r2
 8000806:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ADC_BUF_SIZE; i++) {
 8000808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080a:	3301      	adds	r3, #1
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000814:	dbd9      	blt.n	80007ca <main+0x1da>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000816:	e77a      	b.n	800070e <main+0x11e>
 8000818:	66666666 	.word	0x66666666
 800081c:	400a6666 	.word	0x400a6666
 8000820:	00000000 	.word	0x00000000
 8000824:	40affe00 	.word	0x40affe00
 8000828:	00000000 	.word	0x00000000
 800082c:	40a00000 	.word	0x40a00000
 8000830:	00000000 	.word	0x00000000
 8000834:	409ffc00 	.word	0x409ffc00
 8000838:	00000000 	.word	0x00000000
 800083c:	3d800000 	.word	0x3d800000
 8000840:	3d808312 	.word	0x3d808312
 8000844:	24000090 	.word	0x24000090
 8000848:	24000094 	.word	0x24000094
 800084c:	0800aa7c 	.word	0x0800aa7c
 8000850:	240002e4 	.word	0x240002e4
 8000854:	240001bc 	.word	0x240001bc
 8000858:	24000298 	.word	0x24000298
 800085c:	240000a4 	.word	0x240000a4
 8000860:	0800aad4 	.word	0x0800aad4
 8000864:	58020400 	.word	0x58020400

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0ca      	sub	sp, #296	; 0x128
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000872:	224c      	movs	r2, #76	; 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fc76 	bl	800a168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000880:	2220      	movs	r2, #32
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f009 fc6f 	bl	800a168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4618      	mov	r0, r3
 800088e:	23b8      	movs	r3, #184	; 0xb8
 8000890:	461a      	mov	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f009 fc68 	bl	800a168 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000898:	2004      	movs	r0, #4
 800089a:	f005 f86d 	bl	8005978 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	4b55      	ldr	r3, [pc, #340]	; (80009fc <SystemClock_Config+0x194>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a54      	ldr	r2, [pc, #336]	; (80009fc <SystemClock_Config+0x194>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b52      	ldr	r3, [pc, #328]	; (80009fc <SystemClock_Config+0x194>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80008b8:	463b      	mov	r3, r7
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	463b      	mov	r3, r7
 80008be:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c0:	bf00      	nop
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <SystemClock_Config+0x194>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ce:	d1f8      	bne.n	80008c2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008d0:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <SystemClock_Config+0x198>)
 80008d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d4:	f023 0303 	bic.w	r3, r3, #3
 80008d8:	4a49      	ldr	r2, [pc, #292]	; (8000a00 <SystemClock_Config+0x198>)
 80008da:	f043 0302 	orr.w	r3, r3, #2
 80008de:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80008e0:	2329      	movs	r3, #41	; 0x29
 80008e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 800090c:	2318      	movs	r3, #24
 800090e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000924:	230c      	movs	r3, #12
 8000926:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800093a:	4618      	mov	r0, r3
 800093c:	f005 f876 	bl	8005a2c <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000946:	f000 faf5 	bl	8000f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	233f      	movs	r3, #63	; 0x3f
 800094c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2303      	movs	r3, #3
 8000952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f005 fc3b 	bl	80061fc <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800098c:	f000 fad2 	bl	8000f34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <SystemClock_Config+0x19c>)
 8000994:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2210      	movs	r2, #16
 80009a0:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2202      	movs	r2, #2
 80009a6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2202      	movs	r2, #2
 80009ac:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2202      	movs	r2, #2
 80009b2:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	22c0      	movs	r2, #192	; 0xc0
 80009b8:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4618      	mov	r0, r3
 80009e2:	f005 ff8f 	bl	8006904 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x188>
  {
    Error_Handler();
 80009ec:	f000 faa2 	bl	8000f34 <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58024800 	.word	0x58024800
 8000a00:	58024400 	.word	0x58024400
 8000a04:	000c0002 	.word	0x000c0002

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a2e:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a70:	2203      	movs	r2, #3
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a8a:	f001 f8a1 	bl	8001bd0 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a94:	f000 fa4e 	bl	8000f34 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000aa4:	f001 ff56 	bl	8002954 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f000 fa41 	bl	8000f34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_ADC1_Init+0xec>)
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000abe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000ad6:	f001 faa7 	bl	8002028 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ae0:	f000 fa28 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	240001bc 	.word	0x240001bc
 8000af0:	40022000 	.word	0x40022000
 8000af4:	14f00020 	.word	0x14f00020

08000af8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2224      	movs	r2, #36	; 0x24
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 fb2f 	bl	800a168 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_DAC1_Init+0x5c>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_DAC1_Init+0x60>)
 8000b0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b10:	4810      	ldr	r0, [pc, #64]	; (8000b54 <MX_DAC1_Init+0x5c>)
 8000b12:	f002 f8c6 	bl	8002ca2 <HAL_DAC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b1c:	f000 fa0a 	bl	8000f34 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000b24:	2316      	movs	r3, #22
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_DAC1_Init+0x5c>)
 8000b3c:	f002 fa02 	bl	8002f44 <HAL_DAC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f9f5 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	240000a4 	.word	0x240000a4
 8000b58:	40007400 	.word	0x40007400

08000b5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_TIM6_Init+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000b80:	2217      	movs	r2, #23
 8000b82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000b8c:	f007 fcf2 	bl	8008574 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b96:	f000 f9cd 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <MX_TIM6_Init+0x64>)
 8000ba8:	f007 fe04 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000bb2:	f000 f9bf 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000298 	.word	0x24000298
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <MX_USART3_UART_Init+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c12:	f007 fe57 	bl	80088c4 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f000 f98a 	bl	8000f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c24:	f008 feed 	bl	8009a02 <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f000 f981 	bl	8000f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c36:	f008 ff22 	bl	8009a7e <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f000 f978 	bl	8000f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c46:	f008 fea3 	bl	8009990 <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f970 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	240000b8 	.word	0x240000b8
 8000c5c:	40004800 	.word	0x40004800

08000c60 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_DMA_Init+0x6c>)
 8000c78:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_DMA_Init+0x6c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_DMA_Init+0x6c>)
 8000c88:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_DMA_Init+0x6c>)
 8000c96:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <MX_DMA_Init+0x6c>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_DMA_Init+0x6c>)
 8000ca6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200b      	movs	r0, #11
 8000cb8:	f001 ffbf 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cbc:	200b      	movs	r0, #11
 8000cbe:	f001 ffd6 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2038      	movs	r0, #56	; 0x38
 8000cc8:	f001 ffb7 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ccc:	2038      	movs	r0, #56	; 0x38
 8000cce:	f001 ffce 	bl	8002c6e <HAL_NVIC_EnableIRQ>

}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b87      	ldr	r3, [pc, #540]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cfc:	4a85      	ldr	r2, [pc, #532]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d06:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	623b      	str	r3, [r7, #32]
 8000d12:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d14:	4b7f      	ldr	r3, [pc, #508]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1a:	4a7e      	ldr	r2, [pc, #504]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d24:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	4b78      	ldr	r3, [pc, #480]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d38:	4a76      	ldr	r2, [pc, #472]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d42:	4b74      	ldr	r3, [pc, #464]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d56:	4a6f      	ldr	r2, [pc, #444]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b69      	ldr	r3, [pc, #420]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d74:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d7e:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b61      	ldr	r3, [pc, #388]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d92:	4a60      	ldr	r2, [pc, #384]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d9c:	4b5d      	ldr	r3, [pc, #372]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db0:	4a58      	ldr	r2, [pc, #352]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dba:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc8:	4b52      	ldr	r3, [pc, #328]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dce:	4a51      	ldr	r2, [pc, #324]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <MX_GPIO_Init+0x234>)
 8000dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dec:	484a      	ldr	r0, [pc, #296]	; (8000f18 <MX_GPIO_Init+0x238>)
 8000dee:	f004 fd8f 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000df8:	4848      	ldr	r0, [pc, #288]	; (8000f1c <MX_GPIO_Init+0x23c>)
 8000dfa:	f004 fd89 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	4847      	ldr	r0, [pc, #284]	; (8000f20 <MX_GPIO_Init+0x240>)
 8000e04:	f004 fd84 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4841      	ldr	r0, [pc, #260]	; (8000f24 <MX_GPIO_Init+0x244>)
 8000e1e:	f004 fbc7 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4837      	ldr	r0, [pc, #220]	; (8000f18 <MX_GPIO_Init+0x238>)
 8000e3c:	f004 fbb8 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4830      	ldr	r0, [pc, #192]	; (8000f1c <MX_GPIO_Init+0x23c>)
 8000e5a:	f004 fba9 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_GPIO_Init+0x248>)
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482e      	ldr	r0, [pc, #184]	; (8000f2c <MX_GPIO_Init+0x24c>)
 8000e72:	f004 fb9d 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4829      	ldr	r0, [pc, #164]	; (8000f30 <MX_GPIO_Init+0x250>)
 8000e8c:	f004 fb90 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <MX_GPIO_Init+0x250>)
 8000eae:	f004 fb7f 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4819      	ldr	r0, [pc, #100]	; (8000f30 <MX_GPIO_Init+0x250>)
 8000ecc:	f004 fb70 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_GPIO_Init+0x23c>)
 8000eec:	f004 fb60 	bl	80055b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_GPIO_Init+0x240>)
 8000f08:	f004 fb52 	bl	80055b0 <HAL_GPIO_Init>

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	; 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020400 	.word	0x58020400
 8000f20:	58021000 	.word	0x58021000
 8000f24:	58020800 	.word	0x58020800
 8000f28:	11110000 	.word	0x11110000
 8000f2c:	58021800 	.word	0x58021800
 8000f30:	58020000 	.word	0x58020000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	0000      	movs	r0, r0
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f52:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8000f56:	200c      	movs	r0, #12
 8000f58:	f009 f8fe 	bl	800a158 <malloc>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 8000f66:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <init_nco+0x88>)
 8000f68:	f009 fa18 	bl	800a39c <puts>
        exit(EXIT_FAILURE);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f009 f8bb 	bl	800a0e8 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f7a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000fd4 <init_nco+0x8c>
 8000f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f86:	ee17 2a90 	vmov	r2, s15
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8000f8e:	edd7 7a00 	vldr	s15, [r7]
 8000f92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f96:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000fd4 <init_nco+0x8c>
 8000f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fa2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000fc8 <init_nco+0x80>
 8000fa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000faa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fae:	ee17 2a90 	vmov	r2, s15
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	53c8d4f1 	.word	0x53c8d4f1
 8000fcc:	401921fb 	.word	0x401921fb
 8000fd0:	0800aaa4 	.word	0x0800aaa4
 8000fd4:	4f000000 	.word	0x4f000000

08000fd8 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     float *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e02a      	b.n	8001040 <nco_get_samples+0x68>

        if ((i == 0) && (s->acc == 0)) {
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d107      	bne.n	8001000 <nco_get_samples+0x28>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d103      	bne.n	8001000 <nco_get_samples+0x28>
            s->acc = 0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	e008      	b.n	8001012 <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	461a      	mov	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	461a      	mov	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	609a      	str	r2, [r3, #8]
        }
        //kprime[n]
        kprime = s->acc + s->theta;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4413      	add	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	0ddb      	lsrs	r3, r3, #23
 8001024:	617b      	str	r3, [r7, #20]
//        	y[i] = index;
//        }
//		y[i] = index;
//        y[i] = (int)((cosine[i / 2] * 2048)/2 + 2047);
//        y[i] = (unsigned int)((cosine[index] * 2048)/2 + 2047);
        y[i] = cosine[index];
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	4909      	ldr	r1, [pc, #36]	; (8001054 <nco_get_samples+0x7c>)
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	440a      	add	r2, r1
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	601a      	str	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3d0      	bcc.n	8000fea <nco_get_samples+0x12>
	}
}
 8001048:	bf00      	nop
 800104a:	3724      	adds	r7, #36	; 0x24
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	0800acbc 	.word	0x0800acbc

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_MspInit+0x30>)
 8001060:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_MspInit+0x30>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_MspInit+0x30>)
 8001070:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	58024400 	.word	0x58024400

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <HAL_ADC_MspInit+0xe0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d159      	bne.n	8001162 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010b0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010b4:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80010be:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d2:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ea:	2302      	movs	r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	481d      	ldr	r0, [pc, #116]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010fe:	f004 fa57 	bl	80055b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_ADC_MspInit+0xf0>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_ADC_MspInit+0xec>)
 800110a:	2209      	movs	r2, #9
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_ADC_MspInit+0xec>)
 800111c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001120:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001128:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_ADC_MspInit+0xec>)
 800112c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001130:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001138:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_ADC_MspInit+0xec>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001146:	480c      	ldr	r0, [pc, #48]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001148:	f002 f8b6 	bl	80032b8 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8001152:	f7ff feef 	bl	8000f34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_ADC_MspInit+0xec>)
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_ADC_MspInit+0xec>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000
 8001170:	58024400 	.word	0x58024400
 8001174:	58020400 	.word	0x58020400
 8001178:	24000220 	.word	0x24000220
 800117c:	40020010 	.word	0x40020010

08001180 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a30      	ldr	r2, [pc, #192]	; (8001260 <HAL_DAC_MspInit+0xe0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d159      	bne.n	8001256 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_DAC_MspInit+0xe4>)
 80011a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011a8:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <HAL_DAC_MspInit+0xe4>)
 80011aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_DAC_MspInit+0xe4>)
 80011b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_DAC_MspInit+0xe4>)
 80011c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c6:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_DAC_MspInit+0xe4>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_DAC_MspInit+0xe4>)
 80011d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011de:	2310      	movs	r3, #16
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <HAL_DAC_MspInit+0xe8>)
 80011f2:	f004 f9dd 	bl	80055b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_DAC_MspInit+0xec>)
 80011f8:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <HAL_DAC_MspInit+0xf0>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_DAC_MspInit+0xec>)
 80011fe:	2243      	movs	r2, #67	; 0x43
 8001200:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001204:	2240      	movs	r2, #64	; 0x40
 8001206:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_DAC_MspInit+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001214:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001224:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <HAL_DAC_MspInit+0xec>)
 800123c:	f002 f83c 	bl	80032b8 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001246:	f7ff fe75 	bl	8000f34 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_DAC_MspInit+0xec>)
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_DAC_MspInit+0xec>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40007400 	.word	0x40007400
 8001264:	58024400 	.word	0x58024400
 8001268:	58020000 	.word	0x58020000
 800126c:	24000144 	.word	0x24000144
 8001270:	40020410 	.word	0x40020410

08001274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10e      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_TIM_Base_MspInit+0x40>)
 8001288:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_TIM_Base_MspInit+0x40>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_TIM_Base_MspInit+0x40>)
 8001298:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40001000 	.word	0x40001000
 80012b4:	58024400 	.word	0x58024400

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_UART_MspInit+0x88>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12e      	bne.n	8001338 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_UART_MspInit+0x8c>)
 80012dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012e0:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x8c>)
 80012e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_UART_MspInit+0x8c>)
 80012ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_UART_MspInit+0x8c>)
 80012fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_UART_MspInit+0x8c>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_UART_MspInit+0x8c>)
 800130a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001328:	2307      	movs	r3, #7
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_UART_MspInit+0x90>)
 8001334:	f004 f93c 	bl	80055b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40004800 	.word	0x40004800
 8001344:	58024400 	.word	0x58024400
 8001348:	58020c00 	.word	0x58020c00

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 f9ec 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA1_Stream0_IRQHandler+0x10>)
 80013ae:	f002 fd7d 	bl	8003eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000220 	.word	0x24000220

080013bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA2_Stream0_IRQHandler+0x10>)
 80013c2:	f002 fd73 	bl	8003eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000144 	.word	0x24000144

080013d0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013da:	f008 fe7f 	bl	800a0dc <__errno>
 80013de:	4602      	mov	r2, r0
 80013e0:	2316      	movs	r3, #22
 80013e2:	6013      	str	r3, [r2, #0]
	return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_exit>:

void _exit (int status)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffe7 	bl	80013d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001402:	e7fe      	b.n	8001402 <_exit+0x12>

08001404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
	}

return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
	}
	return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	605a      	str	r2, [r3, #4]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f008 fde4 	bl	800a0dc <__errno>
 8001514:	4602      	mov	r2, r0
 8001516:	230c      	movs	r3, #12
 8001518:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	24100000 	.word	0x24100000
 8001540:	00000400 	.word	0x00000400
 8001544:	24000098 	.word	0x24000098
 8001548:	240012f0 	.word	0x240012f0

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <SystemInit+0xd8>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a33      	ldr	r2, [pc, #204]	; (8001624 <SystemInit+0xd8>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <SystemInit+0xdc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	2b02      	cmp	r3, #2
 800156a:	d807      	bhi.n	800157c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800156c:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <SystemInit+0xdc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 030f 	bic.w	r3, r3, #15
 8001574:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <SystemInit+0xdc>)
 8001576:	f043 0303 	orr.w	r3, r3, #3
 800157a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <SystemInit+0xe0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2a      	ldr	r2, [pc, #168]	; (800162c <SystemInit+0xe0>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <SystemInit+0xe0>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <SystemInit+0xe0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4926      	ldr	r1, [pc, #152]	; (800162c <SystemInit+0xe0>)
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <SystemInit+0xe4>)
 8001596:	4013      	ands	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <SystemInit+0xdc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d907      	bls.n	80015b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <SystemInit+0xdc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 030f 	bic.w	r3, r3, #15
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <SystemInit+0xdc>)
 80015b0:	f043 0303 	orr.w	r3, r3, #3
 80015b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <SystemInit+0xe0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <SystemInit+0xe0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <SystemInit+0xe0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <SystemInit+0xe0>)
 80015ca:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <SystemInit+0xe8>)
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <SystemInit+0xe0>)
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <SystemInit+0xec>)
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <SystemInit+0xe0>)
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <SystemInit+0xf0>)
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <SystemInit+0xe0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <SystemInit+0xe0>)
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <SystemInit+0xf0>)
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <SystemInit+0xe0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <SystemInit+0xe0>)
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <SystemInit+0xf0>)
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <SystemInit+0xe0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <SystemInit+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <SystemInit+0xe0>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <SystemInit+0xe0>)
 8001606:	2200      	movs	r2, #0
 8001608:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <SystemInit+0xf4>)
 800160c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001610:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SystemInit+0xd8>)
 8001614:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001618:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	52002000 	.word	0x52002000
 800162c:	58024400 	.word	0x58024400
 8001630:	eaf6ed7f 	.word	0xeaf6ed7f
 8001634:	02020200 	.word	0x02020200
 8001638:	01ff0000 	.word	0x01ff0000
 800163c:	01010280 	.word	0x01010280
 8001640:	52004000 	.word	0x52004000

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001648:	f7ff ff80 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800164c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800164e:	e003      	b.n	8001658 <LoopCopyDataInit>

08001650 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001652:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001654:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001656:	3104      	adds	r1, #4

08001658 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800165c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800165e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001660:	d3f6      	bcc.n	8001650 <CopyDataInit>
  ldr  r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001664:	e002      	b.n	800166c <LoopFillZerobss>

08001666 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001666:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001668:	f842 3b04 	str.w	r3, [r2], #4

0800166c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800166e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001670:	d3f9      	bcc.n	8001666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001672:	f008 fd4d 	bl	800a110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7fe ffbb 	bl	80005f0 <main>
  bx  lr
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001680:	0800b560 	.word	0x0800b560
  ldr  r0, =_sdata
 8001684:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001688:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 800168c:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8001690:	240012ec 	.word	0x240012ec

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f001 fac0 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80016a4:	f004 ff60 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 80016a8:	4601      	mov	r1, r0
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_Init+0x68>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_Init+0x6c>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa21 f303 	lsr.w	r3, r1, r3
 80016c0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_Init+0x68>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_Init+0x6c>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_Init+0x70>)
 80016da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_Init+0x74>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 f814 	bl	8001710 <HAL_InitTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e002      	b.n	80016f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016f2:	f7ff fcb1 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58024400 	.word	0x58024400
 8001704:	0800b4bc 	.word	0x0800b4bc
 8001708:	24000004 	.word	0x24000004
 800170c:	24000000 	.word	0x24000000

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_InitTick+0x60>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e021      	b.n	8001768 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_InitTick+0x64>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_InitTick+0x60>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f001 faa5 	bl	8002c8a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f001 fa6f 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x68>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2400000c 	.word	0x2400000c
 8001774:	24000000 	.word	0x24000000
 8001778:	24000008 	.word	0x24000008

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2400000c 	.word	0x2400000c
 80017a0:	240012e4 	.word	0x240012e4

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	240012e4 	.word	0x240012e4

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_Delay+0x40>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2400000c 	.word	0x2400000c

08001800 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3360      	adds	r3, #96	; 0x60
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	430b      	orrs	r3, r1
 8001896:	431a      	orrs	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800189c:	bf00      	nop
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	611a      	str	r2, [r3, #16]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3360      	adds	r3, #96	; 0x60
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]
  }
}
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001936:	b480      	push	{r7}
 8001938:	b087      	sub	sp, #28
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	461a      	mov	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	211f      	movs	r1, #31
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	0e9b      	lsrs	r3, r3, #26
 800196e:	f003 011f 	and.w	r1, r3, #31
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f023 0203 	bic.w	r2, r3, #3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3314      	adds	r3, #20
 80019c4:	461a      	mov	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	0e5b      	lsrs	r3, r3, #25
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	0d1b      	lsrs	r3, r3, #20
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2107      	movs	r1, #7
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	401a      	ands	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	0d1b      	lsrs	r3, r3, #20
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0318 	and.w	r3, r3, #24
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a30:	40d9      	lsrs	r1, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	400b      	ands	r3, r1
 8001a36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	000fffff 	.word	0x000fffff

08001a54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 031f 	and.w	r3, r3, #31
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6093      	str	r3, [r2, #8]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	5fffffc0 	.word	0x5fffffc0

08001a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	6fffffc0 	.word	0x6fffffc0

08001ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001af8:	d101      	bne.n	8001afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_ADC_Enable+0x24>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	7fffffc0 	.word	0x7fffffc0

08001b34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_IsEnabled+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_IsEnabled+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <LL_ADC_REG_StartConversion+0x24>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	f043 0204 	orr.w	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	7fffffc0 	.word	0x7fffffc0

08001b84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e137      	b.n	8001e5a <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fa47 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff3f 	bl	8001a94 <LL_ADC_IsDeepPowerDownEnabled>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff25 	bl	8001a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff5a 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d113      	bne.n	8001c5e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff3e 	bl	8001abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c40:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_ADC_Init+0x294>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	4a88      	ldr	r2, [pc, #544]	; (8001e68 <HAL_ADC_Init+0x298>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff3e 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff78 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001c94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80d2 	bne.w	8001e48 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 80ce 	bne.w	8001e48 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cb4:	f043 0202 	orr.w	r2, r3, #2
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff37 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d110      	bne.n	8001cee <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ccc:	4867      	ldr	r0, [pc, #412]	; (8001e6c <HAL_ADC_Init+0x29c>)
 8001cce:	f7ff ff31 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4866      	ldr	r0, [pc, #408]	; (8001e70 <HAL_ADC_Init+0x2a0>)
 8001cd6:	f7ff ff2d 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4323      	orrs	r3, r4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4862      	ldr	r0, [pc, #392]	; (8001e74 <HAL_ADC_Init+0x2a4>)
 8001cea:	f7ff fd89 	bl	8001800 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7d5b      	ldrb	r3, [r3, #21]
 8001cf2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001cfe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7f1b      	ldrb	r3, [r3, #28]
 8001d04:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7f1b      	ldrb	r3, [r3, #28]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d106      	bne.n	8001d20 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	045b      	lsls	r3, r3, #17
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_ADC_Init+0x2a8>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff15 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001d5a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff22 	bl	8001baa <LL_ADC_INJ_IsConversionOngoing>
 8001d66:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d14a      	bne.n	8001e04 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d147      	bne.n	8001e04 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7d1b      	ldrb	r3, [r3, #20]
 8001d78:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_ADC_Init+0x2ac>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_ADC_Init+0x2b0>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001db4:	3a01      	subs	r2, #1
 8001db6:	0411      	lsls	r1, r2, #16
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	e007      	b.n	8001de8 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fcc8 	bl	8002794 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d10c      	bne.n	8001e26 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f023 010f 	bic.w	r1, r3, #15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	1e5a      	subs	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
 8001e24:	e007      	b.n	8001e36 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 020f 	bic.w	r2, r2, #15
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
 8001e46:	e007      	b.n	8001e58 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f043 0210 	orr.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24000000 	.word	0x24000000
 8001e68:	053e2d63 	.word	0x053e2d63
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40022100 	.word	0x40022100
 8001e74:	40022300 	.word	0x40022300
 8001e78:	fff0c003 	.word	0xfff0c003
 8001e7c:	ffffbffc 	.word	0xffffbffc
 8001e80:	fc00f81e 	.word	0xfc00f81e

08001e84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e90:	484f      	ldr	r0, [pc, #316]	; (8001fd0 <HAL_ADC_Start_DMA+0x14c>)
 8001e92:	f7ff fddf 	bl	8001a54 <LL_ADC_GetMultimode>
 8001e96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe71 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 808c 	bne.w	8001fc2 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_Start_DMA+0x34>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e087      	b.n	8001fc8 <HAL_ADC_Start_DMA+0x144>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d002      	beq.n	8001ed2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	d170      	bne.n	8001fb4 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fb56 	bl	8002584 <ADC_Enable>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d163      	bne.n	8001faa <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_ADC_Start_DMA+0x150>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a38      	ldr	r2, [pc, #224]	; (8001fd8 <HAL_ADC_Start_DMA+0x154>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d002      	beq.n	8001f02 <HAL_ADC_Start_DMA+0x7e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e000      	b.n	8001f04 <HAL_ADC_Start_DMA+0x80>
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_ADC_Start_DMA+0x158>)
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d002      	beq.n	8001f12 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f023 0206 	bic.w	r2, r3, #6
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58
 8001f36:	e002      	b.n	8001f3e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <HAL_ADC_Start_DMA+0x15c>)
 8001f44:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <HAL_ADC_Start_DMA+0x160>)
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <HAL_ADC_Start_DMA+0x164>)
 8001f54:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	221c      	movs	r2, #28
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0210 	orr.w	r2, r2, #16
 8001f74:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f7ff fd04 	bl	800198e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3340      	adds	r3, #64	; 0x40
 8001f90:	4619      	mov	r1, r3
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f001 fd1f 	bl	80039d8 <HAL_DMA_Start_IT>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fdda 	bl	8001b5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fa8:	e00d      	b.n	8001fc6 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001fb2:	e008      	b.n	8001fc6 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fc0:	e001      	b.n	8001fc6 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40022300 	.word	0x40022300
 8001fd4:	fffff0fe 	.word	0xfffff0fe
 8001fd8:	40022100 	.word	0x40022100
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	0800266d 	.word	0x0800266d
 8001fe4:	08002745 	.word	0x08002745
 8001fe8:	08002761 	.word	0x08002761

08001fec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b099      	sub	sp, #100	; 0x64
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4aa1      	ldr	r2, [pc, #644]	; (80022c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002042:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x2a>
 800204e:	2302      	movs	r3, #2
 8002050:	e283      	b.n	800255a <HAL_ADC_ConfigChannel+0x532>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fd90 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8268 	bne.w	800253c <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002074:	2b00      	cmp	r3, #0
 8002076:	d108      	bne.n	800208a <HAL_ADC_ConfigChannel+0x62>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2201      	movs	r2, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	e00f      	b.n	80020aa <HAL_ADC_ConfigChannel+0x82>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	69d1      	ldr	r1, [r2, #28]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f7ff fc36 	bl	8001936 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fd58 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fd65 	bl	8001baa <LL_ADC_INJ_IsConversionOngoing>
 80020e0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 80a0 	bne.w	800222a <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 809c 	bne.w	800222a <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	461a      	mov	r2, r3
 8002100:	f7ff fc58 	bl	80019b4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <HAL_ADC_ConfigChannel+0x102>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	e00a      	b.n	8002140 <HAL_ADC_ConfigChannel+0x118>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d027      	beq.n	800219a <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002158:	f7ff fb86 	bl	8001868 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	7e5b      	ldrb	r3, [r3, #25]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d102      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x14a>
 800216c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002170:	e000      	b.n	8002174 <HAL_ADC_ConfigChannel+0x14c>
 8002172:	2300      	movs	r3, #0
 8002174:	461a      	mov	r2, r3
 8002176:	f7ff fbb0 	bl	80018da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	7e1b      	ldrb	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x168>
 800218a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800218e:	e000      	b.n	8002192 <HAL_ADC_ConfigChannel+0x16a>
 8002190:	2300      	movs	r3, #0
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fb88 	bl	80018a8 <LL_ADC_SetDataRightShift>
 8002198:	e047      	b.n	800222a <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d107      	bne.n	80021be <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	069b      	lsls	r3, r3, #26
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d107      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	069b      	lsls	r3, r3, #26
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d107      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002204:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	069b      	lsls	r3, r3, #26
 8002216:	429a      	cmp	r2, r3
 8002218:	d107      	bne.n	800222a <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002228:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fc80 	bl	8001b34 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8189 	bne.w	800254e <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	461a      	mov	r2, r3
 800224a:	f7ff fbdf 	bl	8001a0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	f040 80ff 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x25a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b09      	cmp	r3, #9
 8002278:	bf94      	ite	ls
 800227a:	2301      	movls	r3, #1
 800227c:	2300      	movhi	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e012      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x280>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2b09      	cmp	r3, #9
 80022a0:	bf94      	ite	ls
 80022a2:	2301      	movls	r3, #1
 80022a4:	2300      	movhi	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d066      	beq.n	800237a <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x2a4>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	069b      	lsls	r3, r3, #26
 80022c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c6:	e010      	b.n	80022ea <HAL_ADC_ConfigChannel+0x2c2>
 80022c8:	47ff0000 	.word	0x47ff0000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	069b      	lsls	r3, r3, #26
 80022e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_ADC_ConfigChannel+0x2e2>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	3301      	adds	r3, #1
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	e010      	b.n	800232c <HAL_ADC_ConfigChannel+0x304>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	ea42 0103 	orr.w	r1, r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x32a>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	051b      	lsls	r3, r3, #20
 8002350:	e011      	b.n	8002376 <HAL_ADC_ConfigChannel+0x34e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002376:	430b      	orrs	r3, r1
 8002378:	e069      	b.n	800244e <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x36e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	3301      	adds	r3, #1
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002394:	e00e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x38c>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	61fb      	str	r3, [r7, #28]
  return result;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	069b      	lsls	r3, r3, #26
 80023b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x3ac>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	e010      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x3ce>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	617b      	str	r3, [r7, #20]
  return result;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	ea42 0103 	orr.w	r1, r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x3fa>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	3301      	adds	r3, #1
 800240e:	f003 021f 	and.w	r2, r3, #31
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	3b1e      	subs	r3, #30
 800241a:	051b      	lsls	r3, r3, #20
 800241c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002420:	e014      	b.n	800244c <HAL_ADC_ConfigChannel+0x424>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	60fb      	str	r3, [r7, #12]
  return result;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	3b1e      	subs	r3, #30
 8002446:	051b      	lsls	r3, r3, #20
 8002448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	430b      	orrs	r3, r1
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6892      	ldr	r2, [r2, #8]
 8002452:	4619      	mov	r1, r3
 8002454:	f7ff faae 	bl	80019b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	da76      	bge.n	800254e <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002460:	4840      	ldr	r0, [pc, #256]	; (8002564 <HAL_ADC_ConfigChannel+0x53c>)
 8002462:	f7ff f9f3 	bl	800184c <LL_ADC_GetCommonPathInternalCh>
 8002466:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002468:	483f      	ldr	r0, [pc, #252]	; (8002568 <HAL_ADC_ConfigChannel+0x540>)
 800246a:	f7ff fb63 	bl	8001b34 <LL_ADC_IsEnabled>
 800246e:	4604      	mov	r4, r0
 8002470:	483e      	ldr	r0, [pc, #248]	; (800256c <HAL_ADC_ConfigChannel+0x544>)
 8002472:	f7ff fb5f 	bl	8001b34 <LL_ADC_IsEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	4323      	orrs	r3, r4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d154      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_ADC_ConfigChannel+0x548>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d121      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x4a4>
 8002488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11c      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a35      	ldr	r2, [pc, #212]	; (800256c <HAL_ADC_ConfigChannel+0x544>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d158      	bne.n	800254e <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024a2:	4619      	mov	r1, r3
 80024a4:	482f      	ldr	r0, [pc, #188]	; (8002564 <HAL_ADC_ConfigChannel+0x53c>)
 80024a6:	f7ff f9be 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <HAL_ADC_ConfigChannel+0x54c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	4a31      	ldr	r2, [pc, #196]	; (8002578 <HAL_ADC_ConfigChannel+0x550>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ca:	e040      	b.n	800254e <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_ADC_ConfigChannel+0x554>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d111      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x4d2>
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10c      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <HAL_ADC_ConfigChannel+0x544>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d131      	bne.n	800254e <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f0:	4619      	mov	r1, r3
 80024f2:	481c      	ldr	r0, [pc, #112]	; (8002564 <HAL_ADC_ConfigChannel+0x53c>)
 80024f4:	f7ff f997 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f8:	e029      	b.n	800254e <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a20      	ldr	r2, [pc, #128]	; (8002580 <HAL_ADC_ConfigChannel+0x558>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d124      	bne.n	800254e <HAL_ADC_ConfigChannel+0x526>
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11f      	bne.n	800254e <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_ADC_ConfigChannel+0x544>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d11a      	bne.n	800254e <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800251e:	4619      	mov	r1, r3
 8002520:	4810      	ldr	r0, [pc, #64]	; (8002564 <HAL_ADC_ConfigChannel+0x53c>)
 8002522:	f7ff f980 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
 8002526:	e012      	b.n	800254e <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800253a:	e008      	b.n	800254e <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800255a:	4618      	mov	r0, r3
 800255c:	3764      	adds	r7, #100	; 0x64
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop
 8002564:	40022300 	.word	0x40022300
 8002568:	40022000 	.word	0x40022000
 800256c:	40022100 	.word	0x40022100
 8002570:	cb840000 	.word	0xcb840000
 8002574:	24000000 	.word	0x24000000
 8002578:	053e2d63 	.word	0x053e2d63
 800257c:	bac04000 	.word	0xbac04000
 8002580:	cfb80000 	.word	0xcfb80000

08002584 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff facf 	bl	8001b34 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d15a      	bne.n	8002652 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <ADC_Enable+0xd8>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e046      	b.n	8002654 <ADC_Enable+0xd0>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fa9e 	bl	8001b0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025d0:	f7ff f8e8 	bl	80017a4 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d6:	4822      	ldr	r0, [pc, #136]	; (8002660 <ADC_Enable+0xdc>)
 80025d8:	f7ff fa3c 	bl	8001a54 <LL_ADC_GetMultimode>
 80025dc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <ADC_Enable+0xe0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d002      	beq.n	80025ee <ADC_Enable+0x6a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	e000      	b.n	80025f0 <ADC_Enable+0x6c>
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <ADC_Enable+0xe4>)
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d025      	beq.n	8002644 <ADC_Enable+0xc0>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d129      	bne.n	8002652 <ADC_Enable+0xce>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025fe:	e021      	b.n	8002644 <ADC_Enable+0xc0>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fa95 	bl	8001b34 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fa79 	bl	8001b0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261a:	f7ff f8c3 	bl	80017a4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d90d      	bls.n	8002644 <ADC_Enable+0xc0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e007      	b.n	8002654 <ADC_Enable+0xd0>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d1d6      	bne.n	8002600 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	8000003f 	.word	0x8000003f
 8002660:	40022300 	.word	0x40022300
 8002664:	40022100 	.word	0x40022100
 8002668:	40022000 	.word	0x40022000

0800266c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d14b      	bne.n	800271e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d021      	beq.n	80026e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f933 	bl	8001910 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d032      	beq.n	8002716 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d12b      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11f      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
 80026e2:	e018      	b.n	8002716 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d111      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fc68 	bl	8001fec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800271c:	e00e      	b.n	800273c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fc72 	bl	8002014 <HAL_ADC_ErrorCallback>
}
 8002730:	e004      	b.n	800273c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fc54 	bl	8002000 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fc44 	bl	8002014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800279c:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <ADC_ConfigureBoostMode+0x164>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01a      	beq.n	80027de <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027a8:	f004 f850 	bl	800684c <HAL_RCC_GetHCLKFreq>
 80027ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027b6:	d006      	beq.n	80027c6 <ADC_ConfigureBoostMode+0x32>
 80027b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027bc:	d00b      	beq.n	80027d6 <ADC_ConfigureBoostMode+0x42>
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c2:	d000      	beq.n	80027c6 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80027c4:	e05d      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	60fb      	str	r3, [r7, #12]
        break;
 80027d4:	e055      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	60fb      	str	r3, [r7, #12]
        break;
 80027dc:	e051      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027e2:	f004 ff43 	bl	800766c <HAL_RCCEx_GetPeriphCLKFreq>
 80027e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027f0:	d02a      	beq.n	8002848 <ADC_ConfigureBoostMode+0xb4>
 80027f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027f6:	d813      	bhi.n	8002820 <ADC_ConfigureBoostMode+0x8c>
 80027f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027fc:	d024      	beq.n	8002848 <ADC_ConfigureBoostMode+0xb4>
 80027fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002802:	d806      	bhi.n	8002812 <ADC_ConfigureBoostMode+0x7e>
 8002804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002808:	d01e      	beq.n	8002848 <ADC_ConfigureBoostMode+0xb4>
 800280a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800280e:	d01b      	beq.n	8002848 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002810:	e037      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002816:	d017      	beq.n	8002848 <ADC_ConfigureBoostMode+0xb4>
 8002818:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800281c:	d014      	beq.n	8002848 <ADC_ConfigureBoostMode+0xb4>
        break;
 800281e:	e030      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002820:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002824:	d021      	beq.n	800286a <ADC_ConfigureBoostMode+0xd6>
 8002826:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800282a:	d806      	bhi.n	800283a <ADC_ConfigureBoostMode+0xa6>
 800282c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002830:	d013      	beq.n	800285a <ADC_ConfigureBoostMode+0xc6>
 8002832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002836:	d014      	beq.n	8002862 <ADC_ConfigureBoostMode+0xce>
        break;
 8002838:	e023      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800283a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800283e:	d018      	beq.n	8002872 <ADC_ConfigureBoostMode+0xde>
 8002840:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002844:	d019      	beq.n	800287a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002846:	e01c      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	60fb      	str	r3, [r7, #12]
        break;
 8002858:	e013      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	60fb      	str	r3, [r7, #12]
        break;
 8002860:	e00f      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	60fb      	str	r3, [r7, #12]
        break;
 8002868:	e00b      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	60fb      	str	r3, [r7, #12]
        break;
 8002870:	e007      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	09db      	lsrs	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]
        break;
 8002878:	e003      	b.n	8002882 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	60fb      	str	r3, [r7, #12]
        break;
 8002880:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <ADC_ConfigureBoostMode+0x168>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d808      	bhi.n	80028a2 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800289e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028a0:	e025      	b.n	80028ee <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a16      	ldr	r2, [pc, #88]	; (8002900 <ADC_ConfigureBoostMode+0x16c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d80a      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028bc:	609a      	str	r2, [r3, #8]
}
 80028be:	e016      	b.n	80028ee <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <ADC_ConfigureBoostMode+0x170>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d80a      	bhi.n	80028de <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	e007      	b.n	80028ee <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028ec:	609a      	str	r2, [r3, #8]
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022300 	.word	0x40022300
 80028fc:	005f5e10 	.word	0x005f5e10
 8002900:	00bebc20 	.word	0x00bebc20
 8002904:	017d7840 	.word	0x017d7840

08002908 <LL_ADC_IsEnabled>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <LL_ADC_IsEnabled+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_IsEnabled+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_REG_IsConversionOngoing>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d101      	bne.n	8002946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b09f      	sub	sp, #124	; 0x7c
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800296e:	2302      	movs	r3, #2
 8002970:	e07c      	b.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3d      	ldr	r2, [pc, #244]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002984:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	e001      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e05f      	b.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ffbd 	bl	800292e <LL_ADC_REG_IsConversionOngoing>
 80029b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ffb7 	bl	800292e <LL_ADC_REG_IsConversionOngoing>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d141      	bne.n	8002a4a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d13e      	bne.n	8002a4a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029ce:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ea:	4822      	ldr	r0, [pc, #136]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80029ec:	f7ff ff8c 	bl	8002908 <LL_ADC_IsEnabled>
 80029f0:	4604      	mov	r4, r0
 80029f2:	4821      	ldr	r0, [pc, #132]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80029f4:	f7ff ff88 	bl	8002908 <LL_ADC_IsEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4323      	orrs	r3, r4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d12e      	bne.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	6811      	ldr	r1, [r2, #0]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a18:	e021      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a26:	4813      	ldr	r0, [pc, #76]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a28:	f7ff ff6e 	bl	8002908 <LL_ADC_IsEnabled>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	4812      	ldr	r0, [pc, #72]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a30:	f7ff ff6a 	bl	8002908 <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4323      	orrs	r3, r4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d110      	bne.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a48:	e009      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a5c:	e000      	b.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	377c      	adds	r7, #124	; 0x7c
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40022100 	.word	0x40022100
 8002a7c:	40022300 	.word	0x40022300
 8002a80:	fffff0e0 	.word	0xfffff0e0

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	05fa0000 	.word	0x05fa0000

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff40 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff90 	bl	8002b78 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5f 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff33 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa4 	bl	8002be0 <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e014      	b.n	8002cde <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	791b      	ldrb	r3, [r3, #4]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fe fa5b 	bl	8001180 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_DAC_Start+0x16>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e040      	b.n	8002d7e <HAL_DAC_Start+0x98>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2201      	movs	r2, #1
 8002d16:	409a      	lsls	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d11d      	bne.n	8002d70 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	e014      	b.n	8002d70 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2102      	movs	r1, #2
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0202 	orr.w	r2, r2, #2
 8002d6e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_DAC_Start_DMA+0x1e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e09e      	b.n	8002ee8 <HAL_DAC_Start_DMA+0x15c>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2202      	movs	r2, #2
 8002db4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d12a      	bne.n	8002e12 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	; (8002ef0 <HAL_DAC_Start_DMA+0x164>)
 8002dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	; (8002ef4 <HAL_DAC_Start_DMA+0x168>)
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_DAC_Start_DMA+0x16c>)
 8002dd2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002de2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d009      	beq.n	8002dfe <HAL_DAC_Start_DMA+0x72>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d00c      	beq.n	8002e08 <HAL_DAC_Start_DMA+0x7c>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d000      	beq.n	8002df4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002df2:	e039      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3308      	adds	r3, #8
 8002dfa:	613b      	str	r3, [r7, #16]
        break;
 8002dfc:	e034      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	613b      	str	r3, [r7, #16]
        break;
 8002e06:	e02f      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	613b      	str	r3, [r7, #16]
        break;
 8002e10:	e02a      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4a39      	ldr	r2, [pc, #228]	; (8002efc <HAL_DAC_Start_DMA+0x170>)
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_DAC_Start_DMA+0x174>)
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <HAL_DAC_Start_DMA+0x178>)
 8002e28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e38:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d009      	beq.n	8002e54 <HAL_DAC_Start_DMA+0xc8>
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00c      	beq.n	8002e5e <HAL_DAC_Start_DMA+0xd2>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d000      	beq.n	8002e4a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e48:	e00e      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	613b      	str	r3, [r7, #16]
        break;
 8002e52:	e009      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3318      	adds	r3, #24
 8002e5a:	613b      	str	r3, [r7, #16]
        break;
 8002e5c:	e004      	b.n	8002e68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	331c      	adds	r3, #28
 8002e64:	613b      	str	r3, [r7, #16]
        break;
 8002e66:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d111      	bne.n	8002e92 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e7c:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6898      	ldr	r0, [r3, #8]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	f000 fda6 	bl	80039d8 <HAL_DMA_Start_IT>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	75fb      	strb	r3, [r7, #23]
 8002e90:	e010      	b.n	8002eb4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68d8      	ldr	r0, [r3, #12]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	f000 fd94 	bl	80039d8 <HAL_DMA_Start_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2201      	movs	r2, #1
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e005      	b.n	8002ee6 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f043 0204 	orr.w	r2, r3, #4
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	080031a5 	.word	0x080031a5
 8002ef4:	080031c7 	.word	0x080031c7
 8002ef8:	080031e3 	.word	0x080031e3
 8002efc:	0800324d 	.word	0x0800324d
 8002f00:	0800326f 	.word	0x0800326f
 8002f04:	0800328b 	.word	0x0800328b

08002f08 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	795b      	ldrb	r3, [r3, #5]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_DAC_ConfigChannel+0x18>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e11d      	b.n	8003198 <HAL_DAC_ConfigChannel+0x254>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2202      	movs	r2, #2
 8002f66:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d174      	bne.n	800305a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fc18 	bl	80017a4 <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d134      	bne.n	8002fe6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f7c:	e011      	b.n	8002fa2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f7e:	f7fe fc11 	bl	80017a4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d90a      	bls.n	8002fa2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f043 0208 	orr.w	r2, r3, #8
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0fa      	b.n	8003198 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	4b7d      	ldr	r3, [pc, #500]	; (80031a0 <HAL_DAC_ConfigChannel+0x25c>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e6      	bne.n	8002f7e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7fe fc03 	bl	80017bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	6992      	ldr	r2, [r2, #24]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc0:	e01e      	b.n	8003000 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fc2:	f7fe fbef 	bl	80017a4 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d90a      	bls.n	8002fe6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f043 0208 	orr.w	r2, r3, #8
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0d8      	b.n	8003198 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	dbe8      	blt.n	8002fc2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7fe fbe3 	bl	80017bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	6992      	ldr	r2, [r2, #24]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	ea02 0103 	and.w	r1, r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	21ff      	movs	r1, #255	; 0xff
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	ea02 0103 	and.w	r1, r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6a1a      	ldr	r2, [r3, #32]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d11d      	bne.n	800309e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	221f      	movs	r2, #31
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4013      	ands	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2207      	movs	r2, #7
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4013      	ands	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e00f      	b.n	80030e8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d102      	bne.n	80030d6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e008      	b.n	80030e8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e001      	b.n	80030e8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	400a      	ands	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4013      	ands	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	22c0      	movs	r2, #192	; 0xc0
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43da      	mvns	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20008000 	.word	0x20008000

080031a4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fea8 	bl	8002f08 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	711a      	strb	r2, [r3, #4]
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff fea1 	bl	8002f1c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fe97 	bl	8002f30 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	711a      	strb	r2, [r3, #4]
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff ffd8 	bl	8003210 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	711a      	strb	r2, [r3, #4]
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff ffd1 	bl	8003224 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ffc7 	bl	8003238 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	711a      	strb	r2, [r3, #4]
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032c0:	f7fe fa70 	bl	80017a4 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e37f      	b.n	80039d0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a66      	ldr	r2, [pc, #408]	; (8003470 <HAL_DMA_Init+0x1b8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d04a      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_DMA_Init+0x1bc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d045      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a63      	ldr	r2, [pc, #396]	; (8003478 <HAL_DMA_Init+0x1c0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d040      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a62      	ldr	r2, [pc, #392]	; (800347c <HAL_DMA_Init+0x1c4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d03b      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a60      	ldr	r2, [pc, #384]	; (8003480 <HAL_DMA_Init+0x1c8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d036      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5f      	ldr	r2, [pc, #380]	; (8003484 <HAL_DMA_Init+0x1cc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d031      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5d      	ldr	r2, [pc, #372]	; (8003488 <HAL_DMA_Init+0x1d0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02c      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5c      	ldr	r2, [pc, #368]	; (800348c <HAL_DMA_Init+0x1d4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d027      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5a      	ldr	r2, [pc, #360]	; (8003490 <HAL_DMA_Init+0x1d8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a59      	ldr	r2, [pc, #356]	; (8003494 <HAL_DMA_Init+0x1dc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01d      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_DMA_Init+0x1e0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a56      	ldr	r2, [pc, #344]	; (800349c <HAL_DMA_Init+0x1e4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_DMA_Init+0x1e8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_DMA_Init+0x1ec>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a51      	ldr	r2, [pc, #324]	; (80034a8 <HAL_DMA_Init+0x1f0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_DMA_Init+0xb8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a50      	ldr	r2, [pc, #320]	; (80034ac <HAL_DMA_Init+0x1f4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_DMA_Init+0xbc>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_DMA_Init+0xbe>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 813c 	beq.w	80035f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a37      	ldr	r2, [pc, #220]	; (8003470 <HAL_DMA_Init+0x1b8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d04a      	beq.n	800342c <HAL_DMA_Init+0x174>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a36      	ldr	r2, [pc, #216]	; (8003474 <HAL_DMA_Init+0x1bc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d045      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a34      	ldr	r2, [pc, #208]	; (8003478 <HAL_DMA_Init+0x1c0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d040      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a33      	ldr	r2, [pc, #204]	; (800347c <HAL_DMA_Init+0x1c4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d03b      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_DMA_Init+0x1c8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d036      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a30      	ldr	r2, [pc, #192]	; (8003484 <HAL_DMA_Init+0x1cc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d031      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <HAL_DMA_Init+0x1d0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02c      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2d      	ldr	r2, [pc, #180]	; (800348c <HAL_DMA_Init+0x1d4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d027      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <HAL_DMA_Init+0x1d8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d022      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <HAL_DMA_Init+0x1dc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01d      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <HAL_DMA_Init+0x1e0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d018      	beq.n	800342c <HAL_DMA_Init+0x174>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_DMA_Init+0x1e4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <HAL_DMA_Init+0x174>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <HAL_DMA_Init+0x1e8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_DMA_Init+0x174>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_DMA_Init+0x1ec>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_DMA_Init+0x174>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_DMA_Init+0x1f0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_DMA_Init+0x174>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_DMA_Init+0x1f4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d108      	bne.n	800343e <HAL_DMA_Init+0x186>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e007      	b.n	800344e <HAL_DMA_Init+0x196>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800344e:	e02f      	b.n	80034b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003450:	f7fe f9a8 	bl	80017a4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b05      	cmp	r3, #5
 800345c:	d928      	bls.n	80034b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2203      	movs	r2, #3
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e2af      	b.n	80039d0 <HAL_DMA_Init+0x718>
 8003470:	40020010 	.word	0x40020010
 8003474:	40020028 	.word	0x40020028
 8003478:	40020040 	.word	0x40020040
 800347c:	40020058 	.word	0x40020058
 8003480:	40020070 	.word	0x40020070
 8003484:	40020088 	.word	0x40020088
 8003488:	400200a0 	.word	0x400200a0
 800348c:	400200b8 	.word	0x400200b8
 8003490:	40020410 	.word	0x40020410
 8003494:	40020428 	.word	0x40020428
 8003498:	40020440 	.word	0x40020440
 800349c:	40020458 	.word	0x40020458
 80034a0:	40020470 	.word	0x40020470
 80034a4:	40020488 	.word	0x40020488
 80034a8:	400204a0 	.word	0x400204a0
 80034ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1c8      	bne.n	8003450 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4b73      	ldr	r3, [pc, #460]	; (8003698 <HAL_DMA_Init+0x3e0>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b04      	cmp	r3, #4
 8003502:	d107      	bne.n	8003514 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	4313      	orrs	r3, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b28      	cmp	r3, #40	; 0x28
 800351a:	d903      	bls.n	8003524 <HAL_DMA_Init+0x26c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b2e      	cmp	r3, #46	; 0x2e
 8003522:	d91f      	bls.n	8003564 <HAL_DMA_Init+0x2ac>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b3e      	cmp	r3, #62	; 0x3e
 800352a:	d903      	bls.n	8003534 <HAL_DMA_Init+0x27c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b42      	cmp	r3, #66	; 0x42
 8003532:	d917      	bls.n	8003564 <HAL_DMA_Init+0x2ac>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b46      	cmp	r3, #70	; 0x46
 800353a:	d903      	bls.n	8003544 <HAL_DMA_Init+0x28c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b48      	cmp	r3, #72	; 0x48
 8003542:	d90f      	bls.n	8003564 <HAL_DMA_Init+0x2ac>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b4e      	cmp	r3, #78	; 0x4e
 800354a:	d903      	bls.n	8003554 <HAL_DMA_Init+0x29c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b52      	cmp	r3, #82	; 0x52
 8003552:	d907      	bls.n	8003564 <HAL_DMA_Init+0x2ac>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b73      	cmp	r3, #115	; 0x73
 800355a:	d905      	bls.n	8003568 <HAL_DMA_Init+0x2b0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b77      	cmp	r3, #119	; 0x77
 8003562:	d801      	bhi.n	8003568 <HAL_DMA_Init+0x2b0>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_DMA_Init+0x2b2>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003574:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 0307 	bic.w	r3, r3, #7
 800358c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b04      	cmp	r3, #4
 800359e:	d117      	bne.n	80035d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 fe72 	bl	800529c <DMA_CheckFifoParam>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2240      	movs	r2, #64	; 0x40
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e1ff      	b.n	80039d0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f001 fdad 	bl	8005138 <DMA_CalcBaseAndBitshift>
 80035de:	4603      	mov	r3, r0
 80035e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	223f      	movs	r2, #63	; 0x3f
 80035ec:	409a      	lsls	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	e0fe      	b.n	80037f2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_DMA_Init+0x3e4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04a      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <HAL_DMA_Init+0x3e8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <HAL_DMA_Init+0x3ec>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <HAL_DMA_Init+0x3f0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03b      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <HAL_DMA_Init+0x3f4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d036      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <HAL_DMA_Init+0x3f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d031      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1f      	ldr	r2, [pc, #124]	; (80036b4 <HAL_DMA_Init+0x3fc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02c      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <HAL_DMA_Init+0x400>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d027      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_DMA_Init+0x404>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <HAL_DMA_Init+0x408>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_DMA_Init+0x40c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_DMA_Init+0x410>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_DMA_Init+0x414>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <HAL_DMA_Init+0x418>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <HAL_DMA_Init+0x41c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Init+0x3dc>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <HAL_DMA_Init+0x420>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d123      	bne.n	80036dc <HAL_DMA_Init+0x424>
 8003694:	2301      	movs	r3, #1
 8003696:	e022      	b.n	80036de <HAL_DMA_Init+0x426>
 8003698:	fe10803f 	.word	0xfe10803f
 800369c:	48022c08 	.word	0x48022c08
 80036a0:	48022c1c 	.word	0x48022c1c
 80036a4:	48022c30 	.word	0x48022c30
 80036a8:	48022c44 	.word	0x48022c44
 80036ac:	48022c58 	.word	0x48022c58
 80036b0:	48022c6c 	.word	0x48022c6c
 80036b4:	48022c80 	.word	0x48022c80
 80036b8:	48022c94 	.word	0x48022c94
 80036bc:	58025408 	.word	0x58025408
 80036c0:	5802541c 	.word	0x5802541c
 80036c4:	58025430 	.word	0x58025430
 80036c8:	58025444 	.word	0x58025444
 80036cc:	58025458 	.word	0x58025458
 80036d0:	5802546c 	.word	0x5802546c
 80036d4:	58025480 	.word	0x58025480
 80036d8:	58025494 	.word	0x58025494
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d07e      	beq.n	80037e0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_DMA_Init+0x630>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d021      	beq.n	8003730 <HAL_DMA_Init+0x478>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7e      	ldr	r2, [pc, #504]	; (80038ec <HAL_DMA_Init+0x634>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01c      	beq.n	8003730 <HAL_DMA_Init+0x478>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7d      	ldr	r2, [pc, #500]	; (80038f0 <HAL_DMA_Init+0x638>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d017      	beq.n	8003730 <HAL_DMA_Init+0x478>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7b      	ldr	r2, [pc, #492]	; (80038f4 <HAL_DMA_Init+0x63c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d012      	beq.n	8003730 <HAL_DMA_Init+0x478>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7a      	ldr	r2, [pc, #488]	; (80038f8 <HAL_DMA_Init+0x640>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00d      	beq.n	8003730 <HAL_DMA_Init+0x478>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a78      	ldr	r2, [pc, #480]	; (80038fc <HAL_DMA_Init+0x644>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d008      	beq.n	8003730 <HAL_DMA_Init+0x478>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_DMA_Init+0x648>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <HAL_DMA_Init+0x478>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_DMA_Init+0x64c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4b6e      	ldr	r3, [pc, #440]	; (8003908 <HAL_DMA_Init+0x650>)
 800374e:	4013      	ands	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d008      	beq.n	800376c <HAL_DMA_Init+0x4b4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d102      	bne.n	8003768 <HAL_DMA_Init+0x4b0>
 8003762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003766:	e002      	b.n	800376e <HAL_DMA_Init+0x4b6>
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_DMA_Init+0x4b6>
 800376c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800377c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800378c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800379c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_DMA_Init+0x654>)
 80037b4:	4413      	add	r3, r2
 80037b6:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_DMA_Init+0x658>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	009a      	lsls	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f001 fcb7 	bl	8005138 <DMA_CalcBaseAndBitshift>
 80037ca:	4603      	mov	r3, r0
 80037cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	e008      	b.n	80037f2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0ee      	b.n	80039d0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a47      	ldr	r2, [pc, #284]	; (8003914 <HAL_DMA_Init+0x65c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d072      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a45      	ldr	r2, [pc, #276]	; (8003918 <HAL_DMA_Init+0x660>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d06d      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a44      	ldr	r2, [pc, #272]	; (800391c <HAL_DMA_Init+0x664>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d068      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a42      	ldr	r2, [pc, #264]	; (8003920 <HAL_DMA_Init+0x668>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d063      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a41      	ldr	r2, [pc, #260]	; (8003924 <HAL_DMA_Init+0x66c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d05e      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <HAL_DMA_Init+0x670>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d059      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a3e      	ldr	r2, [pc, #248]	; (800392c <HAL_DMA_Init+0x674>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d054      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3c      	ldr	r2, [pc, #240]	; (8003930 <HAL_DMA_Init+0x678>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d04f      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <HAL_DMA_Init+0x67c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a39      	ldr	r2, [pc, #228]	; (8003938 <HAL_DMA_Init+0x680>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a38      	ldr	r2, [pc, #224]	; (800393c <HAL_DMA_Init+0x684>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a36      	ldr	r2, [pc, #216]	; (8003940 <HAL_DMA_Init+0x688>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a35      	ldr	r2, [pc, #212]	; (8003944 <HAL_DMA_Init+0x68c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a33      	ldr	r2, [pc, #204]	; (8003948 <HAL_DMA_Init+0x690>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a32      	ldr	r2, [pc, #200]	; (800394c <HAL_DMA_Init+0x694>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <HAL_DMA_Init+0x698>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <HAL_DMA_Init+0x630>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_DMA_Init+0x634>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HAL_DMA_Init+0x638>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_DMA_Init+0x63c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <HAL_DMA_Init+0x640>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <HAL_DMA_Init+0x644>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_DMA_Init+0x648>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_Init+0x62a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_DMA_Init+0x64c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d138      	bne.n	8003954 <HAL_DMA_Init+0x69c>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e037      	b.n	8003956 <HAL_DMA_Init+0x69e>
 80038e6:	bf00      	nop
 80038e8:	58025408 	.word	0x58025408
 80038ec:	5802541c 	.word	0x5802541c
 80038f0:	58025430 	.word	0x58025430
 80038f4:	58025444 	.word	0x58025444
 80038f8:	58025458 	.word	0x58025458
 80038fc:	5802546c 	.word	0x5802546c
 8003900:	58025480 	.word	0x58025480
 8003904:	58025494 	.word	0x58025494
 8003908:	fffe000f 	.word	0xfffe000f
 800390c:	a7fdabf8 	.word	0xa7fdabf8
 8003910:	cccccccd 	.word	0xcccccccd
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d032      	beq.n	80039c0 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f001 fd1a 	bl	8005394 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b80      	cmp	r3, #128	; 0x80
 8003966:	d102      	bne.n	800396e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003982:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_DMA_Init+0x6f6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d80c      	bhi.n	80039ae <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f001 fd97 	bl	80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	e008      	b.n	80039c0 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e226      	b.n	8003e42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_DMA_Start_IT+0x2a>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e21f      	b.n	8003e42 <HAL_DMA_Start_IT+0x46a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	f040 820a 	bne.w	8003e2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a68      	ldr	r2, [pc, #416]	; (8003bcc <HAL_DMA_Start_IT+0x1f4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d04a      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a66      	ldr	r2, [pc, #408]	; (8003bd0 <HAL_DMA_Start_IT+0x1f8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d045      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_DMA_Start_IT+0x1fc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d040      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_DMA_Start_IT+0x200>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d03b      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a62      	ldr	r2, [pc, #392]	; (8003bdc <HAL_DMA_Start_IT+0x204>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d036      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a60      	ldr	r2, [pc, #384]	; (8003be0 <HAL_DMA_Start_IT+0x208>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5f      	ldr	r2, [pc, #380]	; (8003be4 <HAL_DMA_Start_IT+0x20c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d02c      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <HAL_DMA_Start_IT+0x210>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d027      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_DMA_Start_IT+0x214>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d022      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a5a      	ldr	r2, [pc, #360]	; (8003bf0 <HAL_DMA_Start_IT+0x218>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_DMA_Start_IT+0x21c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_DMA_Start_IT+0x220>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a56      	ldr	r2, [pc, #344]	; (8003bfc <HAL_DMA_Start_IT+0x224>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_DMA_Start_IT+0x228>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_DMA_Start_IT+0x22c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xee>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_DMA_Start_IT+0x230>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <HAL_DMA_Start_IT+0x100>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e007      	b.n	8003ae8 <HAL_DMA_Start_IT+0x110>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f001 f93e 	bl	8004d70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_DMA_Start_IT+0x1f4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d04a      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a33      	ldr	r2, [pc, #204]	; (8003bd0 <HAL_DMA_Start_IT+0x1f8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d045      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_DMA_Start_IT+0x1fc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d040      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_DMA_Start_IT+0x200>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03b      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a2e      	ldr	r2, [pc, #184]	; (8003bdc <HAL_DMA_Start_IT+0x204>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d036      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <HAL_DMA_Start_IT+0x208>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d031      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <HAL_DMA_Start_IT+0x20c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02c      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <HAL_DMA_Start_IT+0x210>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d027      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a28      	ldr	r2, [pc, #160]	; (8003bec <HAL_DMA_Start_IT+0x214>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <HAL_DMA_Start_IT+0x218>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_DMA_Start_IT+0x21c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <HAL_DMA_Start_IT+0x220>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_DMA_Start_IT+0x224>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <HAL_DMA_Start_IT+0x228>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_DMA_Start_IT+0x22c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_Start_IT+0x1bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <HAL_DMA_Start_IT+0x230>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_DMA_Start_IT+0x1c0>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_DMA_Start_IT+0x1c2>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d036      	beq.n	8003c0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 021e 	bic.w	r2, r3, #30
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0216 	orr.w	r2, r2, #22
 8003bb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d03e      	beq.n	8003c38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0208 	orr.w	r2, r2, #8
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e035      	b.n	8003c38 <HAL_DMA_Start_IT+0x260>
 8003bcc:	40020010 	.word	0x40020010
 8003bd0:	40020028 	.word	0x40020028
 8003bd4:	40020040 	.word	0x40020040
 8003bd8:	40020058 	.word	0x40020058
 8003bdc:	40020070 	.word	0x40020070
 8003be0:	40020088 	.word	0x40020088
 8003be4:	400200a0 	.word	0x400200a0
 8003be8:	400200b8 	.word	0x400200b8
 8003bec:	40020410 	.word	0x40020410
 8003bf0:	40020428 	.word	0x40020428
 8003bf4:	40020440 	.word	0x40020440
 8003bf8:	40020458 	.word	0x40020458
 8003bfc:	40020470 	.word	0x40020470
 8003c00:	40020488 	.word	0x40020488
 8003c04:	400204a0 	.word	0x400204a0
 8003c08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 020e 	bic.w	r2, r3, #14
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 020a 	orr.w	r2, r2, #10
 8003c1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0204 	orr.w	r2, r2, #4
 8003c36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_DMA_Start_IT+0x474>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d072      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a82      	ldr	r2, [pc, #520]	; (8003e50 <HAL_DMA_Start_IT+0x478>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d06d      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a80      	ldr	r2, [pc, #512]	; (8003e54 <HAL_DMA_Start_IT+0x47c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d068      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7f      	ldr	r2, [pc, #508]	; (8003e58 <HAL_DMA_Start_IT+0x480>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d063      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a7d      	ldr	r2, [pc, #500]	; (8003e5c <HAL_DMA_Start_IT+0x484>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d05e      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7c      	ldr	r2, [pc, #496]	; (8003e60 <HAL_DMA_Start_IT+0x488>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d059      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a7a      	ldr	r2, [pc, #488]	; (8003e64 <HAL_DMA_Start_IT+0x48c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d054      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a79      	ldr	r2, [pc, #484]	; (8003e68 <HAL_DMA_Start_IT+0x490>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04f      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a77      	ldr	r2, [pc, #476]	; (8003e6c <HAL_DMA_Start_IT+0x494>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04a      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a76      	ldr	r2, [pc, #472]	; (8003e70 <HAL_DMA_Start_IT+0x498>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d045      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a74      	ldr	r2, [pc, #464]	; (8003e74 <HAL_DMA_Start_IT+0x49c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d040      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a73      	ldr	r2, [pc, #460]	; (8003e78 <HAL_DMA_Start_IT+0x4a0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d03b      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a71      	ldr	r2, [pc, #452]	; (8003e7c <HAL_DMA_Start_IT+0x4a4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d036      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a70      	ldr	r2, [pc, #448]	; (8003e80 <HAL_DMA_Start_IT+0x4a8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d031      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_DMA_Start_IT+0x4ac>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02c      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6d      	ldr	r2, [pc, #436]	; (8003e88 <HAL_DMA_Start_IT+0x4b0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d027      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6b      	ldr	r2, [pc, #428]	; (8003e8c <HAL_DMA_Start_IT+0x4b4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <HAL_DMA_Start_IT+0x4b8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01d      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a68      	ldr	r2, [pc, #416]	; (8003e94 <HAL_DMA_Start_IT+0x4bc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a67      	ldr	r2, [pc, #412]	; (8003e98 <HAL_DMA_Start_IT+0x4c0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a65      	ldr	r2, [pc, #404]	; (8003e9c <HAL_DMA_Start_IT+0x4c4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a64      	ldr	r2, [pc, #400]	; (8003ea0 <HAL_DMA_Start_IT+0x4c8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a62      	ldr	r2, [pc, #392]	; (8003ea4 <HAL_DMA_Start_IT+0x4cc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_DMA_Start_IT+0x350>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a61      	ldr	r2, [pc, #388]	; (8003ea8 <HAL_DMA_Start_IT+0x4d0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_DMA_Start_IT+0x354>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_DMA_Start_IT+0x356>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01a      	beq.n	8003d68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <HAL_DMA_Start_IT+0x474>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04a      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a36      	ldr	r2, [pc, #216]	; (8003e50 <HAL_DMA_Start_IT+0x478>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d045      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <HAL_DMA_Start_IT+0x47c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d040      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <HAL_DMA_Start_IT+0x480>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d03b      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_DMA_Start_IT+0x484>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d036      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <HAL_DMA_Start_IT+0x488>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d031      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <HAL_DMA_Start_IT+0x48c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <HAL_DMA_Start_IT+0x490>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d027      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_DMA_Start_IT+0x494>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d022      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <HAL_DMA_Start_IT+0x498>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d01d      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a28      	ldr	r2, [pc, #160]	; (8003e74 <HAL_DMA_Start_IT+0x49c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <HAL_DMA_Start_IT+0x4a0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a25      	ldr	r2, [pc, #148]	; (8003e7c <HAL_DMA_Start_IT+0x4a4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a24      	ldr	r2, [pc, #144]	; (8003e80 <HAL_DMA_Start_IT+0x4a8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <HAL_DMA_Start_IT+0x4ac>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_DMA_Start_IT+0x430>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <HAL_DMA_Start_IT+0x4b0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <HAL_DMA_Start_IT+0x442>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e012      	b.n	8003e40 <HAL_DMA_Start_IT+0x468>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e009      	b.n	8003e40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40020010 	.word	0x40020010
 8003e50:	40020028 	.word	0x40020028
 8003e54:	40020040 	.word	0x40020040
 8003e58:	40020058 	.word	0x40020058
 8003e5c:	40020070 	.word	0x40020070
 8003e60:	40020088 	.word	0x40020088
 8003e64:	400200a0 	.word	0x400200a0
 8003e68:	400200b8 	.word	0x400200b8
 8003e6c:	40020410 	.word	0x40020410
 8003e70:	40020428 	.word	0x40020428
 8003e74:	40020440 	.word	0x40020440
 8003e78:	40020458 	.word	0x40020458
 8003e7c:	40020470 	.word	0x40020470
 8003e80:	40020488 	.word	0x40020488
 8003e84:	400204a0 	.word	0x400204a0
 8003e88:	400204b8 	.word	0x400204b8
 8003e8c:	58025408 	.word	0x58025408
 8003e90:	5802541c 	.word	0x5802541c
 8003e94:	58025430 	.word	0x58025430
 8003e98:	58025444 	.word	0x58025444
 8003e9c:	58025458 	.word	0x58025458
 8003ea0:	5802546c 	.word	0x5802546c
 8003ea4:	58025480 	.word	0x58025480
 8003ea8:	58025494 	.word	0x58025494

08003eac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eb8:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_DMA_IRQHandler+0x1ac>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a67      	ldr	r2, [pc, #412]	; (800405c <HAL_DMA_IRQHandler+0x1b0>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5f      	ldr	r2, [pc, #380]	; (8004060 <HAL_DMA_IRQHandler+0x1b4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04a      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <HAL_DMA_IRQHandler+0x1b8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d045      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <HAL_DMA_IRQHandler+0x1bc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d040      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5a      	ldr	r2, [pc, #360]	; (800406c <HAL_DMA_IRQHandler+0x1c0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03b      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a59      	ldr	r2, [pc, #356]	; (8004070 <HAL_DMA_IRQHandler+0x1c4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d036      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a57      	ldr	r2, [pc, #348]	; (8004074 <HAL_DMA_IRQHandler+0x1c8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a56      	ldr	r2, [pc, #344]	; (8004078 <HAL_DMA_IRQHandler+0x1cc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d02c      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_DMA_IRQHandler+0x1d0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d027      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a53      	ldr	r2, [pc, #332]	; (8004080 <HAL_DMA_IRQHandler+0x1d4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a51      	ldr	r2, [pc, #324]	; (8004084 <HAL_DMA_IRQHandler+0x1d8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a50      	ldr	r2, [pc, #320]	; (8004088 <HAL_DMA_IRQHandler+0x1dc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a4e      	ldr	r2, [pc, #312]	; (800408c <HAL_DMA_IRQHandler+0x1e0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <HAL_DMA_IRQHandler+0x1e4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <HAL_DMA_IRQHandler+0x1e8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a4a      	ldr	r2, [pc, #296]	; (8004098 <HAL_DMA_IRQHandler+0x1ec>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xd2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a48      	ldr	r2, [pc, #288]	; (800409c <HAL_DMA_IRQHandler+0x1f0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_DMA_IRQHandler+0xd6>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_DMA_IRQHandler+0xd8>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 842b 	beq.w	80047e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2208      	movs	r2, #8
 8003f94:	409a      	lsls	r2, r3
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80a2 	beq.w	80040e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <HAL_DMA_IRQHandler+0x1b4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <HAL_DMA_IRQHandler+0x1b8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <HAL_DMA_IRQHandler+0x1bc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <HAL_DMA_IRQHandler+0x1c0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_DMA_IRQHandler+0x1c4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_DMA_IRQHandler+0x1c8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_DMA_IRQHandler+0x1cc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a24      	ldr	r2, [pc, #144]	; (800407c <HAL_DMA_IRQHandler+0x1d0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <HAL_DMA_IRQHandler+0x1d4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <HAL_DMA_IRQHandler+0x1d8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_DMA_IRQHandler+0x1dc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_DMA_IRQHandler+0x1e0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_DMA_IRQHandler+0x1e4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_DMA_IRQHandler+0x1e8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_DMA_IRQHandler+0x1ec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_DMA_IRQHandler+0x194>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_DMA_IRQHandler+0x1f0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d12f      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x1f4>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e02e      	b.n	80040b4 <HAL_DMA_IRQHandler+0x208>
 8004056:	bf00      	nop
 8004058:	24000000 	.word	0x24000000
 800405c:	1b4e81b5 	.word	0x1b4e81b5
 8004060:	40020010 	.word	0x40020010
 8004064:	40020028 	.word	0x40020028
 8004068:	40020040 	.word	0x40020040
 800406c:	40020058 	.word	0x40020058
 8004070:	40020070 	.word	0x40020070
 8004074:	40020088 	.word	0x40020088
 8004078:	400200a0 	.word	0x400200a0
 800407c:	400200b8 	.word	0x400200b8
 8004080:	40020410 	.word	0x40020410
 8004084:	40020428 	.word	0x40020428
 8004088:	40020440 	.word	0x40020440
 800408c:	40020458 	.word	0x40020458
 8004090:	40020470 	.word	0x40020470
 8004094:	40020488 	.word	0x40020488
 8004098:	400204a0 	.word	0x400204a0
 800409c:	400204b8 	.word	0x400204b8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2208      	movs	r2, #8
 80040d2:	409a      	lsls	r2, r3
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 0201 	orr.w	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d06e      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a69      	ldr	r2, [pc, #420]	; (80042a4 <HAL_DMA_IRQHandler+0x3f8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04a      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a67      	ldr	r2, [pc, #412]	; (80042a8 <HAL_DMA_IRQHandler+0x3fc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d045      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a66      	ldr	r2, [pc, #408]	; (80042ac <HAL_DMA_IRQHandler+0x400>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d040      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a64      	ldr	r2, [pc, #400]	; (80042b0 <HAL_DMA_IRQHandler+0x404>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d03b      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a63      	ldr	r2, [pc, #396]	; (80042b4 <HAL_DMA_IRQHandler+0x408>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d036      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a61      	ldr	r2, [pc, #388]	; (80042b8 <HAL_DMA_IRQHandler+0x40c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d031      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a60      	ldr	r2, [pc, #384]	; (80042bc <HAL_DMA_IRQHandler+0x410>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d02c      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <HAL_DMA_IRQHandler+0x414>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d027      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5d      	ldr	r2, [pc, #372]	; (80042c4 <HAL_DMA_IRQHandler+0x418>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5b      	ldr	r2, [pc, #364]	; (80042c8 <HAL_DMA_IRQHandler+0x41c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01d      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5a      	ldr	r2, [pc, #360]	; (80042cc <HAL_DMA_IRQHandler+0x420>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a58      	ldr	r2, [pc, #352]	; (80042d0 <HAL_DMA_IRQHandler+0x424>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a57      	ldr	r2, [pc, #348]	; (80042d4 <HAL_DMA_IRQHandler+0x428>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a55      	ldr	r2, [pc, #340]	; (80042d8 <HAL_DMA_IRQHandler+0x42c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a54      	ldr	r2, [pc, #336]	; (80042dc <HAL_DMA_IRQHandler+0x430>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_DMA_IRQHandler+0x2ee>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <HAL_DMA_IRQHandler+0x434>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10a      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x304>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e003      	b.n	80041b8 <HAL_DMA_IRQHandler+0x30c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2201      	movs	r2, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0202 	orr.w	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2204      	movs	r2, #4
 80041e2:	409a      	lsls	r2, r3
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 808f 	beq.w	800430c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <HAL_DMA_IRQHandler+0x3f8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d04a      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <HAL_DMA_IRQHandler+0x3fc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d045      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a29      	ldr	r2, [pc, #164]	; (80042ac <HAL_DMA_IRQHandler+0x400>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d040      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_DMA_IRQHandler+0x404>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d03b      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <HAL_DMA_IRQHandler+0x408>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d036      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <HAL_DMA_IRQHandler+0x40c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d031      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a23      	ldr	r2, [pc, #140]	; (80042bc <HAL_DMA_IRQHandler+0x410>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d02c      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <HAL_DMA_IRQHandler+0x414>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d027      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <HAL_DMA_IRQHandler+0x418>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d022      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <HAL_DMA_IRQHandler+0x41c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01d      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <HAL_DMA_IRQHandler+0x420>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HAL_DMA_IRQHandler+0x424>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <HAL_DMA_IRQHandler+0x428>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_DMA_IRQHandler+0x42c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_DMA_IRQHandler+0x430>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_DMA_IRQHandler+0x3e2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <HAL_DMA_IRQHandler+0x434>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d12a      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x438>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e023      	b.n	80042ec <HAL_DMA_IRQHandler+0x440>
 80042a4:	40020010 	.word	0x40020010
 80042a8:	40020028 	.word	0x40020028
 80042ac:	40020040 	.word	0x40020040
 80042b0:	40020058 	.word	0x40020058
 80042b4:	40020070 	.word	0x40020070
 80042b8:	40020088 	.word	0x40020088
 80042bc:	400200a0 	.word	0x400200a0
 80042c0:	400200b8 	.word	0x400200b8
 80042c4:	40020410 	.word	0x40020410
 80042c8:	40020428 	.word	0x40020428
 80042cc:	40020440 	.word	0x40020440
 80042d0:	40020458 	.word	0x40020458
 80042d4:	40020470 	.word	0x40020470
 80042d8:	40020488 	.word	0x40020488
 80042dc:	400204a0 	.word	0x400204a0
 80042e0:	400204b8 	.word	0x400204b8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2204      	movs	r2, #4
 80042fa:	409a      	lsls	r2, r3
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2210      	movs	r2, #16
 8004316:	409a      	lsls	r2, r3
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a6 	beq.w	800446e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a85      	ldr	r2, [pc, #532]	; (800453c <HAL_DMA_IRQHandler+0x690>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a83      	ldr	r2, [pc, #524]	; (8004540 <HAL_DMA_IRQHandler+0x694>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a82      	ldr	r2, [pc, #520]	; (8004544 <HAL_DMA_IRQHandler+0x698>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a80      	ldr	r2, [pc, #512]	; (8004548 <HAL_DMA_IRQHandler+0x69c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7f      	ldr	r2, [pc, #508]	; (800454c <HAL_DMA_IRQHandler+0x6a0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a7d      	ldr	r2, [pc, #500]	; (8004550 <HAL_DMA_IRQHandler+0x6a4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_DMA_IRQHandler+0x6a8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7a      	ldr	r2, [pc, #488]	; (8004558 <HAL_DMA_IRQHandler+0x6ac>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a79      	ldr	r2, [pc, #484]	; (800455c <HAL_DMA_IRQHandler+0x6b0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a77      	ldr	r2, [pc, #476]	; (8004560 <HAL_DMA_IRQHandler+0x6b4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a76      	ldr	r2, [pc, #472]	; (8004564 <HAL_DMA_IRQHandler+0x6b8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a74      	ldr	r2, [pc, #464]	; (8004568 <HAL_DMA_IRQHandler+0x6bc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a73      	ldr	r2, [pc, #460]	; (800456c <HAL_DMA_IRQHandler+0x6c0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a71      	ldr	r2, [pc, #452]	; (8004570 <HAL_DMA_IRQHandler+0x6c4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	; (8004574 <HAL_DMA_IRQHandler+0x6c8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x516>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_DMA_IRQHandler+0x6cc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10a      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x52c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e009      	b.n	80043ec <HAL_DMA_IRQHandler+0x540>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03e      	beq.n	800446e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2210      	movs	r2, #16
 80043fa:	409a      	lsls	r2, r3
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d018      	beq.n	8004440 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d024      	beq.n	800446e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
 800442c:	e01f      	b.n	800446e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01b      	beq.n	800446e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e016      	b.n	800446e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0208 	bic.w	r2, r2, #8
 800445c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2220      	movs	r2, #32
 8004478:	409a      	lsls	r2, r3
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8110 	beq.w	80046a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2c      	ldr	r2, [pc, #176]	; (800453c <HAL_DMA_IRQHandler+0x690>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04a      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <HAL_DMA_IRQHandler+0x694>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d045      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a29      	ldr	r2, [pc, #164]	; (8004544 <HAL_DMA_IRQHandler+0x698>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d040      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a28      	ldr	r2, [pc, #160]	; (8004548 <HAL_DMA_IRQHandler+0x69c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d03b      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a26      	ldr	r2, [pc, #152]	; (800454c <HAL_DMA_IRQHandler+0x6a0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d036      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a25      	ldr	r2, [pc, #148]	; (8004550 <HAL_DMA_IRQHandler+0x6a4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d031      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_DMA_IRQHandler+0x6a8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02c      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_DMA_IRQHandler+0x6ac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d027      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_DMA_IRQHandler+0x6b0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <HAL_DMA_IRQHandler+0x6b4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_DMA_IRQHandler+0x6b8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_DMA_IRQHandler+0x6bc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_DMA_IRQHandler+0x6c0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a19      	ldr	r2, [pc, #100]	; (8004570 <HAL_DMA_IRQHandler+0x6c4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <HAL_DMA_IRQHandler+0x6c8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_DMA_IRQHandler+0x678>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_DMA_IRQHandler+0x6cc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d12b      	bne.n	800457c <HAL_DMA_IRQHandler+0x6d0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e02a      	b.n	8004590 <HAL_DMA_IRQHandler+0x6e4>
 800453a:	bf00      	nop
 800453c:	40020010 	.word	0x40020010
 8004540:	40020028 	.word	0x40020028
 8004544:	40020040 	.word	0x40020040
 8004548:	40020058 	.word	0x40020058
 800454c:	40020070 	.word	0x40020070
 8004550:	40020088 	.word	0x40020088
 8004554:	400200a0 	.word	0x400200a0
 8004558:	400200b8 	.word	0x400200b8
 800455c:	40020410 	.word	0x40020410
 8004560:	40020428 	.word	0x40020428
 8004564:	40020440 	.word	0x40020440
 8004568:	40020458 	.word	0x40020458
 800456c:	40020470 	.word	0x40020470
 8004570:	40020488 	.word	0x40020488
 8004574:	400204a0 	.word	0x400204a0
 8004578:	400204b8 	.word	0x400204b8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8087 	beq.w	80046a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2220      	movs	r2, #32
 80045a0:	409a      	lsls	r2, r3
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d139      	bne.n	8004626 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0216 	bic.w	r2, r2, #22
 80045c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <HAL_DMA_IRQHandler+0x736>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0208 	bic.w	r2, r2, #8
 80045f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	223f      	movs	r2, #63	; 0x3f
 80045fc:	409a      	lsls	r2, r3
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8382 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
          }
          return;
 8004624:	e37c      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d018      	beq.n	8004666 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	2b00      	cmp	r3, #0
 8004648:	d02c      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
 8004652:	e027      	b.n	80046a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d023      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
 8004664:	e01e      	b.n	80046a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0210 	bic.w	r2, r2, #16
 8004682:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 833e 	beq.w	8004d2a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8088 	beq.w	80047cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2204      	movs	r2, #4
 80046c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a8e      	ldr	r2, [pc, #568]	; (8004904 <HAL_DMA_IRQHandler+0xa58>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a8d      	ldr	r2, [pc, #564]	; (8004908 <HAL_DMA_IRQHandler+0xa5c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a8b      	ldr	r2, [pc, #556]	; (800490c <HAL_DMA_IRQHandler+0xa60>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a8a      	ldr	r2, [pc, #552]	; (8004910 <HAL_DMA_IRQHandler+0xa64>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a88      	ldr	r2, [pc, #544]	; (8004914 <HAL_DMA_IRQHandler+0xa68>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a87      	ldr	r2, [pc, #540]	; (8004918 <HAL_DMA_IRQHandler+0xa6c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a85      	ldr	r2, [pc, #532]	; (800491c <HAL_DMA_IRQHandler+0xa70>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a84      	ldr	r2, [pc, #528]	; (8004920 <HAL_DMA_IRQHandler+0xa74>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a82      	ldr	r2, [pc, #520]	; (8004924 <HAL_DMA_IRQHandler+0xa78>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a81      	ldr	r2, [pc, #516]	; (8004928 <HAL_DMA_IRQHandler+0xa7c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7f      	ldr	r2, [pc, #508]	; (800492c <HAL_DMA_IRQHandler+0xa80>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_DMA_IRQHandler+0xa84>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7c      	ldr	r2, [pc, #496]	; (8004934 <HAL_DMA_IRQHandler+0xa88>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7b      	ldr	r2, [pc, #492]	; (8004938 <HAL_DMA_IRQHandler+0xa8c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a79      	ldr	r2, [pc, #484]	; (800493c <HAL_DMA_IRQHandler+0xa90>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_IRQHandler+0x8b8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a78      	ldr	r2, [pc, #480]	; (8004940 <HAL_DMA_IRQHandler+0xa94>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <HAL_DMA_IRQHandler+0x8ca>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e007      	b.n	8004786 <HAL_DMA_IRQHandler+0x8da>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	429a      	cmp	r2, r3
 8004790:	d307      	bcc.n	80047a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f2      	bne.n	8004786 <HAL_DMA_IRQHandler+0x8da>
 80047a0:	e000      	b.n	80047a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047a2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2203      	movs	r2, #3
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047c2:	e003      	b.n	80047cc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 82aa 	beq.w	8004d2a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
 80047de:	e2a4      	b.n	8004d2a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <HAL_DMA_IRQHandler+0xa98>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d04a      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a56      	ldr	r2, [pc, #344]	; (8004948 <HAL_DMA_IRQHandler+0xa9c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d045      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a54      	ldr	r2, [pc, #336]	; (800494c <HAL_DMA_IRQHandler+0xaa0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d040      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a53      	ldr	r2, [pc, #332]	; (8004950 <HAL_DMA_IRQHandler+0xaa4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d03b      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a51      	ldr	r2, [pc, #324]	; (8004954 <HAL_DMA_IRQHandler+0xaa8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d036      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a50      	ldr	r2, [pc, #320]	; (8004958 <HAL_DMA_IRQHandler+0xaac>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d031      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a4e      	ldr	r2, [pc, #312]	; (800495c <HAL_DMA_IRQHandler+0xab0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02c      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4d      	ldr	r2, [pc, #308]	; (8004960 <HAL_DMA_IRQHandler+0xab4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d027      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a4b      	ldr	r2, [pc, #300]	; (8004964 <HAL_DMA_IRQHandler+0xab8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a4a      	ldr	r2, [pc, #296]	; (8004968 <HAL_DMA_IRQHandler+0xabc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01d      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a48      	ldr	r2, [pc, #288]	; (800496c <HAL_DMA_IRQHandler+0xac0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a47      	ldr	r2, [pc, #284]	; (8004970 <HAL_DMA_IRQHandler+0xac4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a45      	ldr	r2, [pc, #276]	; (8004974 <HAL_DMA_IRQHandler+0xac8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a44      	ldr	r2, [pc, #272]	; (8004978 <HAL_DMA_IRQHandler+0xacc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a42      	ldr	r2, [pc, #264]	; (800497c <HAL_DMA_IRQHandler+0xad0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_DMA_IRQHandler+0x9d4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a41      	ldr	r2, [pc, #260]	; (8004980 <HAL_DMA_IRQHandler+0xad4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_DMA_IRQHandler+0x9d8>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_DMA_IRQHandler+0x9da>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 824f 	beq.w	8004d2a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2204      	movs	r2, #4
 800489e:	409a      	lsls	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80dd 	beq.w	8004a64 <HAL_DMA_IRQHandler+0xbb8>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80d7 	beq.w	8004a64 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	f003 031f 	and.w	r3, r3, #31
 80048be:	2204      	movs	r2, #4
 80048c0:	409a      	lsls	r2, r3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d059      	beq.n	8004984 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8220 	beq.w	8004d24 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ec:	e21a      	b.n	8004d24 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8216 	beq.w	8004d24 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004900:	e210      	b.n	8004d24 <HAL_DMA_IRQHandler+0xe78>
 8004902:	bf00      	nop
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	40020040 	.word	0x40020040
 8004910:	40020058 	.word	0x40020058
 8004914:	40020070 	.word	0x40020070
 8004918:	40020088 	.word	0x40020088
 800491c:	400200a0 	.word	0x400200a0
 8004920:	400200b8 	.word	0x400200b8
 8004924:	40020410 	.word	0x40020410
 8004928:	40020428 	.word	0x40020428
 800492c:	40020440 	.word	0x40020440
 8004930:	40020458 	.word	0x40020458
 8004934:	40020470 	.word	0x40020470
 8004938:	40020488 	.word	0x40020488
 800493c:	400204a0 	.word	0x400204a0
 8004940:	400204b8 	.word	0x400204b8
 8004944:	48022c08 	.word	0x48022c08
 8004948:	48022c1c 	.word	0x48022c1c
 800494c:	48022c30 	.word	0x48022c30
 8004950:	48022c44 	.word	0x48022c44
 8004954:	48022c58 	.word	0x48022c58
 8004958:	48022c6c 	.word	0x48022c6c
 800495c:	48022c80 	.word	0x48022c80
 8004960:	48022c94 	.word	0x48022c94
 8004964:	58025408 	.word	0x58025408
 8004968:	5802541c 	.word	0x5802541c
 800496c:	58025430 	.word	0x58025430
 8004970:	58025444 	.word	0x58025444
 8004974:	58025458 	.word	0x58025458
 8004978:	5802546c 	.word	0x5802546c
 800497c:	58025480 	.word	0x58025480
 8004980:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d160      	bne.n	8004a50 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a8c      	ldr	r2, [pc, #560]	; (8004bc4 <HAL_DMA_IRQHandler+0xd18>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04a      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a8a      	ldr	r2, [pc, #552]	; (8004bc8 <HAL_DMA_IRQHandler+0xd1c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d045      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a89      	ldr	r2, [pc, #548]	; (8004bcc <HAL_DMA_IRQHandler+0xd20>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d040      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a87      	ldr	r2, [pc, #540]	; (8004bd0 <HAL_DMA_IRQHandler+0xd24>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d03b      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a86      	ldr	r2, [pc, #536]	; (8004bd4 <HAL_DMA_IRQHandler+0xd28>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d036      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a84      	ldr	r2, [pc, #528]	; (8004bd8 <HAL_DMA_IRQHandler+0xd2c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d031      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a83      	ldr	r2, [pc, #524]	; (8004bdc <HAL_DMA_IRQHandler+0xd30>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d02c      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a81      	ldr	r2, [pc, #516]	; (8004be0 <HAL_DMA_IRQHandler+0xd34>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d027      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a80      	ldr	r2, [pc, #512]	; (8004be4 <HAL_DMA_IRQHandler+0xd38>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a7e      	ldr	r2, [pc, #504]	; (8004be8 <HAL_DMA_IRQHandler+0xd3c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01d      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7d      	ldr	r2, [pc, #500]	; (8004bec <HAL_DMA_IRQHandler+0xd40>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7b      	ldr	r2, [pc, #492]	; (8004bf0 <HAL_DMA_IRQHandler+0xd44>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7a      	ldr	r2, [pc, #488]	; (8004bf4 <HAL_DMA_IRQHandler+0xd48>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a78      	ldr	r2, [pc, #480]	; (8004bf8 <HAL_DMA_IRQHandler+0xd4c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a77      	ldr	r2, [pc, #476]	; (8004bfc <HAL_DMA_IRQHandler+0xd50>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xb82>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a75      	ldr	r2, [pc, #468]	; (8004c00 <HAL_DMA_IRQHandler+0xd54>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <HAL_DMA_IRQHandler+0xb94>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0208 	bic.w	r2, r2, #8
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e007      	b.n	8004a50 <HAL_DMA_IRQHandler+0xba4>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8165 	beq.w	8004d24 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a62:	e15f      	b.n	8004d24 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80c5 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xd58>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80bf 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2202      	movs	r2, #2
 8004a90:	409a      	lsls	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d018      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 813a 	beq.w	8004d28 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004abc:	e134      	b.n	8004d28 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8130 	beq.w	8004d28 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad0:	e12a      	b.n	8004d28 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d168      	bne.n	8004bae <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_DMA_IRQHandler+0xd18>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04a      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <HAL_DMA_IRQHandler+0xd1c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d045      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a35      	ldr	r2, [pc, #212]	; (8004bcc <HAL_DMA_IRQHandler+0xd20>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d040      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a34      	ldr	r2, [pc, #208]	; (8004bd0 <HAL_DMA_IRQHandler+0xd24>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03b      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a32      	ldr	r2, [pc, #200]	; (8004bd4 <HAL_DMA_IRQHandler+0xd28>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a31      	ldr	r2, [pc, #196]	; (8004bd8 <HAL_DMA_IRQHandler+0xd2c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d031      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <HAL_DMA_IRQHandler+0xd30>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02c      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <HAL_DMA_IRQHandler+0xd34>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d027      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2c      	ldr	r2, [pc, #176]	; (8004be4 <HAL_DMA_IRQHandler+0xd38>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <HAL_DMA_IRQHandler+0xd3c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_DMA_IRQHandler+0xd40>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a28      	ldr	r2, [pc, #160]	; (8004bf0 <HAL_DMA_IRQHandler+0xd44>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a26      	ldr	r2, [pc, #152]	; (8004bf4 <HAL_DMA_IRQHandler+0xd48>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <HAL_DMA_IRQHandler+0xd4c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a23      	ldr	r2, [pc, #140]	; (8004bfc <HAL_DMA_IRQHandler+0xd50>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xcd0>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <HAL_DMA_IRQHandler+0xd54>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <HAL_DMA_IRQHandler+0xce2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0214 	bic.w	r2, r2, #20
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e007      	b.n	8004b9e <HAL_DMA_IRQHandler+0xcf2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 020a 	bic.w	r2, r2, #10
 8004b9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80b8 	beq.w	8004d28 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bc0:	e0b2      	b.n	8004d28 <HAL_DMA_IRQHandler+0xe7c>
 8004bc2:	bf00      	nop
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8088 	beq.w	8004d2a <HAL_DMA_IRQHandler+0xe7e>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8082 	beq.w	8004d2a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a41      	ldr	r2, [pc, #260]	; (8004d30 <HAL_DMA_IRQHandler+0xe84>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d04a      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a3f      	ldr	r2, [pc, #252]	; (8004d34 <HAL_DMA_IRQHandler+0xe88>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d045      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3e      	ldr	r2, [pc, #248]	; (8004d38 <HAL_DMA_IRQHandler+0xe8c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d040      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <HAL_DMA_IRQHandler+0xe90>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <HAL_DMA_IRQHandler+0xe94>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d036      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a39      	ldr	r2, [pc, #228]	; (8004d44 <HAL_DMA_IRQHandler+0xe98>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <HAL_DMA_IRQHandler+0xe9c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d02c      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a36      	ldr	r2, [pc, #216]	; (8004d4c <HAL_DMA_IRQHandler+0xea0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d027      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a35      	ldr	r2, [pc, #212]	; (8004d50 <HAL_DMA_IRQHandler+0xea4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <HAL_DMA_IRQHandler+0xea8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <HAL_DMA_IRQHandler+0xeac>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <HAL_DMA_IRQHandler+0xeb0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <HAL_DMA_IRQHandler+0xeb4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <HAL_DMA_IRQHandler+0xeb8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <HAL_DMA_IRQHandler+0xebc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0xe1a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <HAL_DMA_IRQHandler+0xec0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0xe2c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 021c 	bic.w	r2, r2, #28
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e007      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe3c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 020e 	bic.w	r2, r2, #14
 8004ce6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	e004      	b.n	8004d2a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004d20:	bf00      	nop
 8004d22:	e002      	b.n	8004d2a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d2a:	3728      	adds	r7, #40	; 0x28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8

08004d70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a84      	ldr	r2, [pc, #528]	; (8004fa0 <DMA_SetConfig+0x230>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d072      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a82      	ldr	r2, [pc, #520]	; (8004fa4 <DMA_SetConfig+0x234>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d06d      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a81      	ldr	r2, [pc, #516]	; (8004fa8 <DMA_SetConfig+0x238>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d068      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a7f      	ldr	r2, [pc, #508]	; (8004fac <DMA_SetConfig+0x23c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d063      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7e      	ldr	r2, [pc, #504]	; (8004fb0 <DMA_SetConfig+0x240>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d05e      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a7c      	ldr	r2, [pc, #496]	; (8004fb4 <DMA_SetConfig+0x244>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d059      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a7b      	ldr	r2, [pc, #492]	; (8004fb8 <DMA_SetConfig+0x248>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d054      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a79      	ldr	r2, [pc, #484]	; (8004fbc <DMA_SetConfig+0x24c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d04f      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a78      	ldr	r2, [pc, #480]	; (8004fc0 <DMA_SetConfig+0x250>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d04a      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a76      	ldr	r2, [pc, #472]	; (8004fc4 <DMA_SetConfig+0x254>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d045      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a75      	ldr	r2, [pc, #468]	; (8004fc8 <DMA_SetConfig+0x258>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d040      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a73      	ldr	r2, [pc, #460]	; (8004fcc <DMA_SetConfig+0x25c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d03b      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <DMA_SetConfig+0x260>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d036      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a70      	ldr	r2, [pc, #448]	; (8004fd4 <DMA_SetConfig+0x264>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d031      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6f      	ldr	r2, [pc, #444]	; (8004fd8 <DMA_SetConfig+0x268>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d02c      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a6d      	ldr	r2, [pc, #436]	; (8004fdc <DMA_SetConfig+0x26c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d027      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6c      	ldr	r2, [pc, #432]	; (8004fe0 <DMA_SetConfig+0x270>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a6a      	ldr	r2, [pc, #424]	; (8004fe4 <DMA_SetConfig+0x274>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a69      	ldr	r2, [pc, #420]	; (8004fe8 <DMA_SetConfig+0x278>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a67      	ldr	r2, [pc, #412]	; (8004fec <DMA_SetConfig+0x27c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a66      	ldr	r2, [pc, #408]	; (8004ff0 <DMA_SetConfig+0x280>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a64      	ldr	r2, [pc, #400]	; (8004ff4 <DMA_SetConfig+0x284>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a63      	ldr	r2, [pc, #396]	; (8004ff8 <DMA_SetConfig+0x288>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <DMA_SetConfig+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a61      	ldr	r2, [pc, #388]	; (8004ffc <DMA_SetConfig+0x28c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <DMA_SetConfig+0x10e>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <DMA_SetConfig+0x110>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3e      	ldr	r2, [pc, #248]	; (8004fa0 <DMA_SetConfig+0x230>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d04a      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3d      	ldr	r2, [pc, #244]	; (8004fa4 <DMA_SetConfig+0x234>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d045      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3b      	ldr	r2, [pc, #236]	; (8004fa8 <DMA_SetConfig+0x238>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d040      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a3a      	ldr	r2, [pc, #232]	; (8004fac <DMA_SetConfig+0x23c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d03b      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a38      	ldr	r2, [pc, #224]	; (8004fb0 <DMA_SetConfig+0x240>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d036      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a37      	ldr	r2, [pc, #220]	; (8004fb4 <DMA_SetConfig+0x244>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d031      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	; (8004fb8 <DMA_SetConfig+0x248>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02c      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a34      	ldr	r2, [pc, #208]	; (8004fbc <DMA_SetConfig+0x24c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d027      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a32      	ldr	r2, [pc, #200]	; (8004fc0 <DMA_SetConfig+0x250>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d022      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a31      	ldr	r2, [pc, #196]	; (8004fc4 <DMA_SetConfig+0x254>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d01d      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <DMA_SetConfig+0x258>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2e      	ldr	r2, [pc, #184]	; (8004fcc <DMA_SetConfig+0x25c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <DMA_SetConfig+0x260>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <DMA_SetConfig+0x264>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <DMA_SetConfig+0x268>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <DMA_SetConfig+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <DMA_SetConfig+0x26c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <DMA_SetConfig+0x1d4>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <DMA_SetConfig+0x1d6>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d05a      	beq.n	8005000 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	223f      	movs	r2, #63	; 0x3f
 8004f54:	409a      	lsls	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d108      	bne.n	8004f8c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f8a:	e0af      	b.n	80050ec <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
}
 8004f9c:	e0a6      	b.n	80050ec <DMA_SetConfig+0x37c>
 8004f9e:	bf00      	nop
 8004fa0:	40020010 	.word	0x40020010
 8004fa4:	40020028 	.word	0x40020028
 8004fa8:	40020040 	.word	0x40020040
 8004fac:	40020058 	.word	0x40020058
 8004fb0:	40020070 	.word	0x40020070
 8004fb4:	40020088 	.word	0x40020088
 8004fb8:	400200a0 	.word	0x400200a0
 8004fbc:	400200b8 	.word	0x400200b8
 8004fc0:	40020410 	.word	0x40020410
 8004fc4:	40020428 	.word	0x40020428
 8004fc8:	40020440 	.word	0x40020440
 8004fcc:	40020458 	.word	0x40020458
 8004fd0:	40020470 	.word	0x40020470
 8004fd4:	40020488 	.word	0x40020488
 8004fd8:	400204a0 	.word	0x400204a0
 8004fdc:	400204b8 	.word	0x400204b8
 8004fe0:	58025408 	.word	0x58025408
 8004fe4:	5802541c 	.word	0x5802541c
 8004fe8:	58025430 	.word	0x58025430
 8004fec:	58025444 	.word	0x58025444
 8004ff0:	58025458 	.word	0x58025458
 8004ff4:	5802546c 	.word	0x5802546c
 8004ff8:	58025480 	.word	0x58025480
 8004ffc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a3c      	ldr	r2, [pc, #240]	; (80050f8 <DMA_SetConfig+0x388>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d04a      	beq.n	80050a0 <DMA_SetConfig+0x330>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3b      	ldr	r2, [pc, #236]	; (80050fc <DMA_SetConfig+0x38c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d045      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a39      	ldr	r2, [pc, #228]	; (8005100 <DMA_SetConfig+0x390>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d040      	beq.n	80050a0 <DMA_SetConfig+0x330>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a38      	ldr	r2, [pc, #224]	; (8005104 <DMA_SetConfig+0x394>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d03b      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a36      	ldr	r2, [pc, #216]	; (8005108 <DMA_SetConfig+0x398>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d036      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a35      	ldr	r2, [pc, #212]	; (800510c <DMA_SetConfig+0x39c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d031      	beq.n	80050a0 <DMA_SetConfig+0x330>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a33      	ldr	r2, [pc, #204]	; (8005110 <DMA_SetConfig+0x3a0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02c      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a32      	ldr	r2, [pc, #200]	; (8005114 <DMA_SetConfig+0x3a4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d027      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	; (8005118 <DMA_SetConfig+0x3a8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <DMA_SetConfig+0x330>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2f      	ldr	r2, [pc, #188]	; (800511c <DMA_SetConfig+0x3ac>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01d      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <DMA_SetConfig+0x3b0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <DMA_SetConfig+0x330>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <DMA_SetConfig+0x3b4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <DMA_SetConfig+0x3b8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a29      	ldr	r2, [pc, #164]	; (800512c <DMA_SetConfig+0x3bc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <DMA_SetConfig+0x330>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a27      	ldr	r2, [pc, #156]	; (8005130 <DMA_SetConfig+0x3c0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <DMA_SetConfig+0x330>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a26      	ldr	r2, [pc, #152]	; (8005134 <DMA_SetConfig+0x3c4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <DMA_SetConfig+0x334>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <DMA_SetConfig+0x336>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d020      	beq.n	80050ec <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2201      	movs	r2, #1
 80050b4:	409a      	lsls	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d108      	bne.n	80050dc <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	60da      	str	r2, [r3, #12]
}
 80050da:	e007      	b.n	80050ec <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	48022c08 	.word	0x48022c08
 80050fc:	48022c1c 	.word	0x48022c1c
 8005100:	48022c30 	.word	0x48022c30
 8005104:	48022c44 	.word	0x48022c44
 8005108:	48022c58 	.word	0x48022c58
 800510c:	48022c6c 	.word	0x48022c6c
 8005110:	48022c80 	.word	0x48022c80
 8005114:	48022c94 	.word	0x48022c94
 8005118:	58025408 	.word	0x58025408
 800511c:	5802541c 	.word	0x5802541c
 8005120:	58025430 	.word	0x58025430
 8005124:	58025444 	.word	0x58025444
 8005128:	58025458 	.word	0x58025458
 800512c:	5802546c 	.word	0x5802546c
 8005130:	58025480 	.word	0x58025480
 8005134:	58025494 	.word	0x58025494

08005138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a42      	ldr	r2, [pc, #264]	; (8005250 <DMA_CalcBaseAndBitshift+0x118>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d04a      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a41      	ldr	r2, [pc, #260]	; (8005254 <DMA_CalcBaseAndBitshift+0x11c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d045      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3f      	ldr	r2, [pc, #252]	; (8005258 <DMA_CalcBaseAndBitshift+0x120>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d040      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a3e      	ldr	r2, [pc, #248]	; (800525c <DMA_CalcBaseAndBitshift+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d03b      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a3c      	ldr	r2, [pc, #240]	; (8005260 <DMA_CalcBaseAndBitshift+0x128>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d036      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a3b      	ldr	r2, [pc, #236]	; (8005264 <DMA_CalcBaseAndBitshift+0x12c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d031      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a39      	ldr	r2, [pc, #228]	; (8005268 <DMA_CalcBaseAndBitshift+0x130>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02c      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a38      	ldr	r2, [pc, #224]	; (800526c <DMA_CalcBaseAndBitshift+0x134>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d027      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a36      	ldr	r2, [pc, #216]	; (8005270 <DMA_CalcBaseAndBitshift+0x138>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a35      	ldr	r2, [pc, #212]	; (8005274 <DMA_CalcBaseAndBitshift+0x13c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d01d      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a33      	ldr	r2, [pc, #204]	; (8005278 <DMA_CalcBaseAndBitshift+0x140>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a32      	ldr	r2, [pc, #200]	; (800527c <DMA_CalcBaseAndBitshift+0x144>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a30      	ldr	r2, [pc, #192]	; (8005280 <DMA_CalcBaseAndBitshift+0x148>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <DMA_CalcBaseAndBitshift+0x14c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <DMA_CalcBaseAndBitshift+0x150>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xa8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2c      	ldr	r2, [pc, #176]	; (800528c <DMA_CalcBaseAndBitshift+0x154>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d101      	bne.n	80051e4 <DMA_CalcBaseAndBitshift+0xac>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <DMA_CalcBaseAndBitshift+0xae>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d024      	beq.n	8005234 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	3b10      	subs	r3, #16
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <DMA_CalcBaseAndBitshift+0x158>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	4a24      	ldr	r2, [pc, #144]	; (8005294 <DMA_CalcBaseAndBitshift+0x15c>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d908      	bls.n	8005224 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <DMA_CalcBaseAndBitshift+0x160>)
 800521a:	4013      	ands	r3, r2
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	659a      	str	r2, [r3, #88]	; 0x58
 8005222:	e00d      	b.n	8005240 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <DMA_CalcBaseAndBitshift+0x160>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6593      	str	r3, [r2, #88]	; 0x58
 8005232:	e005      	b.n	8005240 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40020010 	.word	0x40020010
 8005254:	40020028 	.word	0x40020028
 8005258:	40020040 	.word	0x40020040
 800525c:	40020058 	.word	0x40020058
 8005260:	40020070 	.word	0x40020070
 8005264:	40020088 	.word	0x40020088
 8005268:	400200a0 	.word	0x400200a0
 800526c:	400200b8 	.word	0x400200b8
 8005270:	40020410 	.word	0x40020410
 8005274:	40020428 	.word	0x40020428
 8005278:	40020440 	.word	0x40020440
 800527c:	40020458 	.word	0x40020458
 8005280:	40020470 	.word	0x40020470
 8005284:	40020488 	.word	0x40020488
 8005288:	400204a0 	.word	0x400204a0
 800528c:	400204b8 	.word	0x400204b8
 8005290:	aaaaaaab 	.word	0xaaaaaaab
 8005294:	0800b4cc 	.word	0x0800b4cc
 8005298:	fffffc00 	.word	0xfffffc00

0800529c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d120      	bne.n	80052f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d858      	bhi.n	800536a <DMA_CheckFifoParam+0xce>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <DMA_CheckFifoParam+0x24>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e3 	.word	0x080052e3
 80052c8:	080052d1 	.word	0x080052d1
 80052cc:	0800536b 	.word	0x0800536b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d048      	beq.n	800536e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052e0:	e045      	b.n	800536e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052ea:	d142      	bne.n	8005372 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052f0:	e03f      	b.n	8005372 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fa:	d123      	bne.n	8005344 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	2b03      	cmp	r3, #3
 8005302:	d838      	bhi.n	8005376 <DMA_CheckFifoParam+0xda>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <DMA_CheckFifoParam+0x70>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005323 	.word	0x08005323
 8005314:	0800531d 	.word	0x0800531d
 8005318:	08005335 	.word	0x08005335
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
        break;
 8005320:	e030      	b.n	8005384 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d025      	beq.n	800537a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005332:	e022      	b.n	800537a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800533c:	d11f      	bne.n	800537e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005342:	e01c      	b.n	800537e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	2b02      	cmp	r3, #2
 800534a:	d902      	bls.n	8005352 <DMA_CheckFifoParam+0xb6>
 800534c:	2b03      	cmp	r3, #3
 800534e:	d003      	beq.n	8005358 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005350:	e018      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
        break;
 8005356:	e015      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
    break;
 8005368:	e00b      	b.n	8005382 <DMA_CheckFifoParam+0xe6>
        break;
 800536a:	bf00      	nop
 800536c:	e00a      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        break;
 800536e:	bf00      	nop
 8005370:	e008      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        break;
 8005372:	bf00      	nop
 8005374:	e006      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        break;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        break;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
        break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <DMA_CheckFifoParam+0xe8>
    break;
 8005382:	bf00      	nop
    }
  }

  return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop

08005394 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a38      	ldr	r2, [pc, #224]	; (8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d022      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a36      	ldr	r2, [pc, #216]	; (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01d      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a35      	ldr	r2, [pc, #212]	; (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a33      	ldr	r2, [pc, #204]	; (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a32      	ldr	r2, [pc, #200]	; (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a30      	ldr	r2, [pc, #192]	; (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	3b08      	subs	r3, #8
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005420:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2201      	movs	r2, #1
 800542a:	409a      	lsls	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005430:	e024      	b.n	800547c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	3b10      	subs	r3, #16
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d806      	bhi.n	800545a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d902      	bls.n	800545a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3308      	adds	r3, #8
 8005458:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800546c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2201      	movs	r2, #1
 8005476:	409a      	lsls	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	58025408 	.word	0x58025408
 800548c:	5802541c 	.word	0x5802541c
 8005490:	58025430 	.word	0x58025430
 8005494:	58025444 	.word	0x58025444
 8005498:	58025458 	.word	0x58025458
 800549c:	5802546c 	.word	0x5802546c
 80054a0:	58025480 	.word	0x58025480
 80054a4:	58025494 	.word	0x58025494
 80054a8:	cccccccd 	.word	0xcccccccd
 80054ac:	16009600 	.word	0x16009600
 80054b0:	58025880 	.word	0x58025880
 80054b4:	aaaaaaab 	.word	0xaaaaaaab
 80054b8:	400204b8 	.word	0x400204b8
 80054bc:	4002040f 	.word	0x4002040f
 80054c0:	10008200 	.word	0x10008200
 80054c4:	40020880 	.word	0x40020880

080054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d04a      	beq.n	8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d847      	bhi.n	8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d022      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a24      	ldr	r2, [pc, #144]	; (8005584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d01d      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d009      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1b      	ldr	r2, [pc, #108]	; (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d101      	bne.n	8005538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005550:	671a      	str	r2, [r3, #112]	; 0x70
 8005552:	e009      	b.n	8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005566:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3b01      	subs	r3, #1
 800556c:	2201      	movs	r2, #1
 800556e:	409a      	lsls	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	58025408 	.word	0x58025408
 8005584:	5802541c 	.word	0x5802541c
 8005588:	58025430 	.word	0x58025430
 800558c:	58025444 	.word	0x58025444
 8005590:	58025458 	.word	0x58025458
 8005594:	5802546c 	.word	0x5802546c
 8005598:	58025480 	.word	0x58025480
 800559c:	58025494 	.word	0x58025494
 80055a0:	1600963f 	.word	0x1600963f
 80055a4:	58025940 	.word	0x58025940
 80055a8:	1000823f 	.word	0x1000823f
 80055ac:	40020940 	.word	0x40020940

080055b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055be:	4b89      	ldr	r3, [pc, #548]	; (80057e4 <HAL_GPIO_Init+0x234>)
 80055c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055c2:	e194      	b.n	80058ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	2101      	movs	r1, #1
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8186 	beq.w	80058e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d00b      	beq.n	80055fc <HAL_GPIO_Init+0x4c>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d007      	beq.n	80055fc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055f0:	2b11      	cmp	r3, #17
 80055f2:	d003      	beq.n	80055fc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b12      	cmp	r3, #18
 80055fa:	d130      	bne.n	800565e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005632:	2201      	movs	r2, #1
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0201 	and.w	r2, r3, #1
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	2203      	movs	r2, #3
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d003      	beq.n	800569e <HAL_GPIO_Init+0xee>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b12      	cmp	r3, #18
 800569c:	d123      	bne.n	80056e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	08da      	lsrs	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3208      	adds	r2, #8
 80056a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	220f      	movs	r2, #15
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43db      	mvns	r3, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	08da      	lsrs	r2, r3, #3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3208      	adds	r2, #8
 80056e0:	69b9      	ldr	r1, [r7, #24]
 80056e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	2203      	movs	r2, #3
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 0203 	and.w	r2, r3, #3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4313      	orrs	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80e0 	beq.w	80058e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005728:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <HAL_GPIO_Init+0x238>)
 800572a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800572e:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <HAL_GPIO_Init+0x238>)
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005738:	4b2b      	ldr	r3, [pc, #172]	; (80057e8 <HAL_GPIO_Init+0x238>)
 800573a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005746:	4a29      	ldr	r2, [pc, #164]	; (80057ec <HAL_GPIO_Init+0x23c>)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	220f      	movs	r2, #15
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <HAL_GPIO_Init+0x240>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d052      	beq.n	8005818 <HAL_GPIO_Init+0x268>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <HAL_GPIO_Init+0x244>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d031      	beq.n	80057de <HAL_GPIO_Init+0x22e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <HAL_GPIO_Init+0x248>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d02b      	beq.n	80057da <HAL_GPIO_Init+0x22a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <HAL_GPIO_Init+0x24c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d025      	beq.n	80057d6 <HAL_GPIO_Init+0x226>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <HAL_GPIO_Init+0x250>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01f      	beq.n	80057d2 <HAL_GPIO_Init+0x222>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1b      	ldr	r2, [pc, #108]	; (8005804 <HAL_GPIO_Init+0x254>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d019      	beq.n	80057ce <HAL_GPIO_Init+0x21e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <HAL_GPIO_Init+0x258>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_GPIO_Init+0x21a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_GPIO_Init+0x25c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00d      	beq.n	80057c6 <HAL_GPIO_Init+0x216>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a18      	ldr	r2, [pc, #96]	; (8005810 <HAL_GPIO_Init+0x260>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d007      	beq.n	80057c2 <HAL_GPIO_Init+0x212>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a17      	ldr	r2, [pc, #92]	; (8005814 <HAL_GPIO_Init+0x264>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d101      	bne.n	80057be <HAL_GPIO_Init+0x20e>
 80057ba:	2309      	movs	r3, #9
 80057bc:	e02d      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057be:	230a      	movs	r3, #10
 80057c0:	e02b      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057c2:	2308      	movs	r3, #8
 80057c4:	e029      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057c6:	2307      	movs	r3, #7
 80057c8:	e027      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057ca:	2306      	movs	r3, #6
 80057cc:	e025      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057ce:	2305      	movs	r3, #5
 80057d0:	e023      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057d2:	2304      	movs	r3, #4
 80057d4:	e021      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057d6:	2303      	movs	r3, #3
 80057d8:	e01f      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057da:	2302      	movs	r3, #2
 80057dc:	e01d      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057de:	2301      	movs	r3, #1
 80057e0:	e01b      	b.n	800581a <HAL_GPIO_Init+0x26a>
 80057e2:	bf00      	nop
 80057e4:	58000080 	.word	0x58000080
 80057e8:	58024400 	.word	0x58024400
 80057ec:	58000400 	.word	0x58000400
 80057f0:	58020000 	.word	0x58020000
 80057f4:	58020400 	.word	0x58020400
 80057f8:	58020800 	.word	0x58020800
 80057fc:	58020c00 	.word	0x58020c00
 8005800:	58021000 	.word	0x58021000
 8005804:	58021400 	.word	0x58021400
 8005808:	58021800 	.word	0x58021800
 800580c:	58021c00 	.word	0x58021c00
 8005810:	58022000 	.word	0x58022000
 8005814:	58022400 	.word	0x58022400
 8005818:	2300      	movs	r3, #0
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	f002 0203 	and.w	r2, r2, #3
 8005820:	0092      	lsls	r2, r2, #2
 8005822:	4093      	lsls	r3, r2
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800582a:	4938      	ldr	r1, [pc, #224]	; (800590c <HAL_GPIO_Init+0x35c>)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	089b      	lsrs	r3, r3, #2
 8005830:	3302      	adds	r3, #2
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f ae63 	bne.w	80055c4 <HAL_GPIO_Init+0x14>
  }
}
 80058fe:	bf00      	nop
 8005900:	3724      	adds	r7, #36	; 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	58000400 	.word	0x58000400

08005910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
 800591c:	4613      	mov	r3, r2
 800591e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005920:	787b      	ldrb	r3, [r7, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800592c:	e003      	b.n	8005936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	041a      	lsls	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	619a      	str	r2, [r3, #24]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	401a      	ands	r2, r3
 8005956:	887b      	ldrh	r3, [r7, #2]
 8005958:	429a      	cmp	r2, r3
 800595a:	d104      	bne.n	8005966 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800595c:	887b      	ldrh	r3, [r7, #2]
 800595e:	041a      	lsls	r2, r3, #16
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005964:	e002      	b.n	800596c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	619a      	str	r2, [r3, #24]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005980:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	2b06      	cmp	r3, #6
 800598a:	d00a      	beq.n	80059a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800598c:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <HAL_PWREx_ConfigSupply+0xb0>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d001      	beq.n	800599e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e040      	b.n	8005a20 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	e03e      	b.n	8005a20 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059a2:	4b21      	ldr	r3, [pc, #132]	; (8005a28 <HAL_PWREx_ConfigSupply+0xb0>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80059aa:	491f      	ldr	r1, [pc, #124]	; (8005a28 <HAL_PWREx_ConfigSupply+0xb0>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059b2:	f7fb fef7 	bl	80017a4 <HAL_GetTick>
 80059b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059b8:	e009      	b.n	80059ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059ba:	f7fb fef3 	bl	80017a4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c8:	d901      	bls.n	80059ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e028      	b.n	8005a20 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059ce:	4b16      	ldr	r3, [pc, #88]	; (8005a28 <HAL_PWREx_ConfigSupply+0xb0>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059da:	d1ee      	bne.n	80059ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b1e      	cmp	r3, #30
 80059e0:	d008      	beq.n	80059f4 <HAL_PWREx_ConfigSupply+0x7c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b2e      	cmp	r3, #46	; 0x2e
 80059e6:	d005      	beq.n	80059f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b1d      	cmp	r3, #29
 80059ec:	d002      	beq.n	80059f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b2d      	cmp	r3, #45	; 0x2d
 80059f2:	d114      	bne.n	8005a1e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80059f4:	f7fb fed6 	bl	80017a4 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80059fa:	e009      	b.n	8005a10 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059fc:	f7fb fed2 	bl	80017a4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0a:	d901      	bls.n	8005a10 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1c:	d1ee      	bne.n	80059fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	58024800 	.word	0x58024800

08005a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08c      	sub	sp, #48	; 0x30
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e3d7      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80b3 	beq.w	8005bb2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a4c:	4b90      	ldr	r3, [pc, #576]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a56:	4b8e      	ldr	r3, [pc, #568]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b10      	cmp	r3, #16
 8005a60:	d007      	beq.n	8005a72 <HAL_RCC_OscConfig+0x46>
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b18      	cmp	r3, #24
 8005a66:	d112      	bne.n	8005a8e <HAL_RCC_OscConfig+0x62>
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a72:	4b87      	ldr	r3, [pc, #540]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8098 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x184>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 8093 	bne.w	8005bb0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e3af      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x7a>
 8005a98:	4b7d      	ldr	r3, [pc, #500]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7c      	ldr	r2, [pc, #496]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e058      	b.n	8005b58 <HAL_RCC_OscConfig+0x12c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d112      	bne.n	8005ad4 <HAL_RCC_OscConfig+0xa8>
 8005aae:	4b78      	ldr	r3, [pc, #480]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a77      	ldr	r2, [pc, #476]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	4b75      	ldr	r3, [pc, #468]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a74      	ldr	r2, [pc, #464]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ac0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b72      	ldr	r3, [pc, #456]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a71      	ldr	r2, [pc, #452]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e041      	b.n	8005b58 <HAL_RCC_OscConfig+0x12c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005adc:	d112      	bne.n	8005b04 <HAL_RCC_OscConfig+0xd8>
 8005ade:	4b6c      	ldr	r3, [pc, #432]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6b      	ldr	r2, [pc, #428]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b69      	ldr	r3, [pc, #420]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a68      	ldr	r2, [pc, #416]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005af0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	4b66      	ldr	r3, [pc, #408]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a65      	ldr	r2, [pc, #404]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e029      	b.n	8005b58 <HAL_RCC_OscConfig+0x12c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005b0c:	d112      	bne.n	8005b34 <HAL_RCC_OscConfig+0x108>
 8005b0e:	4b60      	ldr	r3, [pc, #384]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a5f      	ldr	r2, [pc, #380]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b5d      	ldr	r3, [pc, #372]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a5c      	ldr	r2, [pc, #368]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4b5a      	ldr	r3, [pc, #360]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a59      	ldr	r2, [pc, #356]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	e011      	b.n	8005b58 <HAL_RCC_OscConfig+0x12c>
 8005b34:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a55      	ldr	r2, [pc, #340]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	4b53      	ldr	r3, [pc, #332]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a52      	ldr	r2, [pc, #328]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a4f      	ldr	r2, [pc, #316]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fb fe20 	bl	80017a4 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fb fe1c 	bl	80017a4 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e339      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b7a:	4b45      	ldr	r3, [pc, #276]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x13c>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fb fe0c 	bl	80017a4 <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b90:	f7fb fe08 	bl	80017a4 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	; 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e325      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ba2:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x164>
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d070      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bbe:	4b34      	ldr	r3, [pc, #208]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bc6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bc8:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <HAL_RCC_OscConfig+0x1b8>
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b18      	cmp	r3, #24
 8005bd8:	d11b      	bne.n	8005c12 <HAL_RCC_OscConfig+0x1e6>
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d116      	bne.n	8005c12 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be4:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_OscConfig+0x1d0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e2f8      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	4921      	ldr	r1, [pc, #132]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c10:	e046      	b.n	8005ca0 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d026      	beq.n	8005c68 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 0219 	bic.w	r2, r3, #25
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	491a      	ldr	r1, [pc, #104]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fb fdba 	bl	80017a4 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c34:	f7fb fdb6 	bl	80017a4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e2d3      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c46:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	061b      	lsls	r3, r3, #24
 8005c60:	490b      	ldr	r1, [pc, #44]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	604b      	str	r3, [r1, #4]
 8005c66:	e01b      	b.n	8005ca0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <HAL_RCC_OscConfig+0x264>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fb fd96 	bl	80017a4 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c7a:	e00b      	b.n	8005c94 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c7c:	f7fb fd92 	bl	80017a4 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d904      	bls.n	8005c94 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e2af      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
 8005c8e:	bf00      	nop
 8005c90:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c94:	4b99      	ldr	r3, [pc, #612]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ed      	bne.n	8005c7c <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d06a      	beq.n	8005d82 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cac:	4b93      	ldr	r3, [pc, #588]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cb6:	4b91      	ldr	r3, [pc, #580]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d007      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x2a6>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b18      	cmp	r3, #24
 8005cc6:	d11b      	bne.n	8005d00 <HAL_RCC_OscConfig+0x2d4>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d116      	bne.n	8005d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cd2:	4b8a      	ldr	r3, [pc, #552]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x2be>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d001      	beq.n	8005cea <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e281      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cea:	4b84      	ldr	r3, [pc, #528]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	4980      	ldr	r1, [pc, #512]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cfe:	e040      	b.n	8005d82 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d023      	beq.n	8005d50 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d08:	4b7c      	ldr	r3, [pc, #496]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a7b      	ldr	r2, [pc, #492]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fb fd46 	bl	80017a4 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d1c:	f7fb fd42 	bl	80017a4 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e25f      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d2e:	4b73      	ldr	r3, [pc, #460]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d3a:	4b70      	ldr	r3, [pc, #448]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	496c      	ldr	r1, [pc, #432]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60cb      	str	r3, [r1, #12]
 8005d4e:	e018      	b.n	8005d82 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d50:	4b6a      	ldr	r3, [pc, #424]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a69      	ldr	r2, [pc, #420]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fb fd22 	bl	80017a4 <HAL_GetTick>
 8005d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d64:	f7fb fd1e 	bl	80017a4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e23b      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d76:	4b61      	ldr	r3, [pc, #388]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d036      	beq.n	8005dfc <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d019      	beq.n	8005dca <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d96:	4b59      	ldr	r3, [pc, #356]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	4a58      	ldr	r2, [pc, #352]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fb fcff 	bl	80017a4 <HAL_GetTick>
 8005da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005daa:	f7fb fcfb 	bl	80017a4 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e218      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dbc:	4b4f      	ldr	r3, [pc, #316]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0f0      	beq.n	8005daa <HAL_RCC_OscConfig+0x37e>
 8005dc8:	e018      	b.n	8005dfc <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dca:	4b4c      	ldr	r3, [pc, #304]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dce:	4a4b      	ldr	r2, [pc, #300]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd6:	f7fb fce5 	bl	80017a4 <HAL_GetTick>
 8005dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dde:	f7fb fce1 	bl	80017a4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e1fe      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f0      	bne.n	8005dde <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d036      	beq.n	8005e76 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d019      	beq.n	8005e44 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e10:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a39      	ldr	r2, [pc, #228]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e1c:	f7fb fcc2 	bl	80017a4 <HAL_GetTick>
 8005e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e24:	f7fb fcbe 	bl	80017a4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e1db      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e36:	4b31      	ldr	r3, [pc, #196]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x3f8>
 8005e42:	e018      	b.n	8005e76 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e44:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e50:	f7fb fca8 	bl	80017a4 <HAL_GetTick>
 8005e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e58:	f7fb fca4 	bl	80017a4 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1c1      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80af 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e84:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <HAL_RCC_OscConfig+0x4d4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_RCC_OscConfig+0x4d4>)
 8005e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e90:	f7fb fc88 	bl	80017a4 <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e98:	f7fb fc84 	bl	80017a4 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1a1      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <HAL_RCC_OscConfig+0x4d4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_OscConfig+0x4a0>
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	4a0e      	ldr	r2, [pc, #56]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eca:	e05b      	b.n	8005f84 <HAL_RCC_OscConfig+0x558>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d117      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4d8>
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	4a05      	ldr	r2, [pc, #20]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eea:	6713      	str	r3, [r2, #112]	; 0x70
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	4a02      	ldr	r2, [pc, #8]	; (8005efc <HAL_RCC_OscConfig+0x4d0>)
 8005ef2:	f023 0304 	bic.w	r3, r3, #4
 8005ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef8:	e044      	b.n	8005f84 <HAL_RCC_OscConfig+0x558>
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
 8005f00:	58024800 	.word	0x58024800
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d112      	bne.n	8005f32 <HAL_RCC_OscConfig+0x506>
 8005f0c:	4b95      	ldr	r3, [pc, #596]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	4a94      	ldr	r2, [pc, #592]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f12:	f043 0304 	orr.w	r3, r3, #4
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70
 8005f18:	4b92      	ldr	r3, [pc, #584]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	4a91      	ldr	r2, [pc, #580]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a8e      	ldr	r2, [pc, #568]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f30:	e028      	b.n	8005f84 <HAL_RCC_OscConfig+0x558>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b85      	cmp	r3, #133	; 0x85
 8005f38:	d112      	bne.n	8005f60 <HAL_RCC_OscConfig+0x534>
 8005f3a:	4b8a      	ldr	r3, [pc, #552]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	4a89      	ldr	r2, [pc, #548]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f40:	f043 0304 	orr.w	r3, r3, #4
 8005f44:	6713      	str	r3, [r2, #112]	; 0x70
 8005f46:	4b87      	ldr	r3, [pc, #540]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	4a86      	ldr	r2, [pc, #536]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
 8005f52:	4b84      	ldr	r3, [pc, #528]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a83      	ldr	r2, [pc, #524]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5e:	e011      	b.n	8005f84 <HAL_RCC_OscConfig+0x558>
 8005f60:	4b80      	ldr	r3, [pc, #512]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	4a7f      	ldr	r2, [pc, #508]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6c:	4b7d      	ldr	r3, [pc, #500]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a7c      	ldr	r2, [pc, #496]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f72:	f023 0304 	bic.w	r3, r3, #4
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	4b7a      	ldr	r3, [pc, #488]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	4a79      	ldr	r2, [pc, #484]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fb fc0a 	bl	80017a4 <HAL_GetTick>
 8005f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f92:	e00a      	b.n	8005faa <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f94:	f7fb fc06 	bl	80017a4 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e121      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005faa:	4b6e      	ldr	r3, [pc, #440]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0ee      	beq.n	8005f94 <HAL_RCC_OscConfig+0x568>
 8005fb6:	e014      	b.n	8005fe2 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fb fbf4 	bl	80017a4 <HAL_GetTick>
 8005fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc0:	f7fb fbf0 	bl	80017a4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e10b      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fd6:	4b63      	ldr	r3, [pc, #396]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1ee      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8100 	beq.w	80061ec <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fec:	4b5d      	ldr	r3, [pc, #372]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ff4:	2b18      	cmp	r3, #24
 8005ff6:	f000 80bb 	beq.w	8006170 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	f040 8095 	bne.w	800612e <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006004:	4b57      	ldr	r3, [pc, #348]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a56      	ldr	r2, [pc, #344]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 800600a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fb fbc8 	bl	80017a4 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006018:	f7fb fbc4 	bl	80017a4 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e0e1      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800602a:	4b4e      	ldr	r3, [pc, #312]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006036:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603a:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <HAL_RCC_OscConfig+0x73c>)
 800603c:	4013      	ands	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006046:	0112      	lsls	r2, r2, #4
 8006048:	430a      	orrs	r2, r1
 800604a:	4946      	ldr	r1, [pc, #280]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 800604c:	4313      	orrs	r3, r2
 800604e:	628b      	str	r3, [r1, #40]	; 0x28
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	3b01      	subs	r3, #1
 8006056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	3b01      	subs	r3, #1
 8006060:	025b      	lsls	r3, r3, #9
 8006062:	b29b      	uxth	r3, r3
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	3b01      	subs	r3, #1
 800606c:	041b      	lsls	r3, r3, #16
 800606e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	3b01      	subs	r3, #1
 800607a:	061b      	lsls	r3, r3, #24
 800607c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006080:	4938      	ldr	r1, [pc, #224]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006082:	4313      	orrs	r3, r2
 8006084:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006086:	4b37      	ldr	r3, [pc, #220]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	4a36      	ldr	r2, [pc, #216]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006092:	4b34      	ldr	r3, [pc, #208]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006096:	4b35      	ldr	r3, [pc, #212]	; (800616c <HAL_RCC_OscConfig+0x740>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800609e:	00d2      	lsls	r2, r2, #3
 80060a0:	4930      	ldr	r1, [pc, #192]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	f023 020c 	bic.w	r2, r3, #12
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	492c      	ldr	r1, [pc, #176]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060b8:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f023 0202 	bic.w	r2, r3, #2
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	4927      	ldr	r1, [pc, #156]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060ca:	4b26      	ldr	r3, [pc, #152]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	4a25      	ldr	r2, [pc, #148]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	4a22      	ldr	r2, [pc, #136]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060e2:	4b20      	ldr	r3, [pc, #128]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a19      	ldr	r2, [pc, #100]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fb fb4d 	bl	80017a4 <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610e:	f7fb fb49 	bl	80017a4 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e066      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x6e2>
 800612c:	e05e      	b.n	80061ec <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb fb33 	bl	80017a4 <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006142:	f7fb fb2f 	bl	80017a4 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e04c      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006154:	4b03      	ldr	r3, [pc, #12]	; (8006164 <HAL_RCC_OscConfig+0x738>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f0      	bne.n	8006142 <HAL_RCC_OscConfig+0x716>
 8006160:	e044      	b.n	80061ec <HAL_RCC_OscConfig+0x7c0>
 8006162:	bf00      	nop
 8006164:	58024400 	.word	0x58024400
 8006168:	fffffc0c 	.word	0xfffffc0c
 800616c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006170:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <HAL_RCC_OscConfig+0x7cc>)
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <HAL_RCC_OscConfig+0x7cc>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b01      	cmp	r3, #1
 8006182:	d031      	beq.n	80061e8 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f003 0203 	and.w	r2, r3, #3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618e:	429a      	cmp	r2, r3
 8006190:	d12a      	bne.n	80061e8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619e:	429a      	cmp	r2, r3
 80061a0:	d122      	bne.n	80061e8 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d11a      	bne.n	80061e8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	0a5b      	lsrs	r3, r3, #9
 80061b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d111      	bne.n	80061e8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d108      	bne.n	80061e8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	0e1b      	lsrs	r3, r3, #24
 80061da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400

080061fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e19c      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006210:	4b8a      	ldr	r3, [pc, #552]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d910      	bls.n	8006240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621e:	4b87      	ldr	r3, [pc, #540]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 020f 	bic.w	r2, r3, #15
 8006226:	4985      	ldr	r1, [pc, #532]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	4313      	orrs	r3, r2
 800622c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800622e:	4b83      	ldr	r3, [pc, #524]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d001      	beq.n	8006240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e184      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	4b7b      	ldr	r3, [pc, #492]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006258:	429a      	cmp	r2, r3
 800625a:	d908      	bls.n	800626e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800625c:	4b78      	ldr	r3, [pc, #480]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	4975      	ldr	r1, [pc, #468]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800626a:	4313      	orrs	r3, r2
 800626c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d010      	beq.n	800629c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006286:	429a      	cmp	r2, r3
 8006288:	d908      	bls.n	800629c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800628a:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	496a      	ldr	r1, [pc, #424]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006298:	4313      	orrs	r3, r2
 800629a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d010      	beq.n	80062ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	4b64      	ldr	r3, [pc, #400]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d908      	bls.n	80062ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062b8:	4b61      	ldr	r3, [pc, #388]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	495e      	ldr	r1, [pc, #376]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d010      	beq.n	80062f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	4b59      	ldr	r3, [pc, #356]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d908      	bls.n	80062f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062e6:	4b56      	ldr	r3, [pc, #344]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	4953      	ldr	r1, [pc, #332]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	4b4d      	ldr	r3, [pc, #308]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	429a      	cmp	r2, r3
 8006312:	d908      	bls.n	8006326 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006314:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f023 020f 	bic.w	r2, r3, #15
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4947      	ldr	r1, [pc, #284]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006322:	4313      	orrs	r3, r2
 8006324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d055      	beq.n	80063de <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006332:	4b43      	ldr	r3, [pc, #268]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	4940      	ldr	r1, [pc, #256]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006340:	4313      	orrs	r3, r2
 8006342:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d107      	bne.n	800635c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800634c:	4b3c      	ldr	r3, [pc, #240]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d121      	bne.n	800639c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0f6      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d107      	bne.n	8006374 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006364:	4b36      	ldr	r3, [pc, #216]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d115      	bne.n	800639c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0ea      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800637c:	4b30      	ldr	r3, [pc, #192]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0de      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800638c:	4b2c      	ldr	r3, [pc, #176]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0d6      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f023 0207 	bic.w	r2, r3, #7
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4925      	ldr	r1, [pc, #148]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ae:	f7fb f9f9 	bl	80017a4 <HAL_GetTick>
 80063b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b4:	e00a      	b.n	80063cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b6:	f7fb f9f5 	bl	80017a4 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e0be      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	429a      	cmp	r2, r3
 80063dc:	d1eb      	bne.n	80063b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	4b14      	ldr	r3, [pc, #80]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d208      	bcs.n	800640c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063fa:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f023 020f 	bic.w	r2, r3, #15
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	490e      	ldr	r1, [pc, #56]	; (8006440 <HAL_RCC_ClockConfig+0x244>)
 8006408:	4313      	orrs	r3, r2
 800640a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d214      	bcs.n	8006444 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 020f 	bic.w	r2, r3, #15
 8006422:	4906      	ldr	r1, [pc, #24]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642a:	4b04      	ldr	r3, [pc, #16]	; (800643c <HAL_RCC_ClockConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e086      	b.n	800654a <HAL_RCC_ClockConfig+0x34e>
 800643c:	52002000 	.word	0x52002000
 8006440:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800645c:	429a      	cmp	r2, r3
 800645e:	d208      	bcs.n	8006472 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006460:	4b3c      	ldr	r3, [pc, #240]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	4939      	ldr	r1, [pc, #228]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 800646e:	4313      	orrs	r3, r2
 8006470:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d010      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	4b34      	ldr	r3, [pc, #208]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800648a:	429a      	cmp	r2, r3
 800648c:	d208      	bcs.n	80064a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	492e      	ldr	r1, [pc, #184]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 800649c:	4313      	orrs	r3, r2
 800649e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d010      	beq.n	80064ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	4b28      	ldr	r3, [pc, #160]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d208      	bcs.n	80064ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	4922      	ldr	r1, [pc, #136]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d010      	beq.n	80064fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69da      	ldr	r2, [r3, #28]
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d208      	bcs.n	80064fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80064ea:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	4917      	ldr	r1, [pc, #92]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80064fc:	f000 f834 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8006500:	4601      	mov	r1, r0
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	4a12      	ldr	r2, [pc, #72]	; (8006558 <HAL_RCC_ClockConfig+0x35c>)
 800650e:	5cd3      	ldrb	r3, [r2, r3]
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	fa21 f303 	lsr.w	r3, r1, r3
 8006518:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <HAL_RCC_ClockConfig+0x358>)
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	4a0d      	ldr	r2, [pc, #52]	; (8006558 <HAL_RCC_ClockConfig+0x35c>)
 8006524:	5cd3      	ldrb	r3, [r2, r3]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	fa22 f303 	lsr.w	r3, r2, r3
 8006530:	4a0a      	ldr	r2, [pc, #40]	; (800655c <HAL_RCC_ClockConfig+0x360>)
 8006532:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006534:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <HAL_RCC_ClockConfig+0x364>)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_RCC_ClockConfig+0x368>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fb f8e6 	bl	8001710 <HAL_InitTick>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	58024400 	.word	0x58024400
 8006558:	0800b4bc 	.word	0x0800b4bc
 800655c:	24000004 	.word	0x24000004
 8006560:	24000000 	.word	0x24000000
 8006564:	24000008 	.word	0x24000008

08006568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800656e:	4baf      	ldr	r3, [pc, #700]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006576:	2b18      	cmp	r3, #24
 8006578:	f200 814e 	bhi.w	8006818 <HAL_RCC_GetSysClockFreq+0x2b0>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_RCC_GetSysClockFreq+0x1c>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065e9 	.word	0x080065e9
 8006588:	08006819 	.word	0x08006819
 800658c:	08006819 	.word	0x08006819
 8006590:	08006819 	.word	0x08006819
 8006594:	08006819 	.word	0x08006819
 8006598:	08006819 	.word	0x08006819
 800659c:	08006819 	.word	0x08006819
 80065a0:	08006819 	.word	0x08006819
 80065a4:	0800660f 	.word	0x0800660f
 80065a8:	08006819 	.word	0x08006819
 80065ac:	08006819 	.word	0x08006819
 80065b0:	08006819 	.word	0x08006819
 80065b4:	08006819 	.word	0x08006819
 80065b8:	08006819 	.word	0x08006819
 80065bc:	08006819 	.word	0x08006819
 80065c0:	08006819 	.word	0x08006819
 80065c4:	08006615 	.word	0x08006615
 80065c8:	08006819 	.word	0x08006819
 80065cc:	08006819 	.word	0x08006819
 80065d0:	08006819 	.word	0x08006819
 80065d4:	08006819 	.word	0x08006819
 80065d8:	08006819 	.word	0x08006819
 80065dc:	08006819 	.word	0x08006819
 80065e0:	08006819 	.word	0x08006819
 80065e4:	0800661b 	.word	0x0800661b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e8:	4b90      	ldr	r3, [pc, #576]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065f4:	4b8d      	ldr	r3, [pc, #564]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	08db      	lsrs	r3, r3, #3
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	4a8c      	ldr	r2, [pc, #560]	; (8006830 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
 8006604:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006606:	e10a      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006608:	4b89      	ldr	r3, [pc, #548]	; (8006830 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800660a:	61bb      	str	r3, [r7, #24]
    break;
 800660c:	e107      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800660e:	4b89      	ldr	r3, [pc, #548]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006610:	61bb      	str	r3, [r7, #24]
    break;
 8006612:	e104      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006614:	4b88      	ldr	r3, [pc, #544]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006616:	61bb      	str	r3, [r7, #24]
    break;
 8006618:	e101      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800661a:	4b84      	ldr	r3, [pc, #528]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006624:	4b81      	ldr	r3, [pc, #516]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800662e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006630:	4b7e      	ldr	r3, [pc, #504]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800663a:	4b7c      	ldr	r3, [pc, #496]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80da 	beq.w	8006812 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d05a      	beq.n	800671a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d302      	bcc.n	800666e <HAL_RCC_GetSysClockFreq+0x106>
 8006668:	2b02      	cmp	r3, #2
 800666a:	d078      	beq.n	800675e <HAL_RCC_GetSysClockFreq+0x1f6>
 800666c:	e099      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800666e:	4b6f      	ldr	r3, [pc, #444]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d02d      	beq.n	80066d6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800667a:	4b6c      	ldr	r3, [pc, #432]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	08db      	lsrs	r3, r3, #3
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	4a6a      	ldr	r2, [pc, #424]	; (8006830 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006686:	fa22 f303 	lsr.w	r3, r2, r3
 800668a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a4:	4b61      	ldr	r3, [pc, #388]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80066b8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800683c <HAL_RCC_GetSysClockFreq+0x2d4>
 80066bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80066d4:	e087      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006840 <HAL_RCC_GetSysClockFreq+0x2d8>
 80066e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e8:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80066fc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800683c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800670c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006714:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006718:	e065      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006724:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672c:	4b3f      	ldr	r3, [pc, #252]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006740:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800683c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006758:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800675c:	e043      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006768:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006848 <HAL_RCC_GetSysClockFreq+0x2e0>
 800676c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006770:	4b2e      	ldr	r3, [pc, #184]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006780:	ed97 6a02 	vldr	s12, [r7, #8]
 8006784:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800683c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067a0:	e021      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2dc>
 80067b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800683c <HAL_RCC_GetSysClockFreq+0x2d4>
 80067cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067e4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	0a5b      	lsrs	r3, r3, #9
 80067ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f0:	3301      	adds	r3, #1
 80067f2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680a:	ee17 3a90 	vmov	r3, s15
 800680e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006810:	e005      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
    break;
 8006816:	e002      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800681a:	61bb      	str	r3, [r7, #24]
    break;
 800681c:	bf00      	nop
  }

  return sysclockfreq;
 800681e:	69bb      	ldr	r3, [r7, #24]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3724      	adds	r7, #36	; 0x24
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	58024400 	.word	0x58024400
 8006830:	03d09000 	.word	0x03d09000
 8006834:	003d0900 	.word	0x003d0900
 8006838:	007a1200 	.word	0x007a1200
 800683c:	46000000 	.word	0x46000000
 8006840:	4c742400 	.word	0x4c742400
 8006844:	4a742400 	.word	0x4a742400
 8006848:	4af42400 	.word	0x4af42400

0800684c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006852:	f7ff fe89 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8006856:	4601      	mov	r1, r0
 8006858:	4b10      	ldr	r3, [pc, #64]	; (800689c <HAL_RCC_GetHCLKFreq+0x50>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	0a1b      	lsrs	r3, r3, #8
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	fa21 f303 	lsr.w	r3, r1, r3
 800686e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <HAL_RCC_GetHCLKFreq+0x50>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800687a:	5cd3      	ldrb	r3, [r2, r3]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	fa22 f303 	lsr.w	r3, r2, r3
 8006886:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800688a:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006890:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	58024400 	.word	0x58024400
 80068a0:	0800b4bc 	.word	0x0800b4bc
 80068a4:	24000004 	.word	0x24000004
 80068a8:	24000000 	.word	0x24000000

080068ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80068b0:	f7ff ffcc 	bl	800684c <HAL_RCC_GetHCLKFreq>
 80068b4:	4601      	mov	r1, r0
 80068b6:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	58024400 	.word	0x58024400
 80068d4:	0800b4bc 	.word	0x0800b4bc

080068d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80068dc:	f7ff ffb6 	bl	800684c <HAL_RCC_GetHCLKFreq>
 80068e0:	4601      	mov	r1, r0
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	0a1b      	lsrs	r3, r3, #8
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4a04      	ldr	r2, [pc, #16]	; (8006900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ee:	5cd3      	ldrb	r3, [r2, r3]
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	58024400 	.word	0x58024400
 8006900:	0800b4bc 	.word	0x0800b4bc

08006904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800690c:	2300      	movs	r3, #0
 800690e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006910:	2300      	movs	r3, #0
 8006912:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03d      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006928:	d013      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692e:	d802      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006934:	e01f      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800693a:	d013      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800693c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006940:	d01c      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006942:	e018      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4bad      	ldr	r3, [pc, #692]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4aac      	ldr	r2, [pc, #688]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006950:	e015      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2102      	movs	r1, #2
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fca7 	bl	80082ac <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006962:	e00c      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3324      	adds	r3, #36	; 0x24
 8006968:	2102      	movs	r1, #2
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fd50 	bl	8008410 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
      break;
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800697c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006984:	4b9d      	ldr	r3, [pc, #628]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006990:	499a      	ldr	r1, [pc, #616]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006992:	4313      	orrs	r3, r2
 8006994:	650b      	str	r3, [r1, #80]	; 0x50
 8006996:	e001      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d03d      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d826      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069cd 	.word	0x080069cd
 80069bc:	080069db 	.word	0x080069db
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	08006a05 	.word	0x08006a05
 80069c8:	08006a05 	.word	0x08006a05
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069cc:	4b8b      	ldr	r3, [pc, #556]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a8a      	ldr	r2, [pc, #552]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069d8:	e015      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fc63 	bl	80082ac <RCCEx_PLL2_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069ea:	e00c      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3324      	adds	r3, #36	; 0x24
 80069f0:	2100      	movs	r1, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fd0c 	bl	8008410 <RCCEx_PLL3_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
      break;
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a0c:	4b7b      	ldr	r3, [pc, #492]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a10:	f023 0207 	bic.w	r2, r3, #7
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	4978      	ldr	r1, [pc, #480]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	650b      	str	r3, [r1, #80]	; 0x50
 8006a1e:	e001      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d043      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a34:	2b80      	cmp	r3, #128	; 0x80
 8006a36:	d01f      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006a38:	2b80      	cmp	r3, #128	; 0x80
 8006a3a:	d804      	bhi.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d010      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006a44:	e021      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4a:	d021      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a50:	d020      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006a52:	2bc0      	cmp	r3, #192	; 0xc0
 8006a54:	d020      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006a56:	e018      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4b68      	ldr	r3, [pc, #416]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a67      	ldr	r2, [pc, #412]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a64:	e019      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fc1d 	bl	80082ac <RCCEx_PLL2_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a76:	e010      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fcc6 	bl	8008410 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a88:	e007      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006a90:	bf00      	nop
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006aa0:	4b56      	ldr	r3, [pc, #344]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa4:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aac:	4953      	ldr	r1, [pc, #332]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ab2:	e001      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d047      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006acc:	d022      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad2:	d805      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006adc:	d011      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006ade:	e022      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae4:	d022      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006ae6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006aea:	d021      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006aec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006af0:	d020      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006af2:	e018      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af4:	4b41      	ldr	r3, [pc, #260]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4a40      	ldr	r2, [pc, #256]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b00:	e019      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3304      	adds	r3, #4
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fbcf 	bl	80082ac <RCCEx_PLL2_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b12:	e010      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3324      	adds	r3, #36	; 0x24
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fc78 	bl	8008410 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b24:	e007      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2a:	e004      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006b2c:	bf00      	nop
 8006b2e:	e002      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006b30:	bf00      	nop
 8006b32:	e000      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b40:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	492c      	ldr	r1, [pc, #176]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b4e:	e001      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d032      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d009      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d802      	bhi.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d018      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006b70:	e014      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d009      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006b76:	2b30      	cmp	r3, #48	; 0x30
 8006b78:	d015      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006b7a:	e00f      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7c:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006b88:	e00e      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fb8b 	bl	80082ac <RCCEx_PLL2_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006b9a:	e005      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	e002      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	4910      	ldr	r1, [pc, #64]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bc0:	e001      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d044      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bda:	d021      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be0:	d805      	bhi.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00c      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d010      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006bec:	e021      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf2:	d021      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf8:	d020      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006bfa:	e01a      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006bfc:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c00:	4ba6      	ldr	r3, [pc, #664]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	4aa5      	ldr	r2, [pc, #660]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c0c:	e017      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3304      	adds	r3, #4
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fb49 	bl	80082ac <RCCEx_PLL2_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c1e:	e00e      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3324      	adds	r3, #36	; 0x24
 8006c24:	2100      	movs	r1, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f001 fbf2 	bl	8008410 <RCCEx_PLL3_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c30:	e005      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
      break;
 8006c36:	e002      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006c38:	bf00      	nop
 8006c3a:	e000      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c44:	4b95      	ldr	r3, [pc, #596]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c50:	4992      	ldr	r1, [pc, #584]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	650b      	str	r3, [r1, #80]	; 0x50
 8006c56:	e001      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d042      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c70:	d01b      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c76:	d805      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d022      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006c82:	e01b      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c88:	d01d      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c8e:	d01c      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c94:	d01b      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006c96:	e011      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 fb04 	bl	80082ac <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ca8:	e012      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	; 0x24
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 fbad 	bl	8008410 <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006cba:	e009      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e004      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006cc6:	bf00      	nop
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cd6:	4b71      	ldr	r3, [pc, #452]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce2:	496e      	ldr	r1, [pc, #440]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	650b      	str	r3, [r1, #80]	; 0x50
 8006ce8:	e001      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d049      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d04:	d02a      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d0a:	d808      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d10:	d00f      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d16:	d015      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d021      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006d1c:	e01b      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d22:	d01f      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006d24:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006d28:	d01e      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2e:	d01d      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d30:	e011      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	2101      	movs	r1, #1
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 fab7 	bl	80082ac <RCCEx_PLL2_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d42:	e014      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fb60 	bl	8008410 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d54:	e00b      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5a:	e008      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e006      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d60:	bf00      	nop
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d74:	4b49      	ldr	r3, [pc, #292]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d82:	4946      	ldr	r1, [pc, #280]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	658b      	str	r3, [r1, #88]	; 0x58
 8006d88:	e001      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d02d      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da2:	d005      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da8:	d009      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d013      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dae:	e00f      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db0:	4b3a      	ldr	r3, [pc, #232]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	4a39      	ldr	r2, [pc, #228]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006dbc:	e00c      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fa71 	bl	80082ac <RCCEx_PLL2_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006dce:	e003      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd4:	e000      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006dde:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dea:	492c      	ldr	r1, [pc, #176]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	650b      	str	r3, [r1, #80]	; 0x50
 8006df0:	e001      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d031      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d81a      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e47 	.word	0x08006e47
 8006e14:	08006e21 	.word	0x08006e21
 8006e18:	08006e2f 	.word	0x08006e2f
 8006e1c:	08006e47 	.word	0x08006e47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e20:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e2c:	e00c      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2102      	movs	r1, #2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 fa39 	bl	80082ac <RCCEx_PLL2_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e3e:	e003      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
      break;
 8006e44:	e000      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e4e:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5a:	4910      	ldr	r1, [pc, #64]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e60:	e001      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 808a 	beq.w	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e74:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e80:	f7fa fc90 	bl	80017a4 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e86:	e00d      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e88:	f7fa fc8c 	bl	80017a4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	; 0x64
 8006e94:	d906      	bls.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	75fb      	strb	r3, [r7, #23]
        break;
 8006e9a:	e009      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ea4:	4bba      	ldr	r3, [pc, #744]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0eb      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d166      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006eb6:	4bb7      	ldr	r3, [pc, #732]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec0:	4053      	eors	r3, r2
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d013      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eca:	4bb2      	ldr	r3, [pc, #712]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ed4:	4baf      	ldr	r3, [pc, #700]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4aae      	ldr	r2, [pc, #696]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ee0:	4bac      	ldr	r3, [pc, #688]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	4aab      	ldr	r2, [pc, #684]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eec:	4aa9      	ldr	r2, [pc, #676]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efc:	d115      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efe:	f7fa fc51 	bl	80017a4 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f04:	e00b      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fa fc4d 	bl	80017a4 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d902      	bls.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f1c:	e005      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f1e:	4b9d      	ldr	r3, [pc, #628]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0ed      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d126      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f3e:	d10d      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006f40:	4b94      	ldr	r3, [pc, #592]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f4e:	0919      	lsrs	r1, r3, #4
 8006f50:	4b91      	ldr	r3, [pc, #580]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	498f      	ldr	r1, [pc, #572]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	610b      	str	r3, [r1, #16]
 8006f5a:	e005      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f5c:	4b8d      	ldr	r3, [pc, #564]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	4a8c      	ldr	r2, [pc, #560]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f66:	6113      	str	r3, [r2, #16]
 8006f68:	4b8a      	ldr	r3, [pc, #552]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f76:	4987      	ldr	r1, [pc, #540]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	670b      	str	r3, [r1, #112]	; 0x70
 8006f7c:	e004      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	75bb      	strb	r3, [r7, #22]
 8006f82:	e001      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d07f      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f9a:	2b28      	cmp	r3, #40	; 0x28
 8006f9c:	d866      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08007073 	.word	0x08007073
 8006fa8:	0800706d 	.word	0x0800706d
 8006fac:	0800706d 	.word	0x0800706d
 8006fb0:	0800706d 	.word	0x0800706d
 8006fb4:	0800706d 	.word	0x0800706d
 8006fb8:	0800706d 	.word	0x0800706d
 8006fbc:	0800706d 	.word	0x0800706d
 8006fc0:	0800706d 	.word	0x0800706d
 8006fc4:	08007049 	.word	0x08007049
 8006fc8:	0800706d 	.word	0x0800706d
 8006fcc:	0800706d 	.word	0x0800706d
 8006fd0:	0800706d 	.word	0x0800706d
 8006fd4:	0800706d 	.word	0x0800706d
 8006fd8:	0800706d 	.word	0x0800706d
 8006fdc:	0800706d 	.word	0x0800706d
 8006fe0:	0800706d 	.word	0x0800706d
 8006fe4:	0800705b 	.word	0x0800705b
 8006fe8:	0800706d 	.word	0x0800706d
 8006fec:	0800706d 	.word	0x0800706d
 8006ff0:	0800706d 	.word	0x0800706d
 8006ff4:	0800706d 	.word	0x0800706d
 8006ff8:	0800706d 	.word	0x0800706d
 8006ffc:	0800706d 	.word	0x0800706d
 8007000:	0800706d 	.word	0x0800706d
 8007004:	08007073 	.word	0x08007073
 8007008:	0800706d 	.word	0x0800706d
 800700c:	0800706d 	.word	0x0800706d
 8007010:	0800706d 	.word	0x0800706d
 8007014:	0800706d 	.word	0x0800706d
 8007018:	0800706d 	.word	0x0800706d
 800701c:	0800706d 	.word	0x0800706d
 8007020:	0800706d 	.word	0x0800706d
 8007024:	08007073 	.word	0x08007073
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	0800706d 	.word	0x0800706d
 8007034:	0800706d 	.word	0x0800706d
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800706d 	.word	0x0800706d
 8007040:	0800706d 	.word	0x0800706d
 8007044:	08007073 	.word	0x08007073
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3304      	adds	r3, #4
 800704c:	2101      	movs	r1, #1
 800704e:	4618      	mov	r0, r3
 8007050:	f001 f92c 	bl	80082ac <RCCEx_PLL2_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007058:	e00c      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3324      	adds	r3, #36	; 0x24
 800705e:	2101      	movs	r1, #1
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f9d5 	bl	8008410 <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800706a:	e003      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
      break;
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8007072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800707a:	4b46      	ldr	r3, [pc, #280]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007088:	4942      	ldr	r1, [pc, #264]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800708a:	4313      	orrs	r3, r2
 800708c:	654b      	str	r3, [r1, #84]	; 0x54
 800708e:	e001      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d038      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a4:	2b05      	cmp	r3, #5
 80070a6:	d821      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070f3 	.word	0x080070f3
 80070b4:	080070c9 	.word	0x080070c9
 80070b8:	080070db 	.word	0x080070db
 80070bc:	080070f3 	.word	0x080070f3
 80070c0:	080070f3 	.word	0x080070f3
 80070c4:	080070f3 	.word	0x080070f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 f8ec 	bl	80082ac <RCCEx_PLL2_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070d8:	e00c      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	2101      	movs	r1, #1
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f995 	bl	8008410 <RCCEx_PLL3_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
      break;
 80070f0:	e000      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 80070f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070fa:	4b26      	ldr	r3, [pc, #152]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	f023 0207 	bic.w	r2, r3, #7
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007106:	4923      	ldr	r1, [pc, #140]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007108:	4313      	orrs	r3, r2
 800710a:	654b      	str	r3, [r1, #84]	; 0x54
 800710c:	e001      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d040      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007124:	2b05      	cmp	r3, #5
 8007126:	d821      	bhi.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x868>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007173 	.word	0x08007173
 8007134:	08007149 	.word	0x08007149
 8007138:	0800715b 	.word	0x0800715b
 800713c:	08007173 	.word	0x08007173
 8007140:	08007173 	.word	0x08007173
 8007144:	08007173 	.word	0x08007173
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	2101      	movs	r1, #1
 800714e:	4618      	mov	r0, r3
 8007150:	f001 f8ac 	bl	80082ac <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007158:	e00c      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3324      	adds	r3, #36	; 0x24
 800715e:	2101      	movs	r1, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f001 f955 	bl	8008410 <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800716a:	e003      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
      break;
 8007170:	e000      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8007172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d110      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800717a:	4b06      	ldr	r3, [pc, #24]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717e:	f023 0207 	bic.w	r2, r3, #7
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007188:	4902      	ldr	r1, [pc, #8]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800718a:	4313      	orrs	r3, r2
 800718c:	658b      	str	r3, [r1, #88]	; 0x58
 800718e:	e007      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007190:	58024800 	.word	0x58024800
 8007194:	58024400 	.word	0x58024400
 8007198:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d044      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b6:	d01b      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80071b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071bc:	d805      	bhi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d022      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x904>
 80071c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c6:	d00a      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80071c8:	e01b      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ce:	d01d      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x908>
 80071d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071d4:	d01c      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 80071d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071da:	d01b      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80071dc:	e011      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 f861 	bl	80082ac <RCCEx_PLL2_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071ee:	e012      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	2102      	movs	r1, #2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 f90a 	bl	8008410 <RCCEx_PLL3_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007200:	e009      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
      break;
 8007206:	e006      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007208:	bf00      	nop
 800720a:	e004      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 800720c:	bf00      	nop
 800720e:	e002      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800721c:	4bb3      	ldr	r3, [pc, #716]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007220:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800722a:	49b0      	ldr	r1, [pc, #704]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800722c:	4313      	orrs	r3, r2
 800722e:	654b      	str	r3, [r1, #84]	; 0x54
 8007230:	e001      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d044      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724c:	d01b      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x982>
 800724e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007252:	d805      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d022      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x970>
 800725e:	e01b      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8007260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007264:	d01d      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8007266:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800726a:	d01c      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800726c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007270:	d01b      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8007272:	e011      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f001 f816 	bl	80082ac <RCCEx_PLL2_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007284:	e012      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3324      	adds	r3, #36	; 0x24
 800728a:	2102      	movs	r1, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f8bf 	bl	8008410 <RCCEx_PLL3_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007296:	e009      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
      break;
 800729c:	e006      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800729e:	bf00      	nop
 80072a0:	e004      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072a2:	bf00      	nop
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072b2:	4b8e      	ldr	r3, [pc, #568]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072c0:	498a      	ldr	r1, [pc, #552]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	658b      	str	r3, [r1, #88]	; 0x58
 80072c6:	e001      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d044      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e2:	d01b      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xa18>
 80072e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e8:	d805      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d022      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80072ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80072f4:	e01b      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80072f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072fa:	d01d      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80072fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007300:	d01c      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8007302:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007306:	d01b      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8007308:	e011      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 ffcb 	bl	80082ac <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800731a:	e012      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	2102      	movs	r1, #2
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f874 	bl	8008410 <RCCEx_PLL3_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800732c:	e009      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
      break;
 8007332:	e006      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007334:	bf00      	nop
 8007336:	e004      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007338:	bf00      	nop
 800733a:	e002      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007348:	4b68      	ldr	r3, [pc, #416]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800734a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007356:	4965      	ldr	r1, [pc, #404]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007358:	4313      	orrs	r3, r2
 800735a:	658b      	str	r3, [r1, #88]	; 0x58
 800735c:	e001      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01a      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007378:	d10a      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3324      	adds	r3, #36	; 0x24
 800737e:	2102      	movs	r1, #2
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f845 	bl	8008410 <RCCEx_PLL3_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007390:	4b56      	ldr	r3, [pc, #344]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	4953      	ldr	r1, [pc, #332]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ba:	d10a      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 f824 	bl	8008410 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073d2:	4b46      	ldr	r3, [pc, #280]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073e0:	4942      	ldr	r1, [pc, #264]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d030      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fc:	d00d      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xb16>
 80073fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007402:	d016      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d111      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f000 ff4c 	bl	80082ac <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007418:	e00c      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3324      	adds	r3, #36	; 0x24
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fff5 	bl	8008410 <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800742a:	e003      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	e000      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800743a:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007448:	4928      	ldr	r1, [pc, #160]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800744a:	4313      	orrs	r3, r2
 800744c:	658b      	str	r3, [r1, #88]	; 0x58
 800744e:	e001      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800746a:	d00c      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800746c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007470:	d015      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007476:	d10f      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007478:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800747e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007484:	e00c      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3324      	adds	r3, #36	; 0x24
 800748a:	2101      	movs	r1, #1
 800748c:	4618      	mov	r0, r3
 800748e:	f000 ffbf 	bl	8008410 <RCCEx_PLL3_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007496:	e003      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
      break;
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 800749e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074a6:	4b11      	ldr	r3, [pc, #68]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b4:	490d      	ldr	r1, [pc, #52]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	654b      	str	r3, [r1, #84]	; 0x54
 80074ba:	e001      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02c      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80074da:	e012      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4b03      	ldr	r3, [pc, #12]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a02      	ldr	r2, [pc, #8]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074e8:	e00e      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	2102      	movs	r1, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fed8 	bl	80082ac <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007500:	e002      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	75fb      	strb	r3, [r7, #23]
      break;
 8007506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800750e:	4b56      	ldr	r3, [pc, #344]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	4953      	ldr	r1, [pc, #332]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800751c:	4313      	orrs	r3, r2
 800751e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007520:	e001      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2102      	movs	r1, #2
 8007538:	4618      	mov	r0, r3
 800753a:	f000 ff69 	bl	8008410 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d031      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755e:	d00c      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007564:	d802      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d011      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 800756a:	e00d      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800756c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007570:	d00f      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 8007572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007576:	d00e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007578:	e006      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757a:	4b3b      	ldr	r3, [pc, #236]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a3a      	ldr	r2, [pc, #232]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007586:	e007      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	75fb      	strb	r3, [r7, #23]
      break;
 800758c:	e004      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800759e:	4b32      	ldr	r3, [pc, #200]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ac:	492e      	ldr	r1, [pc, #184]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	654b      	str	r3, [r1, #84]	; 0x54
 80075b2:	e001      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075c4:	4b28      	ldr	r3, [pc, #160]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d0:	4925      	ldr	r1, [pc, #148]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075e2:	4b21      	ldr	r3, [pc, #132]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ee:	491e      	ldr	r1, [pc, #120]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007600:	4b19      	ldr	r3, [pc, #100]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	4916      	ldr	r1, [pc, #88]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800760e:	4313      	orrs	r3, r2
 8007610:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00d      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	4a11      	ldr	r2, [pc, #68]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007624:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007628:	6113      	str	r3, [r2, #16]
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007634:	490c      	ldr	r1, [pc, #48]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da08      	bge.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007642:	4b09      	ldr	r3, [pc, #36]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	4906      	ldr	r1, [pc, #24]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007650:	4313      	orrs	r3, r2
 8007652:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007654:	7dbb      	ldrb	r3, [r7, #22]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e000      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	58024400 	.word	0x58024400

0800766c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b090      	sub	sp, #64	; 0x40
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	d150      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800767c:	4ba1      	ldr	r3, [pc, #644]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800767e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2b04      	cmp	r3, #4
 800768a:	d844      	bhi.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076a9 	.word	0x080076a9
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	08007711 	.word	0x08007711
 80076a4:	080076d9 	.word	0x080076d9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fcb1 	bl	8008014 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076b6:	e1ef      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b8:	f107 0318 	add.w	r3, r7, #24
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fa11 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c6:	e1e7      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076c8:	f107 030c 	add.w	r3, r7, #12
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fb55 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076d6:	e1df      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80076d8:	4b8a      	ldr	r3, [pc, #552]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80076e8:	4b87      	ldr	r3, [pc, #540]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80076ec:	e1d4      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076f4:	d102      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80076f6:	4b85      	ldr	r3, [pc, #532]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076fa:	e1cd      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80076fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007702:	d102      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007704:	4b82      	ldr	r3, [pc, #520]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007708:	e1c6      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	e1c3      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007710:	4b80      	ldr	r3, [pc, #512]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007714:	e1c0      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800771a:	bf00      	nop
 800771c:	e1bc      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d14f      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007726:	4b77      	ldr	r3, [pc, #476]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800772e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d01c      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007736:	2b80      	cmp	r3, #128	; 0x80
 8007738:	d804      	bhi.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d008      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d00e      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007742:	e03c      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007744:	2bc0      	cmp	r3, #192	; 0xc0
 8007746:	d037      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774c:	d018      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800774e:	e036      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fc5d 	bl	8008014 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800775e:	e19b      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007760:	f107 0318 	add.w	r3, r7, #24
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f9bd 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776e:	e193      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fb01 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777e:	e18b      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007780:	4b60      	ldr	r3, [pc, #384]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007788:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007790:	4b5d      	ldr	r3, [pc, #372]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007794:	e180      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779c:	d102      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800779e:	4b5b      	ldr	r3, [pc, #364]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a2:	e179      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077aa:	d102      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80077ac:	4b58      	ldr	r3, [pc, #352]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b0:	e172      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b6:	e16f      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077b8:	4b56      	ldr	r3, [pc, #344]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077bc:	e16c      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c2:	bf00      	nop
 80077c4:	e168      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077cc:	d153      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80077ce:	4b4d      	ldr	r3, [pc, #308]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80077d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077de:	d01f      	beq.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	d805      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80077ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ee:	d00f      	beq.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80077f0:	e03d      	b.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80077f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077f6:	d037      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fc:	d018      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80077fe:	e036      	b.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fc05 	bl	8008014 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780e:	e143      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007810:	f107 0318 	add.w	r3, r7, #24
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f965 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781e:	e13b      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	4618      	mov	r0, r3
 8007826:	f000 faa9 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800782e:	e133      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007838:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007840:	4b31      	ldr	r3, [pc, #196]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8007844:	e128      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784c:	d102      	bne.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800784e:	4b2f      	ldr	r3, [pc, #188]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007852:	e121      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785a:	d102      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800785c:	4b2c      	ldr	r3, [pc, #176]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007860:	e11a      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007866:	e117      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007868:	4b2a      	ldr	r3, [pc, #168]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800786c:	e114      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007872:	bf00      	nop
 8007874:	e110      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787c:	d15d      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800787e:	4b21      	ldr	r3, [pc, #132]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007882:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007886:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788e:	d01f      	beq.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007894:	d805      	bhi.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789e:	d00f      	beq.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80078a0:	e047      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80078a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078a6:	d041      	beq.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80078a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ac:	d018      	beq.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80078ae:	e040      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fbad 	bl	8008014 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078be:	e0eb      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c0:	f107 0318 	add.w	r3, r7, #24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f90d 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ce:	e0e3      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fa51 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078de:	e0db      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078e0:	4b08      	ldr	r3, [pc, #32]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80078f4:	e0d0      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fc:	d10c      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007902:	e0c9      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007904:	58024400 	.word	0x58024400
 8007908:	03d09000 	.word	0x03d09000
 800790c:	003d0900 	.word	0x003d0900
 8007910:	007a1200 	.word	0x007a1200
 8007914:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791e:	d102      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007920:	4b60      	ldr	r3, [pc, #384]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007924:	e0b8      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800792a:	e0b5      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800792c:	4b5e      	ldr	r3, [pc, #376]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007930:	e0b2      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007936:	bf00      	nop
 8007938:	e0ae      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007940:	d13d      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007942:	4b5a      	ldr	r3, [pc, #360]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800794a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007952:	d00c      	beq.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007958:	d011      	beq.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d12b      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800795e:	f107 0318 	add.w	r3, r7, #24
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f8be 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796c:	e094      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800796e:	f107 030c 	add.w	r3, r7, #12
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fa02 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797c:	e08c      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800797e:	4b4b      	ldr	r3, [pc, #300]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007986:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800798e:	4b48      	ldr	r3, [pc, #288]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007992:	e081      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800799a:	d102      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 800799c:	4b45      	ldr	r3, [pc, #276]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a0:	e07a      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a8:	d102      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 80079aa:	4b3e      	ldr	r3, [pc, #248]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ae:	e073      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b4:	e070      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ba:	bf00      	nop
 80079bc:	e06c      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c4:	d11f      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80079c6:	4b39      	ldr	r3, [pc, #228]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80079c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079da:	d008      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80079dc:	e00f      	b.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fb16 	bl	8008014 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ec:	e054      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f876 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079fc:	e04c      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a02:	bf00      	nop
 8007a04:	e048      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a0c:	d142      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007a0e:	4b27      	ldr	r3, [pc, #156]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007a16:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a1e:	d029      	beq.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007a20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a24:	d808      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a2a:	d013      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a30:	d018      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007a36:	e029      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a3c:	d020      	beq.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007a3e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a42:	d020      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a48:	d017      	beq.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007a4a:	e01f      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a4c:	f000 f834 	bl	8007ab8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a50:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007a52:	e021      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a54:	f107 0318 	add.w	r3, r7, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f843 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a62:	e019      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f987 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a72:	e011      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a78:	e00e      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a7e:	e00b      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007a80:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a84:	e008      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8a:	e005      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a90:	bf00      	nop
 8007a92:	e001      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3740      	adds	r7, #64	; 0x40
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	007a1200 	.word	0x007a1200
 8007aa8:	00bb8000 	.word	0x00bb8000
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	03d09000 	.word	0x03d09000
 8007ab4:	003d0900 	.word	0x003d0900

08007ab8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007abc:	f7fe fec6 	bl	800684c <HAL_RCC_GetHCLKFreq>
 8007ac0:	4601      	mov	r1, r0
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	091b      	lsrs	r3, r3, #4
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	4a04      	ldr	r2, [pc, #16]	; (8007ae0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ace:	5cd3      	ldrb	r3, [r2, r3]
 8007ad0:	f003 031f 	and.w	r3, r3, #31
 8007ad4:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	0800b4bc 	.word	0x0800b4bc

08007ae4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b089      	sub	sp, #36	; 0x24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aec:	4b9d      	ldr	r3, [pc, #628]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	f003 0303 	and.w	r3, r3, #3
 8007af4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007af6:	4b9b      	ldr	r3, [pc, #620]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	0b1b      	lsrs	r3, r3, #12
 8007afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b02:	4b98      	ldr	r3, [pc, #608]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	091b      	lsrs	r3, r3, #4
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007b0e:	4b95      	ldr	r3, [pc, #596]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b12:	08db      	lsrs	r3, r3, #3
 8007b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 810a 	beq.w	8007d46 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d05a      	beq.n	8007bee <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d302      	bcc.n	8007b42 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d078      	beq.n	8007c32 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007b40:	e099      	b.n	8007c76 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b42:	4b88      	ldr	r3, [pc, #544]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d02d      	beq.n	8007baa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b4e:	4b85      	ldr	r3, [pc, #532]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	08db      	lsrs	r3, r3, #3
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	4a83      	ldr	r2, [pc, #524]	; (8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b78:	4b7a      	ldr	r3, [pc, #488]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ba8:	e087      	b.n	8007cba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbc:	4b69      	ldr	r3, [pc, #420]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bec:	e065      	b.n	8007cba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c00:	4b58      	ldr	r3, [pc, #352]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c14:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c30:	e043      	b.n	8007cba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c44:	4b47      	ldr	r3, [pc, #284]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c58:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c74:	e021      	b.n	8007cba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c80:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c88:	4b36      	ldr	r3, [pc, #216]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	ee07 3a90 	vmov	s15, r3
 8007c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c98:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cb8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cba:	4b2a      	ldr	r3, [pc, #168]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	0a5b      	lsrs	r3, r3, #9
 8007cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce0:	ee17 2a90 	vmov	r2, s15
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d0e:	ee17 2a90 	vmov	r2, s15
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	0e1b      	lsrs	r3, r3, #24
 8007d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d3c:	ee17 2a90 	vmov	r2, s15
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d44:	e008      	b.n	8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	3724      	adds	r7, #36	; 0x24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	58024400 	.word	0x58024400
 8007d68:	03d09000 	.word	0x03d09000
 8007d6c:	46000000 	.word	0x46000000
 8007d70:	4c742400 	.word	0x4c742400
 8007d74:	4a742400 	.word	0x4a742400
 8007d78:	4af42400 	.word	0x4af42400

08007d7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b089      	sub	sp, #36	; 0x24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d84:	4b9d      	ldr	r3, [pc, #628]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d8e:	4b9b      	ldr	r3, [pc, #620]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	0d1b      	lsrs	r3, r3, #20
 8007d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d9a:	4b98      	ldr	r3, [pc, #608]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007da6:	4b95      	ldr	r3, [pc, #596]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	08db      	lsrs	r3, r3, #3
 8007dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 810a 	beq.w	8007fde <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d05a      	beq.n	8007e86 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d302      	bcc.n	8007dda <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d078      	beq.n	8007eca <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007dd8:	e099      	b.n	8007f0e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dda:	4b88      	ldr	r3, [pc, #544]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02d      	beq.n	8007e42 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007de6:	4b85      	ldr	r3, [pc, #532]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	08db      	lsrs	r3, r3, #3
 8007dec:	f003 0303 	and.w	r3, r3, #3
 8007df0:	4a83      	ldr	r2, [pc, #524]	; (8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007df2:	fa22 f303 	lsr.w	r3, r2, r3
 8007df6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e10:	4b7a      	ldr	r3, [pc, #488]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e20:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e24:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e40:	e087      	b.n	8007f52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e54:	4b69      	ldr	r3, [pc, #420]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e5c:	ee07 3a90 	vmov	s15, r3
 8007e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e64:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e68:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e84:	e065      	b.n	8007f52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	ee07 3a90 	vmov	s15, r3
 8007e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e98:	4b58      	ldr	r3, [pc, #352]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ec8:	e043      	b.n	8007f52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007edc:	4b47      	ldr	r3, [pc, #284]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f0c:	e021      	b.n	8007f52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f18:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800800c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008004 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f50:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f52:	4b2a      	ldr	r3, [pc, #168]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	0a5b      	lsrs	r3, r3, #9
 8007f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f78:	ee17 2a90 	vmov	r2, s15
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f80:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa6:	ee17 2a90 	vmov	r2, s15
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	0e1b      	lsrs	r3, r3, #24
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd4:	ee17 2a90 	vmov	r2, s15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fdc:	e008      	b.n	8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	3724      	adds	r7, #36	; 0x24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	58024400 	.word	0x58024400
 8008000:	03d09000 	.word	0x03d09000
 8008004:	46000000 	.word	0x46000000
 8008008:	4c742400 	.word	0x4c742400
 800800c:	4a742400 	.word	0x4a742400
 8008010:	4af42400 	.word	0x4af42400

08008014 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008014:	b480      	push	{r7}
 8008016:	b089      	sub	sp, #36	; 0x24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800801c:	4b9d      	ldr	r3, [pc, #628]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008026:	4b9b      	ldr	r3, [pc, #620]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008030:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008032:	4b98      	ldr	r3, [pc, #608]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800803c:	4b95      	ldr	r3, [pc, #596]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	08db      	lsrs	r3, r3, #3
 8008042:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	ee07 3a90 	vmov	s15, r3
 8008050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008054:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 810a 	beq.w	8008274 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d05a      	beq.n	800811c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008066:	2b01      	cmp	r3, #1
 8008068:	d302      	bcc.n	8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800806a:	2b02      	cmp	r3, #2
 800806c:	d078      	beq.n	8008160 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800806e:	e099      	b.n	80081a4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008070:	4b88      	ldr	r3, [pc, #544]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d02d      	beq.n	80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800807c:	4b85      	ldr	r3, [pc, #532]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	08db      	lsrs	r3, r3, #3
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	4a84      	ldr	r2, [pc, #528]	; (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	ee07 3a90 	vmov	s15, r3
 8008094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a6:	4b7b      	ldr	r3, [pc, #492]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080d6:	e087      	b.n	80081e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80080e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ea:	4b6a      	ldr	r3, [pc, #424]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811a:	e065      	b.n	80081e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008126:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800812a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812e:	4b59      	ldr	r3, [pc, #356]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008142:	eddf 5a56 	vldr	s11, [pc, #344]	; 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800815e:	e043      	b.n	80081e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800816e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008172:	4b48      	ldr	r3, [pc, #288]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008182:	ed97 6a03 	vldr	s12, [r7, #12]
 8008186:	eddf 5a45 	vldr	s11, [pc, #276]	; 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800818a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081a2:	e021      	b.n	80081e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80081b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b6:	4b37      	ldr	r3, [pc, #220]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081e6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	0a5b      	lsrs	r3, r3, #9
 80081ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008202:	edd7 6a07 	vldr	s13, [r7, #28]
 8008206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800820a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800820e:	ee17 2a90 	vmov	r2, s15
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008216:	4b1f      	ldr	r3, [pc, #124]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	0c1b      	lsrs	r3, r3, #16
 800821c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800822c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008230:	edd7 6a07 	vldr	s13, [r7, #28]
 8008234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823c:	ee17 2a90 	vmov	r2, s15
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008244:	4b13      	ldr	r3, [pc, #76]	; (8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	0e1b      	lsrs	r3, r3, #24
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800825a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800825e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800826a:	ee17 2a90 	vmov	r2, s15
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008272:	e008      	b.n	8008286 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	609a      	str	r2, [r3, #8]
}
 8008286:	bf00      	nop
 8008288:	3724      	adds	r7, #36	; 0x24
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	58024400 	.word	0x58024400
 8008298:	03d09000 	.word	0x03d09000
 800829c:	46000000 	.word	0x46000000
 80082a0:	4c742400 	.word	0x4c742400
 80082a4:	4a742400 	.word	0x4a742400
 80082a8:	4af42400 	.word	0x4af42400

080082ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ba:	4b53      	ldr	r3, [pc, #332]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d101      	bne.n	80082ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e099      	b.n	80083fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082ca:	4b4f      	ldr	r3, [pc, #316]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a4e      	ldr	r2, [pc, #312]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80082d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d6:	f7f9 fa65 	bl	80017a4 <HAL_GetTick>
 80082da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082dc:	e008      	b.n	80082f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082de:	f7f9 fa61 	bl	80017a4 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d901      	bls.n	80082f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e086      	b.n	80083fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082f0:	4b45      	ldr	r3, [pc, #276]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f0      	bne.n	80082de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082fc:	4b42      	ldr	r3, [pc, #264]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	031b      	lsls	r3, r3, #12
 800830a:	493f      	ldr	r1, [pc, #252]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 800830c:	4313      	orrs	r3, r2
 800830e:	628b      	str	r3, [r1, #40]	; 0x28
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	3b01      	subs	r3, #1
 8008316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	3b01      	subs	r3, #1
 8008320:	025b      	lsls	r3, r3, #9
 8008322:	b29b      	uxth	r3, r3
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	3b01      	subs	r3, #1
 800832c:	041b      	lsls	r3, r3, #16
 800832e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	3b01      	subs	r3, #1
 800833a:	061b      	lsls	r3, r3, #24
 800833c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008340:	4931      	ldr	r1, [pc, #196]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008342:	4313      	orrs	r3, r2
 8008344:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008346:	4b30      	ldr	r3, [pc, #192]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	492d      	ldr	r1, [pc, #180]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008354:	4313      	orrs	r3, r2
 8008356:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008358:	4b2b      	ldr	r3, [pc, #172]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	f023 0220 	bic.w	r2, r3, #32
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	4928      	ldr	r1, [pc, #160]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800836a:	4b27      	ldr	r3, [pc, #156]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	4a26      	ldr	r2, [pc, #152]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008370:	f023 0310 	bic.w	r3, r3, #16
 8008374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008376:	4b24      	ldr	r3, [pc, #144]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800837a:	4b24      	ldr	r3, [pc, #144]	; (800840c <RCCEx_PLL2_Config+0x160>)
 800837c:	4013      	ands	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	69d2      	ldr	r2, [r2, #28]
 8008382:	00d2      	lsls	r2, r2, #3
 8008384:	4920      	ldr	r1, [pc, #128]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008386:	4313      	orrs	r3, r2
 8008388:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800838a:	4b1f      	ldr	r3, [pc, #124]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 8008390:	f043 0310 	orr.w	r3, r3, #16
 8008394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800839c:	4b1a      	ldr	r3, [pc, #104]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	4a19      	ldr	r2, [pc, #100]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083a8:	e00f      	b.n	80083ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d106      	bne.n	80083be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083b0:	4b15      	ldr	r3, [pc, #84]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4a14      	ldr	r2, [pc, #80]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083bc:	e005      	b.n	80083ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083be:	4b12      	ldr	r3, [pc, #72]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	4a11      	ldr	r2, [pc, #68]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083ca:	4b0f      	ldr	r3, [pc, #60]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a0e      	ldr	r2, [pc, #56]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d6:	f7f9 f9e5 	bl	80017a4 <HAL_GetTick>
 80083da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083dc:	e008      	b.n	80083f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083de:	f7f9 f9e1 	bl	80017a4 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d901      	bls.n	80083f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e006      	b.n	80083fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <RCCEx_PLL2_Config+0x15c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f0      	beq.n	80083de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	58024400 	.word	0x58024400
 800840c:	ffff0007 	.word	0xffff0007

08008410 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800841e:	4b53      	ldr	r3, [pc, #332]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d101      	bne.n	800842e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e099      	b.n	8008562 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800842e:	4b4f      	ldr	r3, [pc, #316]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a4e      	ldr	r2, [pc, #312]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800843a:	f7f9 f9b3 	bl	80017a4 <HAL_GetTick>
 800843e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008440:	e008      	b.n	8008454 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008442:	f7f9 f9af 	bl	80017a4 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e086      	b.n	8008562 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008454:	4b45      	ldr	r3, [pc, #276]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1f0      	bne.n	8008442 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008460:	4b42      	ldr	r3, [pc, #264]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	051b      	lsls	r3, r3, #20
 800846e:	493f      	ldr	r1, [pc, #252]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008470:	4313      	orrs	r3, r2
 8008472:	628b      	str	r3, [r1, #40]	; 0x28
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	3b01      	subs	r3, #1
 800847a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	3b01      	subs	r3, #1
 8008484:	025b      	lsls	r3, r3, #9
 8008486:	b29b      	uxth	r3, r3
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	3b01      	subs	r3, #1
 8008490:	041b      	lsls	r3, r3, #16
 8008492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	3b01      	subs	r3, #1
 800849e:	061b      	lsls	r3, r3, #24
 80084a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084a4:	4931      	ldr	r1, [pc, #196]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084aa:	4b30      	ldr	r3, [pc, #192]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	492d      	ldr	r1, [pc, #180]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084bc:	4b2b      	ldr	r3, [pc, #172]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	4928      	ldr	r1, [pc, #160]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084ce:	4b27      	ldr	r3, [pc, #156]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	4a26      	ldr	r2, [pc, #152]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084da:	4b24      	ldr	r3, [pc, #144]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <RCCEx_PLL3_Config+0x160>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	69d2      	ldr	r2, [r2, #28]
 80084e6:	00d2      	lsls	r2, r2, #3
 80084e8:	4920      	ldr	r1, [pc, #128]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084ee:	4b1f      	ldr	r3, [pc, #124]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	4a1e      	ldr	r2, [pc, #120]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 80084f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d106      	bne.n	800850e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008500:	4b1a      	ldr	r3, [pc, #104]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	4a19      	ldr	r2, [pc, #100]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800850a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800850c:	e00f      	b.n	800852e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d106      	bne.n	8008522 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008514:	4b15      	ldr	r3, [pc, #84]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	4a14      	ldr	r2, [pc, #80]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 800851a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800851e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008520:	e005      	b.n	800852e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	4a11      	ldr	r2, [pc, #68]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800852c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a0e      	ldr	r2, [pc, #56]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800853a:	f7f9 f933 	bl	80017a4 <HAL_GetTick>
 800853e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008540:	e008      	b.n	8008554 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008542:	f7f9 f92f 	bl	80017a4 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e006      	b.n	8008562 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <RCCEx_PLL3_Config+0x15c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0f0      	beq.n	8008542 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	58024400 	.word	0x58024400
 8008570:	ffff0007 	.word	0xffff0007

08008574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e049      	b.n	800861a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7f8 fe6a 	bl	8001274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f000 f864 	bl	8008680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	d001      	beq.n	800863c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e019      	b.n	8008670 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <HAL_TIM_Base_Start+0x58>)
 800864c:	4013      	ands	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b06      	cmp	r3, #6
 8008654:	d00b      	beq.n	800866e <HAL_TIM_Base_Start+0x4a>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d007      	beq.n	800866e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	00010007 	.word	0x00010007

08008680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a40      	ldr	r2, [pc, #256]	; (8008794 <TIM_Base_SetConfig+0x114>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d013      	beq.n	80086c0 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869e:	d00f      	beq.n	80086c0 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a3d      	ldr	r2, [pc, #244]	; (8008798 <TIM_Base_SetConfig+0x118>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00b      	beq.n	80086c0 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a3c      	ldr	r2, [pc, #240]	; (800879c <TIM_Base_SetConfig+0x11c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d007      	beq.n	80086c0 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3b      	ldr	r2, [pc, #236]	; (80087a0 <TIM_Base_SetConfig+0x120>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3a      	ldr	r2, [pc, #232]	; (80087a4 <TIM_Base_SetConfig+0x124>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d108      	bne.n	80086d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a2f      	ldr	r2, [pc, #188]	; (8008794 <TIM_Base_SetConfig+0x114>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01f      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e0:	d01b      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2c      	ldr	r2, [pc, #176]	; (8008798 <TIM_Base_SetConfig+0x118>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d017      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2b      	ldr	r2, [pc, #172]	; (800879c <TIM_Base_SetConfig+0x11c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2a      	ldr	r2, [pc, #168]	; (80087a0 <TIM_Base_SetConfig+0x120>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00f      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a29      	ldr	r2, [pc, #164]	; (80087a4 <TIM_Base_SetConfig+0x124>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00b      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a28      	ldr	r2, [pc, #160]	; (80087a8 <TIM_Base_SetConfig+0x128>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d007      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a27      	ldr	r2, [pc, #156]	; (80087ac <TIM_Base_SetConfig+0x12c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d003      	beq.n	800871a <TIM_Base_SetConfig+0x9a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <TIM_Base_SetConfig+0x130>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d108      	bne.n	800872c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a10      	ldr	r2, [pc, #64]	; (8008794 <TIM_Base_SetConfig+0x114>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00f      	beq.n	8008778 <TIM_Base_SetConfig+0xf8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a12      	ldr	r2, [pc, #72]	; (80087a4 <TIM_Base_SetConfig+0x124>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <TIM_Base_SetConfig+0xf8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a11      	ldr	r2, [pc, #68]	; (80087a8 <TIM_Base_SetConfig+0x128>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_Base_SetConfig+0xf8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a10      	ldr	r2, [pc, #64]	; (80087ac <TIM_Base_SetConfig+0x12c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_Base_SetConfig+0xf8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a0f      	ldr	r2, [pc, #60]	; (80087b0 <TIM_Base_SetConfig+0x130>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d103      	bne.n	8008780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	615a      	str	r2, [r3, #20]
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40010000 	.word	0x40010000
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800
 80087a0:	40000c00 	.word	0x40000c00
 80087a4:	40010400 	.word	0x40010400
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40014400 	.word	0x40014400
 80087b0:	40014800 	.word	0x40014800

080087b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e068      	b.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a2e      	ldr	r2, [pc, #184]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a2d      	ldr	r2, [pc, #180]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d108      	bne.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01d      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d018      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1a      	ldr	r2, [pc, #104]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a18      	ldr	r2, [pc, #96]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a14      	ldr	r2, [pc, #80]	; (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10c      	bne.n	800888c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4313      	orrs	r3, r2
 8008882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	40010000 	.word	0x40010000
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40000400 	.word	0x40000400
 80088b8:	40000800 	.word	0x40000800
 80088bc:	40000c00 	.word	0x40000c00
 80088c0:	40001800 	.word	0x40001800

080088c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e042      	b.n	800895c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7f8 fce5 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2224      	movs	r2, #36	; 0x24
 80088f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0201 	bic.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f82c 	bl	8008964 <UART_SetConfig>
 800890c:	4603      	mov	r3, r0
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e022      	b.n	800895c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fecc 	bl	80096bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 ff53 	bl	8009800 <UART_CheckIdleState>
 800895a:	4603      	mov	r3, r0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008964:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008968:	b08e      	sub	sp, #56	; 0x38
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	4313      	orrs	r3, r2
 800898a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008992:	4313      	orrs	r3, r2
 8008994:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	4bc1      	ldr	r3, [pc, #772]	; (8008ca4 <UART_SetConfig+0x340>)
 800899e:	4013      	ands	r3, r2
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6812      	ldr	r2, [r2, #0]
 80089a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089a6:	430b      	orrs	r3, r1
 80089a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4ab7      	ldr	r2, [pc, #732]	; (8008ca8 <UART_SetConfig+0x344>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d004      	beq.n	80089da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d6:	4313      	orrs	r3, r2
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	4bb2      	ldr	r3, [pc, #712]	; (8008cac <UART_SetConfig+0x348>)
 80089e2:	4013      	ands	r3, r2
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089ea:	430b      	orrs	r3, r1
 80089ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	f023 010f 	bic.w	r1, r3, #15
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4aa9      	ldr	r2, [pc, #676]	; (8008cb0 <UART_SetConfig+0x34c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d177      	bne.n	8008afe <UART_SetConfig+0x19a>
 8008a0e:	4ba9      	ldr	r3, [pc, #676]	; (8008cb4 <UART_SetConfig+0x350>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a16:	2b28      	cmp	r3, #40	; 0x28
 8008a18:	d86c      	bhi.n	8008af4 <UART_SetConfig+0x190>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0xbc>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008ac5 	.word	0x08008ac5
 8008a24:	08008af5 	.word	0x08008af5
 8008a28:	08008af5 	.word	0x08008af5
 8008a2c:	08008af5 	.word	0x08008af5
 8008a30:	08008af5 	.word	0x08008af5
 8008a34:	08008af5 	.word	0x08008af5
 8008a38:	08008af5 	.word	0x08008af5
 8008a3c:	08008af5 	.word	0x08008af5
 8008a40:	08008acd 	.word	0x08008acd
 8008a44:	08008af5 	.word	0x08008af5
 8008a48:	08008af5 	.word	0x08008af5
 8008a4c:	08008af5 	.word	0x08008af5
 8008a50:	08008af5 	.word	0x08008af5
 8008a54:	08008af5 	.word	0x08008af5
 8008a58:	08008af5 	.word	0x08008af5
 8008a5c:	08008af5 	.word	0x08008af5
 8008a60:	08008ad5 	.word	0x08008ad5
 8008a64:	08008af5 	.word	0x08008af5
 8008a68:	08008af5 	.word	0x08008af5
 8008a6c:	08008af5 	.word	0x08008af5
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008af5 	.word	0x08008af5
 8008a78:	08008af5 	.word	0x08008af5
 8008a7c:	08008af5 	.word	0x08008af5
 8008a80:	08008add 	.word	0x08008add
 8008a84:	08008af5 	.word	0x08008af5
 8008a88:	08008af5 	.word	0x08008af5
 8008a8c:	08008af5 	.word	0x08008af5
 8008a90:	08008af5 	.word	0x08008af5
 8008a94:	08008af5 	.word	0x08008af5
 8008a98:	08008af5 	.word	0x08008af5
 8008a9c:	08008af5 	.word	0x08008af5
 8008aa0:	08008ae5 	.word	0x08008ae5
 8008aa4:	08008af5 	.word	0x08008af5
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008af5 	.word	0x08008af5
 8008ab0:	08008af5 	.word	0x08008af5
 8008ab4:	08008af5 	.word	0x08008af5
 8008ab8:	08008af5 	.word	0x08008af5
 8008abc:	08008af5 	.word	0x08008af5
 8008ac0:	08008aed 	.word	0x08008aed
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aca:	e339      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008acc:	2304      	movs	r3, #4
 8008ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad2:	e335      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008ad4:	2308      	movs	r3, #8
 8008ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ada:	e331      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008adc:	2310      	movs	r3, #16
 8008ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae2:	e32d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aea:	e329      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af2:	e325      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008af4:	2380      	movs	r3, #128	; 0x80
 8008af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008afa:	bf00      	nop
 8008afc:	e320      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a6d      	ldr	r2, [pc, #436]	; (8008cb8 <UART_SetConfig+0x354>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d132      	bne.n	8008b6e <UART_SetConfig+0x20a>
 8008b08:	4b6a      	ldr	r3, [pc, #424]	; (8008cb4 <UART_SetConfig+0x350>)
 8008b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	2b05      	cmp	r3, #5
 8008b12:	d827      	bhi.n	8008b64 <UART_SetConfig+0x200>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <UART_SetConfig+0x1b8>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b35 	.word	0x08008b35
 8008b20:	08008b3d 	.word	0x08008b3d
 8008b24:	08008b45 	.word	0x08008b45
 8008b28:	08008b4d 	.word	0x08008b4d
 8008b2c:	08008b55 	.word	0x08008b55
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	2300      	movs	r3, #0
 8008b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b3a:	e301      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b42:	e2fd      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b44:	2308      	movs	r3, #8
 8008b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4a:	e2f9      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b52:	e2f5      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b54:	2320      	movs	r3, #32
 8008b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5a:	e2f1      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b62:	e2ed      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b64:	2380      	movs	r3, #128	; 0x80
 8008b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6a:	bf00      	nop
 8008b6c:	e2e8      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a52      	ldr	r2, [pc, #328]	; (8008cbc <UART_SetConfig+0x358>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d132      	bne.n	8008bde <UART_SetConfig+0x27a>
 8008b78:	4b4e      	ldr	r3, [pc, #312]	; (8008cb4 <UART_SetConfig+0x350>)
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	2b05      	cmp	r3, #5
 8008b82:	d827      	bhi.n	8008bd4 <UART_SetConfig+0x270>
 8008b84:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <UART_SetConfig+0x228>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008ba5 	.word	0x08008ba5
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bc5 	.word	0x08008bc5
 8008ba0:	08008bcd 	.word	0x08008bcd
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008baa:	e2c9      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb2:	e2c5      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bba:	e2c1      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc2:	e2bd      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bca:	e2b9      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bcc:	2340      	movs	r3, #64	; 0x40
 8008bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd2:	e2b5      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bd4:	2380      	movs	r3, #128	; 0x80
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bda:	bf00      	nop
 8008bdc:	e2b0      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a37      	ldr	r2, [pc, #220]	; (8008cc0 <UART_SetConfig+0x35c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d132      	bne.n	8008c4e <UART_SetConfig+0x2ea>
 8008be8:	4b32      	ldr	r3, [pc, #200]	; (8008cb4 <UART_SetConfig+0x350>)
 8008bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	2b05      	cmp	r3, #5
 8008bf2:	d827      	bhi.n	8008c44 <UART_SetConfig+0x2e0>
 8008bf4:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <UART_SetConfig+0x298>)
 8008bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e291      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e28d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e289      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e285      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e281      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e27d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4a:	bf00      	nop
 8008c4c:	e278      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a1c      	ldr	r2, [pc, #112]	; (8008cc4 <UART_SetConfig+0x360>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d144      	bne.n	8008ce2 <UART_SetConfig+0x37e>
 8008c58:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <UART_SetConfig+0x350>)
 8008c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	2b05      	cmp	r3, #5
 8008c62:	d839      	bhi.n	8008cd8 <UART_SetConfig+0x374>
 8008c64:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <UART_SetConfig+0x308>)
 8008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6a:	bf00      	nop
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008cc9 	.word	0x08008cc9
 8008c80:	08008cd1 	.word	0x08008cd1
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8a:	e259      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c92:	e255      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c94:	2308      	movs	r3, #8
 8008c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9a:	e251      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca2:	e24d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008ca4:	cfff69f3 	.word	0xcfff69f3
 8008ca8:	58000c00 	.word	0x58000c00
 8008cac:	11fff4ff 	.word	0x11fff4ff
 8008cb0:	40011000 	.word	0x40011000
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	40004400 	.word	0x40004400
 8008cbc:	40004800 	.word	0x40004800
 8008cc0:	40004c00 	.word	0x40004c00
 8008cc4:	40005000 	.word	0x40005000
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cce:	e237      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008cd0:	2340      	movs	r3, #64	; 0x40
 8008cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd6:	e233      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cde:	bf00      	nop
 8008ce0:	e22e      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4ab5      	ldr	r2, [pc, #724]	; (8008fbc <UART_SetConfig+0x658>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d178      	bne.n	8008dde <UART_SetConfig+0x47a>
 8008cec:	4bb4      	ldr	r3, [pc, #720]	; (8008fc0 <UART_SetConfig+0x65c>)
 8008cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cf4:	2b28      	cmp	r3, #40	; 0x28
 8008cf6:	d86d      	bhi.n	8008dd4 <UART_SetConfig+0x470>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <UART_SetConfig+0x39c>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008da5 	.word	0x08008da5
 8008d04:	08008dd5 	.word	0x08008dd5
 8008d08:	08008dd5 	.word	0x08008dd5
 8008d0c:	08008dd5 	.word	0x08008dd5
 8008d10:	08008dd5 	.word	0x08008dd5
 8008d14:	08008dd5 	.word	0x08008dd5
 8008d18:	08008dd5 	.word	0x08008dd5
 8008d1c:	08008dd5 	.word	0x08008dd5
 8008d20:	08008dad 	.word	0x08008dad
 8008d24:	08008dd5 	.word	0x08008dd5
 8008d28:	08008dd5 	.word	0x08008dd5
 8008d2c:	08008dd5 	.word	0x08008dd5
 8008d30:	08008dd5 	.word	0x08008dd5
 8008d34:	08008dd5 	.word	0x08008dd5
 8008d38:	08008dd5 	.word	0x08008dd5
 8008d3c:	08008dd5 	.word	0x08008dd5
 8008d40:	08008db5 	.word	0x08008db5
 8008d44:	08008dd5 	.word	0x08008dd5
 8008d48:	08008dd5 	.word	0x08008dd5
 8008d4c:	08008dd5 	.word	0x08008dd5
 8008d50:	08008dd5 	.word	0x08008dd5
 8008d54:	08008dd5 	.word	0x08008dd5
 8008d58:	08008dd5 	.word	0x08008dd5
 8008d5c:	08008dd5 	.word	0x08008dd5
 8008d60:	08008dbd 	.word	0x08008dbd
 8008d64:	08008dd5 	.word	0x08008dd5
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008dd5 	.word	0x08008dd5
 8008d70:	08008dd5 	.word	0x08008dd5
 8008d74:	08008dd5 	.word	0x08008dd5
 8008d78:	08008dd5 	.word	0x08008dd5
 8008d7c:	08008dd5 	.word	0x08008dd5
 8008d80:	08008dc5 	.word	0x08008dc5
 8008d84:	08008dd5 	.word	0x08008dd5
 8008d88:	08008dd5 	.word	0x08008dd5
 8008d8c:	08008dd5 	.word	0x08008dd5
 8008d90:	08008dd5 	.word	0x08008dd5
 8008d94:	08008dd5 	.word	0x08008dd5
 8008d98:	08008dd5 	.word	0x08008dd5
 8008d9c:	08008dd5 	.word	0x08008dd5
 8008da0:	08008dcd 	.word	0x08008dcd
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008daa:	e1c9      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008db2:	e1c5      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dba:	e1c1      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dc2:	e1bd      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008dc4:	2320      	movs	r3, #32
 8008dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dca:	e1b9      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008dcc:	2340      	movs	r3, #64	; 0x40
 8008dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd2:	e1b5      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008dd4:	2380      	movs	r3, #128	; 0x80
 8008dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dda:	bf00      	nop
 8008ddc:	e1b0      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a78      	ldr	r2, [pc, #480]	; (8008fc4 <UART_SetConfig+0x660>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d132      	bne.n	8008e4e <UART_SetConfig+0x4ea>
 8008de8:	4b75      	ldr	r3, [pc, #468]	; (8008fc0 <UART_SetConfig+0x65c>)
 8008dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	2b05      	cmp	r3, #5
 8008df2:	d827      	bhi.n	8008e44 <UART_SetConfig+0x4e0>
 8008df4:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <UART_SetConfig+0x498>)
 8008df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfa:	bf00      	nop
 8008dfc:	08008e15 	.word	0x08008e15
 8008e00:	08008e1d 	.word	0x08008e1d
 8008e04:	08008e25 	.word	0x08008e25
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e35 	.word	0x08008e35
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1a:	e191      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e22:	e18d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2a:	e189      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e32:	e185      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e34:	2320      	movs	r3, #32
 8008e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3a:	e181      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e3c:	2340      	movs	r3, #64	; 0x40
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e17d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4a:	bf00      	nop
 8008e4c:	e178      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a5d      	ldr	r2, [pc, #372]	; (8008fc8 <UART_SetConfig+0x664>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d132      	bne.n	8008ebe <UART_SetConfig+0x55a>
 8008e58:	4b59      	ldr	r3, [pc, #356]	; (8008fc0 <UART_SetConfig+0x65c>)
 8008e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	2b05      	cmp	r3, #5
 8008e62:	d827      	bhi.n	8008eb4 <UART_SetConfig+0x550>
 8008e64:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <UART_SetConfig+0x508>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008e85 	.word	0x08008e85
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	08008e95 	.word	0x08008e95
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	2300      	movs	r3, #0
 8008e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8a:	e159      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e92:	e155      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e94:	2308      	movs	r3, #8
 8008e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e9a:	e151      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea2:	e14d      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008ea4:	2320      	movs	r3, #32
 8008ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eaa:	e149      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb2:	e145      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008eb4:	2380      	movs	r3, #128	; 0x80
 8008eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eba:	bf00      	nop
 8008ebc:	e140      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a42      	ldr	r2, [pc, #264]	; (8008fcc <UART_SetConfig+0x668>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	f040 8083 	bne.w	8008fd0 <UART_SetConfig+0x66c>
 8008eca:	4b3d      	ldr	r3, [pc, #244]	; (8008fc0 <UART_SetConfig+0x65c>)
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed2:	2b28      	cmp	r3, #40	; 0x28
 8008ed4:	d86c      	bhi.n	8008fb0 <UART_SetConfig+0x64c>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <UART_SetConfig+0x578>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f81 	.word	0x08008f81
 8008ee0:	08008fb1 	.word	0x08008fb1
 8008ee4:	08008fb1 	.word	0x08008fb1
 8008ee8:	08008fb1 	.word	0x08008fb1
 8008eec:	08008fb1 	.word	0x08008fb1
 8008ef0:	08008fb1 	.word	0x08008fb1
 8008ef4:	08008fb1 	.word	0x08008fb1
 8008ef8:	08008fb1 	.word	0x08008fb1
 8008efc:	08008f89 	.word	0x08008f89
 8008f00:	08008fb1 	.word	0x08008fb1
 8008f04:	08008fb1 	.word	0x08008fb1
 8008f08:	08008fb1 	.word	0x08008fb1
 8008f0c:	08008fb1 	.word	0x08008fb1
 8008f10:	08008fb1 	.word	0x08008fb1
 8008f14:	08008fb1 	.word	0x08008fb1
 8008f18:	08008fb1 	.word	0x08008fb1
 8008f1c:	08008f91 	.word	0x08008f91
 8008f20:	08008fb1 	.word	0x08008fb1
 8008f24:	08008fb1 	.word	0x08008fb1
 8008f28:	08008fb1 	.word	0x08008fb1
 8008f2c:	08008fb1 	.word	0x08008fb1
 8008f30:	08008fb1 	.word	0x08008fb1
 8008f34:	08008fb1 	.word	0x08008fb1
 8008f38:	08008fb1 	.word	0x08008fb1
 8008f3c:	08008f99 	.word	0x08008f99
 8008f40:	08008fb1 	.word	0x08008fb1
 8008f44:	08008fb1 	.word	0x08008fb1
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008fb1 	.word	0x08008fb1
 8008f50:	08008fb1 	.word	0x08008fb1
 8008f54:	08008fb1 	.word	0x08008fb1
 8008f58:	08008fb1 	.word	0x08008fb1
 8008f5c:	08008fa1 	.word	0x08008fa1
 8008f60:	08008fb1 	.word	0x08008fb1
 8008f64:	08008fb1 	.word	0x08008fb1
 8008f68:	08008fb1 	.word	0x08008fb1
 8008f6c:	08008fb1 	.word	0x08008fb1
 8008f70:	08008fb1 	.word	0x08008fb1
 8008f74:	08008fb1 	.word	0x08008fb1
 8008f78:	08008fb1 	.word	0x08008fb1
 8008f7c:	08008fa9 	.word	0x08008fa9
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f86:	e0db      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8e:	e0d7      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f96:	e0d3      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e0cf      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e0cb      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e0c7      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	bf00      	nop
 8008fb8:	e0c2      	b.n	8009140 <UART_SetConfig+0x7dc>
 8008fba:	bf00      	nop
 8008fbc:	40011400 	.word	0x40011400
 8008fc0:	58024400 	.word	0x58024400
 8008fc4:	40007800 	.word	0x40007800
 8008fc8:	40007c00 	.word	0x40007c00
 8008fcc:	40011800 	.word	0x40011800
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4ab2      	ldr	r2, [pc, #712]	; (80092a0 <UART_SetConfig+0x93c>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d177      	bne.n	80090ca <UART_SetConfig+0x766>
 8008fda:	4bb2      	ldr	r3, [pc, #712]	; (80092a4 <UART_SetConfig+0x940>)
 8008fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fe2:	2b28      	cmp	r3, #40	; 0x28
 8008fe4:	d86c      	bhi.n	80090c0 <UART_SetConfig+0x75c>
 8008fe6:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <UART_SetConfig+0x688>)
 8008fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fec:	08009091 	.word	0x08009091
 8008ff0:	080090c1 	.word	0x080090c1
 8008ff4:	080090c1 	.word	0x080090c1
 8008ff8:	080090c1 	.word	0x080090c1
 8008ffc:	080090c1 	.word	0x080090c1
 8009000:	080090c1 	.word	0x080090c1
 8009004:	080090c1 	.word	0x080090c1
 8009008:	080090c1 	.word	0x080090c1
 800900c:	08009099 	.word	0x08009099
 8009010:	080090c1 	.word	0x080090c1
 8009014:	080090c1 	.word	0x080090c1
 8009018:	080090c1 	.word	0x080090c1
 800901c:	080090c1 	.word	0x080090c1
 8009020:	080090c1 	.word	0x080090c1
 8009024:	080090c1 	.word	0x080090c1
 8009028:	080090c1 	.word	0x080090c1
 800902c:	080090a1 	.word	0x080090a1
 8009030:	080090c1 	.word	0x080090c1
 8009034:	080090c1 	.word	0x080090c1
 8009038:	080090c1 	.word	0x080090c1
 800903c:	080090c1 	.word	0x080090c1
 8009040:	080090c1 	.word	0x080090c1
 8009044:	080090c1 	.word	0x080090c1
 8009048:	080090c1 	.word	0x080090c1
 800904c:	080090a9 	.word	0x080090a9
 8009050:	080090c1 	.word	0x080090c1
 8009054:	080090c1 	.word	0x080090c1
 8009058:	080090c1 	.word	0x080090c1
 800905c:	080090c1 	.word	0x080090c1
 8009060:	080090c1 	.word	0x080090c1
 8009064:	080090c1 	.word	0x080090c1
 8009068:	080090c1 	.word	0x080090c1
 800906c:	080090b1 	.word	0x080090b1
 8009070:	080090c1 	.word	0x080090c1
 8009074:	080090c1 	.word	0x080090c1
 8009078:	080090c1 	.word	0x080090c1
 800907c:	080090c1 	.word	0x080090c1
 8009080:	080090c1 	.word	0x080090c1
 8009084:	080090c1 	.word	0x080090c1
 8009088:	080090c1 	.word	0x080090c1
 800908c:	080090b9 	.word	0x080090b9
 8009090:	2301      	movs	r3, #1
 8009092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009096:	e053      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009098:	2304      	movs	r3, #4
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e04f      	b.n	8009140 <UART_SetConfig+0x7dc>
 80090a0:	2308      	movs	r3, #8
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	e04b      	b.n	8009140 <UART_SetConfig+0x7dc>
 80090a8:	2310      	movs	r3, #16
 80090aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ae:	e047      	b.n	8009140 <UART_SetConfig+0x7dc>
 80090b0:	2320      	movs	r3, #32
 80090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b6:	e043      	b.n	8009140 <UART_SetConfig+0x7dc>
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090be:	e03f      	b.n	8009140 <UART_SetConfig+0x7dc>
 80090c0:	2380      	movs	r3, #128	; 0x80
 80090c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c6:	bf00      	nop
 80090c8:	e03a      	b.n	8009140 <UART_SetConfig+0x7dc>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a76      	ldr	r2, [pc, #472]	; (80092a8 <UART_SetConfig+0x944>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d132      	bne.n	800913a <UART_SetConfig+0x7d6>
 80090d4:	4b73      	ldr	r3, [pc, #460]	; (80092a4 <UART_SetConfig+0x940>)
 80090d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	2b05      	cmp	r3, #5
 80090de:	d827      	bhi.n	8009130 <UART_SetConfig+0x7cc>
 80090e0:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <UART_SetConfig+0x784>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	08009101 	.word	0x08009101
 80090ec:	08009109 	.word	0x08009109
 80090f0:	08009111 	.word	0x08009111
 80090f4:	08009119 	.word	0x08009119
 80090f8:	08009121 	.word	0x08009121
 80090fc:	08009129 	.word	0x08009129
 8009100:	2302      	movs	r3, #2
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009106:	e01b      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009108:	2304      	movs	r3, #4
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e017      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009110:	2308      	movs	r3, #8
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	e013      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009118:	2310      	movs	r3, #16
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911e:	e00f      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009120:	2320      	movs	r3, #32
 8009122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009126:	e00b      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912e:	e007      	b.n	8009140 <UART_SetConfig+0x7dc>
 8009130:	2380      	movs	r3, #128	; 0x80
 8009132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009136:	bf00      	nop
 8009138:	e002      	b.n	8009140 <UART_SetConfig+0x7dc>
 800913a:	2380      	movs	r3, #128	; 0x80
 800913c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a58      	ldr	r2, [pc, #352]	; (80092a8 <UART_SetConfig+0x944>)
 8009146:	4293      	cmp	r3, r2
 8009148:	f040 80b6 	bne.w	80092b8 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800914c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009150:	2b08      	cmp	r3, #8
 8009152:	d019      	beq.n	8009188 <UART_SetConfig+0x824>
 8009154:	2b08      	cmp	r3, #8
 8009156:	dc04      	bgt.n	8009162 <UART_SetConfig+0x7fe>
 8009158:	2b02      	cmp	r3, #2
 800915a:	d009      	beq.n	8009170 <UART_SetConfig+0x80c>
 800915c:	2b04      	cmp	r3, #4
 800915e:	d00b      	beq.n	8009178 <UART_SetConfig+0x814>
 8009160:	e034      	b.n	80091cc <UART_SetConfig+0x868>
 8009162:	2b20      	cmp	r3, #32
 8009164:	d02b      	beq.n	80091be <UART_SetConfig+0x85a>
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d02c      	beq.n	80091c4 <UART_SetConfig+0x860>
 800916a:	2b10      	cmp	r3, #16
 800916c:	d014      	beq.n	8009198 <UART_SetConfig+0x834>
 800916e:	e02d      	b.n	80091cc <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009170:	f7fe fca2 	bl	8007ab8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009174:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009176:	e02f      	b.n	80091d8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009178:	f107 0314 	add.w	r3, r7, #20
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fcb1 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009186:	e027      	b.n	80091d8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009188:	f107 0308 	add.w	r3, r7, #8
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fdf5 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009196:	e01f      	b.n	80091d8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009198:	4b42      	ldr	r3, [pc, #264]	; (80092a4 <UART_SetConfig+0x940>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d009      	beq.n	80091b8 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091a4:	4b3f      	ldr	r3, [pc, #252]	; (80092a4 <UART_SetConfig+0x940>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	08db      	lsrs	r3, r3, #3
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	4a3f      	ldr	r2, [pc, #252]	; (80092ac <UART_SetConfig+0x948>)
 80091b0:	fa22 f303 	lsr.w	r3, r2, r3
 80091b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091b6:	e00f      	b.n	80091d8 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80091b8:	4b3c      	ldr	r3, [pc, #240]	; (80092ac <UART_SetConfig+0x948>)
 80091ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091bc:	e00c      	b.n	80091d8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091be:	4b3c      	ldr	r3, [pc, #240]	; (80092b0 <UART_SetConfig+0x94c>)
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c2:	e009      	b.n	80091d8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091ca:	e005      	b.n	80091d8 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8251 	beq.w	8009682 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	4a33      	ldr	r2, [pc, #204]	; (80092b4 <UART_SetConfig+0x950>)
 80091e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ea:	461a      	mov	r2, r3
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	4613      	mov	r3, r2
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	4413      	add	r3, r2
 80091fe:	6a3a      	ldr	r2, [r7, #32]
 8009200:	429a      	cmp	r2, r3
 8009202:	d305      	bcc.n	8009210 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	429a      	cmp	r2, r3
 800920e:	d903      	bls.n	8009218 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009216:	e234      	b.n	8009682 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	4618      	mov	r0, r3
 800921c:	f04f 0100 	mov.w	r1, #0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	4a23      	ldr	r2, [pc, #140]	; (80092b4 <UART_SetConfig+0x950>)
 8009226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800922a:	b29b      	uxth	r3, r3
 800922c:	f04f 0400 	mov.w	r4, #0
 8009230:	461a      	mov	r2, r3
 8009232:	4623      	mov	r3, r4
 8009234:	f7f7 f85c 	bl	80002f0 <__aeabi_uldivmod>
 8009238:	4603      	mov	r3, r0
 800923a:	460c      	mov	r4, r1
 800923c:	4619      	mov	r1, r3
 800923e:	4622      	mov	r2, r4
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	f04f 0400 	mov.w	r4, #0
 8009248:	0214      	lsls	r4, r2, #8
 800924a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800924e:	020b      	lsls	r3, r1, #8
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	6852      	ldr	r2, [r2, #4]
 8009254:	0852      	lsrs	r2, r2, #1
 8009256:	4611      	mov	r1, r2
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	eb13 0b01 	adds.w	fp, r3, r1
 8009260:	eb44 0c02 	adc.w	ip, r4, r2
 8009264:	4658      	mov	r0, fp
 8009266:	4661      	mov	r1, ip
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f04f 0400 	mov.w	r4, #0
 8009270:	461a      	mov	r2, r3
 8009272:	4623      	mov	r3, r4
 8009274:	f7f7 f83c 	bl	80002f0 <__aeabi_uldivmod>
 8009278:	4603      	mov	r3, r0
 800927a:	460c      	mov	r4, r1
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009284:	d308      	bcc.n	8009298 <UART_SetConfig+0x934>
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800928c:	d204      	bcs.n	8009298 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	e1f4      	b.n	8009682 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800929e:	e1f0      	b.n	8009682 <UART_SetConfig+0xd1e>
 80092a0:	40011c00 	.word	0x40011c00
 80092a4:	58024400 	.word	0x58024400
 80092a8:	58000c00 	.word	0x58000c00
 80092ac:	03d09000 	.word	0x03d09000
 80092b0:	003d0900 	.word	0x003d0900
 80092b4:	0800b4d4 	.word	0x0800b4d4
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c0:	f040 80f8 	bne.w	80094b4 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80092c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	f200 80b7 	bhi.w	800943c <UART_SetConfig+0xad8>
 80092ce:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x970>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080093d9 	.word	0x080093d9
 80092d8:	080093e1 	.word	0x080093e1
 80092dc:	0800943d 	.word	0x0800943d
 80092e0:	0800943d 	.word	0x0800943d
 80092e4:	080093e9 	.word	0x080093e9
 80092e8:	0800943d 	.word	0x0800943d
 80092ec:	0800943d 	.word	0x0800943d
 80092f0:	0800943d 	.word	0x0800943d
 80092f4:	080093f9 	.word	0x080093f9
 80092f8:	0800943d 	.word	0x0800943d
 80092fc:	0800943d 	.word	0x0800943d
 8009300:	0800943d 	.word	0x0800943d
 8009304:	0800943d 	.word	0x0800943d
 8009308:	0800943d 	.word	0x0800943d
 800930c:	0800943d 	.word	0x0800943d
 8009310:	0800943d 	.word	0x0800943d
 8009314:	08009409 	.word	0x08009409
 8009318:	0800943d 	.word	0x0800943d
 800931c:	0800943d 	.word	0x0800943d
 8009320:	0800943d 	.word	0x0800943d
 8009324:	0800943d 	.word	0x0800943d
 8009328:	0800943d 	.word	0x0800943d
 800932c:	0800943d 	.word	0x0800943d
 8009330:	0800943d 	.word	0x0800943d
 8009334:	0800943d 	.word	0x0800943d
 8009338:	0800943d 	.word	0x0800943d
 800933c:	0800943d 	.word	0x0800943d
 8009340:	0800943d 	.word	0x0800943d
 8009344:	0800943d 	.word	0x0800943d
 8009348:	0800943d 	.word	0x0800943d
 800934c:	0800943d 	.word	0x0800943d
 8009350:	0800943d 	.word	0x0800943d
 8009354:	0800942f 	.word	0x0800942f
 8009358:	0800943d 	.word	0x0800943d
 800935c:	0800943d 	.word	0x0800943d
 8009360:	0800943d 	.word	0x0800943d
 8009364:	0800943d 	.word	0x0800943d
 8009368:	0800943d 	.word	0x0800943d
 800936c:	0800943d 	.word	0x0800943d
 8009370:	0800943d 	.word	0x0800943d
 8009374:	0800943d 	.word	0x0800943d
 8009378:	0800943d 	.word	0x0800943d
 800937c:	0800943d 	.word	0x0800943d
 8009380:	0800943d 	.word	0x0800943d
 8009384:	0800943d 	.word	0x0800943d
 8009388:	0800943d 	.word	0x0800943d
 800938c:	0800943d 	.word	0x0800943d
 8009390:	0800943d 	.word	0x0800943d
 8009394:	0800943d 	.word	0x0800943d
 8009398:	0800943d 	.word	0x0800943d
 800939c:	0800943d 	.word	0x0800943d
 80093a0:	0800943d 	.word	0x0800943d
 80093a4:	0800943d 	.word	0x0800943d
 80093a8:	0800943d 	.word	0x0800943d
 80093ac:	0800943d 	.word	0x0800943d
 80093b0:	0800943d 	.word	0x0800943d
 80093b4:	0800943d 	.word	0x0800943d
 80093b8:	0800943d 	.word	0x0800943d
 80093bc:	0800943d 	.word	0x0800943d
 80093c0:	0800943d 	.word	0x0800943d
 80093c4:	0800943d 	.word	0x0800943d
 80093c8:	0800943d 	.word	0x0800943d
 80093cc:	0800943d 	.word	0x0800943d
 80093d0:	0800943d 	.word	0x0800943d
 80093d4:	08009435 	.word	0x08009435
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093d8:	f7fd fa68 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 80093dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093de:	e033      	b.n	8009448 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093e0:	f7fd fa7a 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 80093e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093e6:	e02f      	b.n	8009448 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e8:	f107 0314 	add.w	r3, r7, #20
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fb79 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093f6:	e027      	b.n	8009448 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093f8:	f107 0308 	add.w	r3, r7, #8
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fcbd 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009406:	e01f      	b.n	8009448 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009408:	4ba8      	ldr	r3, [pc, #672]	; (80096ac <UART_SetConfig+0xd48>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d009      	beq.n	8009428 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009414:	4ba5      	ldr	r3, [pc, #660]	; (80096ac <UART_SetConfig+0xd48>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	4aa4      	ldr	r2, [pc, #656]	; (80096b0 <UART_SetConfig+0xd4c>)
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009426:	e00f      	b.n	8009448 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009428:	4ba1      	ldr	r3, [pc, #644]	; (80096b0 <UART_SetConfig+0xd4c>)
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800942c:	e00c      	b.n	8009448 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800942e:	4ba1      	ldr	r3, [pc, #644]	; (80096b4 <UART_SetConfig+0xd50>)
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009432:	e009      	b.n	8009448 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800943a:	e005      	b.n	8009448 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009446:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 8119 	beq.w	8009682 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	4a98      	ldr	r2, [pc, #608]	; (80096b8 <UART_SetConfig+0xd54>)
 8009456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800945a:	461a      	mov	r2, r3
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009462:	005a      	lsls	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	085b      	lsrs	r3, r3, #1
 800946a:	441a      	add	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	fbb2 f3f3 	udiv	r3, r2, r3
 8009474:	b29b      	uxth	r3, r3
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	2b0f      	cmp	r3, #15
 800947c:	d916      	bls.n	80094ac <UART_SetConfig+0xb48>
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009484:	d212      	bcs.n	80094ac <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	b29b      	uxth	r3, r3
 800948a:	f023 030f 	bic.w	r3, r3, #15
 800948e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	085b      	lsrs	r3, r3, #1
 8009494:	b29b      	uxth	r3, r3
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	b29a      	uxth	r2, r3
 800949c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800949e:	4313      	orrs	r3, r2
 80094a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	e0ea      	b.n	8009682 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80094b2:	e0e6      	b.n	8009682 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094b8:	2b40      	cmp	r3, #64	; 0x40
 80094ba:	f200 80b7 	bhi.w	800962c <UART_SetConfig+0xcc8>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <UART_SetConfig+0xb60>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080095c9 	.word	0x080095c9
 80094c8:	080095d1 	.word	0x080095d1
 80094cc:	0800962d 	.word	0x0800962d
 80094d0:	0800962d 	.word	0x0800962d
 80094d4:	080095d9 	.word	0x080095d9
 80094d8:	0800962d 	.word	0x0800962d
 80094dc:	0800962d 	.word	0x0800962d
 80094e0:	0800962d 	.word	0x0800962d
 80094e4:	080095e9 	.word	0x080095e9
 80094e8:	0800962d 	.word	0x0800962d
 80094ec:	0800962d 	.word	0x0800962d
 80094f0:	0800962d 	.word	0x0800962d
 80094f4:	0800962d 	.word	0x0800962d
 80094f8:	0800962d 	.word	0x0800962d
 80094fc:	0800962d 	.word	0x0800962d
 8009500:	0800962d 	.word	0x0800962d
 8009504:	080095f9 	.word	0x080095f9
 8009508:	0800962d 	.word	0x0800962d
 800950c:	0800962d 	.word	0x0800962d
 8009510:	0800962d 	.word	0x0800962d
 8009514:	0800962d 	.word	0x0800962d
 8009518:	0800962d 	.word	0x0800962d
 800951c:	0800962d 	.word	0x0800962d
 8009520:	0800962d 	.word	0x0800962d
 8009524:	0800962d 	.word	0x0800962d
 8009528:	0800962d 	.word	0x0800962d
 800952c:	0800962d 	.word	0x0800962d
 8009530:	0800962d 	.word	0x0800962d
 8009534:	0800962d 	.word	0x0800962d
 8009538:	0800962d 	.word	0x0800962d
 800953c:	0800962d 	.word	0x0800962d
 8009540:	0800962d 	.word	0x0800962d
 8009544:	0800961f 	.word	0x0800961f
 8009548:	0800962d 	.word	0x0800962d
 800954c:	0800962d 	.word	0x0800962d
 8009550:	0800962d 	.word	0x0800962d
 8009554:	0800962d 	.word	0x0800962d
 8009558:	0800962d 	.word	0x0800962d
 800955c:	0800962d 	.word	0x0800962d
 8009560:	0800962d 	.word	0x0800962d
 8009564:	0800962d 	.word	0x0800962d
 8009568:	0800962d 	.word	0x0800962d
 800956c:	0800962d 	.word	0x0800962d
 8009570:	0800962d 	.word	0x0800962d
 8009574:	0800962d 	.word	0x0800962d
 8009578:	0800962d 	.word	0x0800962d
 800957c:	0800962d 	.word	0x0800962d
 8009580:	0800962d 	.word	0x0800962d
 8009584:	0800962d 	.word	0x0800962d
 8009588:	0800962d 	.word	0x0800962d
 800958c:	0800962d 	.word	0x0800962d
 8009590:	0800962d 	.word	0x0800962d
 8009594:	0800962d 	.word	0x0800962d
 8009598:	0800962d 	.word	0x0800962d
 800959c:	0800962d 	.word	0x0800962d
 80095a0:	0800962d 	.word	0x0800962d
 80095a4:	0800962d 	.word	0x0800962d
 80095a8:	0800962d 	.word	0x0800962d
 80095ac:	0800962d 	.word	0x0800962d
 80095b0:	0800962d 	.word	0x0800962d
 80095b4:	0800962d 	.word	0x0800962d
 80095b8:	0800962d 	.word	0x0800962d
 80095bc:	0800962d 	.word	0x0800962d
 80095c0:	0800962d 	.word	0x0800962d
 80095c4:	08009625 	.word	0x08009625
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095c8:	f7fd f970 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 80095cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095ce:	e033      	b.n	8009638 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d0:	f7fd f982 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 80095d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095d6:	e02f      	b.n	8009638 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d8:	f107 0314 	add.w	r3, r7, #20
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe fa81 	bl	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095e6:	e027      	b.n	8009638 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fbc5 	bl	8007d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095f6:	e01f      	b.n	8009638 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f8:	4b2c      	ldr	r3, [pc, #176]	; (80096ac <UART_SetConfig+0xd48>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b00      	cmp	r3, #0
 8009602:	d009      	beq.n	8009618 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009604:	4b29      	ldr	r3, [pc, #164]	; (80096ac <UART_SetConfig+0xd48>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	08db      	lsrs	r3, r3, #3
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	4a28      	ldr	r2, [pc, #160]	; (80096b0 <UART_SetConfig+0xd4c>)
 8009610:	fa22 f303 	lsr.w	r3, r2, r3
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009616:	e00f      	b.n	8009638 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <UART_SetConfig+0xd4c>)
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800961c:	e00c      	b.n	8009638 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800961e:	4b25      	ldr	r3, [pc, #148]	; (80096b4 <UART_SetConfig+0xd50>)
 8009620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009622:	e009      	b.n	8009638 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009628:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800962a:	e005      	b.n	8009638 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009636:	bf00      	nop
    }

    if (pclk != 0U)
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d021      	beq.n	8009682 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	4a1d      	ldr	r2, [pc, #116]	; (80096b8 <UART_SetConfig+0xd54>)
 8009644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009648:	461a      	mov	r2, r3
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	441a      	add	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	b29b      	uxth	r3, r3
 8009662:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d908      	bls.n	800967c <UART_SetConfig+0xd18>
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009670:	d204      	bcs.n	800967c <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	e002      	b.n	8009682 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800969e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3738      	adds	r7, #56	; 0x38
 80096a6:	46bd      	mov	sp, r7
 80096a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80096ac:	58024400 	.word	0x58024400
 80096b0:	03d09000 	.word	0x03d09000
 80096b4:	003d0900 	.word	0x003d0900
 80096b8:	0800b4d4 	.word	0x0800b4d4

080096bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00a      	beq.n	800972a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972e:	f003 0308 	and.w	r3, r3, #8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00a      	beq.n	800976e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01a      	beq.n	80097d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097ba:	d10a      	bne.n	80097d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	605a      	str	r2, [r3, #4]
  }
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af02      	add	r7, sp, #8
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009810:	f7f7 ffc8 	bl	80017a4 <HAL_GetTick>
 8009814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b08      	cmp	r3, #8
 8009822:	d10e      	bne.n	8009842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f82c 	bl	8009890 <UART_WaitOnFlagUntilTimeout>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e022      	b.n	8009888 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b04      	cmp	r3, #4
 800984e:	d10e      	bne.n	800986e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f816 	bl	8009890 <UART_WaitOnFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e00c      	b.n	8009888 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2220      	movs	r2, #32
 800987a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	4613      	mov	r3, r2
 800989e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a0:	e062      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a8:	d05e      	beq.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098aa:	f7f7 ff7b 	bl	80017a4 <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d302      	bcc.n	80098c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d11d      	bne.n	80098fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098ce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689a      	ldr	r2, [r3, #8]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0201 	bic.w	r2, r2, #1
 80098de:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e045      	b.n	8009988 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d02e      	beq.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009918:	d126      	bne.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009922:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009932:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0201 	bic.w	r2, r2, #1
 8009942:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2220      	movs	r2, #32
 8009948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e00f      	b.n	8009988 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	69da      	ldr	r2, [r3, #28]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	4013      	ands	r3, r2
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	429a      	cmp	r2, r3
 8009976:	bf0c      	ite	eq
 8009978:	2301      	moveq	r3, #1
 800997a:	2300      	movne	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	461a      	mov	r2, r3
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	429a      	cmp	r2, r3
 8009984:	d08d      	beq.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e027      	b.n	80099f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2224      	movs	r2, #36	; 0x24
 80099b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0201 	bic.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d101      	bne.n	8009a1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a16:	2302      	movs	r3, #2
 8009a18:	e02d      	b.n	8009a76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2224      	movs	r2, #36	; 0x24
 8009a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0201 	bic.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f850 	bl	8009afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d101      	bne.n	8009a96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a92:	2302      	movs	r3, #2
 8009a94:	e02d      	b.n	8009af2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2224      	movs	r2, #36	; 0x24
 8009aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0201 	bic.w	r2, r2, #1
 8009abc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f812 	bl	8009afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b089      	sub	sp, #36	; 0x24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009b04:	4a2f      	ldr	r2, [pc, #188]	; (8009bc4 <UARTEx_SetNbDataToProcess+0xc8>)
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b0e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009b12:	4a2d      	ldr	r2, [pc, #180]	; (8009bc8 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b14:	f107 030c 	add.w	r3, r7, #12
 8009b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b1c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d108      	bne.n	8009b3a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b38:	e03d      	b.n	8009bb6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b3a:	2310      	movs	r3, #16
 8009b3c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b3e:	2310      	movs	r3, #16
 8009b40:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	0e5b      	lsrs	r3, r3, #25
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	0f5b      	lsrs	r3, r3, #29
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 0307 	and.w	r3, r3, #7
 8009b60:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009b62:	7fbb      	ldrb	r3, [r7, #30]
 8009b64:	7f3a      	ldrb	r2, [r7, #28]
 8009b66:	f107 0120 	add.w	r1, r7, #32
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	7f3a      	ldrb	r2, [r7, #28]
 8009b76:	f107 0120 	add.w	r1, r7, #32
 8009b7a:	440a      	add	r2, r1
 8009b7c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009b8c:	7ffb      	ldrb	r3, [r7, #31]
 8009b8e:	7f7a      	ldrb	r2, [r7, #29]
 8009b90:	f107 0120 	add.w	r1, r7, #32
 8009b94:	440a      	add	r2, r1
 8009b96:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
 8009b9e:	7f7a      	ldrb	r2, [r7, #29]
 8009ba0:	f107 0120 	add.w	r1, r7, #32
 8009ba4:	440a      	add	r2, r1
 8009ba6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009baa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bb6:	bf00      	nop
 8009bb8:	3724      	adds	r7, #36	; 0x24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	0800aac4 	.word	0x0800aac4
 8009bc8:	0800aacc 	.word	0x0800aacc

08009bcc <arm_fir_init_f32>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	9e06      	ldr	r6, [sp, #24]
 8009bd0:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	6082      	str	r2, [r0, #8]
 8009bd8:	4434      	add	r4, r6
 8009bda:	4605      	mov	r5, r0
 8009bdc:	461e      	mov	r6, r3
 8009bde:	8007      	strh	r7, [r0, #0]
 8009be0:	19e2      	adds	r2, r4, r7
 8009be2:	2100      	movs	r1, #0
 8009be4:	4618      	mov	r0, r3
 8009be6:	0092      	lsls	r2, r2, #2
 8009be8:	f000 fabe 	bl	800a168 <memset>
 8009bec:	606e      	str	r6, [r5, #4]
 8009bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bf0 <arm_fir_f32>:
 8009bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	ed2d 8b10 	vpush	{d8-d15}
 8009bfa:	b089      	sub	sp, #36	; 0x24
 8009bfc:	8834      	ldrh	r4, [r6, #0]
 8009bfe:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8009c02:	9004      	str	r0, [sp, #16]
 8009c04:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8009c08:	9305      	str	r3, [sp, #20]
 8009c0a:	08db      	lsrs	r3, r3, #3
 8009c0c:	4420      	add	r0, r4
 8009c0e:	9402      	str	r4, [sp, #8]
 8009c10:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8009c14:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8009c18:	9303      	str	r3, [sp, #12]
 8009c1a:	9001      	str	r0, [sp, #4]
 8009c1c:	f000 81eb 	beq.w	8009ff6 <arm_fir_f32+0x406>
 8009c20:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8009c24:	469e      	mov	lr, r3
 8009c26:	f004 0a07 	and.w	sl, r4, #7
 8009c2a:	f100 0720 	add.w	r7, r0, #32
 8009c2e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009c32:	f101 0620 	add.w	r6, r1, #32
 8009c36:	9107      	str	r1, [sp, #28]
 8009c38:	4611      	mov	r1, r2
 8009c3a:	eb08 0003 	add.w	r0, r8, r3
 8009c3e:	3b04      	subs	r3, #4
 8009c40:	f10c 0420 	add.w	r4, ip, #32
 8009c44:	f102 0520 	add.w	r5, r2, #32
 8009c48:	f8cd c018 	str.w	ip, [sp, #24]
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	4684      	mov	ip, r0
 8009c50:	468a      	mov	sl, r1
 8009c52:	4648      	mov	r0, r9
 8009c54:	4699      	mov	r9, r3
 8009c56:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8009c5a:	1f21      	subs	r1, r4, #4
 8009c5c:	ed9f 3aef 	vldr	s6, [pc, #956]	; 800a01c <arm_fir_f32+0x42c>
 8009c60:	f847 3c20 	str.w	r3, [r7, #-32]
 8009c64:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8009c68:	f847 3c1c 	str.w	r3, [r7, #-28]
 8009c6c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8009c70:	f847 3c18 	str.w	r3, [r7, #-24]
 8009c74:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8009c78:	f847 3c14 	str.w	r3, [r7, #-20]
 8009c7c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8009c80:	f847 3c10 	str.w	r3, [r7, #-16]
 8009c84:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8009c88:	f847 3c0c 	str.w	r3, [r7, #-12]
 8009c8c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009c90:	f847 3c08 	str.w	r3, [r7, #-8]
 8009c94:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c98:	f847 3c04 	str.w	r3, [r7, #-4]
 8009c9c:	ed14 8a08 	vldr	s16, [r4, #-32]	; 0xffffffe0
 8009ca0:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8009ca4:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009ca8:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8009cac:	ed14 1a04 	vldr	s2, [r4, #-16]
 8009cb0:	ed54 0a03 	vldr	s1, [r4, #-12]
 8009cb4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	f000 81f6 	beq.w	800a0aa <arm_fir_f32+0x4ba>
 8009cbe:	eeb0 9a43 	vmov.f32	s18, s6
 8009cc2:	f108 0120 	add.w	r1, r8, #32
 8009cc6:	eeb0 aa43 	vmov.f32	s20, s6
 8009cca:	f104 031c 	add.w	r3, r4, #28
 8009cce:	eef0 aa43 	vmov.f32	s21, s6
 8009cd2:	4683      	mov	fp, r0
 8009cd4:	eeb0 ba43 	vmov.f32	s22, s6
 8009cd8:	eef0 ba43 	vmov.f32	s23, s6
 8009cdc:	eeb0 ca43 	vmov.f32	s24, s6
 8009ce0:	eeb0 4a43 	vmov.f32	s8, s6
 8009ce4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8009ce8:	f1bb 0b01 	subs.w	fp, fp, #1
 8009cec:	ed53 8a08 	vldr	s17, [r3, #-32]	; 0xffffffe0
 8009cf0:	f101 0120 	add.w	r1, r1, #32
 8009cf4:	ee28 fa23 	vmul.f32	s30, s16, s7
 8009cf8:	ed51 4a0f 	vldr	s9, [r1, #-60]	; 0xffffffc4
 8009cfc:	ee62 eaa3 	vmul.f32	s29, s5, s7
 8009d00:	ed13 8a07 	vldr	s16, [r3, #-28]	; 0xffffffe4
 8009d04:	ee22 ea23 	vmul.f32	s28, s4, s7
 8009d08:	ed11 5a0e 	vldr	s10, [r1, #-56]	; 0xffffffc8
 8009d0c:	ee61 daa3 	vmul.f32	s27, s3, s7
 8009d10:	ed51 5a0d 	vldr	s11, [r1, #-52]	; 0xffffffcc
 8009d14:	ee21 da23 	vmul.f32	s26, s2, s7
 8009d18:	ed11 6a0c 	vldr	s12, [r1, #-48]	; 0xffffffd0
 8009d1c:	ee60 caa3 	vmul.f32	s25, s1, s7
 8009d20:	ed51 6a0b 	vldr	s13, [r1, #-44]	; 0xffffffd4
 8009d24:	ee60 9a23 	vmul.f32	s19, s0, s7
 8009d28:	ed11 7a0a 	vldr	s14, [r1, #-40]	; 0xffffffd8
 8009d2c:	ee68 3aa3 	vmul.f32	s7, s17, s7
 8009d30:	ed51 7a09 	vldr	s15, [r1, #-36]	; 0xffffffdc
 8009d34:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009d38:	f103 0320 	add.w	r3, r3, #32
 8009d3c:	ee22 faa4 	vmul.f32	s30, s5, s9
 8009d40:	ed53 2a0e 	vldr	s5, [r3, #-56]	; 0xffffffc8
 8009d44:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009d48:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009d4c:	ee62 ea24 	vmul.f32	s29, s4, s9
 8009d50:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8009d54:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009d58:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009d5c:	ee61 da24 	vmul.f32	s27, s2, s9
 8009d60:	ee20 daa4 	vmul.f32	s26, s1, s9
 8009d64:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009d68:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009d6c:	ee60 ca24 	vmul.f32	s25, s0, s9
 8009d70:	ee68 9aa4 	vmul.f32	s19, s17, s9
 8009d74:	ee33 3a83 	vadd.f32	s6, s7, s6
 8009d78:	ee68 4a24 	vmul.f32	s9, s16, s9
 8009d7c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009d80:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009d84:	ee22 fa05 	vmul.f32	s30, s4, s10
 8009d88:	ed13 2a0d 	vldr	s4, [r3, #-52]	; 0xffffffcc
 8009d8c:	ee61 ea85 	vmul.f32	s29, s3, s10
 8009d90:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009d94:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009d98:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009d9c:	ee21 ea05 	vmul.f32	s28, s2, s10
 8009da0:	ee60 da85 	vmul.f32	s27, s1, s10
 8009da4:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009da8:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009dac:	ee20 da05 	vmul.f32	s26, s0, s10
 8009db0:	ee68 ca85 	vmul.f32	s25, s17, s10
 8009db4:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009db8:	ee68 9a05 	vmul.f32	s19, s16, s10
 8009dbc:	ee22 5a85 	vmul.f32	s10, s5, s10
 8009dc0:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009dc4:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009dc8:	ee21 faa5 	vmul.f32	s30, s3, s11
 8009dcc:	ed53 1a0c 	vldr	s3, [r3, #-48]	; 0xffffffd0
 8009dd0:	ee61 ea25 	vmul.f32	s29, s2, s11
 8009dd4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009dd8:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009ddc:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009de0:	ee20 eaa5 	vmul.f32	s28, s1, s11
 8009de4:	ee60 da25 	vmul.f32	s27, s0, s11
 8009de8:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009dec:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009df0:	ee28 daa5 	vmul.f32	s26, s17, s11
 8009df4:	ee68 ca25 	vmul.f32	s25, s16, s11
 8009df8:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009dfc:	ee62 9aa5 	vmul.f32	s19, s5, s11
 8009e00:	ee62 5a25 	vmul.f32	s11, s4, s11
 8009e04:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8009e08:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009e0c:	ee75 5a85 	vadd.f32	s11, s11, s10
 8009e10:	ee21 fa06 	vmul.f32	s30, s2, s12
 8009e14:	ed13 1a0b 	vldr	s2, [r3, #-44]	; 0xffffffd4
 8009e18:	ee22 5a06 	vmul.f32	s10, s4, s12
 8009e1c:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009e20:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009e24:	ee60 ea86 	vmul.f32	s29, s1, s12
 8009e28:	ee20 ea06 	vmul.f32	s28, s0, s12
 8009e2c:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009e30:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009e34:	ee68 da86 	vmul.f32	s27, s17, s12
 8009e38:	ee28 da06 	vmul.f32	s26, s16, s12
 8009e3c:	ee62 ca86 	vmul.f32	s25, s5, s12
 8009e40:	ee39 9a89 	vadd.f32	s18, s19, s18
 8009e44:	ee21 6a86 	vmul.f32	s12, s3, s12
 8009e48:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009e4c:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009e50:	ee20 faa6 	vmul.f32	s30, s1, s13
 8009e54:	ed53 0a0a 	vldr	s1, [r3, #-40]	; 0xffffffd8
 8009e58:	ee60 ea26 	vmul.f32	s29, s0, s13
 8009e5c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009e60:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009e64:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8009e68:	ee28 eaa6 	vmul.f32	s28, s17, s13
 8009e6c:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009e70:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009e74:	ee68 da26 	vmul.f32	s27, s16, s13
 8009e78:	ee22 daa6 	vmul.f32	s26, s5, s13
 8009e7c:	ee7c ca8a 	vadd.f32	s25, s25, s20
 8009e80:	ee35 9a09 	vadd.f32	s18, s10, s18
 8009e84:	ee22 aa26 	vmul.f32	s20, s4, s13
 8009e88:	ee61 6a26 	vmul.f32	s13, s2, s13
 8009e8c:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8009e90:	ee35 9a89 	vadd.f32	s18, s11, s18
 8009e94:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009e98:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009e9c:	ee20 fa07 	vmul.f32	s30, s0, s14
 8009ea0:	ed13 0a09 	vldr	s0, [r3, #-36]	; 0xffffffdc
 8009ea4:	ee68 ea87 	vmul.f32	s29, s17, s14
 8009ea8:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009eac:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009eb0:	ee28 ea07 	vmul.f32	s28, s16, s14
 8009eb4:	ee62 da87 	vmul.f32	s27, s5, s14
 8009eb8:	ee22 da07 	vmul.f32	s26, s4, s14
 8009ebc:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8009ec0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009ec4:	ee21 aa87 	vmul.f32	s20, s3, s14
 8009ec8:	ee20 3a87 	vmul.f32	s6, s1, s14
 8009ecc:	ee21 6a07 	vmul.f32	s12, s2, s14
 8009ed0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009ed4:	ee68 5a27 	vmul.f32	s11, s16, s15
 8009ed8:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8009edc:	ee62 4a27 	vmul.f32	s9, s4, s15
 8009ee0:	ee3d da2a 	vadd.f32	s26, s26, s21
 8009ee4:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8009ee8:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8009eec:	ee21 aa27 	vmul.f32	s20, s2, s15
 8009ef0:	ee36 7a09 	vadd.f32	s14, s12, s18
 8009ef4:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8009ef8:	ee20 9aa7 	vmul.f32	s18, s1, s15
 8009efc:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8009f00:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8009f04:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8009f08:	ee33 3a26 	vadd.f32	s6, s6, s13
 8009f0c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009f10:	ee38 4a84 	vadd.f32	s8, s17, s8
 8009f14:	ee35 ca8c 	vadd.f32	s24, s11, s24
 8009f18:	ee75 ba2b 	vadd.f32	s23, s10, s23
 8009f1c:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8009f20:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8009f24:	ee3a aa2c 	vadd.f32	s20, s20, s25
 8009f28:	ee39 9a07 	vadd.f32	s18, s18, s14
 8009f2c:	ee37 3a83 	vadd.f32	s6, s15, s6
 8009f30:	f47f aed8 	bne.w	8009ce4 <arm_fir_f32+0xf4>
 8009f34:	eb09 0104 	add.w	r1, r9, r4
 8009f38:	46e3      	mov	fp, ip
 8009f3a:	b3a2      	cbz	r2, 8009fa6 <arm_fir_f32+0x3b6>
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	ecbb 6a01 	vldmia	fp!, {s12}
 8009f42:	3b01      	subs	r3, #1
 8009f44:	ecf1 5a01 	vldmia	r1!, {s11}
 8009f48:	ee68 8a06 	vmul.f32	s17, s16, s12
 8009f4c:	ee62 3a86 	vmul.f32	s7, s5, s12
 8009f50:	ee62 4a06 	vmul.f32	s9, s4, s12
 8009f54:	ee21 5a86 	vmul.f32	s10, s3, s12
 8009f58:	ee61 6a06 	vmul.f32	s13, s2, s12
 8009f5c:	ee20 7a86 	vmul.f32	s14, s1, s12
 8009f60:	ee60 7a06 	vmul.f32	s15, s0, s12
 8009f64:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009f68:	eeb0 8a62 	vmov.f32	s16, s5
 8009f6c:	ee34 4a28 	vadd.f32	s8, s8, s17
 8009f70:	eef0 2a42 	vmov.f32	s5, s4
 8009f74:	ee3c ca23 	vadd.f32	s24, s24, s7
 8009f78:	eeb0 2a61 	vmov.f32	s4, s3
 8009f7c:	ee7b baa4 	vadd.f32	s23, s23, s9
 8009f80:	eef0 1a41 	vmov.f32	s3, s2
 8009f84:	ee3b ba05 	vadd.f32	s22, s22, s10
 8009f88:	eeb0 1a60 	vmov.f32	s2, s1
 8009f8c:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8009f90:	eef0 0a40 	vmov.f32	s1, s0
 8009f94:	ee3a aa07 	vadd.f32	s20, s20, s14
 8009f98:	eeb0 0a65 	vmov.f32	s0, s11
 8009f9c:	ee39 9a27 	vadd.f32	s18, s18, s15
 8009fa0:	ee33 3a06 	vadd.f32	s6, s6, s12
 8009fa4:	d1cb      	bne.n	8009f3e <arm_fir_f32+0x34e>
 8009fa6:	f1be 0e01 	subs.w	lr, lr, #1
 8009faa:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8009fae:	ed05 ca07 	vstr	s24, [r5, #-28]	; 0xffffffe4
 8009fb2:	f107 0720 	add.w	r7, r7, #32
 8009fb6:	ed45 ba06 	vstr	s23, [r5, #-24]	; 0xffffffe8
 8009fba:	f106 0620 	add.w	r6, r6, #32
 8009fbe:	ed05 ba05 	vstr	s22, [r5, #-20]	; 0xffffffec
 8009fc2:	f104 0420 	add.w	r4, r4, #32
 8009fc6:	ed45 aa04 	vstr	s21, [r5, #-16]
 8009fca:	f105 0520 	add.w	r5, r5, #32
 8009fce:	ed05 aa0b 	vstr	s20, [r5, #-44]	; 0xffffffd4
 8009fd2:	ed05 9a0a 	vstr	s18, [r5, #-40]	; 0xffffffd8
 8009fd6:	ed05 3a09 	vstr	s6, [r5, #-36]	; 0xffffffdc
 8009fda:	f47f ae3c 	bne.w	8009c56 <arm_fir_f32+0x66>
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	9801      	ldr	r0, [sp, #4]
 8009fe4:	015b      	lsls	r3, r3, #5
 8009fe6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8009fea:	9907      	ldr	r1, [sp, #28]
 8009fec:	4418      	add	r0, r3
 8009fee:	449c      	add	ip, r3
 8009ff0:	4419      	add	r1, r3
 8009ff2:	441a      	add	r2, r3
 8009ff4:	9001      	str	r0, [sp, #4]
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	f013 0e07 	ands.w	lr, r3, #7
 8009ffc:	d022      	beq.n	800a044 <arm_fir_f32+0x454>
 8009ffe:	9f01      	ldr	r7, [sp, #4]
 800a000:	4676      	mov	r6, lr
 800a002:	4665      	mov	r5, ip
 800a004:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a008:	f851 9b04 	ldr.w	r9, [r1], #4
 800a00c:	4653      	mov	r3, sl
 800a00e:	4644      	mov	r4, r8
 800a010:	eddf 6a02 	vldr	s13, [pc, #8]	; 800a01c <arm_fir_f32+0x42c>
 800a014:	4628      	mov	r0, r5
 800a016:	f847 9b04 	str.w	r9, [r7], #4
 800a01a:	e001      	b.n	800a020 <arm_fir_f32+0x430>
 800a01c:	00000000 	.word	0x00000000
 800a020:	ecb0 7a01 	vldmia	r0!, {s14}
 800a024:	3b01      	subs	r3, #1
 800a026:	ecf4 7a01 	vldmia	r4!, {s15}
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a032:	d1f5      	bne.n	800a020 <arm_fir_f32+0x430>
 800a034:	3e01      	subs	r6, #1
 800a036:	ece2 6a01 	vstmia	r2!, {s13}
 800a03a:	f105 0504 	add.w	r5, r5, #4
 800a03e:	d1e3      	bne.n	800a008 <arm_fir_f32+0x418>
 800a040:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800a044:	9b02      	ldr	r3, [sp, #8]
 800a046:	1e59      	subs	r1, r3, #1
 800a048:	9b04      	ldr	r3, [sp, #16]
 800a04a:	088e      	lsrs	r6, r1, #2
 800a04c:	685c      	ldr	r4, [r3, #4]
 800a04e:	d01d      	beq.n	800a08c <arm_fir_f32+0x49c>
 800a050:	f104 0210 	add.w	r2, r4, #16
 800a054:	f10c 0310 	add.w	r3, ip, #16
 800a058:	4630      	mov	r0, r6
 800a05a:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800a05e:	3801      	subs	r0, #1
 800a060:	f103 0310 	add.w	r3, r3, #16
 800a064:	f102 0210 	add.w	r2, r2, #16
 800a068:	f842 5c20 	str.w	r5, [r2, #-32]
 800a06c:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800a070:	f842 5c1c 	str.w	r5, [r2, #-28]
 800a074:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800a078:	f842 5c18 	str.w	r5, [r2, #-24]
 800a07c:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800a080:	f842 5c14 	str.w	r5, [r2, #-20]
 800a084:	d1e9      	bne.n	800a05a <arm_fir_f32+0x46a>
 800a086:	0133      	lsls	r3, r6, #4
 800a088:	441c      	add	r4, r3
 800a08a:	449c      	add	ip, r3
 800a08c:	f011 0303 	ands.w	r3, r1, #3
 800a090:	d006      	beq.n	800a0a0 <arm_fir_f32+0x4b0>
 800a092:	4622      	mov	r2, r4
 800a094:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a098:	3b01      	subs	r3, #1
 800a09a:	f842 1b04 	str.w	r1, [r2], #4
 800a09e:	d1f9      	bne.n	800a094 <arm_fir_f32+0x4a4>
 800a0a0:	b009      	add	sp, #36	; 0x24
 800a0a2:	ecbd 8b10 	vpop	{d8-d15}
 800a0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0aa:	46c3      	mov	fp, r8
 800a0ac:	eeb0 9a43 	vmov.f32	s18, s6
 800a0b0:	eeb0 aa43 	vmov.f32	s20, s6
 800a0b4:	eef0 aa43 	vmov.f32	s21, s6
 800a0b8:	eeb0 ba43 	vmov.f32	s22, s6
 800a0bc:	eef0 ba43 	vmov.f32	s23, s6
 800a0c0:	eeb0 ca43 	vmov.f32	s24, s6
 800a0c4:	eeb0 4a43 	vmov.f32	s8, s6
 800a0c8:	e737      	b.n	8009f3a <arm_fir_f32+0x34a>
 800a0ca:	bf00      	nop

0800a0cc <calloc>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <calloc+0xc>)
 800a0ce:	460a      	mov	r2, r1
 800a0d0:	4601      	mov	r1, r0
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	f000 b850 	b.w	800a178 <_calloc_r>
 800a0d8:	24000010 	.word	0x24000010

0800a0dc <__errno>:
 800a0dc:	4b01      	ldr	r3, [pc, #4]	; (800a0e4 <__errno+0x8>)
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	24000010 	.word	0x24000010

0800a0e8 <exit>:
 800a0e8:	b508      	push	{r3, lr}
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <exit+0x20>)
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	b113      	cbz	r3, 800a0f6 <exit+0xe>
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	f3af 8000 	nop.w
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <exit+0x24>)
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a0fc:	b103      	cbz	r3, 800a100 <exit+0x18>
 800a0fe:	4798      	blx	r3
 800a100:	4620      	mov	r0, r4
 800a102:	f7f7 f975 	bl	80013f0 <_exit>
 800a106:	bf00      	nop
 800a108:	00000000 	.word	0x00000000
 800a10c:	0800b4ec 	.word	0x0800b4ec

0800a110 <__libc_init_array>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4e0d      	ldr	r6, [pc, #52]	; (800a148 <__libc_init_array+0x38>)
 800a114:	4c0d      	ldr	r4, [pc, #52]	; (800a14c <__libc_init_array+0x3c>)
 800a116:	1ba4      	subs	r4, r4, r6
 800a118:	10a4      	asrs	r4, r4, #2
 800a11a:	2500      	movs	r5, #0
 800a11c:	42a5      	cmp	r5, r4
 800a11e:	d109      	bne.n	800a134 <__libc_init_array+0x24>
 800a120:	4e0b      	ldr	r6, [pc, #44]	; (800a150 <__libc_init_array+0x40>)
 800a122:	4c0c      	ldr	r4, [pc, #48]	; (800a154 <__libc_init_array+0x44>)
 800a124:	f000 fc9e 	bl	800aa64 <_init>
 800a128:	1ba4      	subs	r4, r4, r6
 800a12a:	10a4      	asrs	r4, r4, #2
 800a12c:	2500      	movs	r5, #0
 800a12e:	42a5      	cmp	r5, r4
 800a130:	d105      	bne.n	800a13e <__libc_init_array+0x2e>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a138:	4798      	blx	r3
 800a13a:	3501      	adds	r5, #1
 800a13c:	e7ee      	b.n	800a11c <__libc_init_array+0xc>
 800a13e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a142:	4798      	blx	r3
 800a144:	3501      	adds	r5, #1
 800a146:	e7f2      	b.n	800a12e <__libc_init_array+0x1e>
 800a148:	0800b558 	.word	0x0800b558
 800a14c:	0800b558 	.word	0x0800b558
 800a150:	0800b558 	.word	0x0800b558
 800a154:	0800b55c 	.word	0x0800b55c

0800a158 <malloc>:
 800a158:	4b02      	ldr	r3, [pc, #8]	; (800a164 <malloc+0xc>)
 800a15a:	4601      	mov	r1, r0
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	f000 b867 	b.w	800a230 <_malloc_r>
 800a162:	bf00      	nop
 800a164:	24000010 	.word	0x24000010

0800a168 <memset>:
 800a168:	4402      	add	r2, r0
 800a16a:	4603      	mov	r3, r0
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d100      	bne.n	800a172 <memset+0xa>
 800a170:	4770      	bx	lr
 800a172:	f803 1b01 	strb.w	r1, [r3], #1
 800a176:	e7f9      	b.n	800a16c <memset+0x4>

0800a178 <_calloc_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	fb02 f401 	mul.w	r4, r2, r1
 800a17e:	4621      	mov	r1, r4
 800a180:	f000 f856 	bl	800a230 <_malloc_r>
 800a184:	4605      	mov	r5, r0
 800a186:	b118      	cbz	r0, 800a190 <_calloc_r+0x18>
 800a188:	4622      	mov	r2, r4
 800a18a:	2100      	movs	r1, #0
 800a18c:	f7ff ffec 	bl	800a168 <memset>
 800a190:	4628      	mov	r0, r5
 800a192:	bd38      	pop	{r3, r4, r5, pc}

0800a194 <_free_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4605      	mov	r5, r0
 800a198:	2900      	cmp	r1, #0
 800a19a:	d045      	beq.n	800a228 <_free_r+0x94>
 800a19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a0:	1f0c      	subs	r4, r1, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bfb8      	it	lt
 800a1a6:	18e4      	addlt	r4, r4, r3
 800a1a8:	f000 fbae 	bl	800a908 <__malloc_lock>
 800a1ac:	4a1f      	ldr	r2, [pc, #124]	; (800a22c <_free_r+0x98>)
 800a1ae:	6813      	ldr	r3, [r2, #0]
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	b933      	cbnz	r3, 800a1c2 <_free_r+0x2e>
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	6014      	str	r4, [r2, #0]
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1be:	f000 bba4 	b.w	800a90a <__malloc_unlock>
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	d90c      	bls.n	800a1e0 <_free_r+0x4c>
 800a1c6:	6821      	ldr	r1, [r4, #0]
 800a1c8:	1862      	adds	r2, r4, r1
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	bf04      	itt	eq
 800a1ce:	681a      	ldreq	r2, [r3, #0]
 800a1d0:	685b      	ldreq	r3, [r3, #4]
 800a1d2:	6063      	str	r3, [r4, #4]
 800a1d4:	bf04      	itt	eq
 800a1d6:	1852      	addeq	r2, r2, r1
 800a1d8:	6022      	streq	r2, [r4, #0]
 800a1da:	6004      	str	r4, [r0, #0]
 800a1dc:	e7ec      	b.n	800a1b8 <_free_r+0x24>
 800a1de:	4613      	mov	r3, r2
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	b10a      	cbz	r2, 800a1e8 <_free_r+0x54>
 800a1e4:	42a2      	cmp	r2, r4
 800a1e6:	d9fa      	bls.n	800a1de <_free_r+0x4a>
 800a1e8:	6819      	ldr	r1, [r3, #0]
 800a1ea:	1858      	adds	r0, r3, r1
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d10b      	bne.n	800a208 <_free_r+0x74>
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	4401      	add	r1, r0
 800a1f4:	1858      	adds	r0, r3, r1
 800a1f6:	4282      	cmp	r2, r0
 800a1f8:	6019      	str	r1, [r3, #0]
 800a1fa:	d1dd      	bne.n	800a1b8 <_free_r+0x24>
 800a1fc:	6810      	ldr	r0, [r2, #0]
 800a1fe:	6852      	ldr	r2, [r2, #4]
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	4401      	add	r1, r0
 800a204:	6019      	str	r1, [r3, #0]
 800a206:	e7d7      	b.n	800a1b8 <_free_r+0x24>
 800a208:	d902      	bls.n	800a210 <_free_r+0x7c>
 800a20a:	230c      	movs	r3, #12
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	e7d3      	b.n	800a1b8 <_free_r+0x24>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	1821      	adds	r1, r4, r0
 800a214:	428a      	cmp	r2, r1
 800a216:	bf04      	itt	eq
 800a218:	6811      	ldreq	r1, [r2, #0]
 800a21a:	6852      	ldreq	r2, [r2, #4]
 800a21c:	6062      	str	r2, [r4, #4]
 800a21e:	bf04      	itt	eq
 800a220:	1809      	addeq	r1, r1, r0
 800a222:	6021      	streq	r1, [r4, #0]
 800a224:	605c      	str	r4, [r3, #4]
 800a226:	e7c7      	b.n	800a1b8 <_free_r+0x24>
 800a228:	bd38      	pop	{r3, r4, r5, pc}
 800a22a:	bf00      	nop
 800a22c:	2400009c 	.word	0x2400009c

0800a230 <_malloc_r>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	1ccd      	adds	r5, r1, #3
 800a234:	f025 0503 	bic.w	r5, r5, #3
 800a238:	3508      	adds	r5, #8
 800a23a:	2d0c      	cmp	r5, #12
 800a23c:	bf38      	it	cc
 800a23e:	250c      	movcc	r5, #12
 800a240:	2d00      	cmp	r5, #0
 800a242:	4606      	mov	r6, r0
 800a244:	db01      	blt.n	800a24a <_malloc_r+0x1a>
 800a246:	42a9      	cmp	r1, r5
 800a248:	d903      	bls.n	800a252 <_malloc_r+0x22>
 800a24a:	230c      	movs	r3, #12
 800a24c:	6033      	str	r3, [r6, #0]
 800a24e:	2000      	movs	r0, #0
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	f000 fb59 	bl	800a908 <__malloc_lock>
 800a256:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <_malloc_r+0xac>)
 800a258:	6814      	ldr	r4, [r2, #0]
 800a25a:	4621      	mov	r1, r4
 800a25c:	b991      	cbnz	r1, 800a284 <_malloc_r+0x54>
 800a25e:	4c20      	ldr	r4, [pc, #128]	; (800a2e0 <_malloc_r+0xb0>)
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	b91b      	cbnz	r3, 800a26c <_malloc_r+0x3c>
 800a264:	4630      	mov	r0, r6
 800a266:	f000 f8a1 	bl	800a3ac <_sbrk_r>
 800a26a:	6020      	str	r0, [r4, #0]
 800a26c:	4629      	mov	r1, r5
 800a26e:	4630      	mov	r0, r6
 800a270:	f000 f89c 	bl	800a3ac <_sbrk_r>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d124      	bne.n	800a2c2 <_malloc_r+0x92>
 800a278:	230c      	movs	r3, #12
 800a27a:	6033      	str	r3, [r6, #0]
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 fb44 	bl	800a90a <__malloc_unlock>
 800a282:	e7e4      	b.n	800a24e <_malloc_r+0x1e>
 800a284:	680b      	ldr	r3, [r1, #0]
 800a286:	1b5b      	subs	r3, r3, r5
 800a288:	d418      	bmi.n	800a2bc <_malloc_r+0x8c>
 800a28a:	2b0b      	cmp	r3, #11
 800a28c:	d90f      	bls.n	800a2ae <_malloc_r+0x7e>
 800a28e:	600b      	str	r3, [r1, #0]
 800a290:	50cd      	str	r5, [r1, r3]
 800a292:	18cc      	adds	r4, r1, r3
 800a294:	4630      	mov	r0, r6
 800a296:	f000 fb38 	bl	800a90a <__malloc_unlock>
 800a29a:	f104 000b 	add.w	r0, r4, #11
 800a29e:	1d23      	adds	r3, r4, #4
 800a2a0:	f020 0007 	bic.w	r0, r0, #7
 800a2a4:	1ac3      	subs	r3, r0, r3
 800a2a6:	d0d3      	beq.n	800a250 <_malloc_r+0x20>
 800a2a8:	425a      	negs	r2, r3
 800a2aa:	50e2      	str	r2, [r4, r3]
 800a2ac:	e7d0      	b.n	800a250 <_malloc_r+0x20>
 800a2ae:	428c      	cmp	r4, r1
 800a2b0:	684b      	ldr	r3, [r1, #4]
 800a2b2:	bf16      	itet	ne
 800a2b4:	6063      	strne	r3, [r4, #4]
 800a2b6:	6013      	streq	r3, [r2, #0]
 800a2b8:	460c      	movne	r4, r1
 800a2ba:	e7eb      	b.n	800a294 <_malloc_r+0x64>
 800a2bc:	460c      	mov	r4, r1
 800a2be:	6849      	ldr	r1, [r1, #4]
 800a2c0:	e7cc      	b.n	800a25c <_malloc_r+0x2c>
 800a2c2:	1cc4      	adds	r4, r0, #3
 800a2c4:	f024 0403 	bic.w	r4, r4, #3
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d005      	beq.n	800a2d8 <_malloc_r+0xa8>
 800a2cc:	1a21      	subs	r1, r4, r0
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 f86c 	bl	800a3ac <_sbrk_r>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d0cf      	beq.n	800a278 <_malloc_r+0x48>
 800a2d8:	6025      	str	r5, [r4, #0]
 800a2da:	e7db      	b.n	800a294 <_malloc_r+0x64>
 800a2dc:	2400009c 	.word	0x2400009c
 800a2e0:	240000a0 	.word	0x240000a0

0800a2e4 <_puts_r>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	460e      	mov	r6, r1
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	b118      	cbz	r0, 800a2f4 <_puts_r+0x10>
 800a2ec:	6983      	ldr	r3, [r0, #24]
 800a2ee:	b90b      	cbnz	r3, 800a2f4 <_puts_r+0x10>
 800a2f0:	f000 fa1c 	bl	800a72c <__sinit>
 800a2f4:	69ab      	ldr	r3, [r5, #24]
 800a2f6:	68ac      	ldr	r4, [r5, #8]
 800a2f8:	b913      	cbnz	r3, 800a300 <_puts_r+0x1c>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 fa16 	bl	800a72c <__sinit>
 800a300:	4b23      	ldr	r3, [pc, #140]	; (800a390 <_puts_r+0xac>)
 800a302:	429c      	cmp	r4, r3
 800a304:	d117      	bne.n	800a336 <_puts_r+0x52>
 800a306:	686c      	ldr	r4, [r5, #4]
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	071b      	lsls	r3, r3, #28
 800a30c:	d51d      	bpl.n	800a34a <_puts_r+0x66>
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	b1db      	cbz	r3, 800a34a <_puts_r+0x66>
 800a312:	3e01      	subs	r6, #1
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a31a:	3b01      	subs	r3, #1
 800a31c:	60a3      	str	r3, [r4, #8]
 800a31e:	b9e9      	cbnz	r1, 800a35c <_puts_r+0x78>
 800a320:	2b00      	cmp	r3, #0
 800a322:	da2e      	bge.n	800a382 <_puts_r+0x9e>
 800a324:	4622      	mov	r2, r4
 800a326:	210a      	movs	r1, #10
 800a328:	4628      	mov	r0, r5
 800a32a:	f000 f84f 	bl	800a3cc <__swbuf_r>
 800a32e:	3001      	adds	r0, #1
 800a330:	d011      	beq.n	800a356 <_puts_r+0x72>
 800a332:	200a      	movs	r0, #10
 800a334:	e011      	b.n	800a35a <_puts_r+0x76>
 800a336:	4b17      	ldr	r3, [pc, #92]	; (800a394 <_puts_r+0xb0>)
 800a338:	429c      	cmp	r4, r3
 800a33a:	d101      	bne.n	800a340 <_puts_r+0x5c>
 800a33c:	68ac      	ldr	r4, [r5, #8]
 800a33e:	e7e3      	b.n	800a308 <_puts_r+0x24>
 800a340:	4b15      	ldr	r3, [pc, #84]	; (800a398 <_puts_r+0xb4>)
 800a342:	429c      	cmp	r4, r3
 800a344:	bf08      	it	eq
 800a346:	68ec      	ldreq	r4, [r5, #12]
 800a348:	e7de      	b.n	800a308 <_puts_r+0x24>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f88f 	bl	800a470 <__swsetup_r>
 800a352:	2800      	cmp	r0, #0
 800a354:	d0dd      	beq.n	800a312 <_puts_r+0x2e>
 800a356:	f04f 30ff 	mov.w	r0, #4294967295
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da04      	bge.n	800a36a <_puts_r+0x86>
 800a360:	69a2      	ldr	r2, [r4, #24]
 800a362:	429a      	cmp	r2, r3
 800a364:	dc06      	bgt.n	800a374 <_puts_r+0x90>
 800a366:	290a      	cmp	r1, #10
 800a368:	d004      	beq.n	800a374 <_puts_r+0x90>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	6022      	str	r2, [r4, #0]
 800a370:	7019      	strb	r1, [r3, #0]
 800a372:	e7cf      	b.n	800a314 <_puts_r+0x30>
 800a374:	4622      	mov	r2, r4
 800a376:	4628      	mov	r0, r5
 800a378:	f000 f828 	bl	800a3cc <__swbuf_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d1c9      	bne.n	800a314 <_puts_r+0x30>
 800a380:	e7e9      	b.n	800a356 <_puts_r+0x72>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	200a      	movs	r0, #10
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	6022      	str	r2, [r4, #0]
 800a38a:	7018      	strb	r0, [r3, #0]
 800a38c:	e7e5      	b.n	800a35a <_puts_r+0x76>
 800a38e:	bf00      	nop
 800a390:	0800b510 	.word	0x0800b510
 800a394:	0800b530 	.word	0x0800b530
 800a398:	0800b4f0 	.word	0x0800b4f0

0800a39c <puts>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <puts+0xc>)
 800a39e:	4601      	mov	r1, r0
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	f7ff bf9f 	b.w	800a2e4 <_puts_r>
 800a3a6:	bf00      	nop
 800a3a8:	24000010 	.word	0x24000010

0800a3ac <_sbrk_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4c06      	ldr	r4, [pc, #24]	; (800a3c8 <_sbrk_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	f7f7 f892 	bl	80014e0 <_sbrk>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_sbrk_r+0x1a>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_sbrk_r+0x1a>
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	240012e8 	.word	0x240012e8

0800a3cc <__swbuf_r>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	460e      	mov	r6, r1
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	b118      	cbz	r0, 800a3de <__swbuf_r+0x12>
 800a3d6:	6983      	ldr	r3, [r0, #24]
 800a3d8:	b90b      	cbnz	r3, 800a3de <__swbuf_r+0x12>
 800a3da:	f000 f9a7 	bl	800a72c <__sinit>
 800a3de:	4b21      	ldr	r3, [pc, #132]	; (800a464 <__swbuf_r+0x98>)
 800a3e0:	429c      	cmp	r4, r3
 800a3e2:	d12a      	bne.n	800a43a <__swbuf_r+0x6e>
 800a3e4:	686c      	ldr	r4, [r5, #4]
 800a3e6:	69a3      	ldr	r3, [r4, #24]
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	071a      	lsls	r2, r3, #28
 800a3ee:	d52e      	bpl.n	800a44e <__swbuf_r+0x82>
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	b363      	cbz	r3, 800a44e <__swbuf_r+0x82>
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	6820      	ldr	r0, [r4, #0]
 800a3f8:	1ac0      	subs	r0, r0, r3
 800a3fa:	6963      	ldr	r3, [r4, #20]
 800a3fc:	b2f6      	uxtb	r6, r6
 800a3fe:	4283      	cmp	r3, r0
 800a400:	4637      	mov	r7, r6
 800a402:	dc04      	bgt.n	800a40e <__swbuf_r+0x42>
 800a404:	4621      	mov	r1, r4
 800a406:	4628      	mov	r0, r5
 800a408:	f000 f926 	bl	800a658 <_fflush_r>
 800a40c:	bb28      	cbnz	r0, 800a45a <__swbuf_r+0x8e>
 800a40e:	68a3      	ldr	r3, [r4, #8]
 800a410:	3b01      	subs	r3, #1
 800a412:	60a3      	str	r3, [r4, #8]
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	6022      	str	r2, [r4, #0]
 800a41a:	701e      	strb	r6, [r3, #0]
 800a41c:	6963      	ldr	r3, [r4, #20]
 800a41e:	3001      	adds	r0, #1
 800a420:	4283      	cmp	r3, r0
 800a422:	d004      	beq.n	800a42e <__swbuf_r+0x62>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	07db      	lsls	r3, r3, #31
 800a428:	d519      	bpl.n	800a45e <__swbuf_r+0x92>
 800a42a:	2e0a      	cmp	r6, #10
 800a42c:	d117      	bne.n	800a45e <__swbuf_r+0x92>
 800a42e:	4621      	mov	r1, r4
 800a430:	4628      	mov	r0, r5
 800a432:	f000 f911 	bl	800a658 <_fflush_r>
 800a436:	b190      	cbz	r0, 800a45e <__swbuf_r+0x92>
 800a438:	e00f      	b.n	800a45a <__swbuf_r+0x8e>
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <__swbuf_r+0x9c>)
 800a43c:	429c      	cmp	r4, r3
 800a43e:	d101      	bne.n	800a444 <__swbuf_r+0x78>
 800a440:	68ac      	ldr	r4, [r5, #8]
 800a442:	e7d0      	b.n	800a3e6 <__swbuf_r+0x1a>
 800a444:	4b09      	ldr	r3, [pc, #36]	; (800a46c <__swbuf_r+0xa0>)
 800a446:	429c      	cmp	r4, r3
 800a448:	bf08      	it	eq
 800a44a:	68ec      	ldreq	r4, [r5, #12]
 800a44c:	e7cb      	b.n	800a3e6 <__swbuf_r+0x1a>
 800a44e:	4621      	mov	r1, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f000 f80d 	bl	800a470 <__swsetup_r>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0cc      	beq.n	800a3f4 <__swbuf_r+0x28>
 800a45a:	f04f 37ff 	mov.w	r7, #4294967295
 800a45e:	4638      	mov	r0, r7
 800a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a462:	bf00      	nop
 800a464:	0800b510 	.word	0x0800b510
 800a468:	0800b530 	.word	0x0800b530
 800a46c:	0800b4f0 	.word	0x0800b4f0

0800a470 <__swsetup_r>:
 800a470:	4b32      	ldr	r3, [pc, #200]	; (800a53c <__swsetup_r+0xcc>)
 800a472:	b570      	push	{r4, r5, r6, lr}
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	4606      	mov	r6, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	b125      	cbz	r5, 800a486 <__swsetup_r+0x16>
 800a47c:	69ab      	ldr	r3, [r5, #24]
 800a47e:	b913      	cbnz	r3, 800a486 <__swsetup_r+0x16>
 800a480:	4628      	mov	r0, r5
 800a482:	f000 f953 	bl	800a72c <__sinit>
 800a486:	4b2e      	ldr	r3, [pc, #184]	; (800a540 <__swsetup_r+0xd0>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	d10f      	bne.n	800a4ac <__swsetup_r+0x3c>
 800a48c:	686c      	ldr	r4, [r5, #4]
 800a48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a492:	b29a      	uxth	r2, r3
 800a494:	0715      	lsls	r5, r2, #28
 800a496:	d42c      	bmi.n	800a4f2 <__swsetup_r+0x82>
 800a498:	06d0      	lsls	r0, r2, #27
 800a49a:	d411      	bmi.n	800a4c0 <__swsetup_r+0x50>
 800a49c:	2209      	movs	r2, #9
 800a49e:	6032      	str	r2, [r6, #0]
 800a4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a4:	81a3      	strh	r3, [r4, #12]
 800a4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4aa:	e03e      	b.n	800a52a <__swsetup_r+0xba>
 800a4ac:	4b25      	ldr	r3, [pc, #148]	; (800a544 <__swsetup_r+0xd4>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	d101      	bne.n	800a4b6 <__swsetup_r+0x46>
 800a4b2:	68ac      	ldr	r4, [r5, #8]
 800a4b4:	e7eb      	b.n	800a48e <__swsetup_r+0x1e>
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <__swsetup_r+0xd8>)
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	bf08      	it	eq
 800a4bc:	68ec      	ldreq	r4, [r5, #12]
 800a4be:	e7e6      	b.n	800a48e <__swsetup_r+0x1e>
 800a4c0:	0751      	lsls	r1, r2, #29
 800a4c2:	d512      	bpl.n	800a4ea <__swsetup_r+0x7a>
 800a4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c6:	b141      	cbz	r1, 800a4da <__swsetup_r+0x6a>
 800a4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4cc:	4299      	cmp	r1, r3
 800a4ce:	d002      	beq.n	800a4d6 <__swsetup_r+0x66>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fe5f 	bl	800a194 <_free_r>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f043 0308 	orr.w	r3, r3, #8
 800a4f0:	81a3      	strh	r3, [r4, #12]
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	b94b      	cbnz	r3, 800a50a <__swsetup_r+0x9a>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a500:	d003      	beq.n	800a50a <__swsetup_r+0x9a>
 800a502:	4621      	mov	r1, r4
 800a504:	4630      	mov	r0, r6
 800a506:	f000 f9bf 	bl	800a888 <__smakebuf_r>
 800a50a:	89a2      	ldrh	r2, [r4, #12]
 800a50c:	f012 0301 	ands.w	r3, r2, #1
 800a510:	d00c      	beq.n	800a52c <__swsetup_r+0xbc>
 800a512:	2300      	movs	r3, #0
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	6963      	ldr	r3, [r4, #20]
 800a518:	425b      	negs	r3, r3
 800a51a:	61a3      	str	r3, [r4, #24]
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	b953      	cbnz	r3, 800a536 <__swsetup_r+0xc6>
 800a520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a524:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a528:	d1ba      	bne.n	800a4a0 <__swsetup_r+0x30>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	0792      	lsls	r2, r2, #30
 800a52e:	bf58      	it	pl
 800a530:	6963      	ldrpl	r3, [r4, #20]
 800a532:	60a3      	str	r3, [r4, #8]
 800a534:	e7f2      	b.n	800a51c <__swsetup_r+0xac>
 800a536:	2000      	movs	r0, #0
 800a538:	e7f7      	b.n	800a52a <__swsetup_r+0xba>
 800a53a:	bf00      	nop
 800a53c:	24000010 	.word	0x24000010
 800a540:	0800b510 	.word	0x0800b510
 800a544:	0800b530 	.word	0x0800b530
 800a548:	0800b4f0 	.word	0x0800b4f0

0800a54c <__sflush_r>:
 800a54c:	898a      	ldrh	r2, [r1, #12]
 800a54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	4605      	mov	r5, r0
 800a554:	0710      	lsls	r0, r2, #28
 800a556:	460c      	mov	r4, r1
 800a558:	d458      	bmi.n	800a60c <__sflush_r+0xc0>
 800a55a:	684b      	ldr	r3, [r1, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	dc05      	bgt.n	800a56c <__sflush_r+0x20>
 800a560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	dc02      	bgt.n	800a56c <__sflush_r+0x20>
 800a566:	2000      	movs	r0, #0
 800a568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a56e:	2e00      	cmp	r6, #0
 800a570:	d0f9      	beq.n	800a566 <__sflush_r+0x1a>
 800a572:	2300      	movs	r3, #0
 800a574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a578:	682f      	ldr	r7, [r5, #0]
 800a57a:	6a21      	ldr	r1, [r4, #32]
 800a57c:	602b      	str	r3, [r5, #0]
 800a57e:	d032      	beq.n	800a5e6 <__sflush_r+0x9a>
 800a580:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	075a      	lsls	r2, r3, #29
 800a586:	d505      	bpl.n	800a594 <__sflush_r+0x48>
 800a588:	6863      	ldr	r3, [r4, #4]
 800a58a:	1ac0      	subs	r0, r0, r3
 800a58c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a58e:	b10b      	cbz	r3, 800a594 <__sflush_r+0x48>
 800a590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a592:	1ac0      	subs	r0, r0, r3
 800a594:	2300      	movs	r3, #0
 800a596:	4602      	mov	r2, r0
 800a598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a59a:	6a21      	ldr	r1, [r4, #32]
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b0      	blx	r6
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	d106      	bne.n	800a5b4 <__sflush_r+0x68>
 800a5a6:	6829      	ldr	r1, [r5, #0]
 800a5a8:	291d      	cmp	r1, #29
 800a5aa:	d848      	bhi.n	800a63e <__sflush_r+0xf2>
 800a5ac:	4a29      	ldr	r2, [pc, #164]	; (800a654 <__sflush_r+0x108>)
 800a5ae:	40ca      	lsrs	r2, r1
 800a5b0:	07d6      	lsls	r6, r2, #31
 800a5b2:	d544      	bpl.n	800a63e <__sflush_r+0xf2>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	6062      	str	r2, [r4, #4]
 800a5b8:	04d9      	lsls	r1, r3, #19
 800a5ba:	6922      	ldr	r2, [r4, #16]
 800a5bc:	6022      	str	r2, [r4, #0]
 800a5be:	d504      	bpl.n	800a5ca <__sflush_r+0x7e>
 800a5c0:	1c42      	adds	r2, r0, #1
 800a5c2:	d101      	bne.n	800a5c8 <__sflush_r+0x7c>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b903      	cbnz	r3, 800a5ca <__sflush_r+0x7e>
 800a5c8:	6560      	str	r0, [r4, #84]	; 0x54
 800a5ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5cc:	602f      	str	r7, [r5, #0]
 800a5ce:	2900      	cmp	r1, #0
 800a5d0:	d0c9      	beq.n	800a566 <__sflush_r+0x1a>
 800a5d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	d002      	beq.n	800a5e0 <__sflush_r+0x94>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7ff fdda 	bl	800a194 <_free_r>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	6360      	str	r0, [r4, #52]	; 0x34
 800a5e4:	e7c0      	b.n	800a568 <__sflush_r+0x1c>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	47b0      	blx	r6
 800a5ec:	1c41      	adds	r1, r0, #1
 800a5ee:	d1c8      	bne.n	800a582 <__sflush_r+0x36>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d0c5      	beq.n	800a582 <__sflush_r+0x36>
 800a5f6:	2b1d      	cmp	r3, #29
 800a5f8:	d001      	beq.n	800a5fe <__sflush_r+0xb2>
 800a5fa:	2b16      	cmp	r3, #22
 800a5fc:	d101      	bne.n	800a602 <__sflush_r+0xb6>
 800a5fe:	602f      	str	r7, [r5, #0]
 800a600:	e7b1      	b.n	800a566 <__sflush_r+0x1a>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a608:	81a3      	strh	r3, [r4, #12]
 800a60a:	e7ad      	b.n	800a568 <__sflush_r+0x1c>
 800a60c:	690f      	ldr	r7, [r1, #16]
 800a60e:	2f00      	cmp	r7, #0
 800a610:	d0a9      	beq.n	800a566 <__sflush_r+0x1a>
 800a612:	0793      	lsls	r3, r2, #30
 800a614:	680e      	ldr	r6, [r1, #0]
 800a616:	bf08      	it	eq
 800a618:	694b      	ldreq	r3, [r1, #20]
 800a61a:	600f      	str	r7, [r1, #0]
 800a61c:	bf18      	it	ne
 800a61e:	2300      	movne	r3, #0
 800a620:	eba6 0807 	sub.w	r8, r6, r7
 800a624:	608b      	str	r3, [r1, #8]
 800a626:	f1b8 0f00 	cmp.w	r8, #0
 800a62a:	dd9c      	ble.n	800a566 <__sflush_r+0x1a>
 800a62c:	4643      	mov	r3, r8
 800a62e:	463a      	mov	r2, r7
 800a630:	6a21      	ldr	r1, [r4, #32]
 800a632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a634:	4628      	mov	r0, r5
 800a636:	47b0      	blx	r6
 800a638:	2800      	cmp	r0, #0
 800a63a:	dc06      	bgt.n	800a64a <__sflush_r+0xfe>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	e78e      	b.n	800a568 <__sflush_r+0x1c>
 800a64a:	4407      	add	r7, r0
 800a64c:	eba8 0800 	sub.w	r8, r8, r0
 800a650:	e7e9      	b.n	800a626 <__sflush_r+0xda>
 800a652:	bf00      	nop
 800a654:	20400001 	.word	0x20400001

0800a658 <_fflush_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	690b      	ldr	r3, [r1, #16]
 800a65c:	4605      	mov	r5, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	b1db      	cbz	r3, 800a69a <_fflush_r+0x42>
 800a662:	b118      	cbz	r0, 800a66c <_fflush_r+0x14>
 800a664:	6983      	ldr	r3, [r0, #24]
 800a666:	b90b      	cbnz	r3, 800a66c <_fflush_r+0x14>
 800a668:	f000 f860 	bl	800a72c <__sinit>
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <_fflush_r+0x48>)
 800a66e:	429c      	cmp	r4, r3
 800a670:	d109      	bne.n	800a686 <_fflush_r+0x2e>
 800a672:	686c      	ldr	r4, [r5, #4]
 800a674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a678:	b17b      	cbz	r3, 800a69a <_fflush_r+0x42>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a682:	f7ff bf63 	b.w	800a54c <__sflush_r>
 800a686:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <_fflush_r+0x4c>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	d101      	bne.n	800a690 <_fflush_r+0x38>
 800a68c:	68ac      	ldr	r4, [r5, #8]
 800a68e:	e7f1      	b.n	800a674 <_fflush_r+0x1c>
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <_fflush_r+0x50>)
 800a692:	429c      	cmp	r4, r3
 800a694:	bf08      	it	eq
 800a696:	68ec      	ldreq	r4, [r5, #12]
 800a698:	e7ec      	b.n	800a674 <_fflush_r+0x1c>
 800a69a:	2000      	movs	r0, #0
 800a69c:	bd38      	pop	{r3, r4, r5, pc}
 800a69e:	bf00      	nop
 800a6a0:	0800b510 	.word	0x0800b510
 800a6a4:	0800b530 	.word	0x0800b530
 800a6a8:	0800b4f0 	.word	0x0800b4f0

0800a6ac <std>:
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a6b6:	6083      	str	r3, [r0, #8]
 800a6b8:	8181      	strh	r1, [r0, #12]
 800a6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a6bc:	81c2      	strh	r2, [r0, #14]
 800a6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6c2:	6183      	str	r3, [r0, #24]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	2208      	movs	r2, #8
 800a6c8:	305c      	adds	r0, #92	; 0x5c
 800a6ca:	f7ff fd4d 	bl	800a168 <memset>
 800a6ce:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <std+0x38>)
 800a6d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a6d2:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <std+0x3c>)
 800a6d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6d6:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <std+0x40>)
 800a6d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6da:	4b05      	ldr	r3, [pc, #20]	; (800a6f0 <std+0x44>)
 800a6dc:	6224      	str	r4, [r4, #32]
 800a6de:	6323      	str	r3, [r4, #48]	; 0x30
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	bf00      	nop
 800a6e4:	0800a90d 	.word	0x0800a90d
 800a6e8:	0800a92f 	.word	0x0800a92f
 800a6ec:	0800a967 	.word	0x0800a967
 800a6f0:	0800a98b 	.word	0x0800a98b

0800a6f4 <_cleanup_r>:
 800a6f4:	4901      	ldr	r1, [pc, #4]	; (800a6fc <_cleanup_r+0x8>)
 800a6f6:	f000 b885 	b.w	800a804 <_fwalk_reent>
 800a6fa:	bf00      	nop
 800a6fc:	0800a659 	.word	0x0800a659

0800a700 <__sfmoreglue>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	1e4a      	subs	r2, r1, #1
 800a704:	2568      	movs	r5, #104	; 0x68
 800a706:	4355      	muls	r5, r2
 800a708:	460e      	mov	r6, r1
 800a70a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a70e:	f7ff fd8f 	bl	800a230 <_malloc_r>
 800a712:	4604      	mov	r4, r0
 800a714:	b140      	cbz	r0, 800a728 <__sfmoreglue+0x28>
 800a716:	2100      	movs	r1, #0
 800a718:	e9c0 1600 	strd	r1, r6, [r0]
 800a71c:	300c      	adds	r0, #12
 800a71e:	60a0      	str	r0, [r4, #8]
 800a720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a724:	f7ff fd20 	bl	800a168 <memset>
 800a728:	4620      	mov	r0, r4
 800a72a:	bd70      	pop	{r4, r5, r6, pc}

0800a72c <__sinit>:
 800a72c:	6983      	ldr	r3, [r0, #24]
 800a72e:	b510      	push	{r4, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	bb33      	cbnz	r3, 800a782 <__sinit+0x56>
 800a734:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a738:	6503      	str	r3, [r0, #80]	; 0x50
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <__sinit+0x58>)
 800a73c:	4a12      	ldr	r2, [pc, #72]	; (800a788 <__sinit+0x5c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6282      	str	r2, [r0, #40]	; 0x28
 800a742:	4298      	cmp	r0, r3
 800a744:	bf04      	itt	eq
 800a746:	2301      	moveq	r3, #1
 800a748:	6183      	streq	r3, [r0, #24]
 800a74a:	f000 f81f 	bl	800a78c <__sfp>
 800a74e:	6060      	str	r0, [r4, #4]
 800a750:	4620      	mov	r0, r4
 800a752:	f000 f81b 	bl	800a78c <__sfp>
 800a756:	60a0      	str	r0, [r4, #8]
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 f817 	bl	800a78c <__sfp>
 800a75e:	2200      	movs	r2, #0
 800a760:	60e0      	str	r0, [r4, #12]
 800a762:	2104      	movs	r1, #4
 800a764:	6860      	ldr	r0, [r4, #4]
 800a766:	f7ff ffa1 	bl	800a6ac <std>
 800a76a:	2201      	movs	r2, #1
 800a76c:	2109      	movs	r1, #9
 800a76e:	68a0      	ldr	r0, [r4, #8]
 800a770:	f7ff ff9c 	bl	800a6ac <std>
 800a774:	2202      	movs	r2, #2
 800a776:	2112      	movs	r1, #18
 800a778:	68e0      	ldr	r0, [r4, #12]
 800a77a:	f7ff ff97 	bl	800a6ac <std>
 800a77e:	2301      	movs	r3, #1
 800a780:	61a3      	str	r3, [r4, #24]
 800a782:	bd10      	pop	{r4, pc}
 800a784:	0800b4ec 	.word	0x0800b4ec
 800a788:	0800a6f5 	.word	0x0800a6f5

0800a78c <__sfp>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	4b1b      	ldr	r3, [pc, #108]	; (800a7fc <__sfp+0x70>)
 800a790:	681e      	ldr	r6, [r3, #0]
 800a792:	69b3      	ldr	r3, [r6, #24]
 800a794:	4607      	mov	r7, r0
 800a796:	b913      	cbnz	r3, 800a79e <__sfp+0x12>
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff ffc7 	bl	800a72c <__sinit>
 800a79e:	3648      	adds	r6, #72	; 0x48
 800a7a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	d503      	bpl.n	800a7b0 <__sfp+0x24>
 800a7a8:	6833      	ldr	r3, [r6, #0]
 800a7aa:	b133      	cbz	r3, 800a7ba <__sfp+0x2e>
 800a7ac:	6836      	ldr	r6, [r6, #0]
 800a7ae:	e7f7      	b.n	800a7a0 <__sfp+0x14>
 800a7b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7b4:	b16d      	cbz	r5, 800a7d2 <__sfp+0x46>
 800a7b6:	3468      	adds	r4, #104	; 0x68
 800a7b8:	e7f4      	b.n	800a7a4 <__sfp+0x18>
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff ff9f 	bl	800a700 <__sfmoreglue>
 800a7c2:	6030      	str	r0, [r6, #0]
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d1f1      	bne.n	800a7ac <__sfp+0x20>
 800a7c8:	230c      	movs	r3, #12
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d2:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <__sfp+0x74>)
 800a7d4:	6665      	str	r5, [r4, #100]	; 0x64
 800a7d6:	e9c4 5500 	strd	r5, r5, [r4]
 800a7da:	60a5      	str	r5, [r4, #8]
 800a7dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a7e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a7e4:	2208      	movs	r2, #8
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7ec:	f7ff fcbc 	bl	800a168 <memset>
 800a7f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7f8:	e7e9      	b.n	800a7ce <__sfp+0x42>
 800a7fa:	bf00      	nop
 800a7fc:	0800b4ec 	.word	0x0800b4ec
 800a800:	ffff0001 	.word	0xffff0001

0800a804 <_fwalk_reent>:
 800a804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a808:	4680      	mov	r8, r0
 800a80a:	4689      	mov	r9, r1
 800a80c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a810:	2600      	movs	r6, #0
 800a812:	b914      	cbnz	r4, 800a81a <_fwalk_reent+0x16>
 800a814:	4630      	mov	r0, r6
 800a816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a81e:	3f01      	subs	r7, #1
 800a820:	d501      	bpl.n	800a826 <_fwalk_reent+0x22>
 800a822:	6824      	ldr	r4, [r4, #0]
 800a824:	e7f5      	b.n	800a812 <_fwalk_reent+0xe>
 800a826:	89ab      	ldrh	r3, [r5, #12]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d907      	bls.n	800a83c <_fwalk_reent+0x38>
 800a82c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a830:	3301      	adds	r3, #1
 800a832:	d003      	beq.n	800a83c <_fwalk_reent+0x38>
 800a834:	4629      	mov	r1, r5
 800a836:	4640      	mov	r0, r8
 800a838:	47c8      	blx	r9
 800a83a:	4306      	orrs	r6, r0
 800a83c:	3568      	adds	r5, #104	; 0x68
 800a83e:	e7ee      	b.n	800a81e <_fwalk_reent+0x1a>

0800a840 <__swhatbuf_r>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	460e      	mov	r6, r1
 800a844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a848:	2900      	cmp	r1, #0
 800a84a:	b096      	sub	sp, #88	; 0x58
 800a84c:	4614      	mov	r4, r2
 800a84e:	461d      	mov	r5, r3
 800a850:	da07      	bge.n	800a862 <__swhatbuf_r+0x22>
 800a852:	2300      	movs	r3, #0
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	89b3      	ldrh	r3, [r6, #12]
 800a858:	061a      	lsls	r2, r3, #24
 800a85a:	d410      	bmi.n	800a87e <__swhatbuf_r+0x3e>
 800a85c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a860:	e00e      	b.n	800a880 <__swhatbuf_r+0x40>
 800a862:	466a      	mov	r2, sp
 800a864:	f000 f8b8 	bl	800a9d8 <_fstat_r>
 800a868:	2800      	cmp	r0, #0
 800a86a:	dbf2      	blt.n	800a852 <__swhatbuf_r+0x12>
 800a86c:	9a01      	ldr	r2, [sp, #4]
 800a86e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a876:	425a      	negs	r2, r3
 800a878:	415a      	adcs	r2, r3
 800a87a:	602a      	str	r2, [r5, #0]
 800a87c:	e7ee      	b.n	800a85c <__swhatbuf_r+0x1c>
 800a87e:	2340      	movs	r3, #64	; 0x40
 800a880:	2000      	movs	r0, #0
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	b016      	add	sp, #88	; 0x58
 800a886:	bd70      	pop	{r4, r5, r6, pc}

0800a888 <__smakebuf_r>:
 800a888:	898b      	ldrh	r3, [r1, #12]
 800a88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a88c:	079d      	lsls	r5, r3, #30
 800a88e:	4606      	mov	r6, r0
 800a890:	460c      	mov	r4, r1
 800a892:	d507      	bpl.n	800a8a4 <__smakebuf_r+0x1c>
 800a894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	2301      	movs	r3, #1
 800a89e:	6163      	str	r3, [r4, #20]
 800a8a0:	b002      	add	sp, #8
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	ab01      	add	r3, sp, #4
 800a8a6:	466a      	mov	r2, sp
 800a8a8:	f7ff ffca 	bl	800a840 <__swhatbuf_r>
 800a8ac:	9900      	ldr	r1, [sp, #0]
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7ff fcbd 	bl	800a230 <_malloc_r>
 800a8b6:	b948      	cbnz	r0, 800a8cc <__smakebuf_r+0x44>
 800a8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8bc:	059a      	lsls	r2, r3, #22
 800a8be:	d4ef      	bmi.n	800a8a0 <__smakebuf_r+0x18>
 800a8c0:	f023 0303 	bic.w	r3, r3, #3
 800a8c4:	f043 0302 	orr.w	r3, r3, #2
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	e7e3      	b.n	800a894 <__smakebuf_r+0xc>
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <__smakebuf_r+0x7c>)
 800a8ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	6020      	str	r0, [r4, #0]
 800a8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	6163      	str	r3, [r4, #20]
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	6120      	str	r0, [r4, #16]
 800a8e2:	b15b      	cbz	r3, 800a8fc <__smakebuf_r+0x74>
 800a8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f000 f887 	bl	800a9fc <_isatty_r>
 800a8ee:	b128      	cbz	r0, 800a8fc <__smakebuf_r+0x74>
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	f023 0303 	bic.w	r3, r3, #3
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	81a3      	strh	r3, [r4, #12]
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	431d      	orrs	r5, r3
 800a900:	81a5      	strh	r5, [r4, #12]
 800a902:	e7cd      	b.n	800a8a0 <__smakebuf_r+0x18>
 800a904:	0800a6f5 	.word	0x0800a6f5

0800a908 <__malloc_lock>:
 800a908:	4770      	bx	lr

0800a90a <__malloc_unlock>:
 800a90a:	4770      	bx	lr

0800a90c <__sread>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	460c      	mov	r4, r1
 800a910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a914:	f000 f894 	bl	800aa40 <_read_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	bfab      	itete	ge
 800a91c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a91e:	89a3      	ldrhlt	r3, [r4, #12]
 800a920:	181b      	addge	r3, r3, r0
 800a922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a926:	bfac      	ite	ge
 800a928:	6563      	strge	r3, [r4, #84]	; 0x54
 800a92a:	81a3      	strhlt	r3, [r4, #12]
 800a92c:	bd10      	pop	{r4, pc}

0800a92e <__swrite>:
 800a92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a932:	461f      	mov	r7, r3
 800a934:	898b      	ldrh	r3, [r1, #12]
 800a936:	05db      	lsls	r3, r3, #23
 800a938:	4605      	mov	r5, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	4616      	mov	r6, r2
 800a93e:	d505      	bpl.n	800a94c <__swrite+0x1e>
 800a940:	2302      	movs	r3, #2
 800a942:	2200      	movs	r2, #0
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	f000 f868 	bl	800aa1c <_lseek_r>
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	4632      	mov	r2, r6
 800a95a:	463b      	mov	r3, r7
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a962:	f000 b817 	b.w	800a994 <_write_r>

0800a966 <__sseek>:
 800a966:	b510      	push	{r4, lr}
 800a968:	460c      	mov	r4, r1
 800a96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96e:	f000 f855 	bl	800aa1c <_lseek_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	bf15      	itete	ne
 800a978:	6560      	strne	r0, [r4, #84]	; 0x54
 800a97a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a97e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a982:	81a3      	strheq	r3, [r4, #12]
 800a984:	bf18      	it	ne
 800a986:	81a3      	strhne	r3, [r4, #12]
 800a988:	bd10      	pop	{r4, pc}

0800a98a <__sclose>:
 800a98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98e:	f000 b813 	b.w	800a9b8 <_close_r>
	...

0800a994 <_write_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4c07      	ldr	r4, [pc, #28]	; (800a9b4 <_write_r+0x20>)
 800a998:	4605      	mov	r5, r0
 800a99a:	4608      	mov	r0, r1
 800a99c:	4611      	mov	r1, r2
 800a99e:	2200      	movs	r2, #0
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f7f6 fd4b 	bl	800143e <_write>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d102      	bne.n	800a9b2 <_write_r+0x1e>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	b103      	cbz	r3, 800a9b2 <_write_r+0x1e>
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	240012e8 	.word	0x240012e8

0800a9b8 <_close_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4c06      	ldr	r4, [pc, #24]	; (800a9d4 <_close_r+0x1c>)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4605      	mov	r5, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	f7f6 fd57 	bl	8001476 <_close>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_close_r+0x1a>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_close_r+0x1a>
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	240012e8 	.word	0x240012e8

0800a9d8 <_fstat_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4c07      	ldr	r4, [pc, #28]	; (800a9f8 <_fstat_r+0x20>)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	4605      	mov	r5, r0
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	f7f6 fd52 	bl	800148e <_fstat>
 800a9ea:	1c43      	adds	r3, r0, #1
 800a9ec:	d102      	bne.n	800a9f4 <_fstat_r+0x1c>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	b103      	cbz	r3, 800a9f4 <_fstat_r+0x1c>
 800a9f2:	602b      	str	r3, [r5, #0]
 800a9f4:	bd38      	pop	{r3, r4, r5, pc}
 800a9f6:	bf00      	nop
 800a9f8:	240012e8 	.word	0x240012e8

0800a9fc <_isatty_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	4c06      	ldr	r4, [pc, #24]	; (800aa18 <_isatty_r+0x1c>)
 800aa00:	2300      	movs	r3, #0
 800aa02:	4605      	mov	r5, r0
 800aa04:	4608      	mov	r0, r1
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	f7f6 fd51 	bl	80014ae <_isatty>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_isatty_r+0x1a>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_isatty_r+0x1a>
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	240012e8 	.word	0x240012e8

0800aa1c <_lseek_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4c07      	ldr	r4, [pc, #28]	; (800aa3c <_lseek_r+0x20>)
 800aa20:	4605      	mov	r5, r0
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	2200      	movs	r2, #0
 800aa28:	6022      	str	r2, [r4, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f7f6 fd4a 	bl	80014c4 <_lseek>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_lseek_r+0x1e>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_lseek_r+0x1e>
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	240012e8 	.word	0x240012e8

0800aa40 <_read_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4c07      	ldr	r4, [pc, #28]	; (800aa60 <_read_r+0x20>)
 800aa44:	4605      	mov	r5, r0
 800aa46:	4608      	mov	r0, r1
 800aa48:	4611      	mov	r1, r2
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	6022      	str	r2, [r4, #0]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f7f6 fcd8 	bl	8001404 <_read>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_read_r+0x1e>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_read_r+0x1e>
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	240012e8 	.word	0x240012e8

0800aa64 <_init>:
 800aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa66:	bf00      	nop
 800aa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6a:	bc08      	pop	{r3}
 800aa6c:	469e      	mov	lr, r3
 800aa6e:	4770      	bx	lr

0800aa70 <_fini>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	bf00      	nop
 800aa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa76:	bc08      	pop	{r3}
 800aa78:	469e      	mov	lr, r3
 800aa7a:	4770      	bx	lr
