
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b18c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  0800b43c  0800b43c  0001b43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd64  0800bd64  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd6c  0800bd6c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  0800bd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2400007c  0800bdf0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003e8  0800bdf0  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000259dd  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c08  00000000  00000000  00045a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00049690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  0004add0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033b74  00000000  00000000  0004c398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001504e  00000000  00000000  0007ff0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015632b  00000000  00000000  00094f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001eb285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c1c  00000000  00000000  001eb300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b424 	.word	0x0800b424

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0800b424 	.word	0x0800b424

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f001 faaf 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f8d9 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fbf3 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a2:	f000 fbb9 	bl	8000e18 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 fb63 	bl	8000d70 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006aa:	f000 fbad 	bl	8000e08 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006ae:	f000 f99f 	bl	80009f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 80006b2:	f000 fa17 	bl	8000ae4 <MX_DAC1_Init>
  MX_TIM6_Init();
 80006b6:	f000 faef 	bl	8000c98 <MX_TIM6_Init>
  MX_TIM2_Init();
 80006ba:	f000 fa45 	bl	8000b48 <MX_TIM2_Init>
  MX_TIM7_Init();
 80006be:	f000 fb21 	bl	8000d04 <MX_TIM7_Init>
  MX_TIM5_Init();
 80006c2:	f000 fa95 	bl	8000bf0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize NCO structure to create sine waves */
  s_ref = init_nco(1. / 100., 0);
 80006c6:	eddf 0a50 	vldr	s1, [pc, #320]	; 8000808 <main+0x178>
 80006ca:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800080c <main+0x17c>
 80006ce:	f000 fd87 	bl	80011e0 <init_nco>
 80006d2:	6438      	str	r0, [r7, #64]	; 0x40
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 80006d4:	2102      	movs	r1, #2
 80006d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006da:	f009 fe8b 	bl	800a3f4 <calloc>
 80006de:	4603      	mov	r3, r0
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if ((sin_buffer == NULL)) {
 80006e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <main+0x64>
	  printf("Failed to allocate memory for arrays\n");
 80006e8:	4849      	ldr	r0, [pc, #292]	; (8000810 <main+0x180>)
 80006ea:	f009 ffeb 	bl	800a6c4 <puts>
	  exit(EXIT_FAILURE);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f009 fe8e 	bl	800a410 <exit>
  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 80006f4:	4847      	ldr	r0, [pc, #284]	; (8000814 <main+0x184>)
 80006f6:	f007 ffeb 	bl	80086d0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4846      	ldr	r0, [pc, #280]	; (8000818 <main+0x188>)
 80006fe:	f002 fb6c 	bl	8002dda <HAL_DAC_Start>

  set_blocksize(BLOCKSIZE);
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f000 fe65 	bl	80013d4 <set_blocksize>
  dac_buff = (uint16_t *) malloc(sizeof(uint16_t)*BLOCKSIZE*2);
 800070a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800070e:	f009 feb7 	bl	800a480 <malloc>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b41      	ldr	r3, [pc, #260]	; (800081c <main+0x18c>)
 8000718:	601a      	str	r2, [r3, #0]

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buff, 2*BLOCKSIZE, DAC_ALIGN_12B_R);
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <main+0x18c>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	2100      	movs	r1, #0
 8000728:	483b      	ldr	r0, [pc, #236]	; (8000818 <main+0x188>)
 800072a:	f002 fba9 	bl	8002e80 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 800072e:	483c      	ldr	r0, [pc, #240]	; (8000820 <main+0x190>)
 8000730:	f007 fffc 	bl	800872c <HAL_TIM_Base_Start_IT>

  /* Timers to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <main+0x194>)
 8000736:	f007 ffcb 	bl	80086d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 800073a:	483b      	ldr	r0, [pc, #236]	; (8000828 <main+0x198>)
 800073c:	f007 ffc8 	bl	80086d0 <HAL_TIM_Base_Start>
  i = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c

  while (1)
  {

	  /* Trigger every MILLISECONDS ms */
	  if (update_freq_flag) {
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <main+0x19c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d051      	beq.n	80007f2 <main+0x162>

//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((freq_timer_count * 1000 - REF_OSC_FREQ));
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <main+0x1a0>)
 8000750:	edd3 7a00 	vldr	s15, [r3]
 8000754:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000834 <main+0x1a4>
 8000758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000838 <main+0x1a8>
 8000760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000768:	ee17 3a90 	vmov	r3, s15
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48

		  /* Calculate the volume level */
		  vol = (int)((vol_timer_count * 1000 - /*REF_VOL_FREQ*/ 260000UL)) ;
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <main+0x1ac>)
 8000770:	edd3 7a00 	vldr	s15, [r3]
 8000774:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000834 <main+0x1a4>
 8000778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800077c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000840 <main+0x1b0>
 8000780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000788:	ee17 3a90 	vmov	r3, s15
 800078c:	647b      	str	r3, [r7, #68]	; 0x44

		  /* Take the absolute value of the difference */
		  if (freq < 0)
 800078e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000790:	2b00      	cmp	r3, #0
 8000792:	da02      	bge.n	800079a <main+0x10a>
			  freq = -freq;
 8000794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000796:	425b      	negs	r3, r3
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
		  if (vol < 0)
 800079a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800079c:	2b00      	cmp	r3, #0
 800079e:	da02      	bge.n	80007a6 <main+0x116>
			  vol = -vol;
 80007a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007a2:	425b      	negs	r3, r3
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44

		  /* Inform serial bus of the current output frequency */
		  uart_buf_len = sprintf(uart_buf, "%dHz\r\n", (int)(freq));
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007aa:	4926      	ldr	r1, [pc, #152]	; (8000844 <main+0x1b4>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f009 ffa1 	bl	800a6f4 <siprintf>
 80007b2:	63b8      	str	r0, [r7, #56]	; 0x38
		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
 80007b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	1d39      	adds	r1, r7, #4
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <main+0x1b8>)
 80007be:	f008 fc4f 	bl	8009060 <HAL_UART_Transmit>

		  /* Generate sine wave at desired frequency and amplitude */
		  nco_set_frequency(s_ref, (float)freq / 100000.);
 80007c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007cc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800084c <main+0x1bc>
 80007d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80007d4:	eeb0 0a66 	vmov.f32	s0, s13
 80007d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007da:	f000 fda7 	bl	800132c <nco_set_frequency>
		  nco_set_amplitude(s_ref, vol);
 80007de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80007e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007e2:	f000 fdbf 	bl	8001364 <nco_set_amplitude>

		  update_freq_flag = 0;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <main+0x19c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
		  i++;
 80007ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007ee:	3301      	adds	r3, #1
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	  /* Get DAC output samples */
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 80007f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80007f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007fa:	f000 fd3d 	bl	8001278 <nco_get_samples>
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	  /* Output result to DAC */
	  set_dac_buff(sin_buffer);
 80007fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000800:	f000 fdfe 	bl	8001400 <set_dac_buff>
	  if (update_freq_flag) {
 8000804:	e79e      	b.n	8000744 <main+0xb4>
 8000806:	bf00      	nop
 8000808:	00000000 	.word	0x00000000
 800080c:	3c23d70a 	.word	0x3c23d70a
 8000810:	0800b43c 	.word	0x0800b43c
 8000814:	240002f8 	.word	0x240002f8
 8000818:	240000b8 	.word	0x240000b8
 800081c:	240000a4 	.word	0x240000a4
 8000820:	24000390 	.word	0x24000390
 8000824:	24000344 	.word	0x24000344
 8000828:	240001d0 	.word	0x240001d0
 800082c:	240003dc 	.word	0x240003dc
 8000830:	24000098 	.word	0x24000098
 8000834:	447a0000 	.word	0x447a0000
 8000838:	48751e00 	.word	0x48751e00
 800083c:	2400009c 	.word	0x2400009c
 8000840:	487de800 	.word	0x487de800
 8000844:	0800b464 	.word	0x0800b464
 8000848:	240000cc 	.word	0x240000cc
 800084c:	47c35000 	.word	0x47c35000

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0ca      	sub	sp, #296	; 0x128
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800085a:	224c      	movs	r2, #76	; 0x4c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f009 fe16 	bl	800a490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000868:	2220      	movs	r2, #32
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f009 fe0f 	bl	800a490 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4618      	mov	r0, r3
 8000876:	23b8      	movs	r3, #184	; 0xb8
 8000878:	461a      	mov	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f009 fe08 	bl	800a490 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000880:	2004      	movs	r0, #4
 8000882:	f005 f8cf 	bl	8005a24 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	4b55      	ldr	r3, [pc, #340]	; (80009e4 <SystemClock_Config+0x194>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a54      	ldr	r2, [pc, #336]	; (80009e4 <SystemClock_Config+0x194>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b52      	ldr	r3, [pc, #328]	; (80009e4 <SystemClock_Config+0x194>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80008a0:	463b      	mov	r3, r7
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	463b      	mov	r3, r7
 80008a6:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a8:	bf00      	nop
 80008aa:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <SystemClock_Config+0x194>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b6:	d1f8      	bne.n	80008aa <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008b8:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <SystemClock_Config+0x198>)
 80008ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008bc:	f023 0303 	bic.w	r3, r3, #3
 80008c0:	4a49      	ldr	r2, [pc, #292]	; (80009e8 <SystemClock_Config+0x198>)
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80008c8:	2329      	movs	r3, #41	; 0x29
 80008ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d6:	2301      	movs	r3, #1
 80008d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	2302      	movs	r3, #2
 80008ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008f4:	2318      	movs	r3, #24
 80008f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800090c:	230c      	movs	r3, #12
 800090e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000922:	4618      	mov	r0, r3
 8000924:	f005 f8d8 	bl	8005ad8 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800092e:	f000 fc4f 	bl	80011d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	; 0x3f
 8000934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2303      	movs	r3, #3
 800093a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000962:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000966:	2102      	movs	r1, #2
 8000968:	4618      	mov	r0, r3
 800096a:	f005 fc9d 	bl	80062a8 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000974:	f000 fc2c 	bl	80011d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <SystemClock_Config+0x19c>)
 800097c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2201      	movs	r2, #1
 8000982:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2210      	movs	r2, #16
 8000988:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2202      	movs	r2, #2
 800098e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2202      	movs	r2, #2
 8000994:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2202      	movs	r2, #2
 800099a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	22c0      	movs	r2, #192	; 0xc0
 80009a0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 fff1 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x188>
  {
    Error_Handler();
 80009d4:	f000 fbfc 	bl	80011d0 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58024800 	.word	0x58024800
 80009e8:	58024400 	.word	0x58024400
 80009ec:	000c0002 	.word	0x000c0002

080009f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a16:	4a31      	ldr	r2, [pc, #196]	; (8000adc <MX_ADC1_Init+0xec>)
 8000a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a22:	2208      	movs	r2, #8
 8000a24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a4c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a76:	f001 faff 	bl	8002078 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a80:	f000 fba6 	bl	80011d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a90:	f001 ffda 	bl	8002a48 <HAL_ADCEx_MultiModeConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a9a:	f000 fb99 	bl	80011d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_ADC1_Init+0xf0>)
 8000aa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aaa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000aae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000ac2:	f001 fc33 	bl	800232c <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000acc:	f000 fb80 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2400021c 	.word	0x2400021c
 8000adc:	40022000 	.word	0x40022000
 8000ae0:	14f00020 	.word	0x14f00020

08000ae4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2224      	movs	r2, #36	; 0x24
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f009 fccd 	bl	800a490 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_DAC1_Init+0x5c>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_DAC1_Init+0x60>)
 8000afa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <MX_DAC1_Init+0x5c>)
 8000afe:	f002 f94a 	bl	8002d96 <HAL_DAC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b08:	f000 fb62 	bl	80011d0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000b10:	2316      	movs	r3, #22
 8000b12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_DAC1_Init+0x5c>)
 8000b28:	f002 fa7c 	bl	8003024 <HAL_DAC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 fb4d 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	240000b8 	.word	0x240000b8
 8000b44:	40007400 	.word	0x40007400

08000b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b90:	4816      	ldr	r0, [pc, #88]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000b92:	f007 fd45 	bl	8008620 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 fb18 	bl	80011d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ba4:	2350      	movs	r3, #80	; 0x50
 8000ba6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000bb8:	f007 ff0d 	bl	80089d6 <HAL_TIM_SlaveConfigSynchro>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000bc2:	f000 fb05 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_TIM2_Init+0xa4>)
 8000bd4:	f008 f94e 	bl	8008e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000bde:	f000 faf7 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	24000344 	.word	0x24000344

08000bf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c12:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <MX_TIM5_Init+0xa4>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c38:	f007 fcf2 	bl	8008620 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000c42:	f000 fac5 	bl	80011d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c46:	2307      	movs	r3, #7
 8000c48:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c5e:	f007 feba 	bl	80089d6 <HAL_TIM_SlaveConfigSynchro>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f000 fab2 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_TIM5_Init+0xa0>)
 8000c7a:	f008 f8fb 	bl	8008e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000c84:	f000 faa4 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240001d0 	.word	0x240001d0
 8000c94:	40000c00 	.word	0x40000c00

08000c98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_TIM6_Init+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 960 - 1;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cbc:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000cc0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cca:	f007 fca9 	bl	8008620 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cd4:	f000 fa7c 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cd8:	2320      	movs	r3, #32
 8000cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000ce6:	f008 f8c5 	bl	8008e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f000 fa6e 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	240002f8 	.word	0x240002f8
 8000d00:	40001000 	.word	0x40001000

08000d04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <MX_TIM7_Init+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d1c:	225f      	movs	r2, #95	; 0x5f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d36:	f007 fc73 	bl	8008620 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d40:	f000 fa46 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d52:	f008 f88f 	bl	8008e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f000 fa38 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24000390 	.word	0x24000390
 8000d6c:	40001400 	.word	0x40001400

08000d70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <MX_USART3_UART_Init+0x94>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dba:	f008 f901 	bl	8008fc0 <HAL_UART_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dc4:	f000 fa04 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dcc:	f009 fa2d 	bl	800a22a <HAL_UARTEx_SetTxFifoThreshold>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dd6:	f000 f9fb 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4808      	ldr	r0, [pc, #32]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dde:	f009 fa62 	bl	800a2a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f000 f9f2 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_USART3_UART_Init+0x90>)
 8000dee:	f009 f9e3 	bl	800a1b8 <HAL_UARTEx_DisableFifoMode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000df8:	f000 f9ea 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	240000cc 	.word	0x240000cc
 8000e04:	40004800 	.word	0x40004800

08000e08 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_DMA_Init+0x6c>)
 8000e20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_DMA_Init+0x6c>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_DMA_Init+0x6c>)
 8000e30:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_DMA_Init+0x6c>)
 8000e3e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <MX_DMA_Init+0x6c>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_DMA_Init+0x6c>)
 8000e4e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200b      	movs	r0, #11
 8000e60:	f001 ff65 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e64:	200b      	movs	r0, #11
 8000e66:	f001 ff7c 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2038      	movs	r0, #56	; 0x38
 8000e70:	f001 ff5d 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e74:	2038      	movs	r0, #56	; 0x38
 8000e76:	f001 ff74 	bl	8002d62 <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58024400 	.word	0x58024400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b87      	ldr	r3, [pc, #540]	; (80010bc <MX_GPIO_Init+0x234>)
 8000ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea4:	4a85      	ldr	r2, [pc, #532]	; (80010bc <MX_GPIO_Init+0x234>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eae:	4b83      	ldr	r3, [pc, #524]	; (80010bc <MX_GPIO_Init+0x234>)
 8000eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebc:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <MX_GPIO_Init+0x234>)
 8000ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec2:	4a7e      	ldr	r2, [pc, #504]	; (80010bc <MX_GPIO_Init+0x234>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <MX_GPIO_Init+0x234>)
 8000ece:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b78      	ldr	r3, [pc, #480]	; (80010bc <MX_GPIO_Init+0x234>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee0:	4a76      	ldr	r2, [pc, #472]	; (80010bc <MX_GPIO_Init+0x234>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <MX_GPIO_Init+0x234>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b70      	ldr	r3, [pc, #448]	; (80010bc <MX_GPIO_Init+0x234>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efe:	4a6f      	ldr	r2, [pc, #444]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f08:	4b6c      	ldr	r3, [pc, #432]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b69      	ldr	r3, [pc, #420]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f1c:	4a67      	ldr	r2, [pc, #412]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f26:	4b65      	ldr	r3, [pc, #404]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b61      	ldr	r3, [pc, #388]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3a:	4a60      	ldr	r2, [pc, #384]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f44:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	4b5a      	ldr	r3, [pc, #360]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f58:	4a58      	ldr	r2, [pc, #352]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f62:	4b56      	ldr	r3, [pc, #344]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f76:	4a51      	ldr	r2, [pc, #324]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f80:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <MX_GPIO_Init+0x234>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	484a      	ldr	r0, [pc, #296]	; (80010c0 <MX_GPIO_Init+0x238>)
 8000f96:	f004 fd2b 	bl	80059f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fa0:	4848      	ldr	r0, [pc, #288]	; (80010c4 <MX_GPIO_Init+0x23c>)
 8000fa2:	f004 fd25 	bl	80059f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4847      	ldr	r0, [pc, #284]	; (80010c8 <MX_GPIO_Init+0x240>)
 8000fac:	f004 fd20 	bl	80059f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4841      	ldr	r0, [pc, #260]	; (80010cc <MX_GPIO_Init+0x244>)
 8000fc6:	f004 fb63 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4837      	ldr	r0, [pc, #220]	; (80010c0 <MX_GPIO_Init+0x238>)
 8000fe4:	f004 fb54 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fe8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4830      	ldr	r0, [pc, #192]	; (80010c4 <MX_GPIO_Init+0x23c>)
 8001002:	f004 fb45 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <MX_GPIO_Init+0x248>)
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	482e      	ldr	r0, [pc, #184]	; (80010d4 <MX_GPIO_Init+0x24c>)
 800101a:	f004 fb39 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800101e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4829      	ldr	r0, [pc, #164]	; (80010d8 <MX_GPIO_Init+0x250>)
 8001034:	f004 fb2c 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800104a:	230a      	movs	r3, #10
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <MX_GPIO_Init+0x250>)
 8001056:	f004 fb1b 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800105a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4819      	ldr	r0, [pc, #100]	; (80010d8 <MX_GPIO_Init+0x250>)
 8001074:	f004 fb0c 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001088:	2307      	movs	r3, #7
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_GPIO_Init+0x23c>)
 8001094:	f004 fafc 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001098:	2302      	movs	r3, #2
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_GPIO_Init+0x240>)
 80010b0:	f004 faee 	bl	8005690 <HAL_GPIO_Init>

}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	; 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58021400 	.word	0x58021400
 80010c4:	58020400 	.word	0x58020400
 80010c8:	58021000 	.word	0x58021000
 80010cc:	58020800 	.word	0x58020800
 80010d0:	11110000 	.word	0x11110000
 80010d4:	58021800 	.word	0x58021800
 80010d8:	58020000 	.word	0x58020000

080010dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	if (ms == 0){
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d107      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x22>
		freq_timer_count = 0;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
		vol_timer_count = 0;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
	}
	freq_timer_count += __HAL_TIM_GET_COUNTER(&htim2);
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
	vol_timer_count += __HAL_TIM_GET_COUNTER(&htim5);
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
	ms++;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3301      	adds	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001156:	701a      	strb	r2, [r3, #0]
	if (ms == MILLISECONDS) {
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b0a      	cmp	r3, #10
 8001160:	d119      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0xba>
		update_freq_flag = 1;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
		freq_timer_count /= MILLISECONDS;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001178:	edc3 7a00 	vstr	s15, [r3]
		vol_timer_count /= MILLISECONDS;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
		ms = 0;
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	}
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	240000a0 	.word	0x240000a0
 80011a8:	24000098 	.word	0x24000098
 80011ac:	2400009c 	.word	0x2400009c
 80011b0:	24000344 	.word	0x24000344
 80011b4:	240001d0 	.word	0x240001d0
 80011b8:	240003dc 	.word	0x240003dc

080011bc <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80011ea:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 80011ee:	2010      	movs	r0, #16
 80011f0:	f009 f946 	bl	800a480 <malloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 80011fe:	481c      	ldr	r0, [pc, #112]	; (8001270 <init_nco+0x90>)
 8001200:	f009 fa60 	bl	800a6c4 <puts>
        exit(EXIT_FAILURE);
 8001204:	2001      	movs	r0, #1
 8001206:	f009 f903 	bl	800a410 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 800120a:	edd7 7a01 	vldr	s15, [r7, #4]
 800120e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001212:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001274 <init_nco+0x94>
 8001216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121e:	ee17 2a90 	vmov	r2, s15
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8001226:	edd7 7a00 	vldr	s15, [r7]
 800122a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800122e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001274 <init_nco+0x94>
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800123a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001268 <init_nco+0x88>
 800123e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001242:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001246:	ee17 2a90 	vmov	r2, s15
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    s->amp = 0;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 800125c:	68fb      	ldr	r3, [r7, #12]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	53c8d4f1 	.word	0x53c8d4f1
 800126c:	401921fb 	.word	0x401921fb
 8001270:	0800b46c 	.word	0x0800b46c
 8001274:	4f000000 	.word	0x4f000000

08001278 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	e041      	b.n	800130e <nco_get_samples+0x96>

        if ((i == 0) && (s->acc == 0)) {
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <nco_get_samples+0x28>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <nco_get_samples+0x28>
            s->acc = 0;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	e008      	b.n	80012b2 <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	461a      	mov	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	60da      	str	r2, [r3, #12]
        }

        //kprime[n]
        kprime = s->acc + s->theta;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	0ddb      	lsrs	r3, r3, #23
 80012c4:	617b      	str	r3, [r7, #20]
        y[i] = (unsigned int)((cosine[index] + 1) * 2047) * s->amp;
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <nco_get_samples+0xac>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012da:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001328 <nco_get_samples+0xb0>
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	b292      	uxth	r2, r2
 8001306:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3301      	adds	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3b9      	bcc.n	800128a <nco_get_samples+0x12>
//        y[i] = (unsigned int)((cosine[index] + 1) * 2047) * .5;
	}
}
 8001316:	bf00      	nop
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	0800b49c 	.word	0x0800b49c
 8001328:	44ffe000 	.word	0x44ffe000

0800132c <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 8001338:	edd7 7a00 	vldr	s15, [r7]
 800133c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001340:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001360 <nco_set_frequency+0x34>
 8001344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134c:	ee17 2a90 	vmov	r2, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	4f000000 	.word	0x4f000000

08001364 <nco_set_amplitude>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate with the amplitude given by amp
 */

void nco_set_amplitude(	NCO_T *s,
						int amp){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	if (amp <= 5000) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	dc20      	bgt.n	80013ba <nco_set_amplitude+0x56>
		amp = 5000 - amp;
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	f241 3388 	movw	r3, #5000	; 0x1388
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	603b      	str	r3, [r7, #0]
		s->amp = (float)amp / 10000.;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80013d0 <nco_set_amplitude+0x6c>
 8001390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edc3 7a02 	vstr	s15, [r3, #8]
		/* Don't want to saturate the output */
		if (s->amp > 1) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dc00      	bgt.n	80013b0 <nco_set_amplitude+0x4c>
			s->amp = 0;
		}
	}else {
		s->amp = 0.0;
	}
}
 80013ae:	e008      	b.n	80013c2 <nco_set_amplitude+0x5e>
			s->amp = 0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	e003      	b.n	80013c2 <nco_set_amplitude+0x5e>
		s->amp = 0.0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	461c4000 	.word	0x461c4000

080013d4 <set_blocksize>:

int get_blocksize() {
	return ADC_block_len;
}

void set_blocksize( uint32_t new_blocksize) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	ADC_block_len = new_blocksize;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <set_blocksize+0x24>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
	ADC_buffer_len = 2 * new_blocksize;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <set_blocksize+0x28>)
 80013e8:	6013      	str	r3, [r2, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	24000000 	.word	0x24000000
 80013fc:	24000004 	.word	0x24000004

08001400 <set_dac_buff>:
		ret_adc[i] = (float)(input_buff[i] - 2047) / 2048.;
	}
}

/* Set DAC buffer to output */
void set_dac_buff(uint16_t * input_dac) {
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	uint32_t i;

	if (Half_Done) {
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <set_dac_buff+0x70>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <set_dac_buff+0x22>
		output_buff = dac_buff;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <set_dac_buff+0x74>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <set_dac_buff+0x78>)
 8001418:	6013      	str	r3, [r2, #0]
		Half_Done = 0;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <set_dac_buff+0x70>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e00a      	b.n	8001438 <set_dac_buff+0x38>
	}
	else {
		output_buff = &(dac_buff[ADC_block_len]);
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <set_dac_buff+0x74>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <set_dac_buff+0x7c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <set_dac_buff+0x78>)
 8001430:	6013      	str	r3, [r2, #0]
		Half_Done = 1;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <set_dac_buff+0x70>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
	}
	/* Convert from float to 0-4095 for 12bit dac */
	for (i = 0; i < ADC_block_len; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e00d      	b.n	800145a <set_dac_buff+0x5a>
		output_buff[i] = input_dac[i];
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	441a      	add	r2, r3
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <set_dac_buff+0x78>)
 8001448:	6819      	ldr	r1, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	440b      	add	r3, r1
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ADC_block_len; i++) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <set_dac_buff+0x7c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3ec      	bcc.n	800143e <set_dac_buff+0x3e>
	}
//	output_buff = &(dac_buff[ADC_block_len]);
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	240000a1 	.word	0x240000a1
 8001474:	240000a4 	.word	0x240000a4
 8001478:	240000a8 	.word	0x240000a8
 800147c:	24000000 	.word	0x24000000

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_MspInit+0x30>)
 8001488:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x30>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x30>)
 8001498:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58024400 	.word	0x58024400

080014b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a30      	ldr	r2, [pc, #192]	; (8001594 <HAL_ADC_MspInit+0xe0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d159      	bne.n	800158a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_ADC_MspInit+0xe4>)
 80014d8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80014dc:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <HAL_ADC_MspInit+0xe4>)
 80014de:	f043 0320 	orr.w	r3, r3, #32
 80014e2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_ADC_MspInit+0xe4>)
 80014e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_ADC_MspInit+0xe4>)
 80014f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fa:	4a27      	ldr	r2, [pc, #156]	; (8001598 <HAL_ADC_MspInit+0xe4>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_ADC_MspInit+0xe4>)
 8001506:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001512:	2302      	movs	r3, #2
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001516:	2303      	movs	r3, #3
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <HAL_ADC_MspInit+0xe8>)
 8001526:	f004 f8b3 	bl	8005690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_ADC_MspInit+0xf0>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001532:	2209      	movs	r2, #9
 8001534:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001558:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001570:	f001 ff12 	bl	8003398 <HAL_DMA_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800157a:	f7ff fe29 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001582:	64da      	str	r2, [r3, #76]	; 0x4c
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_ADC_MspInit+0xec>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000
 8001598:	58024400 	.word	0x58024400
 800159c:	58020400 	.word	0x58020400
 80015a0:	24000280 	.word	0x24000280
 80015a4:	40020010 	.word	0x40020010

080015a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a30      	ldr	r2, [pc, #192]	; (8001688 <HAL_DAC_MspInit+0xe0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d159      	bne.n	800167e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_DAC_MspInit+0xe4>)
 80015cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015d0:	4a2e      	ldr	r2, [pc, #184]	; (800168c <HAL_DAC_MspInit+0xe4>)
 80015d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015d6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <HAL_DAC_MspInit+0xe4>)
 80015dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_DAC_MspInit+0xe4>)
 80015ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_DAC_MspInit+0xe4>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_DAC_MspInit+0xe4>)
 80015fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <HAL_DAC_MspInit+0xe8>)
 800161a:	f004 f839 	bl	8005690 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_DAC_MspInit+0xf0>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001626:	2243      	movs	r2, #67	; 0x43
 8001628:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_DAC_MspInit+0xec>)
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001644:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001654:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_DAC_MspInit+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001664:	f001 fe98 	bl	8003398 <HAL_DMA_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800166e:	f7ff fdaf 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_DAC_MspInit+0xec>)
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_DAC_MspInit+0xec>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40007400 	.word	0x40007400
 800168c:	58024400 	.word	0x58024400
 8001690:	58020000 	.word	0x58020000
 8001694:	24000158 	.word	0x24000158
 8001698:	40020410 	.word	0x40020410

0800169c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016bc:	d12e      	bne.n	800171c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016be:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80016c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016c4:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80016d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80016de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016e2:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016ec:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80016ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170a:	2301      	movs	r3, #1
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	4837      	ldr	r0, [pc, #220]	; (80017f4 <HAL_TIM_Base_MspInit+0x158>)
 8001716:	f003 ffbb 	bl	8005690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800171a:	e064      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <HAL_TIM_Base_MspInit+0x15c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12e      	bne.n	8001784 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 8001728:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800172c:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 8001738:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 8001746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800174a:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001762:	2302      	movs	r3, #2
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001772:	2302      	movs	r3, #2
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <HAL_TIM_Base_MspInit+0x158>)
 800177e:	f003 ff87 	bl	8005690 <HAL_GPIO_Init>
}
 8001782:	e030      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_TIM_Base_MspInit+0x160>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10f      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 8001790:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001794:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80017a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
}
 80017ac:	e01b      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_TIM_Base_MspInit+0x164>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d116      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80017ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x154>)
 80017ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2037      	movs	r0, #55	; 0x37
 80017dc:	f001 faa7 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017e0:	2037      	movs	r0, #55	; 0x37
 80017e2:	f001 fabe 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	; 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58020000 	.word	0x58020000
 80017f8:	40000c00 	.word	0x40000c00
 80017fc:	40001000 	.word	0x40001000
 8001800:	40001400 	.word	0x40001400

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_UART_MspInit+0x88>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12e      	bne.n	8001884 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_UART_MspInit+0x8c>)
 8001828:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800182c:	4a18      	ldr	r2, [pc, #96]	; (8001890 <HAL_UART_MspInit+0x8c>)
 800182e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001832:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_UART_MspInit+0x8c>)
 8001838:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800183c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_UART_MspInit+0x8c>)
 8001846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_UART_MspInit+0x8c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_UART_MspInit+0x8c>)
 8001856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001874:	2307      	movs	r3, #7
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001880:	f003 ff06 	bl	8005690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40004800 	.word	0x40004800
 8001890:	58024400 	.word	0x58024400
 8001894:	58020c00 	.word	0x58020c00

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f9f6 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Stream0_IRQHandler+0x10>)
 80018fa:	f002 fb47 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24000280 	.word	0x24000280

08001908 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM7_IRQHandler+0x10>)
 800190e:	f006 ff43 	bl	8008798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	24000390 	.word	0x24000390

0800191c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA2_Stream0_IRQHandler+0x10>)
 8001922:	f002 fb33 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000158 	.word	0x24000158

08001930 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800193a:	f008 fd63 	bl	800a404 <__errno>
 800193e:	4602      	mov	r2, r0
 8001940:	2316      	movs	r3, #22
 8001942:	6013      	str	r3, [r2, #0]
	return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe7 	bl	8001930 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001962:	e7fe      	b.n	8001962 <_exit+0x12>

08001964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	4601      	mov	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
	}

return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf1      	blt.n	80019b0 <_write+0x12>
	}
	return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:

int _close(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_isatty>:

int _isatty(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	return 1;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f008 fcc8 	bl	800a404 <__errno>
 8001a74:	4602      	mov	r2, r0
 8001a76:	230c      	movs	r3, #12
 8001a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	24100000 	.word	0x24100000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	240000ac 	.word	0x240000ac
 8001aa8:	240003e8 	.word	0x240003e8

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <SystemInit+0xd8>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <SystemInit+0xd8>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <SystemInit+0xdc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d807      	bhi.n	8001adc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <SystemInit+0xdc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 030f 	bic.w	r3, r3, #15
 8001ad4:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <SystemInit+0xdc>)
 8001ad6:	f043 0303 	orr.w	r3, r3, #3
 8001ada:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <SystemInit+0xe0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2a      	ldr	r2, [pc, #168]	; (8001b8c <SystemInit+0xe0>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <SystemInit+0xe0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <SystemInit+0xe0>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4926      	ldr	r1, [pc, #152]	; (8001b8c <SystemInit+0xe0>)
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <SystemInit+0xe4>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <SystemInit+0xdc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d907      	bls.n	8001b16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <SystemInit+0xdc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 030f 	bic.w	r3, r3, #15
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <SystemInit+0xdc>)
 8001b10:	f043 0303 	orr.w	r3, r3, #3
 8001b14:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <SystemInit+0xe0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <SystemInit+0xe0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <SystemInit+0xe0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <SystemInit+0xe0>)
 8001b2a:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <SystemInit+0xe8>)
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <SystemInit+0xe0>)
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <SystemInit+0xec>)
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <SystemInit+0xe0>)
 8001b36:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <SystemInit+0xf0>)
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <SystemInit+0xe0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <SystemInit+0xe0>)
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <SystemInit+0xf0>)
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <SystemInit+0xe0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <SystemInit+0xe0>)
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <SystemInit+0xf0>)
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <SystemInit+0xe0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <SystemInit+0xe0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <SystemInit+0xe0>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <SystemInit+0xe0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <SystemInit+0xf4>)
 8001b6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SystemInit+0xd8>)
 8001b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	52002000 	.word	0x52002000
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b94:	02020200 	.word	0x02020200
 8001b98:	01ff0000 	.word	0x01ff0000
 8001b9c:	01010280 	.word	0x01010280
 8001ba0:	52004000 	.word	0x52004000

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ba8:	f7ff ff80 	bl	8001aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001bac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bae:	e003      	b.n	8001bb8 <LoopCopyDataInit>

08001bb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001bb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bb6:	3104      	adds	r1, #4

08001bb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bb8:	480a      	ldr	r0, [pc, #40]	; (8001be4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001bbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bc0:	d3f6      	bcc.n	8001bb0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001bc4:	e002      	b.n	8001bcc <LoopFillZerobss>

08001bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001bc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bc8:	f842 3b04 	str.w	r3, [r2], #4

08001bcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001bce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bd0:	d3f9      	bcc.n	8001bc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f008 fc31 	bl	800a438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7fe fd5b 	bl	8000690 <main>
  bx  lr
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001be0:	0800bd74 	.word	0x0800bd74
  ldr  r0, =_sdata
 8001be4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001be8:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 8001bec:	2400007c 	.word	0x2400007c
  ldr  r3, = _ebss
 8001bf0:	240003e8 	.word	0x240003e8

08001bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfe:	2003      	movs	r0, #3
 8001c00:	f001 f88a 	bl	8002d18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c04:	f004 fd06 	bl	8006614 <HAL_RCC_GetSysClockFreq>
 8001c08:	4601      	mov	r1, r0
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_Init+0x68>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_Init+0x6c>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa21 f303 	lsr.w	r3, r1, r3
 8001c20:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_Init+0x68>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_Init+0x6c>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_Init+0x70>)
 8001c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_Init+0x74>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f814 	bl	8001c70 <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e002      	b.n	8001c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c52:	f7ff fc15 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024400 	.word	0x58024400
 8001c64:	0800bc9c 	.word	0x0800bc9c
 8001c68:	2400000c 	.word	0x2400000c
 8001c6c:	24000008 	.word	0x24000008

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_InitTick+0x60>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e021      	b.n	8001cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_InitTick+0x64>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_InitTick+0x60>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 f86f 	bl	8002d7e <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f001 f839 	bl	8002d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x68>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	24000014 	.word	0x24000014
 8001cd4:	24000008 	.word	0x24000008
 8001cd8:	24000010 	.word	0x24000010

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	24000014 	.word	0x24000014
 8001d00:	240003e0 	.word	0x240003e0

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	240003e0 	.word	0x240003e0

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_Delay+0x40>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	24000014 	.word	0x24000014

08001d60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3360      	adds	r3, #96	; 0x60
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	431a      	orrs	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3360      	adds	r3, #96	; 0x60
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	601a      	str	r2, [r3, #0]
  }
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3330      	adds	r3, #48	; 0x30
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	211f      	movs	r1, #31
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 011f 	and.w	r1, r3, #31
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3314      	adds	r3, #20
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0e5b      	lsrs	r3, r3, #25
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	0d1b      	lsrs	r3, r3, #20
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2107      	movs	r1, #7
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	401a      	ands	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0d1b      	lsrs	r3, r3, #20
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0318 	and.w	r3, r3, #24
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f44:	40d9      	lsrs	r1, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	400b      	ands	r3, r1
 8001f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	000fffff 	.word	0x000fffff

08001f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6093      	str	r3, [r2, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	5fffffc0 	.word	0x5fffffc0

08001f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	6fffffc0 	.word	0x6fffffc0

08001fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <LL_ADC_IsEnabled+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_ADC_IsEnabled+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b04      	cmp	r3, #4
 800203c:	d101      	bne.n	8002042 <LL_ADC_REG_IsConversionOngoing+0x18>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b08      	cmp	r3, #8
 8002062:	d101      	bne.n	8002068 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e137      	b.n	8002302 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fa07 	bl	80014b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff67 	bl	8001f8c <LL_ADC_IsDeepPowerDownEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff4d 	bl	8001f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff82 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d113      	bne.n	8002106 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff66 	bl	8001fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020e8:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_ADC_Init+0x294>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	4a88      	ldr	r2, [pc, #544]	; (8002310 <HAL_ADC_Init+0x298>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff66 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff77 	bl	800202a <LL_ADC_REG_IsConversionOngoing>
 800213c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80d2 	bne.w	80022f0 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80ce 	bne.w	80022f0 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff4b 	bl	8002004 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d110      	bne.n	8002196 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002174:	4867      	ldr	r0, [pc, #412]	; (8002314 <HAL_ADC_Init+0x29c>)
 8002176:	f7ff ff45 	bl	8002004 <LL_ADC_IsEnabled>
 800217a:	4604      	mov	r4, r0
 800217c:	4866      	ldr	r0, [pc, #408]	; (8002318 <HAL_ADC_Init+0x2a0>)
 800217e:	f7ff ff41 	bl	8002004 <LL_ADC_IsEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	4323      	orrs	r3, r4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4619      	mov	r1, r3
 8002190:	4862      	ldr	r0, [pc, #392]	; (800231c <HAL_ADC_Init+0x2a4>)
 8002192:	f7ff fde5 	bl	8001d60 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7d5b      	ldrb	r3, [r3, #21]
 800219a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80021a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7f1b      	ldrb	r3, [r3, #28]
 80021ac:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7f1b      	ldrb	r3, [r3, #28]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	3b01      	subs	r3, #1
 80021c0:	045b      	lsls	r3, r3, #17
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_ADC_Init+0x2a8>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff14 	bl	800202a <LL_ADC_REG_IsConversionOngoing>
 8002202:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff21 	bl	8002050 <LL_ADC_INJ_IsConversionOngoing>
 800220e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d14a      	bne.n	80022ac <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d147      	bne.n	80022ac <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7d1b      	ldrb	r3, [r3, #20]
 8002220:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_ADC_Init+0x2ac>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	69b9      	ldr	r1, [r7, #24]
 800223a:	430b      	orrs	r3, r1
 800223c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11b      	bne.n	8002280 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_ADC_Init+0x2b0>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800225c:	3a01      	subs	r2, #1
 800225e:	0411      	lsls	r1, r2, #16
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800226a:	4311      	orrs	r1, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002270:	430a      	orrs	r2, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	e007      	b.n	8002290 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 faee 	bl	8002888 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10c      	bne.n	80022ce <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f023 010f 	bic.w	r1, r3, #15
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	1e5a      	subs	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
 80022cc:	e007      	b.n	80022de <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 020f 	bic.w	r2, r2, #15
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
 80022ee:	e007      	b.n	8002300 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0210 	orr.w	r2, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002300:	7ffb      	ldrb	r3, [r7, #31]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}
 800230a:	bf00      	nop
 800230c:	24000008 	.word	0x24000008
 8002310:	053e2d63 	.word	0x053e2d63
 8002314:	40022000 	.word	0x40022000
 8002318:	40022100 	.word	0x40022100
 800231c:	40022300 	.word	0x40022300
 8002320:	fff0c003 	.word	0xfff0c003
 8002324:	ffffbffc 	.word	0xffffbffc
 8002328:	fc00f81e 	.word	0xfc00f81e

0800232c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b099      	sub	sp, #100	; 0x64
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4aa1      	ldr	r2, [pc, #644]	; (80025cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002346:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x2a>
 8002352:	2302      	movs	r3, #2
 8002354:	e283      	b.n	800285e <HAL_ADC_ConfigChannel+0x532>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe61 	bl	800202a <LL_ADC_REG_IsConversionOngoing>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8268 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002378:	2b00      	cmp	r3, #0
 800237a:	d108      	bne.n	800238e <HAL_ADC_ConfigChannel+0x62>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2201      	movs	r2, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	e00f      	b.n	80023ae <HAL_ADC_ConfigChannel+0x82>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800239c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2201      	movs	r2, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	69d1      	ldr	r1, [r2, #28]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f7ff fd51 	bl	8001e70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe29 	bl	800202a <LL_ADC_REG_IsConversionOngoing>
 80023d8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fe36 	bl	8002050 <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 80a0 	bne.w	800252e <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 809c 	bne.w	800252e <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	461a      	mov	r2, r3
 8002404:	f7ff fd60 	bl	8001ec8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_ADC_ConfigChannel+0x102>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	e00a      	b.n	8002444 <HAL_ADC_ConfigChannel+0x118>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b04      	cmp	r3, #4
 800244c:	d027      	beq.n	800249e <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6919      	ldr	r1, [r3, #16]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245c:	f7ff fcb4 	bl	8001dc8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6919      	ldr	r1, [r3, #16]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	7e5b      	ldrb	r3, [r3, #25]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x14a>
 8002470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002474:	e000      	b.n	8002478 <HAL_ADC_ConfigChannel+0x14c>
 8002476:	2300      	movs	r3, #0
 8002478:	461a      	mov	r2, r3
 800247a:	f7ff fcde 	bl	8001e3a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	7e1b      	ldrb	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x168>
 800248e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002492:	e000      	b.n	8002496 <HAL_ADC_ConfigChannel+0x16a>
 8002494:	2300      	movs	r3, #0
 8002496:	461a      	mov	r2, r3
 8002498:	f7ff fcb6 	bl	8001e08 <LL_ADC_SetDataRightShift>
 800249c:	e047      	b.n	800252e <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d107      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	069b      	lsls	r3, r3, #26
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d107      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d107      	bne.n	800250a <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002508:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002510:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	069b      	lsls	r3, r3, #26
 800251a:	429a      	cmp	r2, r3
 800251c:	d107      	bne.n	800252e <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800252c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fd66 	bl	8002004 <LL_ADC_IsEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8189 	bne.w	8002852 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	461a      	mov	r2, r3
 800254e:	f7ff fce7 	bl	8001f20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	f040 80ff 	bne.w	800275c <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x25a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2b09      	cmp	r3, #9
 800257c:	bf94      	ite	ls
 800257e:	2301      	movls	r3, #1
 8002580:	2300      	movhi	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e012      	b.n	80025ac <HAL_ADC_ConfigChannel+0x280>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	bf94      	ite	ls
 80025a6:	2301      	movls	r3, #1
 80025a8:	2300      	movhi	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d066      	beq.n	800267e <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x2a4>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	069b      	lsls	r3, r3, #26
 80025c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ca:	e010      	b.n	80025ee <HAL_ADC_ConfigChannel+0x2c2>
 80025cc:	47ff0000 	.word	0x47ff0000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	069b      	lsls	r3, r3, #26
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_ADC_ConfigChannel+0x2e2>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	3301      	adds	r3, #1
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	e010      	b.n	8002630 <HAL_ADC_ConfigChannel+0x304>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	ea42 0103 	orr.w	r1, r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x32a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	051b      	lsls	r3, r3, #20
 8002654:	e011      	b.n	800267a <HAL_ADC_ConfigChannel+0x34e>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267a:	430b      	orrs	r3, r1
 800267c:	e069      	b.n	8002752 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002686:	2b00      	cmp	r3, #0
 8002688:	d107      	bne.n	800269a <HAL_ADC_ConfigChannel+0x36e>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	3301      	adds	r3, #1
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002698:	e00e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x38c>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	61fb      	str	r3, [r7, #28]
  return result;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	069b      	lsls	r3, r3, #26
 80026b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x3ac>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	e010      	b.n	80026fa <HAL_ADC_ConfigChannel+0x3ce>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	617b      	str	r3, [r7, #20]
  return result;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	ea42 0103 	orr.w	r1, r2, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x3fa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	3301      	adds	r3, #1
 8002712:	f003 021f 	and.w	r2, r3, #31
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	3b1e      	subs	r3, #30
 800271e:	051b      	lsls	r3, r3, #20
 8002720:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002724:	e014      	b.n	8002750 <HAL_ADC_ConfigChannel+0x424>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	60fb      	str	r3, [r7, #12]
  return result;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	3b1e      	subs	r3, #30
 800274a:	051b      	lsls	r3, r3, #20
 800274c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002750:	430b      	orrs	r3, r1
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff fbb6 	bl	8001ec8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	da76      	bge.n	8002852 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002764:	4840      	ldr	r0, [pc, #256]	; (8002868 <HAL_ADC_ConfigChannel+0x53c>)
 8002766:	f7ff fb21 	bl	8001dac <LL_ADC_GetCommonPathInternalCh>
 800276a:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800276c:	483f      	ldr	r0, [pc, #252]	; (800286c <HAL_ADC_ConfigChannel+0x540>)
 800276e:	f7ff fc49 	bl	8002004 <LL_ADC_IsEnabled>
 8002772:	4604      	mov	r4, r0
 8002774:	483e      	ldr	r0, [pc, #248]	; (8002870 <HAL_ADC_ConfigChannel+0x544>)
 8002776:	f7ff fc45 	bl	8002004 <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	4323      	orrs	r3, r4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d154      	bne.n	800282c <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3b      	ldr	r2, [pc, #236]	; (8002874 <HAL_ADC_ConfigChannel+0x548>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d121      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x4a4>
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d11c      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a35      	ldr	r2, [pc, #212]	; (8002870 <HAL_ADC_ConfigChannel+0x544>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d158      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027a6:	4619      	mov	r1, r3
 80027a8:	482f      	ldr	r0, [pc, #188]	; (8002868 <HAL_ADC_ConfigChannel+0x53c>)
 80027aa:	f7ff faec 	bl	8001d86 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027ae:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_ADC_ConfigChannel+0x54c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	4a31      	ldr	r2, [pc, #196]	; (800287c <HAL_ADC_ConfigChannel+0x550>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ce:	e040      	b.n	8002852 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2a      	ldr	r2, [pc, #168]	; (8002880 <HAL_ADC_ConfigChannel+0x554>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d111      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x4d2>
 80027da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_ADC_ConfigChannel+0x544>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d131      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f4:	4619      	mov	r1, r3
 80027f6:	481c      	ldr	r0, [pc, #112]	; (8002868 <HAL_ADC_ConfigChannel+0x53c>)
 80027f8:	f7ff fac5 	bl	8001d86 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027fc:	e029      	b.n	8002852 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a20      	ldr	r2, [pc, #128]	; (8002884 <HAL_ADC_ConfigChannel+0x558>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d124      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x526>
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11f      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_ADC_ConfigChannel+0x544>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d11a      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002822:	4619      	mov	r1, r3
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <HAL_ADC_ConfigChannel+0x53c>)
 8002826:	f7ff faae 	bl	8001d86 <LL_ADC_SetCommonPathInternalCh>
 800282a:	e012      	b.n	8002852 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800283e:	e008      	b.n	8002852 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800285a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800285e:	4618      	mov	r0, r3
 8002860:	3764      	adds	r7, #100	; 0x64
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop
 8002868:	40022300 	.word	0x40022300
 800286c:	40022000 	.word	0x40022000
 8002870:	40022100 	.word	0x40022100
 8002874:	cb840000 	.word	0xcb840000
 8002878:	24000008 	.word	0x24000008
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	bac04000 	.word	0xbac04000
 8002884:	cfb80000 	.word	0xcfb80000

08002888 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002890:	4b56      	ldr	r3, [pc, #344]	; (80029ec <ADC_ConfigureBoostMode+0x164>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01a      	beq.n	80028d2 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800289c:	f004 f82c 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 80028a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028aa:	d006      	beq.n	80028ba <ADC_ConfigureBoostMode+0x32>
 80028ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028b0:	d00b      	beq.n	80028ca <ADC_ConfigureBoostMode+0x42>
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d000      	beq.n	80028ba <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80028b8:	e05d      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	60fb      	str	r3, [r7, #12]
        break;
 80028c8:	e055      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	60fb      	str	r3, [r7, #12]
        break;
 80028d0:	e051      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028d6:	f004 ff1f 	bl	8007718 <HAL_RCCEx_GetPeriphCLKFreq>
 80028da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028e4:	d02a      	beq.n	800293c <ADC_ConfigureBoostMode+0xb4>
 80028e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028ea:	d813      	bhi.n	8002914 <ADC_ConfigureBoostMode+0x8c>
 80028ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028f0:	d024      	beq.n	800293c <ADC_ConfigureBoostMode+0xb4>
 80028f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028f6:	d806      	bhi.n	8002906 <ADC_ConfigureBoostMode+0x7e>
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fc:	d01e      	beq.n	800293c <ADC_ConfigureBoostMode+0xb4>
 80028fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002902:	d01b      	beq.n	800293c <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002904:	e037      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290a:	d017      	beq.n	800293c <ADC_ConfigureBoostMode+0xb4>
 800290c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002910:	d014      	beq.n	800293c <ADC_ConfigureBoostMode+0xb4>
        break;
 8002912:	e030      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002914:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002918:	d021      	beq.n	800295e <ADC_ConfigureBoostMode+0xd6>
 800291a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800291e:	d806      	bhi.n	800292e <ADC_ConfigureBoostMode+0xa6>
 8002920:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002924:	d013      	beq.n	800294e <ADC_ConfigureBoostMode+0xc6>
 8002926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292a:	d014      	beq.n	8002956 <ADC_ConfigureBoostMode+0xce>
        break;
 800292c:	e023      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800292e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002932:	d018      	beq.n	8002966 <ADC_ConfigureBoostMode+0xde>
 8002934:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002938:	d019      	beq.n	800296e <ADC_ConfigureBoostMode+0xe6>
        break;
 800293a:	e01c      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
        break;
 800294c:	e013      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
        break;
 8002954:	e00f      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	60fb      	str	r3, [r7, #12]
        break;
 800295c:	e00b      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	60fb      	str	r3, [r7, #12]
        break;
 8002964:	e007      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	09db      	lsrs	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]
        break;
 800296c:	e003      	b.n	8002976 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	60fb      	str	r3, [r7, #12]
        break;
 8002974:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <ADC_ConfigureBoostMode+0x168>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d808      	bhi.n	8002996 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002992:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002994:	e025      	b.n	80029e2 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <ADC_ConfigureBoostMode+0x16c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d80a      	bhi.n	80029b4 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b0:	609a      	str	r2, [r3, #8]
}
 80029b2:	e016      	b.n	80029e2 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <ADC_ConfigureBoostMode+0x170>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d80a      	bhi.n	80029d2 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	e007      	b.n	80029e2 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80029e0:	609a      	str	r2, [r3, #8]
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40022300 	.word	0x40022300
 80029f0:	005f5e10 	.word	0x005f5e10
 80029f4:	00bebc20 	.word	0x00bebc20
 80029f8:	017d7840 	.word	0x017d7840

080029fc <LL_ADC_IsEnabled>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <LL_ADC_IsEnabled+0x18>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <LL_ADC_IsEnabled+0x1a>
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b09f      	sub	sp, #124	; 0x7c
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e07c      	b.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002a78:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	e001      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e05f      	b.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffbd 	bl	8002a22 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffb7 	bl	8002a22 <LL_ADC_REG_IsConversionOngoing>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d141      	bne.n	8002b3e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13e      	bne.n	8002b3e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ac2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ade:	4822      	ldr	r0, [pc, #136]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002ae0:	f7ff ff8c 	bl	80029fc <LL_ADC_IsEnabled>
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	4821      	ldr	r0, [pc, #132]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002ae8:	f7ff ff88 	bl	80029fc <LL_ADC_IsEnabled>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4323      	orrs	r3, r4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d12e      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	6892      	ldr	r2, [r2, #8]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b0c:	e021      	b.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b1a:	4813      	ldr	r0, [pc, #76]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002b1c:	f7ff ff6e 	bl	80029fc <LL_ADC_IsEnabled>
 8002b20:	4604      	mov	r4, r0
 8002b22:	4812      	ldr	r0, [pc, #72]	; (8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002b24:	f7ff ff6a 	bl	80029fc <LL_ADC_IsEnabled>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d110      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b3c:	e009      	b.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b50:	e000      	b.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	377c      	adds	r7, #124	; 0x7c
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	40022100 	.word	0x40022100
 8002b70:	40022300 	.word	0x40022300
 8002b74:	fffff0e0 	.word	0xfffff0e0

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	05fa0000 	.word	0x05fa0000

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <__NVIC_EnableIRQ+0x38>)
 8002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	; (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
         );
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce4:	d301      	bcc.n	8002cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00f      	b.n	8002d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <SysTick_Config+0x40>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f7ff ff8e 	bl	8002c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <SysTick_Config+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <SysTick_Config+0x40>)
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff29 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff40 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff90 	bl	8002c6c <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5f 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff33 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa4 	bl	8002cd4 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e014      	b.n	8002dd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d105      	bne.n	8002dbe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe fbf5 	bl	80015a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	795b      	ldrb	r3, [r3, #5]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_DAC_Start+0x16>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e040      	b.n	8002e72 <HAL_DAC_Start+0x98>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11d      	bne.n	8002e64 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	e014      	b.n	8002e64 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0202 	orr.w	r2, r2, #2
 8002e62:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	795b      	ldrb	r3, [r3, #5]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_DAC_Start_DMA+0x1e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e09e      	b.n	8002fdc <HAL_DAC_Start_DMA+0x15c>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d12a      	bne.n	8002f06 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	; (8002fe4 <HAL_DAC_Start_DMA+0x164>)
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <HAL_DAC_Start_DMA+0x168>)
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_DAC_Start_DMA+0x16c>)
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d009      	beq.n	8002ef2 <HAL_DAC_Start_DMA+0x72>
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d00c      	beq.n	8002efc <HAL_DAC_Start_DMA+0x7c>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d000      	beq.n	8002ee8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002ee6:	e039      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3308      	adds	r3, #8
 8002eee:	613b      	str	r3, [r7, #16]
        break;
 8002ef0:	e034      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	613b      	str	r3, [r7, #16]
        break;
 8002efa:	e02f      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3310      	adds	r3, #16
 8002f02:	613b      	str	r3, [r7, #16]
        break;
 8002f04:	e02a      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <HAL_DAC_Start_DMA+0x170>)
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4a38      	ldr	r2, [pc, #224]	; (8002ff4 <HAL_DAC_Start_DMA+0x174>)
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4a37      	ldr	r2, [pc, #220]	; (8002ff8 <HAL_DAC_Start_DMA+0x178>)
 8002f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d009      	beq.n	8002f48 <HAL_DAC_Start_DMA+0xc8>
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d00c      	beq.n	8002f52 <HAL_DAC_Start_DMA+0xd2>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d000      	beq.n	8002f3e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002f3c:	e00e      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3314      	adds	r3, #20
 8002f44:	613b      	str	r3, [r7, #16]
        break;
 8002f46:	e009      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	613b      	str	r3, [r7, #16]
        break;
 8002f50:	e004      	b.n	8002f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	331c      	adds	r3, #28
 8002f58:	613b      	str	r3, [r7, #16]
        break;
 8002f5a:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d111      	bne.n	8002f86 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f70:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6898      	ldr	r0, [r3, #8]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	f000 fd9c 	bl	8003ab8 <HAL_DMA_Start_IT>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]
 8002f84:	e010      	b.n	8002fa8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68d8      	ldr	r0, [r3, #12]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	f000 fd8a 	bl	8003ab8 <HAL_DMA_Start_IT>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10c      	bne.n	8002fce <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e005      	b.n	8002fda <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	08003285 	.word	0x08003285
 8002fe8:	080032a7 	.word	0x080032a7
 8002fec:	080032c3 	.word	0x080032c3
 8002ff0:	0800332d 	.word	0x0800332d
 8002ff4:	0800334f 	.word	0x0800334f
 8002ff8:	0800336b 	.word	0x0800336b

08002ffc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	795b      	ldrb	r3, [r3, #5]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_DAC_ConfigChannel+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e11d      	b.n	8003278 <HAL_DAC_ConfigChannel+0x254>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d174      	bne.n	800313a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003050:	f7fe fe58 	bl	8001d04 <HAL_GetTick>
 8003054:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d134      	bne.n	80030c6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800305c:	e011      	b.n	8003082 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800305e:	f7fe fe51 	bl	8001d04 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d90a      	bls.n	8003082 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f043 0208 	orr.w	r2, r3, #8
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2203      	movs	r2, #3
 800307c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0fa      	b.n	8003278 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003088:	4b7d      	ldr	r3, [pc, #500]	; (8003280 <HAL_DAC_ConfigChannel+0x25c>)
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e6      	bne.n	800305e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003090:	2001      	movs	r0, #1
 8003092:	f7fe fe43 	bl	8001d1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	6992      	ldr	r2, [r2, #24]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
 80030a0:	e01e      	b.n	80030e0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030a2:	f7fe fe2f 	bl	8001d04 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d90a      	bls.n	80030c6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f043 0208 	orr.w	r2, r3, #8
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2203      	movs	r2, #3
 80030c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0d8      	b.n	8003278 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dbe8      	blt.n	80030a2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7fe fe23 	bl	8001d1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	6992      	ldr	r2, [r2, #24]
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	ea02 0103 	and.w	r1, r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	21ff      	movs	r1, #255	; 0xff
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	ea02 0103 	and.w	r1, r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11d      	bne.n	800317e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	221f      	movs	r2, #31
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4013      	ands	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2207      	movs	r2, #7
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4013      	ands	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e00f      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d102      	bne.n	80031b6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e008      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80031be:	2301      	movs	r3, #1
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e001      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	400a      	ands	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4013      	ands	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	22c0      	movs	r2, #192	; 0xc0
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43da      	mvns	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20008000 	.word	0x20008000

08003284 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7fd ff92 	bl	80011bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	711a      	strb	r2, [r3, #4]
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff fea1 	bl	8002ffc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff fe97 	bl	8003010 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	711a      	strb	r2, [r3, #4]
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff ffd8 	bl	80032f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	711a      	strb	r2, [r3, #4]
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff ffd1 	bl	8003304 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f043 0204 	orr.w	r2, r3, #4
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff ffc7 	bl	8003318 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	711a      	strb	r2, [r3, #4]
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7fe fcb0 	bl	8001d04 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e37f      	b.n	8003ab0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_DMA_Init+0x1b8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d04a      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a65      	ldr	r2, [pc, #404]	; (8003554 <HAL_DMA_Init+0x1bc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d045      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a63      	ldr	r2, [pc, #396]	; (8003558 <HAL_DMA_Init+0x1c0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d040      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a62      	ldr	r2, [pc, #392]	; (800355c <HAL_DMA_Init+0x1c4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d03b      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a60      	ldr	r2, [pc, #384]	; (8003560 <HAL_DMA_Init+0x1c8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d036      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5f      	ldr	r2, [pc, #380]	; (8003564 <HAL_DMA_Init+0x1cc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d031      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_DMA_Init+0x1d0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02c      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5c      	ldr	r2, [pc, #368]	; (800356c <HAL_DMA_Init+0x1d4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d027      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5a      	ldr	r2, [pc, #360]	; (8003570 <HAL_DMA_Init+0x1d8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a59      	ldr	r2, [pc, #356]	; (8003574 <HAL_DMA_Init+0x1dc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01d      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a57      	ldr	r2, [pc, #348]	; (8003578 <HAL_DMA_Init+0x1e0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_DMA_Init+0x1e4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a54      	ldr	r2, [pc, #336]	; (8003580 <HAL_DMA_Init+0x1e8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a53      	ldr	r2, [pc, #332]	; (8003584 <HAL_DMA_Init+0x1ec>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a51      	ldr	r2, [pc, #324]	; (8003588 <HAL_DMA_Init+0x1f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a50      	ldr	r2, [pc, #320]	; (800358c <HAL_DMA_Init+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_DMA_Init+0xbc>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_DMA_Init+0xbe>
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 813c 	beq.w	80036d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a37      	ldr	r2, [pc, #220]	; (8003550 <HAL_DMA_Init+0x1b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a36      	ldr	r2, [pc, #216]	; (8003554 <HAL_DMA_Init+0x1bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d045      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a34      	ldr	r2, [pc, #208]	; (8003558 <HAL_DMA_Init+0x1c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <HAL_DMA_Init+0x174>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <HAL_DMA_Init+0x1c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d03b      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a31      	ldr	r2, [pc, #196]	; (8003560 <HAL_DMA_Init+0x1c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d036      	beq.n	800350c <HAL_DMA_Init+0x174>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a30      	ldr	r2, [pc, #192]	; (8003564 <HAL_DMA_Init+0x1cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d031      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2e      	ldr	r2, [pc, #184]	; (8003568 <HAL_DMA_Init+0x1d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02c      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2d      	ldr	r2, [pc, #180]	; (800356c <HAL_DMA_Init+0x1d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d027      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <HAL_DMA_Init+0x1d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <HAL_DMA_Init+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a28      	ldr	r2, [pc, #160]	; (8003578 <HAL_DMA_Init+0x1e0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_DMA_Init+0x1e4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <HAL_DMA_Init+0x1e8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a24      	ldr	r2, [pc, #144]	; (8003584 <HAL_DMA_Init+0x1ec>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <HAL_DMA_Init+0x1f0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <HAL_DMA_Init+0x1f4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <HAL_DMA_Init+0x186>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e007      	b.n	800352e <HAL_DMA_Init+0x196>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800352e:	e02f      	b.n	8003590 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003530:	f7fe fbe8 	bl	8001d04 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d928      	bls.n	8003590 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e2af      	b.n	8003ab0 <HAL_DMA_Init+0x718>
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1c8      	bne.n	8003530 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_DMA_Init+0x3e0>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d107      	bne.n	80035f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4313      	orrs	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b28      	cmp	r3, #40	; 0x28
 80035fa:	d903      	bls.n	8003604 <HAL_DMA_Init+0x26c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b2e      	cmp	r3, #46	; 0x2e
 8003602:	d91f      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b3e      	cmp	r3, #62	; 0x3e
 800360a:	d903      	bls.n	8003614 <HAL_DMA_Init+0x27c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b42      	cmp	r3, #66	; 0x42
 8003612:	d917      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b46      	cmp	r3, #70	; 0x46
 800361a:	d903      	bls.n	8003624 <HAL_DMA_Init+0x28c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b48      	cmp	r3, #72	; 0x48
 8003622:	d90f      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b4e      	cmp	r3, #78	; 0x4e
 800362a:	d903      	bls.n	8003634 <HAL_DMA_Init+0x29c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b52      	cmp	r3, #82	; 0x52
 8003632:	d907      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b73      	cmp	r3, #115	; 0x73
 800363a:	d905      	bls.n	8003648 <HAL_DMA_Init+0x2b0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b77      	cmp	r3, #119	; 0x77
 8003642:	d801      	bhi.n	8003648 <HAL_DMA_Init+0x2b0>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_DMA_Init+0x2b2>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003654:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0307 	bic.w	r3, r3, #7
 800366c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b04      	cmp	r3, #4
 800367e:	d117      	bne.n	80036b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f001 fe72 	bl	800537c <DMA_CheckFifoParam>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e1ff      	b.n	8003ab0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f001 fdad 	bl	8005218 <DMA_CalcBaseAndBitshift>
 80036be:	4603      	mov	r3, r0
 80036c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	223f      	movs	r2, #63	; 0x3f
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	e0fe      	b.n	80038d2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a28      	ldr	r2, [pc, #160]	; (800377c <HAL_DMA_Init+0x3e4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04a      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a27      	ldr	r2, [pc, #156]	; (8003780 <HAL_DMA_Init+0x3e8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d045      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a25      	ldr	r2, [pc, #148]	; (8003784 <HAL_DMA_Init+0x3ec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d040      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a24      	ldr	r2, [pc, #144]	; (8003788 <HAL_DMA_Init+0x3f0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <HAL_DMA_Init+0x3f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d036      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <HAL_DMA_Init+0x3f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d031      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_DMA_Init+0x3fc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_DMA_Init+0x400>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d027      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_DMA_Init+0x404>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_DMA_Init+0x408>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_DMA_Init+0x40c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_DMA_Init+0x410>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_DMA_Init+0x414>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_DMA_Init+0x418>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <HAL_DMA_Init+0x41c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <HAL_DMA_Init+0x420>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d123      	bne.n	80037bc <HAL_DMA_Init+0x424>
 8003774:	2301      	movs	r3, #1
 8003776:	e022      	b.n	80037be <HAL_DMA_Init+0x426>
 8003778:	fe10803f 	.word	0xfe10803f
 800377c:	48022c08 	.word	0x48022c08
 8003780:	48022c1c 	.word	0x48022c1c
 8003784:	48022c30 	.word	0x48022c30
 8003788:	48022c44 	.word	0x48022c44
 800378c:	48022c58 	.word	0x48022c58
 8003790:	48022c6c 	.word	0x48022c6c
 8003794:	48022c80 	.word	0x48022c80
 8003798:	48022c94 	.word	0x48022c94
 800379c:	58025408 	.word	0x58025408
 80037a0:	5802541c 	.word	0x5802541c
 80037a4:	58025430 	.word	0x58025430
 80037a8:	58025444 	.word	0x58025444
 80037ac:	58025458 	.word	0x58025458
 80037b0:	5802546c 	.word	0x5802546c
 80037b4:	58025480 	.word	0x58025480
 80037b8:	58025494 	.word	0x58025494
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d07e      	beq.n	80038c0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <HAL_DMA_Init+0x630>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d021      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7e      	ldr	r2, [pc, #504]	; (80039cc <HAL_DMA_Init+0x634>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01c      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <HAL_DMA_Init+0x638>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d017      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_DMA_Init+0x63c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d012      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_DMA_Init+0x640>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00d      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a78      	ldr	r2, [pc, #480]	; (80039dc <HAL_DMA_Init+0x644>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a77      	ldr	r2, [pc, #476]	; (80039e0 <HAL_DMA_Init+0x648>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <HAL_DMA_Init+0x478>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a75      	ldr	r2, [pc, #468]	; (80039e4 <HAL_DMA_Init+0x64c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4b6e      	ldr	r3, [pc, #440]	; (80039e8 <HAL_DMA_Init+0x650>)
 800382e:	4013      	ands	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d008      	beq.n	800384c <HAL_DMA_Init+0x4b4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d102      	bne.n	8003848 <HAL_DMA_Init+0x4b0>
 8003842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003846:	e002      	b.n	800384e <HAL_DMA_Init+0x4b6>
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_DMA_Init+0x4b6>
 800384c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68d2      	ldr	r2, [r2, #12]
 8003852:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800385c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800386c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003874:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800387c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_DMA_Init+0x654>)
 8003894:	4413      	add	r3, r2
 8003896:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <HAL_DMA_Init+0x658>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f001 fcb7 	bl	8005218 <DMA_CalcBaseAndBitshift>
 80038aa:	4603      	mov	r3, r0
 80038ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2201      	movs	r2, #1
 80038b8:	409a      	lsls	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e008      	b.n	80038d2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2203      	movs	r2, #3
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0ee      	b.n	8003ab0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a47      	ldr	r2, [pc, #284]	; (80039f4 <HAL_DMA_Init+0x65c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d072      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <HAL_DMA_Init+0x660>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d06d      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a44      	ldr	r2, [pc, #272]	; (80039fc <HAL_DMA_Init+0x664>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d068      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a42      	ldr	r2, [pc, #264]	; (8003a00 <HAL_DMA_Init+0x668>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d063      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a41      	ldr	r2, [pc, #260]	; (8003a04 <HAL_DMA_Init+0x66c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d05e      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <HAL_DMA_Init+0x670>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d059      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <HAL_DMA_Init+0x674>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d054      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <HAL_DMA_Init+0x678>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04f      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <HAL_DMA_Init+0x67c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04a      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <HAL_DMA_Init+0x680>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d045      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a38      	ldr	r2, [pc, #224]	; (8003a1c <HAL_DMA_Init+0x684>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d040      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a36      	ldr	r2, [pc, #216]	; (8003a20 <HAL_DMA_Init+0x688>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d03b      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a35      	ldr	r2, [pc, #212]	; (8003a24 <HAL_DMA_Init+0x68c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d036      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <HAL_DMA_Init+0x690>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d031      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a32      	ldr	r2, [pc, #200]	; (8003a2c <HAL_DMA_Init+0x694>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02c      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <HAL_DMA_Init+0x698>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d027      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_DMA_Init+0x630>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_DMA_Init+0x634>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_DMA_Init+0x638>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d018      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_DMA_Init+0x63c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_DMA_Init+0x640>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <HAL_DMA_Init+0x644>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <HAL_DMA_Init+0x648>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_Init+0x62a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <HAL_DMA_Init+0x64c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d138      	bne.n	8003a34 <HAL_DMA_Init+0x69c>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e037      	b.n	8003a36 <HAL_DMA_Init+0x69e>
 80039c6:	bf00      	nop
 80039c8:	58025408 	.word	0x58025408
 80039cc:	5802541c 	.word	0x5802541c
 80039d0:	58025430 	.word	0x58025430
 80039d4:	58025444 	.word	0x58025444
 80039d8:	58025458 	.word	0x58025458
 80039dc:	5802546c 	.word	0x5802546c
 80039e0:	58025480 	.word	0x58025480
 80039e4:	58025494 	.word	0x58025494
 80039e8:	fffe000f 	.word	0xfffe000f
 80039ec:	a7fdabf8 	.word	0xa7fdabf8
 80039f0:	cccccccd 	.word	0xcccccccd
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d032      	beq.n	8003aa0 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f001 fd1a 	bl	8005474 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d102      	bne.n	8003a4e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a62:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_DMA_Init+0x6f6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d80c      	bhi.n	8003a8e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 fd97 	bl	80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	e008      	b.n	8003aa0 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e226      	b.n	8003f22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_DMA_Start_IT+0x2a>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e21f      	b.n	8003f22 <HAL_DMA_Start_IT+0x46a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 820a 	bne.w	8003f0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a68      	ldr	r2, [pc, #416]	; (8003cac <HAL_DMA_Start_IT+0x1f4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a66      	ldr	r2, [pc, #408]	; (8003cb0 <HAL_DMA_Start_IT+0x1f8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a65      	ldr	r2, [pc, #404]	; (8003cb4 <HAL_DMA_Start_IT+0x1fc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a63      	ldr	r2, [pc, #396]	; (8003cb8 <HAL_DMA_Start_IT+0x200>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a62      	ldr	r2, [pc, #392]	; (8003cbc <HAL_DMA_Start_IT+0x204>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a60      	ldr	r2, [pc, #384]	; (8003cc0 <HAL_DMA_Start_IT+0x208>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5f      	ldr	r2, [pc, #380]	; (8003cc4 <HAL_DMA_Start_IT+0x20c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5d      	ldr	r2, [pc, #372]	; (8003cc8 <HAL_DMA_Start_IT+0x210>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ccc <HAL_DMA_Start_IT+0x214>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5a      	ldr	r2, [pc, #360]	; (8003cd0 <HAL_DMA_Start_IT+0x218>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a59      	ldr	r2, [pc, #356]	; (8003cd4 <HAL_DMA_Start_IT+0x21c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_DMA_Start_IT+0x220>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a56      	ldr	r2, [pc, #344]	; (8003cdc <HAL_DMA_Start_IT+0x224>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a54      	ldr	r2, [pc, #336]	; (8003ce0 <HAL_DMA_Start_IT+0x228>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a53      	ldr	r2, [pc, #332]	; (8003ce4 <HAL_DMA_Start_IT+0x22c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a51      	ldr	r2, [pc, #324]	; (8003ce8 <HAL_DMA_Start_IT+0x230>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <HAL_DMA_Start_IT+0x100>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e007      	b.n	8003bc8 <HAL_DMA_Start_IT+0x110>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f001 f93e 	bl	8004e50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_DMA_Start_IT+0x1f4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d04a      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a33      	ldr	r2, [pc, #204]	; (8003cb0 <HAL_DMA_Start_IT+0x1f8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d045      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_DMA_Start_IT+0x1fc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d040      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <HAL_DMA_Start_IT+0x200>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d03b      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2e      	ldr	r2, [pc, #184]	; (8003cbc <HAL_DMA_Start_IT+0x204>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d036      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2d      	ldr	r2, [pc, #180]	; (8003cc0 <HAL_DMA_Start_IT+0x208>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d031      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <HAL_DMA_Start_IT+0x20c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02c      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <HAL_DMA_Start_IT+0x210>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d027      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a28      	ldr	r2, [pc, #160]	; (8003ccc <HAL_DMA_Start_IT+0x214>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d022      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <HAL_DMA_Start_IT+0x218>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d01d      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <HAL_DMA_Start_IT+0x21c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d018      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <HAL_DMA_Start_IT+0x220>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_DMA_Start_IT+0x224>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <HAL_DMA_Start_IT+0x228>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_DMA_Start_IT+0x22c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_Start_IT+0x1bc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_DMA_Start_IT+0x230>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_DMA_Start_IT+0x1c0>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_DMA_Start_IT+0x1c2>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d036      	beq.n	8003cec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 021e 	bic.w	r2, r3, #30
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0216 	orr.w	r2, r2, #22
 8003c90:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03e      	beq.n	8003d18 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0208 	orr.w	r2, r2, #8
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e035      	b.n	8003d18 <HAL_DMA_Start_IT+0x260>
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 020e 	bic.w	r2, r3, #14
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 020a 	orr.w	r2, r2, #10
 8003cfe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0204 	orr.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a83      	ldr	r2, [pc, #524]	; (8003f2c <HAL_DMA_Start_IT+0x474>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d072      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a82      	ldr	r2, [pc, #520]	; (8003f30 <HAL_DMA_Start_IT+0x478>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d06d      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a80      	ldr	r2, [pc, #512]	; (8003f34 <HAL_DMA_Start_IT+0x47c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d068      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7f      	ldr	r2, [pc, #508]	; (8003f38 <HAL_DMA_Start_IT+0x480>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d063      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7d      	ldr	r2, [pc, #500]	; (8003f3c <HAL_DMA_Start_IT+0x484>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d05e      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7c      	ldr	r2, [pc, #496]	; (8003f40 <HAL_DMA_Start_IT+0x488>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d059      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a7a      	ldr	r2, [pc, #488]	; (8003f44 <HAL_DMA_Start_IT+0x48c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d054      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a79      	ldr	r2, [pc, #484]	; (8003f48 <HAL_DMA_Start_IT+0x490>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d04f      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <HAL_DMA_Start_IT+0x494>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04a      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a76      	ldr	r2, [pc, #472]	; (8003f50 <HAL_DMA_Start_IT+0x498>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d045      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a74      	ldr	r2, [pc, #464]	; (8003f54 <HAL_DMA_Start_IT+0x49c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d040      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a73      	ldr	r2, [pc, #460]	; (8003f58 <HAL_DMA_Start_IT+0x4a0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d03b      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a71      	ldr	r2, [pc, #452]	; (8003f5c <HAL_DMA_Start_IT+0x4a4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d036      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a70      	ldr	r2, [pc, #448]	; (8003f60 <HAL_DMA_Start_IT+0x4a8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d031      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <HAL_DMA_Start_IT+0x4ac>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6d      	ldr	r2, [pc, #436]	; (8003f68 <HAL_DMA_Start_IT+0x4b0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d027      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6b      	ldr	r2, [pc, #428]	; (8003f6c <HAL_DMA_Start_IT+0x4b4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d022      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6a      	ldr	r2, [pc, #424]	; (8003f70 <HAL_DMA_Start_IT+0x4b8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d01d      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a68      	ldr	r2, [pc, #416]	; (8003f74 <HAL_DMA_Start_IT+0x4bc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a67      	ldr	r2, [pc, #412]	; (8003f78 <HAL_DMA_Start_IT+0x4c0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a65      	ldr	r2, [pc, #404]	; (8003f7c <HAL_DMA_Start_IT+0x4c4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a64      	ldr	r2, [pc, #400]	; (8003f80 <HAL_DMA_Start_IT+0x4c8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a62      	ldr	r2, [pc, #392]	; (8003f84 <HAL_DMA_Start_IT+0x4cc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_DMA_Start_IT+0x350>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a61      	ldr	r2, [pc, #388]	; (8003f88 <HAL_DMA_Start_IT+0x4d0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_DMA_Start_IT+0x354>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_DMA_Start_IT+0x356>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01a      	beq.n	8003e48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a37      	ldr	r2, [pc, #220]	; (8003f2c <HAL_DMA_Start_IT+0x474>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04a      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <HAL_DMA_Start_IT+0x478>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d045      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_DMA_Start_IT+0x47c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d040      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a33      	ldr	r2, [pc, #204]	; (8003f38 <HAL_DMA_Start_IT+0x480>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d03b      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a31      	ldr	r2, [pc, #196]	; (8003f3c <HAL_DMA_Start_IT+0x484>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d036      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <HAL_DMA_Start_IT+0x488>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d031      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <HAL_DMA_Start_IT+0x48c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <HAL_DMA_Start_IT+0x490>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d027      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2b      	ldr	r2, [pc, #172]	; (8003f4c <HAL_DMA_Start_IT+0x494>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <HAL_DMA_Start_IT+0x498>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <HAL_DMA_Start_IT+0x49c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <HAL_DMA_Start_IT+0x4a0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <HAL_DMA_Start_IT+0x4a4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a24      	ldr	r2, [pc, #144]	; (8003f60 <HAL_DMA_Start_IT+0x4a8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <HAL_DMA_Start_IT+0x4ac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x430>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <HAL_DMA_Start_IT+0x4b0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d108      	bne.n	8003efa <HAL_DMA_Start_IT+0x442>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e012      	b.n	8003f20 <HAL_DMA_Start_IT+0x468>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e009      	b.n	8003f20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8
 8003f6c:	58025408 	.word	0x58025408
 8003f70:	5802541c 	.word	0x5802541c
 8003f74:	58025430 	.word	0x58025430
 8003f78:	58025444 	.word	0x58025444
 8003f7c:	58025458 	.word	0x58025458
 8003f80:	5802546c 	.word	0x5802546c
 8003f84:	58025480 	.word	0x58025480
 8003f88:	58025494 	.word	0x58025494

08003f8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f98:	4b67      	ldr	r3, [pc, #412]	; (8004138 <HAL_DMA_IRQHandler+0x1ac>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a67      	ldr	r2, [pc, #412]	; (800413c <HAL_DMA_IRQHandler+0x1b0>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5f      	ldr	r2, [pc, #380]	; (8004140 <HAL_DMA_IRQHandler+0x1b4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04a      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5d      	ldr	r2, [pc, #372]	; (8004144 <HAL_DMA_IRQHandler+0x1b8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d045      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a5c      	ldr	r2, [pc, #368]	; (8004148 <HAL_DMA_IRQHandler+0x1bc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d040      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a5a      	ldr	r2, [pc, #360]	; (800414c <HAL_DMA_IRQHandler+0x1c0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d03b      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a59      	ldr	r2, [pc, #356]	; (8004150 <HAL_DMA_IRQHandler+0x1c4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d036      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a57      	ldr	r2, [pc, #348]	; (8004154 <HAL_DMA_IRQHandler+0x1c8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d031      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a56      	ldr	r2, [pc, #344]	; (8004158 <HAL_DMA_IRQHandler+0x1cc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d02c      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a54      	ldr	r2, [pc, #336]	; (800415c <HAL_DMA_IRQHandler+0x1d0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d027      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a53      	ldr	r2, [pc, #332]	; (8004160 <HAL_DMA_IRQHandler+0x1d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a51      	ldr	r2, [pc, #324]	; (8004164 <HAL_DMA_IRQHandler+0x1d8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a50      	ldr	r2, [pc, #320]	; (8004168 <HAL_DMA_IRQHandler+0x1dc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a4e      	ldr	r2, [pc, #312]	; (800416c <HAL_DMA_IRQHandler+0x1e0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a4d      	ldr	r2, [pc, #308]	; (8004170 <HAL_DMA_IRQHandler+0x1e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <HAL_DMA_IRQHandler+0x1e8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_DMA_IRQHandler+0x1ec>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_DMA_IRQHandler+0xd2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a48      	ldr	r2, [pc, #288]	; (800417c <HAL_DMA_IRQHandler+0x1f0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <HAL_DMA_IRQHandler+0xd6>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_DMA_IRQHandler+0xd8>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 842b 	beq.w	80048c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2208      	movs	r2, #8
 8004074:	409a      	lsls	r2, r3
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a2 	beq.w	80041c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <HAL_DMA_IRQHandler+0x1b4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d04a      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <HAL_DMA_IRQHandler+0x1b8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d045      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_DMA_IRQHandler+0x1bc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d040      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_DMA_IRQHandler+0x1c0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d03b      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_DMA_IRQHandler+0x1c4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d036      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_DMA_IRQHandler+0x1c8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d031      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	; (8004158 <HAL_DMA_IRQHandler+0x1cc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d02c      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a24      	ldr	r2, [pc, #144]	; (800415c <HAL_DMA_IRQHandler+0x1d0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d027      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_DMA_IRQHandler+0x1d4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d022      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <HAL_DMA_IRQHandler+0x1d8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01d      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_DMA_IRQHandler+0x1dc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d018      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_DMA_IRQHandler+0x1e0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_DMA_IRQHandler+0x1e4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_DMA_IRQHandler+0x1e8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_DMA_IRQHandler+0x1ec>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_DMA_IRQHandler+0x194>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_DMA_IRQHandler+0x1f0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d12f      	bne.n	8004180 <HAL_DMA_IRQHandler+0x1f4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e02e      	b.n	8004194 <HAL_DMA_IRQHandler+0x208>
 8004136:	bf00      	nop
 8004138:	24000008 	.word	0x24000008
 800413c:	1b4e81b5 	.word	0x1b4e81b5
 8004140:	40020010 	.word	0x40020010
 8004144:	40020028 	.word	0x40020028
 8004148:	40020040 	.word	0x40020040
 800414c:	40020058 	.word	0x40020058
 8004150:	40020070 	.word	0x40020070
 8004154:	40020088 	.word	0x40020088
 8004158:	400200a0 	.word	0x400200a0
 800415c:	400200b8 	.word	0x400200b8
 8004160:	40020410 	.word	0x40020410
 8004164:	40020428 	.word	0x40020428
 8004168:	40020440 	.word	0x40020440
 800416c:	40020458 	.word	0x40020458
 8004170:	40020470 	.word	0x40020470
 8004174:	40020488 	.word	0x40020488
 8004178:	400204a0 	.word	0x400204a0
 800417c:	400204b8 	.word	0x400204b8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2208      	movs	r2, #8
 80041b2:	409a      	lsls	r2, r3
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d06e      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a69      	ldr	r2, [pc, #420]	; (8004384 <HAL_DMA_IRQHandler+0x3f8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d04a      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a67      	ldr	r2, [pc, #412]	; (8004388 <HAL_DMA_IRQHandler+0x3fc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d045      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a66      	ldr	r2, [pc, #408]	; (800438c <HAL_DMA_IRQHandler+0x400>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d040      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a64      	ldr	r2, [pc, #400]	; (8004390 <HAL_DMA_IRQHandler+0x404>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d03b      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a63      	ldr	r2, [pc, #396]	; (8004394 <HAL_DMA_IRQHandler+0x408>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d036      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a61      	ldr	r2, [pc, #388]	; (8004398 <HAL_DMA_IRQHandler+0x40c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d031      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a60      	ldr	r2, [pc, #384]	; (800439c <HAL_DMA_IRQHandler+0x410>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d02c      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5e      	ldr	r2, [pc, #376]	; (80043a0 <HAL_DMA_IRQHandler+0x414>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d027      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a5d      	ldr	r2, [pc, #372]	; (80043a4 <HAL_DMA_IRQHandler+0x418>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d022      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5b      	ldr	r2, [pc, #364]	; (80043a8 <HAL_DMA_IRQHandler+0x41c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01d      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5a      	ldr	r2, [pc, #360]	; (80043ac <HAL_DMA_IRQHandler+0x420>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d018      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_DMA_IRQHandler+0x424>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a57      	ldr	r2, [pc, #348]	; (80043b4 <HAL_DMA_IRQHandler+0x428>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00e      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a55      	ldr	r2, [pc, #340]	; (80043b8 <HAL_DMA_IRQHandler+0x42c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_DMA_IRQHandler+0x430>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ee>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a52      	ldr	r2, [pc, #328]	; (80043c0 <HAL_DMA_IRQHandler+0x434>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10a      	bne.n	8004290 <HAL_DMA_IRQHandler+0x304>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e003      	b.n	8004298 <HAL_DMA_IRQHandler+0x30c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2201      	movs	r2, #1
 80042a6:	409a      	lsls	r2, r3
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f043 0202 	orr.w	r2, r3, #2
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2204      	movs	r2, #4
 80042c2:	409a      	lsls	r2, r3
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 808f 	beq.w	80043ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <HAL_DMA_IRQHandler+0x3f8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_DMA_IRQHandler+0x3fc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <HAL_DMA_IRQHandler+0x400>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a27      	ldr	r2, [pc, #156]	; (8004390 <HAL_DMA_IRQHandler+0x404>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a26      	ldr	r2, [pc, #152]	; (8004394 <HAL_DMA_IRQHandler+0x408>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_DMA_IRQHandler+0x40c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a23      	ldr	r2, [pc, #140]	; (800439c <HAL_DMA_IRQHandler+0x410>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <HAL_DMA_IRQHandler+0x414>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_DMA_IRQHandler+0x418>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <HAL_DMA_IRQHandler+0x41c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <HAL_DMA_IRQHandler+0x420>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <HAL_DMA_IRQHandler+0x424>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1a      	ldr	r2, [pc, #104]	; (80043b4 <HAL_DMA_IRQHandler+0x428>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_DMA_IRQHandler+0x42c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <HAL_DMA_IRQHandler+0x430>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_IRQHandler+0x3e2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_DMA_IRQHandler+0x434>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d12a      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x438>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e023      	b.n	80043cc <HAL_DMA_IRQHandler+0x440>
 8004384:	40020010 	.word	0x40020010
 8004388:	40020028 	.word	0x40020028
 800438c:	40020040 	.word	0x40020040
 8004390:	40020058 	.word	0x40020058
 8004394:	40020070 	.word	0x40020070
 8004398:	40020088 	.word	0x40020088
 800439c:	400200a0 	.word	0x400200a0
 80043a0:	400200b8 	.word	0x400200b8
 80043a4:	40020410 	.word	0x40020410
 80043a8:	40020428 	.word	0x40020428
 80043ac:	40020440 	.word	0x40020440
 80043b0:	40020458 	.word	0x40020458
 80043b4:	40020470 	.word	0x40020470
 80043b8:	40020488 	.word	0x40020488
 80043bc:	400204a0 	.word	0x400204a0
 80043c0:	400204b8 	.word	0x400204b8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00d      	beq.n	80043ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2204      	movs	r2, #4
 80043da:	409a      	lsls	r2, r3
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0204 	orr.w	r2, r3, #4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	2210      	movs	r2, #16
 80043f6:	409a      	lsls	r2, r3
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a6 	beq.w	800454e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a85      	ldr	r2, [pc, #532]	; (800461c <HAL_DMA_IRQHandler+0x690>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d04a      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a83      	ldr	r2, [pc, #524]	; (8004620 <HAL_DMA_IRQHandler+0x694>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d045      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a82      	ldr	r2, [pc, #520]	; (8004624 <HAL_DMA_IRQHandler+0x698>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d040      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a80      	ldr	r2, [pc, #512]	; (8004628 <HAL_DMA_IRQHandler+0x69c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d03b      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7f      	ldr	r2, [pc, #508]	; (800462c <HAL_DMA_IRQHandler+0x6a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d036      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a7d      	ldr	r2, [pc, #500]	; (8004630 <HAL_DMA_IRQHandler+0x6a4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d031      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7c      	ldr	r2, [pc, #496]	; (8004634 <HAL_DMA_IRQHandler+0x6a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d02c      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7a      	ldr	r2, [pc, #488]	; (8004638 <HAL_DMA_IRQHandler+0x6ac>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d027      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a79      	ldr	r2, [pc, #484]	; (800463c <HAL_DMA_IRQHandler+0x6b0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d022      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a77      	ldr	r2, [pc, #476]	; (8004640 <HAL_DMA_IRQHandler+0x6b4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01d      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a76      	ldr	r2, [pc, #472]	; (8004644 <HAL_DMA_IRQHandler+0x6b8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d018      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a74      	ldr	r2, [pc, #464]	; (8004648 <HAL_DMA_IRQHandler+0x6bc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a73      	ldr	r2, [pc, #460]	; (800464c <HAL_DMA_IRQHandler+0x6c0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00e      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a71      	ldr	r2, [pc, #452]	; (8004650 <HAL_DMA_IRQHandler+0x6c4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d009      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a70      	ldr	r2, [pc, #448]	; (8004654 <HAL_DMA_IRQHandler+0x6c8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x516>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_DMA_IRQHandler+0x6cc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10a      	bne.n	80044b8 <HAL_DMA_IRQHandler+0x52c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e009      	b.n	80044cc <HAL_DMA_IRQHandler+0x540>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d03e      	beq.n	800454e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2210      	movs	r2, #16
 80044da:	409a      	lsls	r2, r3
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d108      	bne.n	800450e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d024      	beq.n	800454e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
 800450c:	e01f      	b.n	800454e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
 800451e:	e016      	b.n	800454e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0208 	bic.w	r2, r2, #8
 800453c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2220      	movs	r2, #32
 8004558:	409a      	lsls	r2, r3
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8110 	beq.w	8004784 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_DMA_IRQHandler+0x690>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d04a      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2b      	ldr	r2, [pc, #172]	; (8004620 <HAL_DMA_IRQHandler+0x694>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d045      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_DMA_IRQHandler+0x698>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d040      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a28      	ldr	r2, [pc, #160]	; (8004628 <HAL_DMA_IRQHandler+0x69c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d03b      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_DMA_IRQHandler+0x6a0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d036      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_DMA_IRQHandler+0x6a4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d031      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a23      	ldr	r2, [pc, #140]	; (8004634 <HAL_DMA_IRQHandler+0x6a8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d02c      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a22      	ldr	r2, [pc, #136]	; (8004638 <HAL_DMA_IRQHandler+0x6ac>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d027      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a20      	ldr	r2, [pc, #128]	; (800463c <HAL_DMA_IRQHandler+0x6b0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d022      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_DMA_IRQHandler+0x6b4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d01d      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_DMA_IRQHandler+0x6b8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d018      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_DMA_IRQHandler+0x6bc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d013      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1a      	ldr	r2, [pc, #104]	; (800464c <HAL_DMA_IRQHandler+0x6c0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_DMA_IRQHandler+0x6c4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a17      	ldr	r2, [pc, #92]	; (8004654 <HAL_DMA_IRQHandler+0x6c8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_DMA_IRQHandler+0x678>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a16      	ldr	r2, [pc, #88]	; (8004658 <HAL_DMA_IRQHandler+0x6cc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d12b      	bne.n	800465c <HAL_DMA_IRQHandler+0x6d0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	bf14      	ite	ne
 8004612:	2301      	movne	r3, #1
 8004614:	2300      	moveq	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e02a      	b.n	8004670 <HAL_DMA_IRQHandler+0x6e4>
 800461a:	bf00      	nop
 800461c:	40020010 	.word	0x40020010
 8004620:	40020028 	.word	0x40020028
 8004624:	40020040 	.word	0x40020040
 8004628:	40020058 	.word	0x40020058
 800462c:	40020070 	.word	0x40020070
 8004630:	40020088 	.word	0x40020088
 8004634:	400200a0 	.word	0x400200a0
 8004638:	400200b8 	.word	0x400200b8
 800463c:	40020410 	.word	0x40020410
 8004640:	40020428 	.word	0x40020428
 8004644:	40020440 	.word	0x40020440
 8004648:	40020458 	.word	0x40020458
 800464c:	40020470 	.word	0x40020470
 8004650:	40020488 	.word	0x40020488
 8004654:	400204a0 	.word	0x400204a0
 8004658:	400204b8 	.word	0x400204b8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8087 	beq.w	8004784 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2220      	movs	r2, #32
 8004680:	409a      	lsls	r2, r3
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b04      	cmp	r3, #4
 8004690:	d139      	bne.n	8004706 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0216 	bic.w	r2, r2, #22
 80046a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_DMA_IRQHandler+0x736>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0208 	bic.w	r2, r2, #8
 80046d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	223f      	movs	r2, #63	; 0x3f
 80046dc:	409a      	lsls	r2, r3
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8382 	beq.w	8004e00 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
          }
          return;
 8004704:	e37c      	b.n	8004e00 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d018      	beq.n	8004746 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02c      	beq.n	8004784 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	4798      	blx	r3
 8004732:	e027      	b.n	8004784 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d023      	beq.n	8004784 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
 8004744:	e01e      	b.n	8004784 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0210 	bic.w	r2, r2, #16
 8004762:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 833e 	beq.w	8004e0a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8088 	beq.w	80048ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2204      	movs	r2, #4
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a8e      	ldr	r2, [pc, #568]	; (80049e4 <HAL_DMA_IRQHandler+0xa58>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d04a      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a8d      	ldr	r2, [pc, #564]	; (80049e8 <HAL_DMA_IRQHandler+0xa5c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d045      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a8b      	ldr	r2, [pc, #556]	; (80049ec <HAL_DMA_IRQHandler+0xa60>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d040      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a8a      	ldr	r2, [pc, #552]	; (80049f0 <HAL_DMA_IRQHandler+0xa64>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d03b      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a88      	ldr	r2, [pc, #544]	; (80049f4 <HAL_DMA_IRQHandler+0xa68>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d036      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a87      	ldr	r2, [pc, #540]	; (80049f8 <HAL_DMA_IRQHandler+0xa6c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d031      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a85      	ldr	r2, [pc, #532]	; (80049fc <HAL_DMA_IRQHandler+0xa70>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d02c      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a84      	ldr	r2, [pc, #528]	; (8004a00 <HAL_DMA_IRQHandler+0xa74>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d027      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a82      	ldr	r2, [pc, #520]	; (8004a04 <HAL_DMA_IRQHandler+0xa78>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d022      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a81      	ldr	r2, [pc, #516]	; (8004a08 <HAL_DMA_IRQHandler+0xa7c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d01d      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a7f      	ldr	r2, [pc, #508]	; (8004a0c <HAL_DMA_IRQHandler+0xa80>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a7e      	ldr	r2, [pc, #504]	; (8004a10 <HAL_DMA_IRQHandler+0xa84>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a7c      	ldr	r2, [pc, #496]	; (8004a14 <HAL_DMA_IRQHandler+0xa88>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7b      	ldr	r2, [pc, #492]	; (8004a18 <HAL_DMA_IRQHandler+0xa8c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a79      	ldr	r2, [pc, #484]	; (8004a1c <HAL_DMA_IRQHandler+0xa90>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_DMA_IRQHandler+0x8b8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a78      	ldr	r2, [pc, #480]	; (8004a20 <HAL_DMA_IRQHandler+0xa94>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d108      	bne.n	8004856 <HAL_DMA_IRQHandler+0x8ca>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e007      	b.n	8004866 <HAL_DMA_IRQHandler+0x8da>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	429a      	cmp	r2, r3
 8004870:	d307      	bcc.n	8004882 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f2      	bne.n	8004866 <HAL_DMA_IRQHandler+0x8da>
 8004880:	e000      	b.n	8004884 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004882:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2203      	movs	r2, #3
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048a2:	e003      	b.n	80048ac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 82aa 	beq.w	8004e0a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
 80048be:	e2a4      	b.n	8004e0a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a57      	ldr	r2, [pc, #348]	; (8004a24 <HAL_DMA_IRQHandler+0xa98>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d04a      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a56      	ldr	r2, [pc, #344]	; (8004a28 <HAL_DMA_IRQHandler+0xa9c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d045      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a54      	ldr	r2, [pc, #336]	; (8004a2c <HAL_DMA_IRQHandler+0xaa0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d040      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a53      	ldr	r2, [pc, #332]	; (8004a30 <HAL_DMA_IRQHandler+0xaa4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d03b      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a51      	ldr	r2, [pc, #324]	; (8004a34 <HAL_DMA_IRQHandler+0xaa8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d036      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a50      	ldr	r2, [pc, #320]	; (8004a38 <HAL_DMA_IRQHandler+0xaac>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d031      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a4e      	ldr	r2, [pc, #312]	; (8004a3c <HAL_DMA_IRQHandler+0xab0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a4d      	ldr	r2, [pc, #308]	; (8004a40 <HAL_DMA_IRQHandler+0xab4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d027      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a4b      	ldr	r2, [pc, #300]	; (8004a44 <HAL_DMA_IRQHandler+0xab8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4a      	ldr	r2, [pc, #296]	; (8004a48 <HAL_DMA_IRQHandler+0xabc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a48      	ldr	r2, [pc, #288]	; (8004a4c <HAL_DMA_IRQHandler+0xac0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a47      	ldr	r2, [pc, #284]	; (8004a50 <HAL_DMA_IRQHandler+0xac4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a45      	ldr	r2, [pc, #276]	; (8004a54 <HAL_DMA_IRQHandler+0xac8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a44      	ldr	r2, [pc, #272]	; (8004a58 <HAL_DMA_IRQHandler+0xacc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a42      	ldr	r2, [pc, #264]	; (8004a5c <HAL_DMA_IRQHandler+0xad0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_DMA_IRQHandler+0x9d4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <HAL_DMA_IRQHandler+0xad4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_DMA_IRQHandler+0x9d8>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_DMA_IRQHandler+0x9da>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 824f 	beq.w	8004e0a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2204      	movs	r2, #4
 800497e:	409a      	lsls	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80dd 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xbb8>
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80d7 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2204      	movs	r2, #4
 80049a0:	409a      	lsls	r2, r3
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d059      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8220 	beq.w	8004e04 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049cc:	e21a      	b.n	8004e04 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8216 	beq.w	8004e04 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049e0:	e210      	b.n	8004e04 <HAL_DMA_IRQHandler+0xe78>
 80049e2:	bf00      	nop
 80049e4:	40020010 	.word	0x40020010
 80049e8:	40020028 	.word	0x40020028
 80049ec:	40020040 	.word	0x40020040
 80049f0:	40020058 	.word	0x40020058
 80049f4:	40020070 	.word	0x40020070
 80049f8:	40020088 	.word	0x40020088
 80049fc:	400200a0 	.word	0x400200a0
 8004a00:	400200b8 	.word	0x400200b8
 8004a04:	40020410 	.word	0x40020410
 8004a08:	40020428 	.word	0x40020428
 8004a0c:	40020440 	.word	0x40020440
 8004a10:	40020458 	.word	0x40020458
 8004a14:	40020470 	.word	0x40020470
 8004a18:	40020488 	.word	0x40020488
 8004a1c:	400204a0 	.word	0x400204a0
 8004a20:	400204b8 	.word	0x400204b8
 8004a24:	48022c08 	.word	0x48022c08
 8004a28:	48022c1c 	.word	0x48022c1c
 8004a2c:	48022c30 	.word	0x48022c30
 8004a30:	48022c44 	.word	0x48022c44
 8004a34:	48022c58 	.word	0x48022c58
 8004a38:	48022c6c 	.word	0x48022c6c
 8004a3c:	48022c80 	.word	0x48022c80
 8004a40:	48022c94 	.word	0x48022c94
 8004a44:	58025408 	.word	0x58025408
 8004a48:	5802541c 	.word	0x5802541c
 8004a4c:	58025430 	.word	0x58025430
 8004a50:	58025444 	.word	0x58025444
 8004a54:	58025458 	.word	0x58025458
 8004a58:	5802546c 	.word	0x5802546c
 8004a5c:	58025480 	.word	0x58025480
 8004a60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d160      	bne.n	8004b30 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a8c      	ldr	r2, [pc, #560]	; (8004ca4 <HAL_DMA_IRQHandler+0xd18>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d04a      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a8a      	ldr	r2, [pc, #552]	; (8004ca8 <HAL_DMA_IRQHandler+0xd1c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d045      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a89      	ldr	r2, [pc, #548]	; (8004cac <HAL_DMA_IRQHandler+0xd20>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d040      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a87      	ldr	r2, [pc, #540]	; (8004cb0 <HAL_DMA_IRQHandler+0xd24>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d03b      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a86      	ldr	r2, [pc, #536]	; (8004cb4 <HAL_DMA_IRQHandler+0xd28>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d036      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a84      	ldr	r2, [pc, #528]	; (8004cb8 <HAL_DMA_IRQHandler+0xd2c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d031      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a83      	ldr	r2, [pc, #524]	; (8004cbc <HAL_DMA_IRQHandler+0xd30>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d02c      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a81      	ldr	r2, [pc, #516]	; (8004cc0 <HAL_DMA_IRQHandler+0xd34>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d027      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a80      	ldr	r2, [pc, #512]	; (8004cc4 <HAL_DMA_IRQHandler+0xd38>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d022      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7e      	ldr	r2, [pc, #504]	; (8004cc8 <HAL_DMA_IRQHandler+0xd3c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d01d      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7d      	ldr	r2, [pc, #500]	; (8004ccc <HAL_DMA_IRQHandler+0xd40>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d018      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7b      	ldr	r2, [pc, #492]	; (8004cd0 <HAL_DMA_IRQHandler+0xd44>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7a      	ldr	r2, [pc, #488]	; (8004cd4 <HAL_DMA_IRQHandler+0xd48>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a78      	ldr	r2, [pc, #480]	; (8004cd8 <HAL_DMA_IRQHandler+0xd4c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a77      	ldr	r2, [pc, #476]	; (8004cdc <HAL_DMA_IRQHandler+0xd50>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xb82>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <HAL_DMA_IRQHandler+0xd54>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <HAL_DMA_IRQHandler+0xb94>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0208 	bic.w	r2, r2, #8
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e007      	b.n	8004b30 <HAL_DMA_IRQHandler+0xba4>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0204 	bic.w	r2, r2, #4
 8004b2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8165 	beq.w	8004e04 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b42:	e15f      	b.n	8004e04 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80c5 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xd58>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80bf 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2202      	movs	r2, #2
 8004b70:	409a      	lsls	r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d018      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 813a 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b9c:	e134      	b.n	8004e08 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8130 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb0:	e12a      	b.n	8004e08 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d168      	bne.n	8004c8e <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a38      	ldr	r2, [pc, #224]	; (8004ca4 <HAL_DMA_IRQHandler+0xd18>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a37      	ldr	r2, [pc, #220]	; (8004ca8 <HAL_DMA_IRQHandler+0xd1c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d045      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a35      	ldr	r2, [pc, #212]	; (8004cac <HAL_DMA_IRQHandler+0xd20>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d040      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a34      	ldr	r2, [pc, #208]	; (8004cb0 <HAL_DMA_IRQHandler+0xd24>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03b      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <HAL_DMA_IRQHandler+0xd28>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_DMA_IRQHandler+0xd2c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <HAL_DMA_IRQHandler+0xd30>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2e      	ldr	r2, [pc, #184]	; (8004cc0 <HAL_DMA_IRQHandler+0xd34>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d027      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <HAL_DMA_IRQHandler+0xd38>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <HAL_DMA_IRQHandler+0xd3c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01d      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <HAL_DMA_IRQHandler+0xd40>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <HAL_DMA_IRQHandler+0xd44>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <HAL_DMA_IRQHandler+0xd48>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <HAL_DMA_IRQHandler+0xd4c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a23      	ldr	r2, [pc, #140]	; (8004cdc <HAL_DMA_IRQHandler+0xd50>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_IRQHandler+0xcd0>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_DMA_IRQHandler+0xd54>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <HAL_DMA_IRQHandler+0xce2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0214 	bic.w	r2, r2, #20
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e007      	b.n	8004c7e <HAL_DMA_IRQHandler+0xcf2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 020a 	bic.w	r2, r2, #10
 8004c7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80b8 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca0:	e0b2      	b.n	8004e08 <HAL_DMA_IRQHandler+0xe7c>
 8004ca2:	bf00      	nop
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2208      	movs	r2, #8
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8088 	beq.w	8004e0a <HAL_DMA_IRQHandler+0xe7e>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8082 	beq.w	8004e0a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a41      	ldr	r2, [pc, #260]	; (8004e10 <HAL_DMA_IRQHandler+0xe84>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d04a      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a3f      	ldr	r2, [pc, #252]	; (8004e14 <HAL_DMA_IRQHandler+0xe88>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d045      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a3e      	ldr	r2, [pc, #248]	; (8004e18 <HAL_DMA_IRQHandler+0xe8c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d040      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3c      	ldr	r2, [pc, #240]	; (8004e1c <HAL_DMA_IRQHandler+0xe90>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d03b      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <HAL_DMA_IRQHandler+0xe94>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d036      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a39      	ldr	r2, [pc, #228]	; (8004e24 <HAL_DMA_IRQHandler+0xe98>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d031      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a38      	ldr	r2, [pc, #224]	; (8004e28 <HAL_DMA_IRQHandler+0xe9c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d02c      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a36      	ldr	r2, [pc, #216]	; (8004e2c <HAL_DMA_IRQHandler+0xea0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d027      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a35      	ldr	r2, [pc, #212]	; (8004e30 <HAL_DMA_IRQHandler+0xea4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <HAL_DMA_IRQHandler+0xea8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <HAL_DMA_IRQHandler+0xeac>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_DMA_IRQHandler+0xeb0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <HAL_DMA_IRQHandler+0xeb4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <HAL_DMA_IRQHandler+0xeb8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a2c      	ldr	r2, [pc, #176]	; (8004e48 <HAL_DMA_IRQHandler+0xebc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xe1a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <HAL_DMA_IRQHandler+0xec0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <HAL_DMA_IRQHandler+0xe2c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 021c 	bic.w	r2, r2, #28
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e007      	b.n	8004dc8 <HAL_DMA_IRQHandler+0xe3c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 020e 	bic.w	r2, r2, #14
 8004dc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	e004      	b.n	8004e0a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004e00:	bf00      	nop
 8004e02:	e002      	b.n	8004e0a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e04:	bf00      	nop
 8004e06:	e000      	b.n	8004e0a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020058 	.word	0x40020058
 8004e20:	40020070 	.word	0x40020070
 8004e24:	40020088 	.word	0x40020088
 8004e28:	400200a0 	.word	0x400200a0
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020410 	.word	0x40020410
 8004e34:	40020428 	.word	0x40020428
 8004e38:	40020440 	.word	0x40020440
 8004e3c:	40020458 	.word	0x40020458
 8004e40:	40020470 	.word	0x40020470
 8004e44:	40020488 	.word	0x40020488
 8004e48:	400204a0 	.word	0x400204a0
 8004e4c:	400204b8 	.word	0x400204b8

08004e50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a84      	ldr	r2, [pc, #528]	; (8005080 <DMA_SetConfig+0x230>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d072      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a82      	ldr	r2, [pc, #520]	; (8005084 <DMA_SetConfig+0x234>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d06d      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a81      	ldr	r2, [pc, #516]	; (8005088 <DMA_SetConfig+0x238>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d068      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a7f      	ldr	r2, [pc, #508]	; (800508c <DMA_SetConfig+0x23c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d063      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a7e      	ldr	r2, [pc, #504]	; (8005090 <DMA_SetConfig+0x240>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d05e      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7c      	ldr	r2, [pc, #496]	; (8005094 <DMA_SetConfig+0x244>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d059      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7b      	ldr	r2, [pc, #492]	; (8005098 <DMA_SetConfig+0x248>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d054      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a79      	ldr	r2, [pc, #484]	; (800509c <DMA_SetConfig+0x24c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d04f      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a78      	ldr	r2, [pc, #480]	; (80050a0 <DMA_SetConfig+0x250>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d04a      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a76      	ldr	r2, [pc, #472]	; (80050a4 <DMA_SetConfig+0x254>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d045      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <DMA_SetConfig+0x258>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d040      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a73      	ldr	r2, [pc, #460]	; (80050ac <DMA_SetConfig+0x25c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d03b      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a72      	ldr	r2, [pc, #456]	; (80050b0 <DMA_SetConfig+0x260>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d036      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a70      	ldr	r2, [pc, #448]	; (80050b4 <DMA_SetConfig+0x264>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d031      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6f      	ldr	r2, [pc, #444]	; (80050b8 <DMA_SetConfig+0x268>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d02c      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a6d      	ldr	r2, [pc, #436]	; (80050bc <DMA_SetConfig+0x26c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d027      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6c      	ldr	r2, [pc, #432]	; (80050c0 <DMA_SetConfig+0x270>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6a      	ldr	r2, [pc, #424]	; (80050c4 <DMA_SetConfig+0x274>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01d      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a69      	ldr	r2, [pc, #420]	; (80050c8 <DMA_SetConfig+0x278>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a67      	ldr	r2, [pc, #412]	; (80050cc <DMA_SetConfig+0x27c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a66      	ldr	r2, [pc, #408]	; (80050d0 <DMA_SetConfig+0x280>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a64      	ldr	r2, [pc, #400]	; (80050d4 <DMA_SetConfig+0x284>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a63      	ldr	r2, [pc, #396]	; (80050d8 <DMA_SetConfig+0x288>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <DMA_SetConfig+0x10a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a61      	ldr	r2, [pc, #388]	; (80050dc <DMA_SetConfig+0x28c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <DMA_SetConfig+0x10e>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <DMA_SetConfig+0x110>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00d      	beq.n	8004f80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a3e      	ldr	r2, [pc, #248]	; (8005080 <DMA_SetConfig+0x230>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a3d      	ldr	r2, [pc, #244]	; (8005084 <DMA_SetConfig+0x234>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <DMA_SetConfig+0x238>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3a      	ldr	r2, [pc, #232]	; (800508c <DMA_SetConfig+0x23c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a38      	ldr	r2, [pc, #224]	; (8005090 <DMA_SetConfig+0x240>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a37      	ldr	r2, [pc, #220]	; (8005094 <DMA_SetConfig+0x244>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a35      	ldr	r2, [pc, #212]	; (8005098 <DMA_SetConfig+0x248>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a34      	ldr	r2, [pc, #208]	; (800509c <DMA_SetConfig+0x24c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <DMA_SetConfig+0x250>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a31      	ldr	r2, [pc, #196]	; (80050a4 <DMA_SetConfig+0x254>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <DMA_SetConfig+0x258>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2e      	ldr	r2, [pc, #184]	; (80050ac <DMA_SetConfig+0x25c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <DMA_SetConfig+0x260>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <DMA_SetConfig+0x264>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <DMA_SetConfig+0x268>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <DMA_SetConfig+0x1d0>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a28      	ldr	r2, [pc, #160]	; (80050bc <DMA_SetConfig+0x26c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <DMA_SetConfig+0x1d4>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <DMA_SetConfig+0x1d6>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d05a      	beq.n	80050e0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	223f      	movs	r2, #63	; 0x3f
 8005034:	409a      	lsls	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005048:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d108      	bne.n	800506c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800506a:	e0af      	b.n	80051cc <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
}
 800507c:	e0a6      	b.n	80051cc <DMA_SetConfig+0x37c>
 800507e:	bf00      	nop
 8005080:	40020010 	.word	0x40020010
 8005084:	40020028 	.word	0x40020028
 8005088:	40020040 	.word	0x40020040
 800508c:	40020058 	.word	0x40020058
 8005090:	40020070 	.word	0x40020070
 8005094:	40020088 	.word	0x40020088
 8005098:	400200a0 	.word	0x400200a0
 800509c:	400200b8 	.word	0x400200b8
 80050a0:	40020410 	.word	0x40020410
 80050a4:	40020428 	.word	0x40020428
 80050a8:	40020440 	.word	0x40020440
 80050ac:	40020458 	.word	0x40020458
 80050b0:	40020470 	.word	0x40020470
 80050b4:	40020488 	.word	0x40020488
 80050b8:	400204a0 	.word	0x400204a0
 80050bc:	400204b8 	.word	0x400204b8
 80050c0:	58025408 	.word	0x58025408
 80050c4:	5802541c 	.word	0x5802541c
 80050c8:	58025430 	.word	0x58025430
 80050cc:	58025444 	.word	0x58025444
 80050d0:	58025458 	.word	0x58025458
 80050d4:	5802546c 	.word	0x5802546c
 80050d8:	58025480 	.word	0x58025480
 80050dc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <DMA_SetConfig+0x388>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <DMA_SetConfig+0x330>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <DMA_SetConfig+0x38c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <DMA_SetConfig+0x330>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <DMA_SetConfig+0x390>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <DMA_SetConfig+0x330>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <DMA_SetConfig+0x394>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a36      	ldr	r2, [pc, #216]	; (80051e8 <DMA_SetConfig+0x398>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a35      	ldr	r2, [pc, #212]	; (80051ec <DMA_SetConfig+0x39c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <DMA_SetConfig+0x330>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a33      	ldr	r2, [pc, #204]	; (80051f0 <DMA_SetConfig+0x3a0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a32      	ldr	r2, [pc, #200]	; (80051f4 <DMA_SetConfig+0x3a4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a30      	ldr	r2, [pc, #192]	; (80051f8 <DMA_SetConfig+0x3a8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <DMA_SetConfig+0x330>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <DMA_SetConfig+0x3ac>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <DMA_SetConfig+0x3b0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <DMA_SetConfig+0x330>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <DMA_SetConfig+0x3b4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <DMA_SetConfig+0x3b8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a29      	ldr	r2, [pc, #164]	; (800520c <DMA_SetConfig+0x3bc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <DMA_SetConfig+0x330>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a27      	ldr	r2, [pc, #156]	; (8005210 <DMA_SetConfig+0x3c0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <DMA_SetConfig+0x330>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a26      	ldr	r2, [pc, #152]	; (8005214 <DMA_SetConfig+0x3c4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <DMA_SetConfig+0x334>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <DMA_SetConfig+0x336>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518e:	f003 031f 	and.w	r3, r3, #31
 8005192:	2201      	movs	r2, #1
 8005194:	409a      	lsls	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d108      	bne.n	80051bc <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	60da      	str	r2, [r3, #12]
}
 80051ba:	e007      	b.n	80051cc <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	48022c08 	.word	0x48022c08
 80051dc:	48022c1c 	.word	0x48022c1c
 80051e0:	48022c30 	.word	0x48022c30
 80051e4:	48022c44 	.word	0x48022c44
 80051e8:	48022c58 	.word	0x48022c58
 80051ec:	48022c6c 	.word	0x48022c6c
 80051f0:	48022c80 	.word	0x48022c80
 80051f4:	48022c94 	.word	0x48022c94
 80051f8:	58025408 	.word	0x58025408
 80051fc:	5802541c 	.word	0x5802541c
 8005200:	58025430 	.word	0x58025430
 8005204:	58025444 	.word	0x58025444
 8005208:	58025458 	.word	0x58025458
 800520c:	5802546c 	.word	0x5802546c
 8005210:	58025480 	.word	0x58025480
 8005214:	58025494 	.word	0x58025494

08005218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a42      	ldr	r2, [pc, #264]	; (8005330 <DMA_CalcBaseAndBitshift+0x118>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d04a      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a41      	ldr	r2, [pc, #260]	; (8005334 <DMA_CalcBaseAndBitshift+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d045      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3f      	ldr	r2, [pc, #252]	; (8005338 <DMA_CalcBaseAndBitshift+0x120>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d040      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3e      	ldr	r2, [pc, #248]	; (800533c <DMA_CalcBaseAndBitshift+0x124>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d03b      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <DMA_CalcBaseAndBitshift+0x128>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d036      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a3b      	ldr	r2, [pc, #236]	; (8005344 <DMA_CalcBaseAndBitshift+0x12c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d031      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a39      	ldr	r2, [pc, #228]	; (8005348 <DMA_CalcBaseAndBitshift+0x130>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02c      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a38      	ldr	r2, [pc, #224]	; (800534c <DMA_CalcBaseAndBitshift+0x134>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d027      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a36      	ldr	r2, [pc, #216]	; (8005350 <DMA_CalcBaseAndBitshift+0x138>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d022      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a35      	ldr	r2, [pc, #212]	; (8005354 <DMA_CalcBaseAndBitshift+0x13c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d01d      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a33      	ldr	r2, [pc, #204]	; (8005358 <DMA_CalcBaseAndBitshift+0x140>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a32      	ldr	r2, [pc, #200]	; (800535c <DMA_CalcBaseAndBitshift+0x144>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a30      	ldr	r2, [pc, #192]	; (8005360 <DMA_CalcBaseAndBitshift+0x148>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <DMA_CalcBaseAndBitshift+0x14c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	; (8005368 <DMA_CalcBaseAndBitshift+0x150>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <DMA_CalcBaseAndBitshift+0xa8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	; (800536c <DMA_CalcBaseAndBitshift+0x154>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <DMA_CalcBaseAndBitshift+0xac>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <DMA_CalcBaseAndBitshift+0xae>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d024      	beq.n	8005314 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	3b10      	subs	r3, #16
 80052d2:	4a27      	ldr	r2, [pc, #156]	; (8005370 <DMA_CalcBaseAndBitshift+0x158>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	4a24      	ldr	r2, [pc, #144]	; (8005374 <DMA_CalcBaseAndBitshift+0x15c>)
 80052e4:	5cd3      	ldrb	r3, [r2, r3]
 80052e6:	461a      	mov	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d908      	bls.n	8005304 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <DMA_CalcBaseAndBitshift+0x160>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	1d1a      	adds	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	659a      	str	r2, [r3, #88]	; 0x58
 8005302:	e00d      	b.n	8005320 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <DMA_CalcBaseAndBitshift+0x160>)
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6593      	str	r3, [r2, #88]	; 0x58
 8005312:	e005      	b.n	8005320 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
 8005370:	aaaaaaab 	.word	0xaaaaaaab
 8005374:	0800bcac 	.word	0x0800bcac
 8005378:	fffffc00 	.word	0xfffffc00

0800537c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d120      	bne.n	80053d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	2b03      	cmp	r3, #3
 8005396:	d858      	bhi.n	800544a <DMA_CheckFifoParam+0xce>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <DMA_CheckFifoParam+0x24>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c3 	.word	0x080053c3
 80053a8:	080053b1 	.word	0x080053b1
 80053ac:	0800544b 	.word	0x0800544b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d048      	beq.n	800544e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053c0:	e045      	b.n	800544e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ca:	d142      	bne.n	8005452 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053d0:	e03f      	b.n	8005452 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053da:	d123      	bne.n	8005424 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d838      	bhi.n	8005456 <DMA_CheckFifoParam+0xda>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <DMA_CheckFifoParam+0x70>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005403 	.word	0x08005403
 80053f4:	080053fd 	.word	0x080053fd
 80053f8:	08005415 	.word	0x08005415
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
        break;
 8005400:	e030      	b.n	8005464 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d025      	beq.n	800545a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005412:	e022      	b.n	800545a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800541c:	d11f      	bne.n	800545e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005422:	e01c      	b.n	800545e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	2b02      	cmp	r3, #2
 800542a:	d902      	bls.n	8005432 <DMA_CheckFifoParam+0xb6>
 800542c:	2b03      	cmp	r3, #3
 800542e:	d003      	beq.n	8005438 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005430:	e018      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
        break;
 8005436:	e015      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
    break;
 8005448:	e00b      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
        break;
 800544a:	bf00      	nop
 800544c:	e00a      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        break;
 800544e:	bf00      	nop
 8005450:	e008      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        break;
 8005452:	bf00      	nop
 8005454:	e006      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        break;
 8005456:	bf00      	nop
 8005458:	e004      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
        break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
    break;
 8005462:	bf00      	nop
    }
  }

  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a38      	ldr	r2, [pc, #224]	; (8005568 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d022      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a36      	ldr	r2, [pc, #216]	; (800556c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01d      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a35      	ldr	r2, [pc, #212]	; (8005570 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d018      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a33      	ldr	r2, [pc, #204]	; (8005574 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a32      	ldr	r2, [pc, #200]	; (8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a30      	ldr	r2, [pc, #192]	; (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d101      	bne.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80054d6:	2300      	movs	r3, #0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01a      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	3b08      	subs	r3, #8
 80054e4:	4a28      	ldr	r2, [pc, #160]	; (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	091b      	lsrs	r3, r3, #4
 80054ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4b26      	ldr	r3, [pc, #152]	; (800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	461a      	mov	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a24      	ldr	r2, [pc, #144]	; (8005590 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005500:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	2201      	movs	r2, #1
 800550a:	409a      	lsls	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005510:	e024      	b.n	800555c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	3b10      	subs	r3, #16
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d806      	bhi.n	800553a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a1b      	ldr	r2, [pc, #108]	; (800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d902      	bls.n	800553a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3308      	adds	r3, #8
 8005538:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	461a      	mov	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800554c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	2201      	movs	r2, #1
 8005556:	409a      	lsls	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	58025408 	.word	0x58025408
 800556c:	5802541c 	.word	0x5802541c
 8005570:	58025430 	.word	0x58025430
 8005574:	58025444 	.word	0x58025444
 8005578:	58025458 	.word	0x58025458
 800557c:	5802546c 	.word	0x5802546c
 8005580:	58025480 	.word	0x58025480
 8005584:	58025494 	.word	0x58025494
 8005588:	cccccccd 	.word	0xcccccccd
 800558c:	16009600 	.word	0x16009600
 8005590:	58025880 	.word	0x58025880
 8005594:	aaaaaaab 	.word	0xaaaaaaab
 8005598:	400204b8 	.word	0x400204b8
 800559c:	4002040f 	.word	0x4002040f
 80055a0:	10008200 	.word	0x10008200
 80055a4:	40020880 	.word	0x40020880

080055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d04a      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d847      	bhi.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a25      	ldr	r2, [pc, #148]	; (8005660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d022      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a24      	ldr	r2, [pc, #144]	; (8005664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d01d      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a22      	ldr	r2, [pc, #136]	; (8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d018      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a21      	ldr	r2, [pc, #132]	; (800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d009      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1b      	ldr	r2, [pc, #108]	; (800567c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4b17      	ldr	r3, [pc, #92]	; (8005680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005630:	671a      	str	r2, [r3, #112]	; 0x70
 8005632:	e009      	b.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a11      	ldr	r2, [pc, #68]	; (800568c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005646:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3b01      	subs	r3, #1
 800564c:	2201      	movs	r2, #1
 800564e:	409a      	lsls	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	58025408 	.word	0x58025408
 8005664:	5802541c 	.word	0x5802541c
 8005668:	58025430 	.word	0x58025430
 800566c:	58025444 	.word	0x58025444
 8005670:	58025458 	.word	0x58025458
 8005674:	5802546c 	.word	0x5802546c
 8005678:	58025480 	.word	0x58025480
 800567c:	58025494 	.word	0x58025494
 8005680:	1600963f 	.word	0x1600963f
 8005684:	58025940 	.word	0x58025940
 8005688:	1000823f 	.word	0x1000823f
 800568c:	40020940 	.word	0x40020940

08005690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	; 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800569e:	4b89      	ldr	r3, [pc, #548]	; (80058c4 <HAL_GPIO_Init+0x234>)
 80056a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056a2:	e194      	b.n	80059ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	2101      	movs	r1, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	4013      	ands	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8186 	beq.w	80059c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d00b      	beq.n	80056dc <HAL_GPIO_Init+0x4c>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d007      	beq.n	80056dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056d0:	2b11      	cmp	r3, #17
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b12      	cmp	r3, #18
 80056da:	d130      	bne.n	800573e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	2203      	movs	r2, #3
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005712:	2201      	movs	r2, #1
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	f003 0201 	and.w	r2, r3, #1
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	2203      	movs	r2, #3
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4313      	orrs	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d003      	beq.n	800577e <HAL_GPIO_Init+0xee>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b12      	cmp	r3, #18
 800577c:	d123      	bne.n	80057c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	08da      	lsrs	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3208      	adds	r2, #8
 8005786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	220f      	movs	r2, #15
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4013      	ands	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	08da      	lsrs	r2, r3, #3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3208      	adds	r2, #8
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	2203      	movs	r2, #3
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0203 	and.w	r2, r3, #3
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80e0 	beq.w	80059c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <HAL_GPIO_Init+0x238>)
 800580a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800580e:	4a2e      	ldr	r2, [pc, #184]	; (80058c8 <HAL_GPIO_Init+0x238>)
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_GPIO_Init+0x238>)
 800581a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005826:	4a29      	ldr	r2, [pc, #164]	; (80058cc <HAL_GPIO_Init+0x23c>)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	3302      	adds	r3, #2
 800582e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	220f      	movs	r2, #15
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <HAL_GPIO_Init+0x240>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d052      	beq.n	80058f8 <HAL_GPIO_Init+0x268>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <HAL_GPIO_Init+0x244>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d031      	beq.n	80058be <HAL_GPIO_Init+0x22e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_GPIO_Init+0x248>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02b      	beq.n	80058ba <HAL_GPIO_Init+0x22a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_GPIO_Init+0x24c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d025      	beq.n	80058b6 <HAL_GPIO_Init+0x226>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <HAL_GPIO_Init+0x250>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <HAL_GPIO_Init+0x222>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <HAL_GPIO_Init+0x254>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d019      	beq.n	80058ae <HAL_GPIO_Init+0x21e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_GPIO_Init+0x258>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_GPIO_Init+0x21a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a19      	ldr	r2, [pc, #100]	; (80058ec <HAL_GPIO_Init+0x25c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00d      	beq.n	80058a6 <HAL_GPIO_Init+0x216>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_GPIO_Init+0x260>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <HAL_GPIO_Init+0x212>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_GPIO_Init+0x264>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d101      	bne.n	800589e <HAL_GPIO_Init+0x20e>
 800589a:	2309      	movs	r3, #9
 800589c:	e02d      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 800589e:	230a      	movs	r3, #10
 80058a0:	e02b      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058a2:	2308      	movs	r3, #8
 80058a4:	e029      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058a6:	2307      	movs	r3, #7
 80058a8:	e027      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058aa:	2306      	movs	r3, #6
 80058ac:	e025      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058ae:	2305      	movs	r3, #5
 80058b0:	e023      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058b2:	2304      	movs	r3, #4
 80058b4:	e021      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058b6:	2303      	movs	r3, #3
 80058b8:	e01f      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e01d      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058be:	2301      	movs	r3, #1
 80058c0:	e01b      	b.n	80058fa <HAL_GPIO_Init+0x26a>
 80058c2:	bf00      	nop
 80058c4:	58000080 	.word	0x58000080
 80058c8:	58024400 	.word	0x58024400
 80058cc:	58000400 	.word	0x58000400
 80058d0:	58020000 	.word	0x58020000
 80058d4:	58020400 	.word	0x58020400
 80058d8:	58020800 	.word	0x58020800
 80058dc:	58020c00 	.word	0x58020c00
 80058e0:	58021000 	.word	0x58021000
 80058e4:	58021400 	.word	0x58021400
 80058e8:	58021800 	.word	0x58021800
 80058ec:	58021c00 	.word	0x58021c00
 80058f0:	58022000 	.word	0x58022000
 80058f4:	58022400 	.word	0x58022400
 80058f8:	2300      	movs	r3, #0
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	f002 0203 	and.w	r2, r2, #3
 8005900:	0092      	lsls	r2, r2, #2
 8005902:	4093      	lsls	r3, r2
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800590a:	4938      	ldr	r1, [pc, #224]	; (80059ec <HAL_GPIO_Init+0x35c>)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	3302      	adds	r3, #2
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f ae63 	bne.w	80056a4 <HAL_GPIO_Init+0x14>
  }
}
 80059de:	bf00      	nop
 80059e0:	3724      	adds	r7, #36	; 0x24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	58000400 	.word	0x58000400

080059f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
 80059fc:	4613      	mov	r3, r2
 80059fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a00:	787b      	ldrb	r3, [r7, #1]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a06:	887a      	ldrh	r2, [r7, #2]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a0c:	e003      	b.n	8005a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a0e:	887b      	ldrh	r3, [r7, #2]
 8005a10:	041a      	lsls	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	619a      	str	r2, [r3, #24]
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a2c:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d00a      	beq.n	8005a4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a38:	4b26      	ldr	r3, [pc, #152]	; (8005ad4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d001      	beq.n	8005a4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e040      	b.n	8005acc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e03e      	b.n	8005acc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a4e:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005a56:	491f      	ldr	r1, [pc, #124]	; (8005ad4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a5e:	f7fc f951 	bl	8001d04 <HAL_GetTick>
 8005a62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a64:	e009      	b.n	8005a7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a66:	f7fc f94d 	bl	8001d04 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a74:	d901      	bls.n	8005a7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e028      	b.n	8005acc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a86:	d1ee      	bne.n	8005a66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b1e      	cmp	r3, #30
 8005a8c:	d008      	beq.n	8005aa0 <HAL_PWREx_ConfigSupply+0x7c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b2e      	cmp	r3, #46	; 0x2e
 8005a92:	d005      	beq.n	8005aa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b1d      	cmp	r3, #29
 8005a98:	d002      	beq.n	8005aa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b2d      	cmp	r3, #45	; 0x2d
 8005a9e:	d114      	bne.n	8005aca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005aa0:	f7fc f930 	bl	8001d04 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005aa6:	e009      	b.n	8005abc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005aa8:	f7fc f92c 	bl	8001d04 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab6:	d901      	bls.n	8005abc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e007      	b.n	8005acc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac8:	d1ee      	bne.n	8005aa8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024800 	.word	0x58024800

08005ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	; 0x30
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e3d7      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80b3 	beq.w	8005c5e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af8:	4b90      	ldr	r3, [pc, #576]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b02:	4b8e      	ldr	r3, [pc, #568]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d007      	beq.n	8005b1e <HAL_RCC_OscConfig+0x46>
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	2b18      	cmp	r3, #24
 8005b12:	d112      	bne.n	8005b3a <HAL_RCC_OscConfig+0x62>
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d10d      	bne.n	8005b3a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1e:	4b87      	ldr	r3, [pc, #540]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8098 	beq.w	8005c5c <HAL_RCC_OscConfig+0x184>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 8093 	bne.w	8005c5c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e3af      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b42:	d106      	bne.n	8005b52 <HAL_RCC_OscConfig+0x7a>
 8005b44:	4b7d      	ldr	r3, [pc, #500]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7c      	ldr	r2, [pc, #496]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	e058      	b.n	8005c04 <HAL_RCC_OscConfig+0x12c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d112      	bne.n	8005b80 <HAL_RCC_OscConfig+0xa8>
 8005b5a:	4b78      	ldr	r3, [pc, #480]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a77      	ldr	r2, [pc, #476]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	4b75      	ldr	r3, [pc, #468]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a74      	ldr	r2, [pc, #464]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	4b72      	ldr	r3, [pc, #456]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a71      	ldr	r2, [pc, #452]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e041      	b.n	8005c04 <HAL_RCC_OscConfig+0x12c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b88:	d112      	bne.n	8005bb0 <HAL_RCC_OscConfig+0xd8>
 8005b8a:	4b6c      	ldr	r3, [pc, #432]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6b      	ldr	r2, [pc, #428]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b69      	ldr	r3, [pc, #420]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a68      	ldr	r2, [pc, #416]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005b9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	4b66      	ldr	r3, [pc, #408]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a65      	ldr	r2, [pc, #404]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e029      	b.n	8005c04 <HAL_RCC_OscConfig+0x12c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005bb8:	d112      	bne.n	8005be0 <HAL_RCC_OscConfig+0x108>
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5f      	ldr	r2, [pc, #380]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	4b5d      	ldr	r3, [pc, #372]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5c      	ldr	r2, [pc, #368]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a59      	ldr	r2, [pc, #356]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e011      	b.n	8005c04 <HAL_RCC_OscConfig+0x12c>
 8005be0:	4b56      	ldr	r3, [pc, #344]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a55      	ldr	r2, [pc, #340]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a52      	ldr	r2, [pc, #328]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b50      	ldr	r3, [pc, #320]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a4f      	ldr	r2, [pc, #316]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005bfe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fc f87a 	bl	8001d04 <HAL_GetTick>
 8005c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fc f876 	bl	8001d04 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e339      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c26:	4b45      	ldr	r3, [pc, #276]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x13c>
 8005c32:	e014      	b.n	8005c5e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc f866 	bl	8001d04 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7fc f862 	bl	8001d04 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	; 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e325      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x164>
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d070      	beq.n	8005d4c <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6a:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c72:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c74:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <HAL_RCC_OscConfig+0x1b8>
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2b18      	cmp	r3, #24
 8005c84:	d11b      	bne.n	8005cbe <HAL_RCC_OscConfig+0x1e6>
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x1d0>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e2f8      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	061b      	lsls	r3, r3, #24
 8005cb6:	4921      	ldr	r1, [pc, #132]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cbc:	e046      	b.n	8005d4c <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d026      	beq.n	8005d14 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 0219 	bic.w	r2, r3, #25
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	491a      	ldr	r1, [pc, #104]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fc f814 	bl	8001d04 <HAL_GetTick>
 8005cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce0:	f7fc f810 	bl	8001d04 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e2d3      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	490b      	ldr	r1, [pc, #44]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	604b      	str	r3, [r1, #4]
 8005d12:	e01b      	b.n	8005d4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d14:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <HAL_RCC_OscConfig+0x264>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fb fff0 	bl	8001d04 <HAL_GetTick>
 8005d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d28:	f7fb ffec 	bl	8001d04 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d904      	bls.n	8005d40 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e2af      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d40:	4b99      	ldr	r3, [pc, #612]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1ed      	bne.n	8005d28 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d06a      	beq.n	8005e2e <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d58:	4b93      	ldr	r3, [pc, #588]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d62:	4b91      	ldr	r3, [pc, #580]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d007      	beq.n	8005d7e <HAL_RCC_OscConfig+0x2a6>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b18      	cmp	r3, #24
 8005d72:	d11b      	bne.n	8005dac <HAL_RCC_OscConfig+0x2d4>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d116      	bne.n	8005dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d7e:	4b8a      	ldr	r3, [pc, #552]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_RCC_OscConfig+0x2be>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d001      	beq.n	8005d96 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e281      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d96:	4b84      	ldr	r3, [pc, #528]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	061b      	lsls	r3, r3, #24
 8005da4:	4980      	ldr	r1, [pc, #512]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005daa:	e040      	b.n	8005e2e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d023      	beq.n	8005dfc <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005db4:	4b7c      	ldr	r3, [pc, #496]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a7b      	ldr	r2, [pc, #492]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fb ffa0 	bl	8001d04 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005dc8:	f7fb ff9c 	bl	8001d04 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e25f      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dda:	4b73      	ldr	r3, [pc, #460]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005de6:	4b70      	ldr	r3, [pc, #448]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	061b      	lsls	r3, r3, #24
 8005df4:	496c      	ldr	r1, [pc, #432]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60cb      	str	r3, [r1, #12]
 8005dfa:	e018      	b.n	8005e2e <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005dfc:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a69      	ldr	r2, [pc, #420]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fb ff7c 	bl	8001d04 <HAL_GetTick>
 8005e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e10:	f7fb ff78 	bl	8001d04 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e23b      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e22:	4b61      	ldr	r3, [pc, #388]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d036      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d019      	beq.n	8005e76 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e42:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	4a58      	ldr	r2, [pc, #352]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4e:	f7fb ff59 	bl	8001d04 <HAL_GetTick>
 8005e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e56:	f7fb ff55 	bl	8001d04 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e218      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e68:	4b4f      	ldr	r3, [pc, #316]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x37e>
 8005e74:	e018      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e76:	4b4c      	ldr	r3, [pc, #304]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	4a4b      	ldr	r2, [pc, #300]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fb ff3f 	bl	8001d04 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e8a:	f7fb ff3b 	bl	8001d04 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e1fe      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e9c:	4b42      	ldr	r3, [pc, #264]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f0      	bne.n	8005e8a <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d036      	beq.n	8005f22 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d019      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a39      	ldr	r2, [pc, #228]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ec6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ec8:	f7fb ff1c 	bl	8001d04 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ed0:	f7fb ff18 	bl	8001d04 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1db      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ee2:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x3f8>
 8005eee:	e018      	b.n	8005f22 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005efc:	f7fb ff02 	bl	8001d04 <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f04:	f7fb fefe 	bl	8001d04 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e1c1      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80af 	beq.w	800608e <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f30:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <HAL_RCC_OscConfig+0x4d4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <HAL_RCC_OscConfig+0x4d4>)
 8005f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f3c:	f7fb fee2 	bl	8001d04 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f44:	f7fb fede 	bl	8001d04 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e1a1      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f56:	4b15      	ldr	r3, [pc, #84]	; (8005fac <HAL_RCC_OscConfig+0x4d4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d106      	bne.n	8005f78 <HAL_RCC_OscConfig+0x4a0>
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	6713      	str	r3, [r2, #112]	; 0x70
 8005f76:	e05b      	b.n	8006030 <HAL_RCC_OscConfig+0x558>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d117      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4d8>
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f90:	4a05      	ldr	r2, [pc, #20]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f96:	6713      	str	r3, [r2, #112]	; 0x70
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a02      	ldr	r2, [pc, #8]	; (8005fa8 <HAL_RCC_OscConfig+0x4d0>)
 8005f9e:	f023 0304 	bic.w	r3, r3, #4
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa4:	e044      	b.n	8006030 <HAL_RCC_OscConfig+0x558>
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	58024800 	.word	0x58024800
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d112      	bne.n	8005fde <HAL_RCC_OscConfig+0x506>
 8005fb8:	4b95      	ldr	r3, [pc, #596]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a94      	ldr	r2, [pc, #592]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc4:	4b92      	ldr	r3, [pc, #584]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4a91      	ldr	r2, [pc, #580]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fce:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd0:	4b8f      	ldr	r3, [pc, #572]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	4a8e      	ldr	r2, [pc, #568]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	6713      	str	r3, [r2, #112]	; 0x70
 8005fdc:	e028      	b.n	8006030 <HAL_RCC_OscConfig+0x558>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b85      	cmp	r3, #133	; 0x85
 8005fe4:	d112      	bne.n	800600c <HAL_RCC_OscConfig+0x534>
 8005fe6:	4b8a      	ldr	r3, [pc, #552]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	4a89      	ldr	r2, [pc, #548]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005fec:	f043 0304 	orr.w	r3, r3, #4
 8005ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff2:	4b87      	ldr	r3, [pc, #540]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	4a86      	ldr	r2, [pc, #536]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffe:	4b84      	ldr	r3, [pc, #528]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	4a83      	ldr	r2, [pc, #524]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	6713      	str	r3, [r2, #112]	; 0x70
 800600a:	e011      	b.n	8006030 <HAL_RCC_OscConfig+0x558>
 800600c:	4b80      	ldr	r3, [pc, #512]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	4a7f      	ldr	r2, [pc, #508]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	6713      	str	r3, [r2, #112]	; 0x70
 8006018:	4b7d      	ldr	r3, [pc, #500]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a7c      	ldr	r2, [pc, #496]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800601e:	f023 0304 	bic.w	r3, r3, #4
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
 8006024:	4b7a      	ldr	r3, [pc, #488]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006028:	4a79      	ldr	r2, [pc, #484]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800602a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800602e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d015      	beq.n	8006064 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006038:	f7fb fe64 	bl	8001d04 <HAL_GetTick>
 800603c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800603e:	e00a      	b.n	8006056 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006040:	f7fb fe60 	bl	8001d04 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	f241 3288 	movw	r2, #5000	; 0x1388
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e121      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006056:	4b6e      	ldr	r3, [pc, #440]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0ee      	beq.n	8006040 <HAL_RCC_OscConfig+0x568>
 8006062:	e014      	b.n	800608e <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006064:	f7fb fe4e 	bl	8001d04 <HAL_GetTick>
 8006068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800606a:	e00a      	b.n	8006082 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800606c:	f7fb fe4a 	bl	8001d04 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	f241 3288 	movw	r2, #5000	; 0x1388
 800607a:	4293      	cmp	r3, r2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e10b      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006082:	4b63      	ldr	r3, [pc, #396]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ee      	bne.n	800606c <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8100 	beq.w	8006298 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006098:	4b5d      	ldr	r3, [pc, #372]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a0:	2b18      	cmp	r3, #24
 80060a2:	f000 80bb 	beq.w	800621c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	f040 8095 	bne.w	80061da <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b0:	4b57      	ldr	r3, [pc, #348]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a56      	ldr	r2, [pc, #344]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80060b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fb fe22 	bl	8001d04 <HAL_GetTick>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fb fe1e 	bl	8001d04 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e0e1      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060d6:	4b4e      	ldr	r3, [pc, #312]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060e2:	4b4b      	ldr	r3, [pc, #300]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80060e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e6:	4b4b      	ldr	r3, [pc, #300]	; (8006214 <HAL_RCC_OscConfig+0x73c>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060f2:	0112      	lsls	r2, r2, #4
 80060f4:	430a      	orrs	r2, r1
 80060f6:	4946      	ldr	r1, [pc, #280]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	628b      	str	r3, [r1, #40]	; 0x28
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	3b01      	subs	r3, #1
 8006102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	3b01      	subs	r3, #1
 800610c:	025b      	lsls	r3, r3, #9
 800610e:	b29b      	uxth	r3, r3
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	3b01      	subs	r3, #1
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	3b01      	subs	r3, #1
 8006126:	061b      	lsls	r3, r3, #24
 8006128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800612c:	4938      	ldr	r1, [pc, #224]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800612e:	4313      	orrs	r3, r2
 8006130:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006132:	4b37      	ldr	r3, [pc, #220]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	4a36      	ldr	r2, [pc, #216]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800613e:	4b34      	ldr	r3, [pc, #208]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006142:	4b35      	ldr	r3, [pc, #212]	; (8006218 <HAL_RCC_OscConfig+0x740>)
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800614a:	00d2      	lsls	r2, r2, #3
 800614c:	4930      	ldr	r1, [pc, #192]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800614e:	4313      	orrs	r3, r2
 8006150:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f023 020c 	bic.w	r2, r3, #12
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	492c      	ldr	r1, [pc, #176]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006160:	4313      	orrs	r3, r2
 8006162:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006164:	4b2a      	ldr	r3, [pc, #168]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	f023 0202 	bic.w	r2, r3, #2
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	4927      	ldr	r1, [pc, #156]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006172:	4313      	orrs	r3, r2
 8006174:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006176:	4b26      	ldr	r3, [pc, #152]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	4a25      	ldr	r2, [pc, #148]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006182:	4b23      	ldr	r3, [pc, #140]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	4a22      	ldr	r2, [pc, #136]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800619a:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a6:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a19      	ldr	r2, [pc, #100]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80061ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fb fda7 	bl	8001d04 <HAL_GetTick>
 80061b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ba:	f7fb fda3 	bl	8001d04 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e066      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x6e2>
 80061d8:	e05e      	b.n	8006298 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 80061e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fb fd8d 	bl	8001d04 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ee:	f7fb fd89 	bl	8001d04 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e04c      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <HAL_RCC_OscConfig+0x738>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f0      	bne.n	80061ee <HAL_RCC_OscConfig+0x716>
 800620c:	e044      	b.n	8006298 <HAL_RCC_OscConfig+0x7c0>
 800620e:	bf00      	nop
 8006210:	58024400 	.word	0x58024400
 8006214:	fffffc0c 	.word	0xfffffc0c
 8006218:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800621c:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <HAL_RCC_OscConfig+0x7cc>)
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <HAL_RCC_OscConfig+0x7cc>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	2b01      	cmp	r3, #1
 800622e:	d031      	beq.n	8006294 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f003 0203 	and.w	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800623a:	429a      	cmp	r2, r3
 800623c:	d12a      	bne.n	8006294 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	091b      	lsrs	r3, r3, #4
 8006242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d122      	bne.n	8006294 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800625a:	429a      	cmp	r2, r3
 800625c:	d11a      	bne.n	8006294 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	0a5b      	lsrs	r3, r3, #9
 8006262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d111      	bne.n	8006294 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d108      	bne.n	8006294 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	0e1b      	lsrs	r3, r3, #24
 8006286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3730      	adds	r7, #48	; 0x30
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400

080062a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e19c      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062bc:	4b8a      	ldr	r3, [pc, #552]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d910      	bls.n	80062ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b87      	ldr	r3, [pc, #540]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f023 020f 	bic.w	r2, r3, #15
 80062d2:	4985      	ldr	r1, [pc, #532]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062da:	4b83      	ldr	r3, [pc, #524]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e184      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	4b7b      	ldr	r3, [pc, #492]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006304:	429a      	cmp	r2, r3
 8006306:	d908      	bls.n	800631a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006308:	4b78      	ldr	r3, [pc, #480]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	4975      	ldr	r1, [pc, #468]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006316:	4313      	orrs	r3, r2
 8006318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d010      	beq.n	8006348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	4b70      	ldr	r3, [pc, #448]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006332:	429a      	cmp	r2, r3
 8006334:	d908      	bls.n	8006348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006336:	4b6d      	ldr	r3, [pc, #436]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	496a      	ldr	r1, [pc, #424]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006344:	4313      	orrs	r3, r2
 8006346:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d010      	beq.n	8006376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	4b64      	ldr	r3, [pc, #400]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006360:	429a      	cmp	r2, r3
 8006362:	d908      	bls.n	8006376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006364:	4b61      	ldr	r3, [pc, #388]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	495e      	ldr	r1, [pc, #376]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006372:	4313      	orrs	r3, r2
 8006374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d010      	beq.n	80063a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800638e:	429a      	cmp	r2, r3
 8006390:	d908      	bls.n	80063a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006392:	4b56      	ldr	r3, [pc, #344]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4953      	ldr	r1, [pc, #332]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d010      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	4b4d      	ldr	r3, [pc, #308]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	429a      	cmp	r2, r3
 80063be:	d908      	bls.n	80063d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c0:	4b4a      	ldr	r3, [pc, #296]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f023 020f 	bic.w	r2, r3, #15
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4947      	ldr	r1, [pc, #284]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d055      	beq.n	800648a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063de:	4b43      	ldr	r3, [pc, #268]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	4940      	ldr	r1, [pc, #256]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d107      	bne.n	8006408 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063f8:	4b3c      	ldr	r3, [pc, #240]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d121      	bne.n	8006448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0f6      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d107      	bne.n	8006420 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006410:	4b36      	ldr	r3, [pc, #216]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d115      	bne.n	8006448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0ea      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006428:	4b30      	ldr	r3, [pc, #192]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0de      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006438:	4b2c      	ldr	r3, [pc, #176]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0d6      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f023 0207 	bic.w	r2, r3, #7
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4925      	ldr	r1, [pc, #148]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 8006456:	4313      	orrs	r3, r2
 8006458:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645a:	f7fb fc53 	bl	8001d04 <HAL_GetTick>
 800645e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006460:	e00a      	b.n	8006478 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006462:	f7fb fc4f 	bl	8001d04 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0be      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006478:	4b1c      	ldr	r3, [pc, #112]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	429a      	cmp	r2, r3
 8006488:	d1eb      	bne.n	8006462 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d208      	bcs.n	80064b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f023 020f 	bic.w	r2, r3, #15
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	490e      	ldr	r1, [pc, #56]	; (80064ec <HAL_RCC_ClockConfig+0x244>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d214      	bcs.n	80064f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 020f 	bic.w	r2, r3, #15
 80064ce:	4906      	ldr	r1, [pc, #24]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d6:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <HAL_RCC_ClockConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d005      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e086      	b.n	80065f6 <HAL_RCC_ClockConfig+0x34e>
 80064e8:	52002000 	.word	0x52002000
 80064ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006508:	429a      	cmp	r2, r3
 800650a:	d208      	bcs.n	800651e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800650c:	4b3c      	ldr	r3, [pc, #240]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	4939      	ldr	r1, [pc, #228]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 800651a:	4313      	orrs	r3, r2
 800651c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d010      	beq.n	800654c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	4b34      	ldr	r3, [pc, #208]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006536:	429a      	cmp	r2, r3
 8006538:	d208      	bcs.n	800654c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800653a:	4b31      	ldr	r3, [pc, #196]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	492e      	ldr	r1, [pc, #184]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 8006548:	4313      	orrs	r3, r2
 800654a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	d010      	beq.n	800657a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699a      	ldr	r2, [r3, #24]
 800655c:	4b28      	ldr	r3, [pc, #160]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006564:	429a      	cmp	r2, r3
 8006566:	d208      	bcs.n	800657a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006568:	4b25      	ldr	r3, [pc, #148]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	4922      	ldr	r1, [pc, #136]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 8006576:	4313      	orrs	r3, r2
 8006578:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d010      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006592:	429a      	cmp	r2, r3
 8006594:	d208      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	4917      	ldr	r1, [pc, #92]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80065a8:	f000 f834 	bl	8006614 <HAL_RCC_GetSysClockFreq>
 80065ac:	4601      	mov	r1, r0
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	4a12      	ldr	r2, [pc, #72]	; (8006604 <HAL_RCC_ClockConfig+0x35c>)
 80065ba:	5cd3      	ldrb	r3, [r2, r3]
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	fa21 f303 	lsr.w	r3, r1, r3
 80065c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <HAL_RCC_ClockConfig+0x358>)
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	4a0d      	ldr	r2, [pc, #52]	; (8006604 <HAL_RCC_ClockConfig+0x35c>)
 80065d0:	5cd3      	ldrb	r3, [r2, r3]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
 80065dc:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <HAL_RCC_ClockConfig+0x360>)
 80065de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <HAL_RCC_ClockConfig+0x364>)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <HAL_RCC_ClockConfig+0x368>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fb fb40 	bl	8001c70 <HAL_InitTick>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	58024400 	.word	0x58024400
 8006604:	0800bc9c 	.word	0x0800bc9c
 8006608:	2400000c 	.word	0x2400000c
 800660c:	24000008 	.word	0x24000008
 8006610:	24000010 	.word	0x24000010

08006614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006614:	b480      	push	{r7}
 8006616:	b089      	sub	sp, #36	; 0x24
 8006618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800661a:	4baf      	ldr	r3, [pc, #700]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006622:	2b18      	cmp	r3, #24
 8006624:	f200 814e 	bhi.w	80068c4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006695 	.word	0x08006695
 8006634:	080068c5 	.word	0x080068c5
 8006638:	080068c5 	.word	0x080068c5
 800663c:	080068c5 	.word	0x080068c5
 8006640:	080068c5 	.word	0x080068c5
 8006644:	080068c5 	.word	0x080068c5
 8006648:	080068c5 	.word	0x080068c5
 800664c:	080068c5 	.word	0x080068c5
 8006650:	080066bb 	.word	0x080066bb
 8006654:	080068c5 	.word	0x080068c5
 8006658:	080068c5 	.word	0x080068c5
 800665c:	080068c5 	.word	0x080068c5
 8006660:	080068c5 	.word	0x080068c5
 8006664:	080068c5 	.word	0x080068c5
 8006668:	080068c5 	.word	0x080068c5
 800666c:	080068c5 	.word	0x080068c5
 8006670:	080066c1 	.word	0x080066c1
 8006674:	080068c5 	.word	0x080068c5
 8006678:	080068c5 	.word	0x080068c5
 800667c:	080068c5 	.word	0x080068c5
 8006680:	080068c5 	.word	0x080068c5
 8006684:	080068c5 	.word	0x080068c5
 8006688:	080068c5 	.word	0x080068c5
 800668c:	080068c5 	.word	0x080068c5
 8006690:	080066c7 	.word	0x080066c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006694:	4b90      	ldr	r3, [pc, #576]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066a0:	4b8d      	ldr	r3, [pc, #564]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	4a8c      	ldr	r2, [pc, #560]	; (80068dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
 80066b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80066b2:	e10a      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066b4:	4b89      	ldr	r3, [pc, #548]	; (80068dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80066b6:	61bb      	str	r3, [r7, #24]
    break;
 80066b8:	e107      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80066ba:	4b89      	ldr	r3, [pc, #548]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80066bc:	61bb      	str	r3, [r7, #24]
    break;
 80066be:	e104      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80066c0:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80066c2:	61bb      	str	r3, [r7, #24]
    break;
 80066c4:	e101      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066c6:	4b84      	ldr	r3, [pc, #528]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80066d0:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066dc:	4b7e      	ldr	r3, [pc, #504]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80066e6:	4b7c      	ldr	r3, [pc, #496]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80da 	beq.w	80068be <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d05a      	beq.n	80067c6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006710:	2b01      	cmp	r3, #1
 8006712:	d302      	bcc.n	800671a <HAL_RCC_GetSysClockFreq+0x106>
 8006714:	2b02      	cmp	r3, #2
 8006716:	d078      	beq.n	800680a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006718:	e099      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800671a:	4b6f      	ldr	r3, [pc, #444]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d02d      	beq.n	8006782 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006726:	4b6c      	ldr	r3, [pc, #432]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	08db      	lsrs	r3, r3, #3
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	4a6a      	ldr	r2, [pc, #424]	; (80068dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006750:	4b61      	ldr	r3, [pc, #388]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	ed97 6a02 	vldr	s12, [r7, #8]
 8006764:	eddf 5a60 	vldr	s11, [pc, #384]	; 80068e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006780:	e087      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80068ec <HAL_RCC_GetSysClockFreq+0x2d8>
 8006790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006794:	4b50      	ldr	r3, [pc, #320]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80068e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80067ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c4:	e065      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80068f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80067d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d8:	4b3f      	ldr	r3, [pc, #252]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80068e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80067f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006804:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006808:	e043      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	eddf 6a37 	vldr	s13, [pc, #220]	; 80068f4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681c:	4b2e      	ldr	r3, [pc, #184]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006830:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80068e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684c:	e021      	b.n	8006892 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006858:	eddf 6a25 	vldr	s13, [pc, #148]	; 80068f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800685c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006860:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006870:	ed97 6a02 	vldr	s12, [r7, #8]
 8006874:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80068e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006890:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	0a5b      	lsrs	r3, r3, #9
 8006898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689c:	3301      	adds	r3, #1
 800689e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b6:	ee17 3a90 	vmov	r3, s15
 80068ba:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80068bc:	e005      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
    break;
 80068c2:	e002      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80068c6:	61bb      	str	r3, [r7, #24]
    break;
 80068c8:	bf00      	nop
  }

  return sysclockfreq;
 80068ca:	69bb      	ldr	r3, [r7, #24]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3724      	adds	r7, #36	; 0x24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	58024400 	.word	0x58024400
 80068dc:	03d09000 	.word	0x03d09000
 80068e0:	003d0900 	.word	0x003d0900
 80068e4:	007a1200 	.word	0x007a1200
 80068e8:	46000000 	.word	0x46000000
 80068ec:	4c742400 	.word	0x4c742400
 80068f0:	4a742400 	.word	0x4a742400
 80068f4:	4af42400 	.word	0x4af42400

080068f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80068fe:	f7ff fe89 	bl	8006614 <HAL_RCC_GetSysClockFreq>
 8006902:	4601      	mov	r1, r0
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <HAL_RCC_GetHCLKFreq+0x50>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	4a0f      	ldr	r2, [pc, #60]	; (800694c <HAL_RCC_GetHCLKFreq+0x54>)
 8006910:	5cd3      	ldrb	r3, [r2, r3]
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	fa21 f303 	lsr.w	r3, r1, r3
 800691a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <HAL_RCC_GetHCLKFreq+0x50>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	4a09      	ldr	r2, [pc, #36]	; (800694c <HAL_RCC_GetHCLKFreq+0x54>)
 8006926:	5cd3      	ldrb	r3, [r2, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	fa22 f303 	lsr.w	r3, r2, r3
 8006932:	4a07      	ldr	r2, [pc, #28]	; (8006950 <HAL_RCC_GetHCLKFreq+0x58>)
 8006934:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006936:	4a07      	ldr	r2, [pc, #28]	; (8006954 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <HAL_RCC_GetHCLKFreq+0x58>)
 800693e:	681b      	ldr	r3, [r3, #0]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	58024400 	.word	0x58024400
 800694c:	0800bc9c 	.word	0x0800bc9c
 8006950:	2400000c 	.word	0x2400000c
 8006954:	24000008 	.word	0x24000008

08006958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800695c:	f7ff ffcc 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006960:	4601      	mov	r1, r0
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	091b      	lsrs	r3, r3, #4
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	4a04      	ldr	r2, [pc, #16]	; (8006980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800696e:	5cd3      	ldrb	r3, [r2, r3]
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd80      	pop	{r7, pc}
 800697c:	58024400 	.word	0x58024400
 8006980:	0800bc9c 	.word	0x0800bc9c

08006984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006988:	f7ff ffb6 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 800698c:	4601      	mov	r1, r0
 800698e:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800699a:	5cd3      	ldrb	r3, [r2, r3]
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	58024400 	.word	0x58024400
 80069ac:	0800bc9c 	.word	0x0800bc9c

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069b8:	2300      	movs	r3, #0
 80069ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069bc:	2300      	movs	r3, #0
 80069be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d03d      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d4:	d013      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069da:	d802      	bhi.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80069e0:	e01f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80069e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e6:	d013      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80069e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069ec:	d01c      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80069ee:	e018      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f0:	4bad      	ldr	r3, [pc, #692]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	4aac      	ldr	r2, [pc, #688]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069fc:	e015      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3304      	adds	r3, #4
 8006a02:	2102      	movs	r1, #2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fca7 	bl	8008358 <RCCEx_PLL2_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a0e:	e00c      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3324      	adds	r3, #36	; 0x24
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fd50 	bl	80084bc <RCCEx_PLL3_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
      break;
 8006a26:	e000      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a30:	4b9d      	ldr	r3, [pc, #628]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3c:	499a      	ldr	r1, [pc, #616]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	650b      	str	r3, [r1, #80]	; 0x50
 8006a42:	e001      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03d      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d826      	bhi.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a79 	.word	0x08006a79
 8006a68:	08006a87 	.word	0x08006a87
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	08006ab1 	.word	0x08006ab1
 8006a74:	08006ab1 	.word	0x08006ab1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a78:	4b8b      	ldr	r3, [pc, #556]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	4a8a      	ldr	r2, [pc, #552]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a84:	e015      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f001 fc63 	bl	8008358 <RCCEx_PLL2_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a96:	e00c      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3324      	adds	r3, #36	; 0x24
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 fd0c 	bl	80084bc <RCCEx_PLL3_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006aa8:	e003      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	75fb      	strb	r3, [r7, #23]
      break;
 8006aae:	e000      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ab8:	4b7b      	ldr	r3, [pc, #492]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	f023 0207 	bic.w	r2, r3, #7
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	4978      	ldr	r1, [pc, #480]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	650b      	str	r3, [r1, #80]	; 0x50
 8006aca:	e001      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d043      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d01f      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d804      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d010      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006af0:	e021      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af6:	d021      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006af8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006afc:	d020      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006afe:	2bc0      	cmp	r3, #192	; 0xc0
 8006b00:	d020      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006b02:	e018      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4b68      	ldr	r3, [pc, #416]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	4a67      	ldr	r2, [pc, #412]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b10:	e019      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fc1d 	bl	8008358 <RCCEx_PLL2_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b22:	e010      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3324      	adds	r3, #36	; 0x24
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fcc6 	bl	80084bc <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b34:	e007      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3a:	e004      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006b4c:	4b56      	ldr	r3, [pc, #344]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	4953      	ldr	r1, [pc, #332]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b5e:	e001      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d047      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d022      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7e:	d805      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b88:	d011      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006b8a:	e022      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b90:	d022      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006b92:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b96:	d021      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006b98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b9c:	d020      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b9e:	e018      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba0:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4a40      	ldr	r2, [pc, #256]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006bac:	e019      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fbcf 	bl	8008358 <RCCEx_PLL2_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006bbe:	e010      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fc78 	bl	80084bc <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006bd0:	e007      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd6:	e004      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006bd8:	bf00      	nop
 8006bda:	e002      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006be8:	4b2f      	ldr	r3, [pc, #188]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bec:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf4:	492c      	ldr	r1, [pc, #176]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	650b      	str	r3, [r1, #80]	; 0x50
 8006bfa:	e001      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d032      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d009      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d802      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d018      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006c1c:	e014      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d009      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c22:	2b30      	cmp	r3, #48	; 0x30
 8006c24:	d015      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006c26:	e00f      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c28:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c34:	e00e      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 fb8b 	bl	8008358 <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c46:	e005      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4c:	e002      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c66:	4910      	ldr	r1, [pc, #64]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c6c:	e001      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d044      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c86:	d021      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d805      	bhi.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c96:	d010      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006c98:	e021      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c9e:	d021      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca4:	d020      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006ca6:	e01a      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006ca8:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4ba6      	ldr	r3, [pc, #664]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4aa5      	ldr	r2, [pc, #660]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cb8:	e017      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 fb49 	bl	8008358 <RCCEx_PLL2_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cca:	e00e      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3324      	adds	r3, #36	; 0x24
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fbf2 	bl	80084bc <RCCEx_PLL3_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cdc:	e005      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce2:	e002      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cf0:	4b95      	ldr	r3, [pc, #596]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfc:	4992      	ldr	r1, [pc, #584]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	650b      	str	r3, [r1, #80]	; 0x50
 8006d02:	e001      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d042      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d1c:	d01b      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d22:	d805      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d022      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2c:	d00a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006d2e:	e01b      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d34:	d01d      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d3a:	d01c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d40:	d01b      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006d42:	e011      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3304      	adds	r3, #4
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fb04 	bl	8008358 <RCCEx_PLL2_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d54:	e012      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3324      	adds	r3, #36	; 0x24
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 fbad 	bl	80084bc <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d66:	e009      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6c:	e006      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e004      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d72:	bf00      	nop
 8006d74:	e002      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d76:	bf00      	nop
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d82:	4b71      	ldr	r3, [pc, #452]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8e:	496e      	ldr	r1, [pc, #440]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	650b      	str	r3, [r1, #80]	; 0x50
 8006d94:	e001      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d049      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006db0:	d02a      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006db6:	d808      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dbc:	d00f      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc2:	d015      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d021      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006dc8:	e01b      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dce:	d01f      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006dd0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006dd4:	d01e      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dda:	d01d      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006ddc:	e011      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2101      	movs	r1, #1
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 fab7 	bl	8008358 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dee:	e014      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	2101      	movs	r1, #1
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 fb60 	bl	80084bc <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e00:	e00b      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
      break;
 8006e06:	e008      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e08:	bf00      	nop
 8006e0a:	e006      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e004      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e20:	4b49      	ldr	r3, [pc, #292]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e2e:	4946      	ldr	r1, [pc, #280]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	658b      	str	r3, [r1, #88]	; 0x58
 8006e34:	e001      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02d      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e54:	d009      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e5a:	e00f      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e5c:	4b3a      	ldr	r3, [pc, #232]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a39      	ldr	r2, [pc, #228]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e68:	e00c      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	2101      	movs	r1, #1
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fa71 	bl	8008358 <RCCEx_PLL2_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e7a:	e003      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e8a:	4b2f      	ldr	r3, [pc, #188]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e96:	492c      	ldr	r1, [pc, #176]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	650b      	str	r3, [r1, #80]	; 0x50
 8006e9c:	e001      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d031      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d81a      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006ef3 	.word	0x08006ef3
 8006ec0:	08006ecd 	.word	0x08006ecd
 8006ec4:	08006edb 	.word	0x08006edb
 8006ec8:	08006ef3 	.word	0x08006ef3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ecc:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ed8:	e00c      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	2102      	movs	r1, #2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fa39 	bl	8008358 <RCCEx_PLL2_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006eea:	e003      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efe:	f023 0203 	bic.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f06:	4910      	ldr	r1, [pc, #64]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f0c:	e001      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 808a 	beq.w	8007034 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a09      	ldr	r2, [pc, #36]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f2c:	f7fa feea 	bl	8001d04 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f32:	e00d      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f34:	f7fa fee6 	bl	8001d04 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d906      	bls.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	75fb      	strb	r3, [r7, #23]
        break;
 8006f46:	e009      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f50:	4bba      	ldr	r3, [pc, #744]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0eb      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d166      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f62:	4bb7      	ldr	r3, [pc, #732]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6c:	4053      	eors	r3, r2
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d013      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f76:	4bb2      	ldr	r3, [pc, #712]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f80:	4baf      	ldr	r3, [pc, #700]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f84:	4aae      	ldr	r2, [pc, #696]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f8c:	4bac      	ldr	r3, [pc, #688]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f90:	4aab      	ldr	r2, [pc, #684]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f98:	4aa9      	ldr	r2, [pc, #676]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa8:	d115      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006faa:	f7fa feab 	bl	8001d04 <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fb0:	e00b      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb2:	f7fa fea7 	bl	8001d04 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d902      	bls.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8006fc8:	e005      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fca:	4b9d      	ldr	r3, [pc, #628]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0ed      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d126      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fea:	d10d      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006fec:	4b94      	ldr	r3, [pc, #592]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ffa:	0919      	lsrs	r1, r3, #4
 8006ffc:	4b91      	ldr	r3, [pc, #580]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006ffe:	400b      	ands	r3, r1
 8007000:	498f      	ldr	r1, [pc, #572]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007002:	4313      	orrs	r3, r2
 8007004:	610b      	str	r3, [r1, #16]
 8007006:	e005      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007008:	4b8d      	ldr	r3, [pc, #564]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	4a8c      	ldr	r2, [pc, #560]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800700e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007012:	6113      	str	r3, [r2, #16]
 8007014:	4b8a      	ldr	r3, [pc, #552]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800701e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007022:	4987      	ldr	r1, [pc, #540]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007024:	4313      	orrs	r3, r2
 8007026:	670b      	str	r3, [r1, #112]	; 0x70
 8007028:	e004      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	75bb      	strb	r3, [r7, #22]
 800702e:	e001      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d07f      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007046:	2b28      	cmp	r3, #40	; 0x28
 8007048:	d866      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	0800711f 	.word	0x0800711f
 8007054:	08007119 	.word	0x08007119
 8007058:	08007119 	.word	0x08007119
 800705c:	08007119 	.word	0x08007119
 8007060:	08007119 	.word	0x08007119
 8007064:	08007119 	.word	0x08007119
 8007068:	08007119 	.word	0x08007119
 800706c:	08007119 	.word	0x08007119
 8007070:	080070f5 	.word	0x080070f5
 8007074:	08007119 	.word	0x08007119
 8007078:	08007119 	.word	0x08007119
 800707c:	08007119 	.word	0x08007119
 8007080:	08007119 	.word	0x08007119
 8007084:	08007119 	.word	0x08007119
 8007088:	08007119 	.word	0x08007119
 800708c:	08007119 	.word	0x08007119
 8007090:	08007107 	.word	0x08007107
 8007094:	08007119 	.word	0x08007119
 8007098:	08007119 	.word	0x08007119
 800709c:	08007119 	.word	0x08007119
 80070a0:	08007119 	.word	0x08007119
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007119 	.word	0x08007119
 80070ac:	08007119 	.word	0x08007119
 80070b0:	0800711f 	.word	0x0800711f
 80070b4:	08007119 	.word	0x08007119
 80070b8:	08007119 	.word	0x08007119
 80070bc:	08007119 	.word	0x08007119
 80070c0:	08007119 	.word	0x08007119
 80070c4:	08007119 	.word	0x08007119
 80070c8:	08007119 	.word	0x08007119
 80070cc:	08007119 	.word	0x08007119
 80070d0:	0800711f 	.word	0x0800711f
 80070d4:	08007119 	.word	0x08007119
 80070d8:	08007119 	.word	0x08007119
 80070dc:	08007119 	.word	0x08007119
 80070e0:	08007119 	.word	0x08007119
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007119 	.word	0x08007119
 80070ec:	08007119 	.word	0x08007119
 80070f0:	0800711f 	.word	0x0800711f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	2101      	movs	r1, #1
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 f92c 	bl	8008358 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007104:	e00c      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3324      	adds	r3, #36	; 0x24
 800710a:	2101      	movs	r1, #1
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f9d5 	bl	80084bc <RCCEx_PLL3_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007116:	e003      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
      break;
 800711c:	e000      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 800711e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007126:	4b46      	ldr	r3, [pc, #280]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007134:	4942      	ldr	r1, [pc, #264]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007136:	4313      	orrs	r3, r2
 8007138:	654b      	str	r3, [r1, #84]	; 0x54
 800713a:	e001      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d038      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007150:	2b05      	cmp	r3, #5
 8007152:	d821      	bhi.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	0800719f 	.word	0x0800719f
 8007160:	08007175 	.word	0x08007175
 8007164:	08007187 	.word	0x08007187
 8007168:	0800719f 	.word	0x0800719f
 800716c:	0800719f 	.word	0x0800719f
 8007170:	0800719f 	.word	0x0800719f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	2101      	movs	r1, #1
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f8ec 	bl	8008358 <RCCEx_PLL2_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007184:	e00c      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3324      	adds	r3, #36	; 0x24
 800718a:	2101      	movs	r1, #1
 800718c:	4618      	mov	r0, r3
 800718e:	f001 f995 	bl	80084bc <RCCEx_PLL3_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007196:	e003      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
      break;
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 800719e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d109      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071a6:	4b26      	ldr	r3, [pc, #152]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f023 0207 	bic.w	r2, r3, #7
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b2:	4923      	ldr	r1, [pc, #140]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	654b      	str	r3, [r1, #84]	; 0x54
 80071b8:	e001      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d040      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071d0:	2b05      	cmp	r3, #5
 80071d2:	d821      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80071d4:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	0800721f 	.word	0x0800721f
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	08007207 	.word	0x08007207
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	0800721f 	.word	0x0800721f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f8ac 	bl	8008358 <RCCEx_PLL2_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007204:	e00c      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	2101      	movs	r1, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f955 	bl	80084bc <RCCEx_PLL3_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007216:	e003      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
      break;
 800721c:	e000      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 800721e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d110      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007226:	4b06      	ldr	r3, [pc, #24]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722a:	f023 0207 	bic.w	r2, r3, #7
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007234:	4902      	ldr	r1, [pc, #8]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007236:	4313      	orrs	r3, r2
 8007238:	658b      	str	r3, [r1, #88]	; 0x58
 800723a:	e007      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800723c:	58024800 	.word	0x58024800
 8007240:	58024400 	.word	0x58024400
 8007244:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d044      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800725e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007262:	d01b      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007268:	d805      	bhi.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d022      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800726e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007274:	e01b      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727a:	d01d      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800727c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007280:	d01c      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8007282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007286:	d01b      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007288:	e011      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f861 	bl	8008358 <RCCEx_PLL2_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800729a:	e012      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3324      	adds	r3, #36	; 0x24
 80072a0:	2102      	movs	r1, #2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 f90a 	bl	80084bc <RCCEx_PLL3_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072ac:	e009      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	75fb      	strb	r3, [r7, #23]
      break;
 80072b2:	e006      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072b4:	bf00      	nop
 80072b6:	e004      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072b8:	bf00      	nop
 80072ba:	e002      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072bc:	bf00      	nop
 80072be:	e000      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072c8:	4bb3      	ldr	r3, [pc, #716]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d6:	49b0      	ldr	r1, [pc, #704]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	654b      	str	r3, [r1, #84]	; 0x54
 80072dc:	e001      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d044      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f8:	d01b      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x982>
 80072fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072fe:	d805      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007300:	2b00      	cmp	r3, #0
 8007302:	d022      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007308:	d00a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x970>
 800730a:	e01b      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800730c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007310:	d01d      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8007312:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007316:	d01c      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800731c:	d01b      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800731e:	e011      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f001 f816 	bl	8008358 <RCCEx_PLL2_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007330:	e012      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3324      	adds	r3, #36	; 0x24
 8007336:	2102      	movs	r1, #2
 8007338:	4618      	mov	r0, r3
 800733a:	f001 f8bf 	bl	80084bc <RCCEx_PLL3_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007342:	e009      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
      break;
 8007348:	e006      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800734a:	bf00      	nop
 800734c:	e004      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800734e:	bf00      	nop
 8007350:	e002      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800735e:	4b8e      	ldr	r3, [pc, #568]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007362:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800736c:	498a      	ldr	r1, [pc, #552]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800736e:	4313      	orrs	r3, r2
 8007370:	658b      	str	r3, [r1, #88]	; 0x58
 8007372:	e001      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007380:	2b00      	cmp	r3, #0
 8007382:	d044      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800738a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800738e:	d01b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8007390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007394:	d805      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d022      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800739a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739e:	d00a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80073a0:	e01b      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80073a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a6:	d01d      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80073a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073ac:	d01c      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 80073ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80073b2:	d01b      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80073b4:	e011      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3304      	adds	r3, #4
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 ffcb 	bl	8008358 <RCCEx_PLL2_Config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073c6:	e012      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	2102      	movs	r1, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 f874 	bl	80084bc <RCCEx_PLL3_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073d8:	e009      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	75fb      	strb	r3, [r7, #23]
      break;
 80073de:	e006      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073e0:	bf00      	nop
 80073e2:	e004      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073e4:	bf00      	nop
 80073e6:	e002      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073f4:	4b68      	ldr	r3, [pc, #416]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007402:	4965      	ldr	r1, [pc, #404]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007404:	4313      	orrs	r3, r2
 8007406:	658b      	str	r3, [r1, #88]	; 0x58
 8007408:	e001      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007424:	d10a      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3324      	adds	r3, #36	; 0x24
 800742a:	2102      	movs	r1, #2
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f845 	bl	80084bc <RCCEx_PLL3_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800743c:	4b56      	ldr	r3, [pc, #344]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800743e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744a:	4953      	ldr	r1, [pc, #332]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800744c:	4313      	orrs	r3, r2
 800744e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007466:	d10a      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3324      	adds	r3, #36	; 0x24
 800746c:	2102      	movs	r1, #2
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f824 	bl	80084bc <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800747e:	4b46      	ldr	r3, [pc, #280]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800748c:	4942      	ldr	r1, [pc, #264]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d030      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a8:	d00d      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 80074aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ae:	d016      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d111      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 ff4c 	bl	8008358 <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074c4:	e00c      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3324      	adds	r3, #36	; 0x24
 80074ca:	2102      	movs	r1, #2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fff5 	bl	80084bc <RCCEx_PLL3_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	75fb      	strb	r3, [r7, #23]
      break;
 80074dc:	e000      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074e6:	4b2c      	ldr	r3, [pc, #176]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074f4:	4928      	ldr	r1, [pc, #160]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	658b      	str	r3, [r1, #88]	; 0x58
 80074fa:	e001      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d02f      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007516:	d00c      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800751c:	d015      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 800751e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007522:	d10f      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007524:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007530:	e00c      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2101      	movs	r1, #1
 8007538:	4618      	mov	r0, r3
 800753a:	f000 ffbf 	bl	80084bc <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007542:	e003      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	e000      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 800754a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007560:	490d      	ldr	r1, [pc, #52]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007562:	4313      	orrs	r3, r2
 8007564:	654b      	str	r3, [r1, #84]	; 0x54
 8007566:	e001      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02c      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8007586:	e012      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4a02      	ldr	r2, [pc, #8]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800758e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007594:	e00e      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3304      	adds	r3, #4
 80075a0:	2102      	movs	r1, #2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fed8 	bl	8008358 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075ac:	e002      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
      break;
 80075b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075ba:	4b56      	ldr	r3, [pc, #344]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c6:	4953      	ldr	r1, [pc, #332]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075cc:	e001      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3324      	adds	r3, #36	; 0x24
 80075e2:	2102      	movs	r1, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 ff69 	bl	80084bc <RCCEx_PLL3_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d031      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800760a:	d00c      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d802      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d011      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8007616:	e00d      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761c:	d00f      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 800761e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007622:	d00e      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007624:	e006      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007626:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	4a3a      	ldr	r2, [pc, #232]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800762c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007632:	e007      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
      break;
 8007638:	e004      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800763a:	bf00      	nop
 800763c:	e002      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800763e:	bf00      	nop
 8007640:	e000      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800764a:	4b32      	ldr	r3, [pc, #200]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007658:	492e      	ldr	r1, [pc, #184]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800765a:	4313      	orrs	r3, r2
 800765c:	654b      	str	r3, [r1, #84]	; 0x54
 800765e:	e001      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800767c:	4925      	ldr	r1, [pc, #148]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800767e:	4313      	orrs	r3, r2
 8007680:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769a:	491e      	ldr	r1, [pc, #120]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800769c:	4313      	orrs	r3, r2
 800769e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b8:	4916      	ldr	r1, [pc, #88]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	4a11      	ldr	r2, [pc, #68]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076d4:	6113      	str	r3, [r2, #16]
 80076d6:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076e0:	490c      	ldr	r1, [pc, #48]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da08      	bge.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fa:	4906      	ldr	r1, [pc, #24]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007700:	7dbb      	ldrb	r3, [r7, #22]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	58024400 	.word	0x58024400

08007718 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b090      	sub	sp, #64	; 0x40
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007726:	d150      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007728:	4ba1      	ldr	r3, [pc, #644]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2b04      	cmp	r3, #4
 8007736:	d844      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007755 	.word	0x08007755
 8007744:	08007765 	.word	0x08007765
 8007748:	08007775 	.word	0x08007775
 800774c:	080077bd 	.word	0x080077bd
 8007750:	08007785 	.word	0x08007785
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fcb1 	bl	80080c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007762:	e1ef      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007764:	f107 0318 	add.w	r3, r7, #24
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fa11 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007772:	e1e7      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fb55 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007782:	e1df      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007784:	4b8a      	ldr	r3, [pc, #552]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800778c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007794:	4b87      	ldr	r3, [pc, #540]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007798:	e1d4      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077a0:	d102      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80077a2:	4b85      	ldr	r3, [pc, #532]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a6:	e1cd      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ae:	d102      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80077b0:	4b82      	ldr	r3, [pc, #520]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b4:	e1c6      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ba:	e1c3      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077bc:	4b80      	ldr	r3, [pc, #512]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c0:	e1c0      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c6:	bf00      	nop
 80077c8:	e1bc      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d0:	d14f      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80077d2:	4b77      	ldr	r3, [pc, #476]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80077da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	2b80      	cmp	r3, #128	; 0x80
 80077e0:	d01c      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d804      	bhi.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d00e      	beq.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80077ee:	e03c      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80077f0:	2bc0      	cmp	r3, #192	; 0xc0
 80077f2:	d037      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80077f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f8:	d018      	beq.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80077fa:	e036      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fc5d 	bl	80080c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780a:	e19b      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800780c:	f107 0318 	add.w	r3, r7, #24
 8007810:	4618      	mov	r0, r3
 8007812:	f000 f9bd 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781a:	e193      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781c:	f107 030c 	add.w	r3, r7, #12
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fb01 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800782a:	e18b      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800782c:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800782e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007834:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800783c:	4b5d      	ldr	r3, [pc, #372]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007840:	e180      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007848:	d102      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800784a:	4b5b      	ldr	r3, [pc, #364]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784e:	e179      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007856:	d102      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007858:	4b58      	ldr	r3, [pc, #352]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800785c:	e172      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007862:	e16f      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007864:	4b56      	ldr	r3, [pc, #344]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007868:	e16c      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800786e:	bf00      	nop
 8007870:	e168      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007878:	d153      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800787a:	4b4d      	ldr	r3, [pc, #308]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007882:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788a:	d01f      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800788c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007890:	d805      	bhi.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800789a:	d00f      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800789c:	e03d      	b.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800789e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80078a2:	d037      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80078a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a8:	d018      	beq.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80078aa:	e036      	b.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fc05 	bl	80080c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ba:	e143      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078bc:	f107 0318 	add.w	r3, r7, #24
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 f965 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ca:	e13b      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078cc:	f107 030c 	add.w	r3, r7, #12
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 faa9 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078da:	e133      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078dc:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078ec:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 80078f0:	e128      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078f8:	d102      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80078fa:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078fe:	e121      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007906:	d102      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007908:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800790c:	e11a      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007912:	e117      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007914:	4b2a      	ldr	r3, [pc, #168]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007918:	e114      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800791e:	bf00      	nop
 8007920:	e110      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d15d      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800792a:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800792c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793a:	d01f      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800793c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007940:	d805      	bhi.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794a:	d00f      	beq.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800794c:	e047      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800794e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007952:	d041      	beq.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007958:	d018      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800795a:	e040      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800795c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fbad 	bl	80080c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796a:	e0eb      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800796c:	f107 0318 	add.w	r3, r7, #24
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f90d 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e0e3      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fa51 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800798a:	e0db      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800798c:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800798e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007994:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800799c:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80079a0:	e0d0      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a8:	d10c      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80079aa:	4b03      	ldr	r3, [pc, #12]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ae:	e0c9      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 80079b0:	58024400 	.word	0x58024400
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	003d0900 	.word	0x003d0900
 80079bc:	007a1200 	.word	0x007a1200
 80079c0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ca:	d102      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80079cc:	4b60      	ldr	r3, [pc, #384]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d0:	e0b8      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d6:	e0b5      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079d8:	4b5e      	ldr	r3, [pc, #376]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079dc:	e0b2      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e2:	bf00      	nop
 80079e4:	e0ae      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079ec:	d13d      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80079ee:	4b5a      	ldr	r3, [pc, #360]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fe:	d00c      	beq.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a04:	d011      	beq.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d12b      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a0a:	f107 0318 	add.w	r3, r7, #24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f8be 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a18:	e094      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1a:	f107 030c 	add.w	r3, r7, #12
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fa02 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a28:	e08c      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a2a:	4b4b      	ldr	r3, [pc, #300]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a3a:	4b48      	ldr	r3, [pc, #288]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a3e:	e081      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a46:	d102      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 8007a48:	4b45      	ldr	r3, [pc, #276]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a4c:	e07a      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 8007a56:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a5a:	e073      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a60:	e070      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a66:	bf00      	nop
 8007a68:	e06c      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d11f      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007a72:	4b39      	ldr	r3, [pc, #228]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a86:	d008      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8007a88:	e00f      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fb16 	bl	80080c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a98:	e054      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a9a:	f107 0318 	add.w	r3, r7, #24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f876 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa8:	e04c      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aae:	bf00      	nop
 8007ab0:	e048      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab8:	d142      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007aba:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007abe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ac2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aca:	d029      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ad0:	d808      	bhi.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ad6:	d013      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007adc:	d018      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007ae2:	e029      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ae8:	d020      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007aea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007aee:	d020      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af4:	d017      	beq.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007af6:	e01f      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007af8:	f000 f834 	bl	8007b64 <HAL_RCCEx_GetD3PCLK1Freq>
 8007afc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007afe:	e021      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b00:	f107 0318 	add.w	r3, r7, #24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f843 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0e:	e019      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f987 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1e:	e011      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007b20:	4b0e      	ldr	r3, [pc, #56]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b24:	e00e      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007b26:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b2a:	e00b      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007b2c:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b30:	e008      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b36:	e005      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b3c:	bf00      	nop
 8007b3e:	e001      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3740      	adds	r7, #64	; 0x40
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	007a1200 	.word	0x007a1200
 8007b54:	00bb8000 	.word	0x00bb8000
 8007b58:	58024400 	.word	0x58024400
 8007b5c:	03d09000 	.word	0x03d09000
 8007b60:	003d0900 	.word	0x003d0900

08007b64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007b68:	f7fe fec6 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	4a04      	ldr	r2, [pc, #16]	; (8007b8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b7a:	5cd3      	ldrb	r3, [r2, r3]
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	58024400 	.word	0x58024400
 8007b8c:	0800bc9c 	.word	0x0800bc9c

08007b90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b089      	sub	sp, #36	; 0x24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b98:	4b9d      	ldr	r3, [pc, #628]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ba2:	4b9b      	ldr	r3, [pc, #620]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	0b1b      	lsrs	r3, r3, #12
 8007ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bae:	4b98      	ldr	r3, [pc, #608]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	091b      	lsrs	r3, r3, #4
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007bba:	4b95      	ldr	r3, [pc, #596]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	08db      	lsrs	r3, r3, #3
 8007bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 810a 	beq.w	8007df2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d05a      	beq.n	8007c9a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d302      	bcc.n	8007bee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d078      	beq.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007bec:	e099      	b.n	8007d22 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bee:	4b88      	ldr	r3, [pc, #544]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d02d      	beq.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bfa:	4b85      	ldr	r3, [pc, #532]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	08db      	lsrs	r3, r3, #3
 8007c00:	f003 0303 	and.w	r3, r3, #3
 8007c04:	4a83      	ldr	r2, [pc, #524]	; (8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007c06:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c24:	4b7a      	ldr	r3, [pc, #488]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c54:	e087      	b.n	8007d66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e1c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c68:	4b69      	ldr	r3, [pc, #420]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c98:	e065      	b.n	8007d66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cac:	4b58      	ldr	r3, [pc, #352]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cdc:	e043      	b.n	8007d66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf0:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d20:	e021      	b.n	8007d66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007e20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d34:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d64:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007d66:	4b2a      	ldr	r3, [pc, #168]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	0a5b      	lsrs	r3, r3, #9
 8007d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d70:	ee07 3a90 	vmov	s15, r3
 8007d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d8c:	ee17 2a90 	vmov	r2, s15
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d94:	4b1e      	ldr	r3, [pc, #120]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8007db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dba:	ee17 2a90 	vmov	r2, s15
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007dc2:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	0e1b      	lsrs	r3, r3, #24
 8007dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dcc:	ee07 3a90 	vmov	s15, r3
 8007dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de8:	ee17 2a90 	vmov	r2, s15
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007df0:	e008      	b.n	8007e04 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	609a      	str	r2, [r3, #8]
}
 8007e04:	bf00      	nop
 8007e06:	3724      	adds	r7, #36	; 0x24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	58024400 	.word	0x58024400
 8007e14:	03d09000 	.word	0x03d09000
 8007e18:	46000000 	.word	0x46000000
 8007e1c:	4c742400 	.word	0x4c742400
 8007e20:	4a742400 	.word	0x4a742400
 8007e24:	4af42400 	.word	0x4af42400

08007e28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b089      	sub	sp, #36	; 0x24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e30:	4b9d      	ldr	r3, [pc, #628]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	f003 0303 	and.w	r3, r3, #3
 8007e38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007e3a:	4b9b      	ldr	r3, [pc, #620]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	0d1b      	lsrs	r3, r3, #20
 8007e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e46:	4b98      	ldr	r3, [pc, #608]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	0a1b      	lsrs	r3, r3, #8
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007e52:	4b95      	ldr	r3, [pc, #596]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	08db      	lsrs	r3, r3, #3
 8007e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 810a 	beq.w	800808a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d05a      	beq.n	8007f32 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d302      	bcc.n	8007e86 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d078      	beq.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007e84:	e099      	b.n	8007fba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e86:	4b88      	ldr	r3, [pc, #544]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d02d      	beq.n	8007eee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e92:	4b85      	ldr	r3, [pc, #532]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	08db      	lsrs	r3, r3, #3
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	4a83      	ldr	r2, [pc, #524]	; (80080ac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ebc:	4b7a      	ldr	r3, [pc, #488]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec4:	ee07 3a90 	vmov	s15, r3
 8007ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ecc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007eec:	e087      	b.n	8007ffe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	ee07 3a90 	vmov	s15, r3
 8007ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80080b4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f00:	4b69      	ldr	r3, [pc, #420]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f08:	ee07 3a90 	vmov	s15, r3
 8007f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f14:	eddf 5a66 	vldr	s11, [pc, #408]	; 80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f30:	e065      	b.n	8007ffe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	ee07 3a90 	vmov	s15, r3
 8007f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80080b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f44:	4b58      	ldr	r3, [pc, #352]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4c:	ee07 3a90 	vmov	s15, r3
 8007f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f58:	eddf 5a55 	vldr	s11, [pc, #340]	; 80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f74:	e043      	b.n	8007ffe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f88:	4b47      	ldr	r3, [pc, #284]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fb8:	e021      	b.n	8007ffe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80080b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ffc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007ffe:	4b2a      	ldr	r3, [pc, #168]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	0a5b      	lsrs	r3, r3, #9
 8008004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008008:	ee07 3a90 	vmov	s15, r3
 800800c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008014:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008018:	edd7 6a07 	vldr	s13, [r7, #28]
 800801c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008024:	ee17 2a90 	vmov	r2, s15
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800802c:	4b1e      	ldr	r3, [pc, #120]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008046:	edd7 6a07 	vldr	s13, [r7, #28]
 800804a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008052:	ee17 2a90 	vmov	r2, s15
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800805a:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	0e1b      	lsrs	r3, r3, #24
 8008060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008064:	ee07 3a90 	vmov	s15, r3
 8008068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008074:	edd7 6a07 	vldr	s13, [r7, #28]
 8008078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800807c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008080:	ee17 2a90 	vmov	r2, s15
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008088:	e008      	b.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	3724      	adds	r7, #36	; 0x24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	58024400 	.word	0x58024400
 80080ac:	03d09000 	.word	0x03d09000
 80080b0:	46000000 	.word	0x46000000
 80080b4:	4c742400 	.word	0x4c742400
 80080b8:	4a742400 	.word	0x4a742400
 80080bc:	4af42400 	.word	0x4af42400

080080c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080c8:	4b9d      	ldr	r3, [pc, #628]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	f003 0303 	and.w	r3, r3, #3
 80080d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80080d2:	4b9b      	ldr	r3, [pc, #620]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	091b      	lsrs	r3, r3, #4
 80080d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80080de:	4b98      	ldr	r3, [pc, #608]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80080e8:	4b95      	ldr	r3, [pc, #596]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ec:	08db      	lsrs	r3, r3, #3
 80080ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008100:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 810a 	beq.w	8008320 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d05a      	beq.n	80081c8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d302      	bcc.n	800811c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008116:	2b02      	cmp	r3, #2
 8008118:	d078      	beq.n	800820c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800811a:	e099      	b.n	8008250 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800811c:	4b88      	ldr	r3, [pc, #544]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d02d      	beq.n	8008184 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008128:	4b85      	ldr	r3, [pc, #532]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	08db      	lsrs	r3, r3, #3
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	4a84      	ldr	r2, [pc, #528]	; (8008344 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
 8008138:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	ee07 3a90 	vmov	s15, r3
 8008140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008152:	4b7b      	ldr	r3, [pc, #492]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	ed97 6a03 	vldr	s12, [r7, #12]
 8008166:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800816a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008182:	e087      	b.n	8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800834c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008196:	4b6a      	ldr	r3, [pc, #424]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081c6:	e065      	b.n	8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008350 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80081d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081da:	4b59      	ldr	r3, [pc, #356]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800820a:	e043      	b.n	8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b48      	ldr	r3, [pc, #288]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008232:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800824e:	e021      	b.n	8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008350 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008262:	4b37      	ldr	r3, [pc, #220]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008272:	ed97 6a03 	vldr	s12, [r7, #12]
 8008276:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008292:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008294:	4b2a      	ldr	r3, [pc, #168]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	0a5b      	lsrs	r3, r3, #9
 800829a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ba:	ee17 2a90 	vmov	r2, s15
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80082c2:	4b1f      	ldr	r3, [pc, #124]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	0c1b      	lsrs	r3, r3, #16
 80082c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082cc:	ee07 3a90 	vmov	s15, r3
 80082d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80082e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e8:	ee17 2a90 	vmov	r2, s15
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80082f0:	4b13      	ldr	r3, [pc, #76]	; (8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	0e1b      	lsrs	r3, r3, #24
 80082f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800830a:	edd7 6a07 	vldr	s13, [r7, #28]
 800830e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008316:	ee17 2a90 	vmov	r2, s15
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800831e:	e008      	b.n	8008332 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	609a      	str	r2, [r3, #8]
}
 8008332:	bf00      	nop
 8008334:	3724      	adds	r7, #36	; 0x24
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400
 8008344:	03d09000 	.word	0x03d09000
 8008348:	46000000 	.word	0x46000000
 800834c:	4c742400 	.word	0x4c742400
 8008350:	4a742400 	.word	0x4a742400
 8008354:	4af42400 	.word	0x4af42400

08008358 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008366:	4b53      	ldr	r3, [pc, #332]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d101      	bne.n	8008376 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e099      	b.n	80084aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008376:	4b4f      	ldr	r3, [pc, #316]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a4e      	ldr	r2, [pc, #312]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800837c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008382:	f7f9 fcbf 	bl	8001d04 <HAL_GetTick>
 8008386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008388:	e008      	b.n	800839c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800838a:	f7f9 fcbb 	bl	8001d04 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d901      	bls.n	800839c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e086      	b.n	80084aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800839c:	4b45      	ldr	r3, [pc, #276]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1f0      	bne.n	800838a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083a8:	4b42      	ldr	r3, [pc, #264]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	031b      	lsls	r3, r3, #12
 80083b6:	493f      	ldr	r1, [pc, #252]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	628b      	str	r3, [r1, #40]	; 0x28
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	025b      	lsls	r3, r3, #9
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	041b      	lsls	r3, r3, #16
 80083da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	061b      	lsls	r3, r3, #24
 80083e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083ec:	4931      	ldr	r1, [pc, #196]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083f2:	4b30      	ldr	r3, [pc, #192]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	492d      	ldr	r1, [pc, #180]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008400:	4313      	orrs	r3, r2
 8008402:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008404:	4b2b      	ldr	r3, [pc, #172]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	f023 0220 	bic.w	r2, r3, #32
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	4928      	ldr	r1, [pc, #160]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008412:	4313      	orrs	r3, r2
 8008414:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008416:	4b27      	ldr	r3, [pc, #156]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800841c:	f023 0310 	bic.w	r3, r3, #16
 8008420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008422:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <RCCEx_PLL2_Config+0x160>)
 8008428:	4013      	ands	r3, r2
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	69d2      	ldr	r2, [r2, #28]
 800842e:	00d2      	lsls	r2, r2, #3
 8008430:	4920      	ldr	r1, [pc, #128]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008432:	4313      	orrs	r3, r2
 8008434:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008436:	4b1f      	ldr	r3, [pc, #124]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	4a1e      	ldr	r2, [pc, #120]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800843c:	f043 0310 	orr.w	r3, r3, #16
 8008440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008448:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a19      	ldr	r2, [pc, #100]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800844e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008454:	e00f      	b.n	8008476 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d106      	bne.n	800846a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800845c:	4b15      	ldr	r3, [pc, #84]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	4a14      	ldr	r2, [pc, #80]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008468:	e005      	b.n	8008476 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800846a:	4b12      	ldr	r3, [pc, #72]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	4a11      	ldr	r2, [pc, #68]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008476:	4b0f      	ldr	r3, [pc, #60]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a0e      	ldr	r2, [pc, #56]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800847c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008482:	f7f9 fc3f 	bl	8001d04 <HAL_GetTick>
 8008486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008488:	e008      	b.n	800849c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800848a:	f7f9 fc3b 	bl	8001d04 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e006      	b.n	80084aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800849c:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <RCCEx_PLL2_Config+0x15c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0f0      	beq.n	800848a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	58024400 	.word	0x58024400
 80084b8:	ffff0007 	.word	0xffff0007

080084bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084ca:	4b53      	ldr	r3, [pc, #332]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d101      	bne.n	80084da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e099      	b.n	800860e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084da:	4b4f      	ldr	r3, [pc, #316]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a4e      	ldr	r2, [pc, #312]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80084e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e6:	f7f9 fc0d 	bl	8001d04 <HAL_GetTick>
 80084ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ec:	e008      	b.n	8008500 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084ee:	f7f9 fc09 	bl	8001d04 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d901      	bls.n	8008500 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e086      	b.n	800860e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008500:	4b45      	ldr	r3, [pc, #276]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f0      	bne.n	80084ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800850c:	4b42      	ldr	r3, [pc, #264]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	051b      	lsls	r3, r3, #20
 800851a:	493f      	ldr	r1, [pc, #252]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 800851c:	4313      	orrs	r3, r2
 800851e:	628b      	str	r3, [r1, #40]	; 0x28
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	3b01      	subs	r3, #1
 8008526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	3b01      	subs	r3, #1
 8008530:	025b      	lsls	r3, r3, #9
 8008532:	b29b      	uxth	r3, r3
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	3b01      	subs	r3, #1
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	3b01      	subs	r3, #1
 800854a:	061b      	lsls	r3, r3, #24
 800854c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008550:	4931      	ldr	r1, [pc, #196]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008556:	4b30      	ldr	r3, [pc, #192]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	492d      	ldr	r1, [pc, #180]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008564:	4313      	orrs	r3, r2
 8008566:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008568:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	4928      	ldr	r1, [pc, #160]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008576:	4313      	orrs	r3, r2
 8008578:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800857a:	4b27      	ldr	r3, [pc, #156]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	4a26      	ldr	r2, [pc, #152]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008586:	4b24      	ldr	r3, [pc, #144]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	4b24      	ldr	r3, [pc, #144]	; (800861c <RCCEx_PLL3_Config+0x160>)
 800858c:	4013      	ands	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	69d2      	ldr	r2, [r2, #28]
 8008592:	00d2      	lsls	r2, r2, #3
 8008594:	4920      	ldr	r1, [pc, #128]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008596:	4313      	orrs	r3, r2
 8008598:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800859a:	4b1f      	ldr	r3, [pc, #124]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	4a1e      	ldr	r2, [pc, #120]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	4a19      	ldr	r2, [pc, #100]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085b8:	e00f      	b.n	80085da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d106      	bne.n	80085ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085c0:	4b15      	ldr	r3, [pc, #84]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	4a14      	ldr	r2, [pc, #80]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085cc:	e005      	b.n	80085da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085ce:	4b12      	ldr	r3, [pc, #72]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a11      	ldr	r2, [pc, #68]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085da:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a0e      	ldr	r2, [pc, #56]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 80085e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e6:	f7f9 fb8d 	bl	8001d04 <HAL_GetTick>
 80085ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085ec:	e008      	b.n	8008600 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085ee:	f7f9 fb89 	bl	8001d04 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e006      	b.n	800860e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <RCCEx_PLL3_Config+0x15c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0f0      	beq.n	80085ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	58024400 	.word	0x58024400
 800861c:	ffff0007 	.word	0xffff0007

08008620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e049      	b.n	80086c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7f9 f828 	bl	800169c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f000 fa24 	bl	8008aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d001      	beq.n	80086e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e019      	b.n	800871c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <HAL_TIM_Base_Start+0x58>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b06      	cmp	r3, #6
 8008700:	d00b      	beq.n	800871a <HAL_TIM_Base_Start+0x4a>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008708:	d007      	beq.n	800871a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	00010007 	.word	0x00010007

0800872c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b01      	cmp	r3, #1
 800873e:	d001      	beq.n	8008744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e021      	b.n	8008788 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <HAL_TIM_Base_Start_IT+0x68>)
 8008764:	4013      	ands	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b06      	cmp	r3, #6
 800876c:	d00b      	beq.n	8008786 <HAL_TIM_Base_Start_IT+0x5a>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008774:	d007      	beq.n	8008786 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0201 	orr.w	r2, r2, #1
 8008784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	00010007 	.word	0x00010007

08008798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d122      	bne.n	80087f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d11b      	bne.n	80087f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f06f 0202 	mvn.w	r2, #2
 80087c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f947 	bl	8008a6e <HAL_TIM_IC_CaptureCallback>
 80087e0:	e005      	b.n	80087ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f939 	bl	8008a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f94a 	bl	8008a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d122      	bne.n	8008848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b04      	cmp	r3, #4
 800880e:	d11b      	bne.n	8008848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f06f 0204 	mvn.w	r2, #4
 8008818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2202      	movs	r2, #2
 800881e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f91d 	bl	8008a6e <HAL_TIM_IC_CaptureCallback>
 8008834:	e005      	b.n	8008842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f90f 	bl	8008a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f920 	bl	8008a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0308 	and.w	r3, r3, #8
 8008852:	2b08      	cmp	r3, #8
 8008854:	d122      	bne.n	800889c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b08      	cmp	r3, #8
 8008862:	d11b      	bne.n	800889c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f06f 0208 	mvn.w	r2, #8
 800886c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2204      	movs	r2, #4
 8008872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8f3 	bl	8008a6e <HAL_TIM_IC_CaptureCallback>
 8008888:	e005      	b.n	8008896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8e5 	bl	8008a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f8f6 	bl	8008a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	d122      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b10      	cmp	r3, #16
 80088b6:	d11b      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f06f 0210 	mvn.w	r2, #16
 80088c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2208      	movs	r2, #8
 80088c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8c9 	bl	8008a6e <HAL_TIM_IC_CaptureCallback>
 80088dc:	e005      	b.n	80088ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f8bb 	bl	8008a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f8cc 	bl	8008a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d10e      	bne.n	800891c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b01      	cmp	r3, #1
 800890a:	d107      	bne.n	800891c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 0201 	mvn.w	r2, #1
 8008914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7f8 fbe0 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b80      	cmp	r3, #128	; 0x80
 8008928:	d10e      	bne.n	8008948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008934:	2b80      	cmp	r3, #128	; 0x80
 8008936:	d107      	bne.n	8008948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fb28 	bl	8008f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008956:	d10e      	bne.n	8008976 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d107      	bne.n	8008976 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800896e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fb1b 	bl	8008fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d10e      	bne.n	80089a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	d107      	bne.n	80089a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800899a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f87a 	bl	8008a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f003 0320 	and.w	r3, r3, #32
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d10e      	bne.n	80089ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d107      	bne.n	80089ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f06f 0220 	mvn.w	r2, #32
 80089c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fadb 	bl	8008f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_TIM_SlaveConfigSynchro+0x18>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e031      	b.n	8008a52 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f8ed 	bl	8008be0 <TIM_SlaveTimer_SetConfig>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e018      	b.n	8008a52 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a2e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a3e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a40      	ldr	r2, [pc, #256]	; (8008bc0 <TIM_Base_SetConfig+0x114>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d013      	beq.n	8008aec <TIM_Base_SetConfig+0x40>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aca:	d00f      	beq.n	8008aec <TIM_Base_SetConfig+0x40>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a3d      	ldr	r2, [pc, #244]	; (8008bc4 <TIM_Base_SetConfig+0x118>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00b      	beq.n	8008aec <TIM_Base_SetConfig+0x40>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a3c      	ldr	r2, [pc, #240]	; (8008bc8 <TIM_Base_SetConfig+0x11c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d007      	beq.n	8008aec <TIM_Base_SetConfig+0x40>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a3b      	ldr	r2, [pc, #236]	; (8008bcc <TIM_Base_SetConfig+0x120>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_Base_SetConfig+0x40>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a3a      	ldr	r2, [pc, #232]	; (8008bd0 <TIM_Base_SetConfig+0x124>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d108      	bne.n	8008afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a2f      	ldr	r2, [pc, #188]	; (8008bc0 <TIM_Base_SetConfig+0x114>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d01f      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0c:	d01b      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a2c      	ldr	r2, [pc, #176]	; (8008bc4 <TIM_Base_SetConfig+0x118>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d017      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a2b      	ldr	r2, [pc, #172]	; (8008bc8 <TIM_Base_SetConfig+0x11c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a2a      	ldr	r2, [pc, #168]	; (8008bcc <TIM_Base_SetConfig+0x120>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00f      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a29      	ldr	r2, [pc, #164]	; (8008bd0 <TIM_Base_SetConfig+0x124>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00b      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a28      	ldr	r2, [pc, #160]	; (8008bd4 <TIM_Base_SetConfig+0x128>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d007      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a27      	ldr	r2, [pc, #156]	; (8008bd8 <TIM_Base_SetConfig+0x12c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d003      	beq.n	8008b46 <TIM_Base_SetConfig+0x9a>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a26      	ldr	r2, [pc, #152]	; (8008bdc <TIM_Base_SetConfig+0x130>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d108      	bne.n	8008b58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a10      	ldr	r2, [pc, #64]	; (8008bc0 <TIM_Base_SetConfig+0x114>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00f      	beq.n	8008ba4 <TIM_Base_SetConfig+0xf8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a12      	ldr	r2, [pc, #72]	; (8008bd0 <TIM_Base_SetConfig+0x124>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00b      	beq.n	8008ba4 <TIM_Base_SetConfig+0xf8>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a11      	ldr	r2, [pc, #68]	; (8008bd4 <TIM_Base_SetConfig+0x128>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d007      	beq.n	8008ba4 <TIM_Base_SetConfig+0xf8>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a10      	ldr	r2, [pc, #64]	; (8008bd8 <TIM_Base_SetConfig+0x12c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d003      	beq.n	8008ba4 <TIM_Base_SetConfig+0xf8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a0f      	ldr	r2, [pc, #60]	; (8008bdc <TIM_Base_SetConfig+0x130>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d103      	bne.n	8008bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	615a      	str	r2, [r3, #20]
}
 8008bb2:	bf00      	nop
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	40010000 	.word	0x40010000
 8008bc4:	40000400 	.word	0x40000400
 8008bc8:	40000800 	.word	0x40000800
 8008bcc:	40000c00 	.word	0x40000c00
 8008bd0:	40010400 	.word	0x40010400
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	40014400 	.word	0x40014400
 8008bdc:	40014800 	.word	0x40014800

08008be0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4b56      	ldr	r3, [pc, #344]	; (8008d50 <TIM_SlaveTimer_SetConfig+0x170>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4b53      	ldr	r3, [pc, #332]	; (8008d54 <TIM_SlaveTimer_SetConfig+0x174>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c26:	f000 808c 	beq.w	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2e:	d818      	bhi.n	8008c62 <TIM_SlaveTimer_SetConfig+0x82>
 8008c30:	2b30      	cmp	r3, #48	; 0x30
 8008c32:	f000 8086 	beq.w	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c36:	2b30      	cmp	r3, #48	; 0x30
 8008c38:	d807      	bhi.n	8008c4a <TIM_SlaveTimer_SetConfig+0x6a>
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	f000 8081 	beq.w	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d07e      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d07c      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008c48:	e07c      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c4a:	2b50      	cmp	r3, #80	; 0x50
 8008c4c:	d065      	beq.n	8008d1a <TIM_SlaveTimer_SetConfig+0x13a>
 8008c4e:	2b50      	cmp	r3, #80	; 0x50
 8008c50:	d802      	bhi.n	8008c58 <TIM_SlaveTimer_SetConfig+0x78>
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d038      	beq.n	8008cc8 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 8008c56:	e075      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c58:	2b60      	cmp	r3, #96	; 0x60
 8008c5a:	d068      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x14e>
 8008c5c:	2b70      	cmp	r3, #112	; 0x70
 8008c5e:	d028      	beq.n	8008cb2 <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8008c60:	e070      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c62:	4a3d      	ldr	r2, [pc, #244]	; (8008d58 <TIM_SlaveTimer_SetConfig+0x178>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d06c      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c68:	4a3b      	ldr	r2, [pc, #236]	; (8008d58 <TIM_SlaveTimer_SetConfig+0x178>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d810      	bhi.n	8008c90 <TIM_SlaveTimer_SetConfig+0xb0>
 8008c6e:	4a3b      	ldr	r2, [pc, #236]	; (8008d5c <TIM_SlaveTimer_SetConfig+0x17c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d066      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c74:	4a39      	ldr	r2, [pc, #228]	; (8008d5c <TIM_SlaveTimer_SetConfig+0x17c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d803      	bhi.n	8008c82 <TIM_SlaveTimer_SetConfig+0xa2>
 8008c7a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c7e:	d060      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c80:	e060      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c82:	4a37      	ldr	r2, [pc, #220]	; (8008d60 <TIM_SlaveTimer_SetConfig+0x180>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d05c      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c88:	4a36      	ldr	r2, [pc, #216]	; (8008d64 <TIM_SlaveTimer_SetConfig+0x184>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d059      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c8e:	e059      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c90:	4a35      	ldr	r2, [pc, #212]	; (8008d68 <TIM_SlaveTimer_SetConfig+0x188>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d055      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008c96:	4a34      	ldr	r2, [pc, #208]	; (8008d68 <TIM_SlaveTimer_SetConfig+0x188>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d803      	bhi.n	8008ca4 <TIM_SlaveTimer_SetConfig+0xc4>
 8008c9c:	4a33      	ldr	r2, [pc, #204]	; (8008d6c <TIM_SlaveTimer_SetConfig+0x18c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d04f      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008ca2:	e04f      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca8:	d04b      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
 8008caa:	4a31      	ldr	r2, [pc, #196]	; (8008d70 <TIM_SlaveTimer_SetConfig+0x190>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d048      	beq.n	8008d42 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008cb0:	e048      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68d9      	ldr	r1, [r3, #12]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f000 f8b6 	bl	8008e32 <TIM_ETR_SetConfig>
      break;
 8008cc6:	e03d      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d101      	bne.n	8008cd4 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e038      	b.n	8008d46 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a1a      	ldr	r2, [r3, #32]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0201 	bic.w	r2, r2, #1
 8008cea:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cfa:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	621a      	str	r2, [r3, #32]
      break;
 8008d18:	e014      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6899      	ldr	r1, [r3, #8]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	461a      	mov	r2, r3
 8008d28:	f000 f824 	bl	8008d74 <TIM_TI1_ConfigInputStage>
      break;
 8008d2c:	e00a      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6899      	ldr	r1, [r3, #8]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f000 f849 	bl	8008dd2 <TIM_TI2_ConfigInputStage>
      break;
 8008d40:	e000      	b.n	8008d44 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 8008d42:	bf00      	nop
  }
  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	ffcfff8f 	.word	0xffcfff8f
 8008d54:	fffefff8 	.word	0xfffefff8
 8008d58:	00100050 	.word	0x00100050
 8008d5c:	00100020 	.word	0x00100020
 8008d60:	00100030 	.word	0x00100030
 8008d64:	00100040 	.word	0x00100040
 8008d68:	00100070 	.word	0x00100070
 8008d6c:	00100060 	.word	0x00100060
 8008d70:	00200010 	.word	0x00200010

08008d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f023 0201 	bic.w	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 030a 	bic.w	r3, r3, #10
 8008db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	621a      	str	r2, [r3, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	f023 0210 	bic.w	r2, r3, #16
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	031b      	lsls	r3, r3, #12
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b087      	sub	sp, #28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	021a      	lsls	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	431a      	orrs	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	609a      	str	r2, [r3, #8]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e068      	b.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a2e      	ldr	r2, [pc, #184]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a2d      	ldr	r2, [pc, #180]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d108      	bne.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ec6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d01d      	beq.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008efe:	d018      	beq.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d013      	beq.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a1a      	ldr	r2, [pc, #104]	; (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00e      	beq.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a18      	ldr	r2, [pc, #96]	; (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d009      	beq.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a13      	ldr	r2, [pc, #76]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d004      	beq.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a14      	ldr	r2, [pc, #80]	; (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d10c      	bne.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	40010000 	.word	0x40010000
 8008f70:	40010400 	.word	0x40010400
 8008f74:	40000400 	.word	0x40000400
 8008f78:	40000800 	.word	0x40000800
 8008f7c:	40000c00 	.word	0x40000c00
 8008f80:	40001800 	.word	0x40001800

08008f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e042      	b.n	8009058 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7f8 fc0d 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2224      	movs	r2, #36	; 0x24
 8008fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0201 	bic.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8c2 	bl	800918c <UART_SetConfig>
 8009008:	4603      	mov	r3, r0
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e022      	b.n	8009058 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 ff62 	bl	8009ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800902e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800903e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 ffe9 	bl	800a028 <UART_CheckIdleState>
 8009056:	4603      	mov	r3, r0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b08a      	sub	sp, #40	; 0x28
 8009064:	af02      	add	r7, sp, #8
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009076:	2b20      	cmp	r3, #32
 8009078:	f040 8083 	bne.w	8009182 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <HAL_UART_Transmit+0x28>
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e07b      	b.n	8009184 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_UART_Transmit+0x3a>
 8009096:	2302      	movs	r3, #2
 8009098:	e074      	b.n	8009184 <HAL_UART_Transmit+0x124>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2221      	movs	r2, #33	; 0x21
 80090ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80090b2:	f7f8 fe27 	bl	8001d04 <HAL_GetTick>
 80090b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	88fa      	ldrh	r2, [r7, #6]
 80090bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d0:	d108      	bne.n	80090e4 <HAL_UART_Transmit+0x84>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	e003      	b.n	80090ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80090f4:	e02c      	b.n	8009150 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2200      	movs	r2, #0
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 ffd9 	bl	800a0b8 <UART_WaitOnFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e039      	b.n	8009184 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009124:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	3302      	adds	r3, #2
 800912a:	61bb      	str	r3, [r7, #24]
 800912c:	e007      	b.n	800913e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	781a      	ldrb	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	3301      	adds	r3, #1
 800913c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009156:	b29b      	uxth	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1cc      	bne.n	80090f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2200      	movs	r2, #0
 8009164:	2140      	movs	r1, #64	; 0x40
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 ffa6 	bl	800a0b8 <UART_WaitOnFlagUntilTimeout>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e006      	b.n	8009184 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e000      	b.n	8009184 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009182:	2302      	movs	r3, #2
  }
}
 8009184:	4618      	mov	r0, r3
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800918c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009190:	b08e      	sub	sp, #56	; 0x38
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ba:	4313      	orrs	r3, r2
 80091bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	4bc1      	ldr	r3, [pc, #772]	; (80094cc <UART_SetConfig+0x340>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091ce:	430b      	orrs	r3, r1
 80091d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68da      	ldr	r2, [r3, #12]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4ab7      	ldr	r2, [pc, #732]	; (80094d0 <UART_SetConfig+0x344>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fe:	4313      	orrs	r3, r2
 8009200:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	4bb2      	ldr	r3, [pc, #712]	; (80094d4 <UART_SetConfig+0x348>)
 800920a:	4013      	ands	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009212:	430b      	orrs	r3, r1
 8009214:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	f023 010f 	bic.w	r1, r3, #15
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4aa9      	ldr	r2, [pc, #676]	; (80094d8 <UART_SetConfig+0x34c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d177      	bne.n	8009326 <UART_SetConfig+0x19a>
 8009236:	4ba9      	ldr	r3, [pc, #676]	; (80094dc <UART_SetConfig+0x350>)
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800923e:	2b28      	cmp	r3, #40	; 0x28
 8009240:	d86c      	bhi.n	800931c <UART_SetConfig+0x190>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <UART_SetConfig+0xbc>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	080092ed 	.word	0x080092ed
 800924c:	0800931d 	.word	0x0800931d
 8009250:	0800931d 	.word	0x0800931d
 8009254:	0800931d 	.word	0x0800931d
 8009258:	0800931d 	.word	0x0800931d
 800925c:	0800931d 	.word	0x0800931d
 8009260:	0800931d 	.word	0x0800931d
 8009264:	0800931d 	.word	0x0800931d
 8009268:	080092f5 	.word	0x080092f5
 800926c:	0800931d 	.word	0x0800931d
 8009270:	0800931d 	.word	0x0800931d
 8009274:	0800931d 	.word	0x0800931d
 8009278:	0800931d 	.word	0x0800931d
 800927c:	0800931d 	.word	0x0800931d
 8009280:	0800931d 	.word	0x0800931d
 8009284:	0800931d 	.word	0x0800931d
 8009288:	080092fd 	.word	0x080092fd
 800928c:	0800931d 	.word	0x0800931d
 8009290:	0800931d 	.word	0x0800931d
 8009294:	0800931d 	.word	0x0800931d
 8009298:	0800931d 	.word	0x0800931d
 800929c:	0800931d 	.word	0x0800931d
 80092a0:	0800931d 	.word	0x0800931d
 80092a4:	0800931d 	.word	0x0800931d
 80092a8:	08009305 	.word	0x08009305
 80092ac:	0800931d 	.word	0x0800931d
 80092b0:	0800931d 	.word	0x0800931d
 80092b4:	0800931d 	.word	0x0800931d
 80092b8:	0800931d 	.word	0x0800931d
 80092bc:	0800931d 	.word	0x0800931d
 80092c0:	0800931d 	.word	0x0800931d
 80092c4:	0800931d 	.word	0x0800931d
 80092c8:	0800930d 	.word	0x0800930d
 80092cc:	0800931d 	.word	0x0800931d
 80092d0:	0800931d 	.word	0x0800931d
 80092d4:	0800931d 	.word	0x0800931d
 80092d8:	0800931d 	.word	0x0800931d
 80092dc:	0800931d 	.word	0x0800931d
 80092e0:	0800931d 	.word	0x0800931d
 80092e4:	0800931d 	.word	0x0800931d
 80092e8:	08009315 	.word	0x08009315
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e339      	b.n	8009968 <UART_SetConfig+0x7dc>
 80092f4:	2304      	movs	r3, #4
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e335      	b.n	8009968 <UART_SetConfig+0x7dc>
 80092fc:	2308      	movs	r3, #8
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e331      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009304:	2310      	movs	r3, #16
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e32d      	b.n	8009968 <UART_SetConfig+0x7dc>
 800930c:	2320      	movs	r3, #32
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e329      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009314:	2340      	movs	r3, #64	; 0x40
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e325      	b.n	8009968 <UART_SetConfig+0x7dc>
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	bf00      	nop
 8009324:	e320      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a6d      	ldr	r2, [pc, #436]	; (80094e0 <UART_SetConfig+0x354>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d132      	bne.n	8009396 <UART_SetConfig+0x20a>
 8009330:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <UART_SetConfig+0x350>)
 8009332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	2b05      	cmp	r3, #5
 800933a:	d827      	bhi.n	800938c <UART_SetConfig+0x200>
 800933c:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0x1b8>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009365 	.word	0x08009365
 800934c:	0800936d 	.word	0x0800936d
 8009350:	08009375 	.word	0x08009375
 8009354:	0800937d 	.word	0x0800937d
 8009358:	08009385 	.word	0x08009385
 800935c:	2300      	movs	r3, #0
 800935e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009362:	e301      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009364:	2304      	movs	r3, #4
 8009366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936a:	e2fd      	b.n	8009968 <UART_SetConfig+0x7dc>
 800936c:	2308      	movs	r3, #8
 800936e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009372:	e2f9      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009374:	2310      	movs	r3, #16
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	e2f5      	b.n	8009968 <UART_SetConfig+0x7dc>
 800937c:	2320      	movs	r3, #32
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	e2f1      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009384:	2340      	movs	r3, #64	; 0x40
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e2ed      	b.n	8009968 <UART_SetConfig+0x7dc>
 800938c:	2380      	movs	r3, #128	; 0x80
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	bf00      	nop
 8009394:	e2e8      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a52      	ldr	r2, [pc, #328]	; (80094e4 <UART_SetConfig+0x358>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d132      	bne.n	8009406 <UART_SetConfig+0x27a>
 80093a0:	4b4e      	ldr	r3, [pc, #312]	; (80094dc <UART_SetConfig+0x350>)
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	2b05      	cmp	r3, #5
 80093aa:	d827      	bhi.n	80093fc <UART_SetConfig+0x270>
 80093ac:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <UART_SetConfig+0x228>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	080093cd 	.word	0x080093cd
 80093b8:	080093d5 	.word	0x080093d5
 80093bc:	080093dd 	.word	0x080093dd
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e2c9      	b.n	8009968 <UART_SetConfig+0x7dc>
 80093d4:	2304      	movs	r3, #4
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e2c5      	b.n	8009968 <UART_SetConfig+0x7dc>
 80093dc:	2308      	movs	r3, #8
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e2c1      	b.n	8009968 <UART_SetConfig+0x7dc>
 80093e4:	2310      	movs	r3, #16
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e2bd      	b.n	8009968 <UART_SetConfig+0x7dc>
 80093ec:	2320      	movs	r3, #32
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e2b9      	b.n	8009968 <UART_SetConfig+0x7dc>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e2b5      	b.n	8009968 <UART_SetConfig+0x7dc>
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	bf00      	nop
 8009404:	e2b0      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a37      	ldr	r2, [pc, #220]	; (80094e8 <UART_SetConfig+0x35c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d132      	bne.n	8009476 <UART_SetConfig+0x2ea>
 8009410:	4b32      	ldr	r3, [pc, #200]	; (80094dc <UART_SetConfig+0x350>)
 8009412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009414:	f003 0307 	and.w	r3, r3, #7
 8009418:	2b05      	cmp	r3, #5
 800941a:	d827      	bhi.n	800946c <UART_SetConfig+0x2e0>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <UART_SetConfig+0x298>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	0800943d 	.word	0x0800943d
 8009428:	08009445 	.word	0x08009445
 800942c:	0800944d 	.word	0x0800944d
 8009430:	08009455 	.word	0x08009455
 8009434:	0800945d 	.word	0x0800945d
 8009438:	08009465 	.word	0x08009465
 800943c:	2300      	movs	r3, #0
 800943e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009442:	e291      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944a:	e28d      	b.n	8009968 <UART_SetConfig+0x7dc>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009452:	e289      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	e285      	b.n	8009968 <UART_SetConfig+0x7dc>
 800945c:	2320      	movs	r3, #32
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e281      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009464:	2340      	movs	r3, #64	; 0x40
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e27d      	b.n	8009968 <UART_SetConfig+0x7dc>
 800946c:	2380      	movs	r3, #128	; 0x80
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	bf00      	nop
 8009474:	e278      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a1c      	ldr	r2, [pc, #112]	; (80094ec <UART_SetConfig+0x360>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d144      	bne.n	800950a <UART_SetConfig+0x37e>
 8009480:	4b16      	ldr	r3, [pc, #88]	; (80094dc <UART_SetConfig+0x350>)
 8009482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	2b05      	cmp	r3, #5
 800948a:	d839      	bhi.n	8009500 <UART_SetConfig+0x374>
 800948c:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <UART_SetConfig+0x308>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	080094ad 	.word	0x080094ad
 8009498:	080094b5 	.word	0x080094b5
 800949c:	080094bd 	.word	0x080094bd
 80094a0:	080094c5 	.word	0x080094c5
 80094a4:	080094f1 	.word	0x080094f1
 80094a8:	080094f9 	.word	0x080094f9
 80094ac:	2300      	movs	r3, #0
 80094ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b2:	e259      	b.n	8009968 <UART_SetConfig+0x7dc>
 80094b4:	2304      	movs	r3, #4
 80094b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ba:	e255      	b.n	8009968 <UART_SetConfig+0x7dc>
 80094bc:	2308      	movs	r3, #8
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e251      	b.n	8009968 <UART_SetConfig+0x7dc>
 80094c4:	2310      	movs	r3, #16
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e24d      	b.n	8009968 <UART_SetConfig+0x7dc>
 80094cc:	cfff69f3 	.word	0xcfff69f3
 80094d0:	58000c00 	.word	0x58000c00
 80094d4:	11fff4ff 	.word	0x11fff4ff
 80094d8:	40011000 	.word	0x40011000
 80094dc:	58024400 	.word	0x58024400
 80094e0:	40004400 	.word	0x40004400
 80094e4:	40004800 	.word	0x40004800
 80094e8:	40004c00 	.word	0x40004c00
 80094ec:	40005000 	.word	0x40005000
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f6:	e237      	b.n	8009968 <UART_SetConfig+0x7dc>
 80094f8:	2340      	movs	r3, #64	; 0x40
 80094fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094fe:	e233      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009506:	bf00      	nop
 8009508:	e22e      	b.n	8009968 <UART_SetConfig+0x7dc>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4ab5      	ldr	r2, [pc, #724]	; (80097e4 <UART_SetConfig+0x658>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d178      	bne.n	8009606 <UART_SetConfig+0x47a>
 8009514:	4bb4      	ldr	r3, [pc, #720]	; (80097e8 <UART_SetConfig+0x65c>)
 8009516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800951c:	2b28      	cmp	r3, #40	; 0x28
 800951e:	d86d      	bhi.n	80095fc <UART_SetConfig+0x470>
 8009520:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <UART_SetConfig+0x39c>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	080095cd 	.word	0x080095cd
 800952c:	080095fd 	.word	0x080095fd
 8009530:	080095fd 	.word	0x080095fd
 8009534:	080095fd 	.word	0x080095fd
 8009538:	080095fd 	.word	0x080095fd
 800953c:	080095fd 	.word	0x080095fd
 8009540:	080095fd 	.word	0x080095fd
 8009544:	080095fd 	.word	0x080095fd
 8009548:	080095d5 	.word	0x080095d5
 800954c:	080095fd 	.word	0x080095fd
 8009550:	080095fd 	.word	0x080095fd
 8009554:	080095fd 	.word	0x080095fd
 8009558:	080095fd 	.word	0x080095fd
 800955c:	080095fd 	.word	0x080095fd
 8009560:	080095fd 	.word	0x080095fd
 8009564:	080095fd 	.word	0x080095fd
 8009568:	080095dd 	.word	0x080095dd
 800956c:	080095fd 	.word	0x080095fd
 8009570:	080095fd 	.word	0x080095fd
 8009574:	080095fd 	.word	0x080095fd
 8009578:	080095fd 	.word	0x080095fd
 800957c:	080095fd 	.word	0x080095fd
 8009580:	080095fd 	.word	0x080095fd
 8009584:	080095fd 	.word	0x080095fd
 8009588:	080095e5 	.word	0x080095e5
 800958c:	080095fd 	.word	0x080095fd
 8009590:	080095fd 	.word	0x080095fd
 8009594:	080095fd 	.word	0x080095fd
 8009598:	080095fd 	.word	0x080095fd
 800959c:	080095fd 	.word	0x080095fd
 80095a0:	080095fd 	.word	0x080095fd
 80095a4:	080095fd 	.word	0x080095fd
 80095a8:	080095ed 	.word	0x080095ed
 80095ac:	080095fd 	.word	0x080095fd
 80095b0:	080095fd 	.word	0x080095fd
 80095b4:	080095fd 	.word	0x080095fd
 80095b8:	080095fd 	.word	0x080095fd
 80095bc:	080095fd 	.word	0x080095fd
 80095c0:	080095fd 	.word	0x080095fd
 80095c4:	080095fd 	.word	0x080095fd
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d2:	e1c9      	b.n	8009968 <UART_SetConfig+0x7dc>
 80095d4:	2304      	movs	r3, #4
 80095d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095da:	e1c5      	b.n	8009968 <UART_SetConfig+0x7dc>
 80095dc:	2308      	movs	r3, #8
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e1c1      	b.n	8009968 <UART_SetConfig+0x7dc>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e1bd      	b.n	8009968 <UART_SetConfig+0x7dc>
 80095ec:	2320      	movs	r3, #32
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e1b9      	b.n	8009968 <UART_SetConfig+0x7dc>
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e1b5      	b.n	8009968 <UART_SetConfig+0x7dc>
 80095fc:	2380      	movs	r3, #128	; 0x80
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	bf00      	nop
 8009604:	e1b0      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a78      	ldr	r2, [pc, #480]	; (80097ec <UART_SetConfig+0x660>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d132      	bne.n	8009676 <UART_SetConfig+0x4ea>
 8009610:	4b75      	ldr	r3, [pc, #468]	; (80097e8 <UART_SetConfig+0x65c>)
 8009612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	2b05      	cmp	r3, #5
 800961a:	d827      	bhi.n	800966c <UART_SetConfig+0x4e0>
 800961c:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <UART_SetConfig+0x498>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	0800963d 	.word	0x0800963d
 8009628:	08009645 	.word	0x08009645
 800962c:	0800964d 	.word	0x0800964d
 8009630:	08009655 	.word	0x08009655
 8009634:	0800965d 	.word	0x0800965d
 8009638:	08009665 	.word	0x08009665
 800963c:	2300      	movs	r3, #0
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e191      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009644:	2304      	movs	r3, #4
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e18d      	b.n	8009968 <UART_SetConfig+0x7dc>
 800964c:	2308      	movs	r3, #8
 800964e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009652:	e189      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009654:	2310      	movs	r3, #16
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e185      	b.n	8009968 <UART_SetConfig+0x7dc>
 800965c:	2320      	movs	r3, #32
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009662:	e181      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009664:	2340      	movs	r3, #64	; 0x40
 8009666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966a:	e17d      	b.n	8009968 <UART_SetConfig+0x7dc>
 800966c:	2380      	movs	r3, #128	; 0x80
 800966e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009672:	bf00      	nop
 8009674:	e178      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a5d      	ldr	r2, [pc, #372]	; (80097f0 <UART_SetConfig+0x664>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d132      	bne.n	80096e6 <UART_SetConfig+0x55a>
 8009680:	4b59      	ldr	r3, [pc, #356]	; (80097e8 <UART_SetConfig+0x65c>)
 8009682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	2b05      	cmp	r3, #5
 800968a:	d827      	bhi.n	80096dc <UART_SetConfig+0x550>
 800968c:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <UART_SetConfig+0x508>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	080096ad 	.word	0x080096ad
 8009698:	080096b5 	.word	0x080096b5
 800969c:	080096bd 	.word	0x080096bd
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096cd 	.word	0x080096cd
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	2300      	movs	r3, #0
 80096ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b2:	e159      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096b4:	2304      	movs	r3, #4
 80096b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ba:	e155      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096bc:	2308      	movs	r3, #8
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e151      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096c4:	2310      	movs	r3, #16
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e14d      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096cc:	2320      	movs	r3, #32
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e149      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e145      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096dc:	2380      	movs	r3, #128	; 0x80
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	bf00      	nop
 80096e4:	e140      	b.n	8009968 <UART_SetConfig+0x7dc>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a42      	ldr	r2, [pc, #264]	; (80097f4 <UART_SetConfig+0x668>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	f040 8083 	bne.w	80097f8 <UART_SetConfig+0x66c>
 80096f2:	4b3d      	ldr	r3, [pc, #244]	; (80097e8 <UART_SetConfig+0x65c>)
 80096f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096fa:	2b28      	cmp	r3, #40	; 0x28
 80096fc:	d86c      	bhi.n	80097d8 <UART_SetConfig+0x64c>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <UART_SetConfig+0x578>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	080097a9 	.word	0x080097a9
 8009708:	080097d9 	.word	0x080097d9
 800970c:	080097d9 	.word	0x080097d9
 8009710:	080097d9 	.word	0x080097d9
 8009714:	080097d9 	.word	0x080097d9
 8009718:	080097d9 	.word	0x080097d9
 800971c:	080097d9 	.word	0x080097d9
 8009720:	080097d9 	.word	0x080097d9
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097d9 	.word	0x080097d9
 800972c:	080097d9 	.word	0x080097d9
 8009730:	080097d9 	.word	0x080097d9
 8009734:	080097d9 	.word	0x080097d9
 8009738:	080097d9 	.word	0x080097d9
 800973c:	080097d9 	.word	0x080097d9
 8009740:	080097d9 	.word	0x080097d9
 8009744:	080097b9 	.word	0x080097b9
 8009748:	080097d9 	.word	0x080097d9
 800974c:	080097d9 	.word	0x080097d9
 8009750:	080097d9 	.word	0x080097d9
 8009754:	080097d9 	.word	0x080097d9
 8009758:	080097d9 	.word	0x080097d9
 800975c:	080097d9 	.word	0x080097d9
 8009760:	080097d9 	.word	0x080097d9
 8009764:	080097c1 	.word	0x080097c1
 8009768:	080097d9 	.word	0x080097d9
 800976c:	080097d9 	.word	0x080097d9
 8009770:	080097d9 	.word	0x080097d9
 8009774:	080097d9 	.word	0x080097d9
 8009778:	080097d9 	.word	0x080097d9
 800977c:	080097d9 	.word	0x080097d9
 8009780:	080097d9 	.word	0x080097d9
 8009784:	080097c9 	.word	0x080097c9
 8009788:	080097d9 	.word	0x080097d9
 800978c:	080097d9 	.word	0x080097d9
 8009790:	080097d9 	.word	0x080097d9
 8009794:	080097d9 	.word	0x080097d9
 8009798:	080097d9 	.word	0x080097d9
 800979c:	080097d9 	.word	0x080097d9
 80097a0:	080097d9 	.word	0x080097d9
 80097a4:	080097d1 	.word	0x080097d1
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e0db      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097b0:	2304      	movs	r3, #4
 80097b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b6:	e0d7      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097b8:	2308      	movs	r3, #8
 80097ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097be:	e0d3      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097c0:	2310      	movs	r3, #16
 80097c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c6:	e0cf      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097c8:	2320      	movs	r3, #32
 80097ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ce:	e0cb      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097d0:	2340      	movs	r3, #64	; 0x40
 80097d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d6:	e0c7      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097d8:	2380      	movs	r3, #128	; 0x80
 80097da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097de:	bf00      	nop
 80097e0:	e0c2      	b.n	8009968 <UART_SetConfig+0x7dc>
 80097e2:	bf00      	nop
 80097e4:	40011400 	.word	0x40011400
 80097e8:	58024400 	.word	0x58024400
 80097ec:	40007800 	.word	0x40007800
 80097f0:	40007c00 	.word	0x40007c00
 80097f4:	40011800 	.word	0x40011800
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4ab2      	ldr	r2, [pc, #712]	; (8009ac8 <UART_SetConfig+0x93c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d177      	bne.n	80098f2 <UART_SetConfig+0x766>
 8009802:	4bb2      	ldr	r3, [pc, #712]	; (8009acc <UART_SetConfig+0x940>)
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800980a:	2b28      	cmp	r3, #40	; 0x28
 800980c:	d86c      	bhi.n	80098e8 <UART_SetConfig+0x75c>
 800980e:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <UART_SetConfig+0x688>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	080098b9 	.word	0x080098b9
 8009818:	080098e9 	.word	0x080098e9
 800981c:	080098e9 	.word	0x080098e9
 8009820:	080098e9 	.word	0x080098e9
 8009824:	080098e9 	.word	0x080098e9
 8009828:	080098e9 	.word	0x080098e9
 800982c:	080098e9 	.word	0x080098e9
 8009830:	080098e9 	.word	0x080098e9
 8009834:	080098c1 	.word	0x080098c1
 8009838:	080098e9 	.word	0x080098e9
 800983c:	080098e9 	.word	0x080098e9
 8009840:	080098e9 	.word	0x080098e9
 8009844:	080098e9 	.word	0x080098e9
 8009848:	080098e9 	.word	0x080098e9
 800984c:	080098e9 	.word	0x080098e9
 8009850:	080098e9 	.word	0x080098e9
 8009854:	080098c9 	.word	0x080098c9
 8009858:	080098e9 	.word	0x080098e9
 800985c:	080098e9 	.word	0x080098e9
 8009860:	080098e9 	.word	0x080098e9
 8009864:	080098e9 	.word	0x080098e9
 8009868:	080098e9 	.word	0x080098e9
 800986c:	080098e9 	.word	0x080098e9
 8009870:	080098e9 	.word	0x080098e9
 8009874:	080098d1 	.word	0x080098d1
 8009878:	080098e9 	.word	0x080098e9
 800987c:	080098e9 	.word	0x080098e9
 8009880:	080098e9 	.word	0x080098e9
 8009884:	080098e9 	.word	0x080098e9
 8009888:	080098e9 	.word	0x080098e9
 800988c:	080098e9 	.word	0x080098e9
 8009890:	080098e9 	.word	0x080098e9
 8009894:	080098d9 	.word	0x080098d9
 8009898:	080098e9 	.word	0x080098e9
 800989c:	080098e9 	.word	0x080098e9
 80098a0:	080098e9 	.word	0x080098e9
 80098a4:	080098e9 	.word	0x080098e9
 80098a8:	080098e9 	.word	0x080098e9
 80098ac:	080098e9 	.word	0x080098e9
 80098b0:	080098e9 	.word	0x080098e9
 80098b4:	080098e1 	.word	0x080098e1
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e053      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098c0:	2304      	movs	r3, #4
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e04f      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098c8:	2308      	movs	r3, #8
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e04b      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098d0:	2310      	movs	r3, #16
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e047      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098d8:	2320      	movs	r3, #32
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e043      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098e0:	2340      	movs	r3, #64	; 0x40
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e03f      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098e8:	2380      	movs	r3, #128	; 0x80
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	bf00      	nop
 80098f0:	e03a      	b.n	8009968 <UART_SetConfig+0x7dc>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a76      	ldr	r2, [pc, #472]	; (8009ad0 <UART_SetConfig+0x944>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d132      	bne.n	8009962 <UART_SetConfig+0x7d6>
 80098fc:	4b73      	ldr	r3, [pc, #460]	; (8009acc <UART_SetConfig+0x940>)
 80098fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009900:	f003 0307 	and.w	r3, r3, #7
 8009904:	2b05      	cmp	r3, #5
 8009906:	d827      	bhi.n	8009958 <UART_SetConfig+0x7cc>
 8009908:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <UART_SetConfig+0x784>)
 800990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990e:	bf00      	nop
 8009910:	08009929 	.word	0x08009929
 8009914:	08009931 	.word	0x08009931
 8009918:	08009939 	.word	0x08009939
 800991c:	08009941 	.word	0x08009941
 8009920:	08009949 	.word	0x08009949
 8009924:	08009951 	.word	0x08009951
 8009928:	2302      	movs	r3, #2
 800992a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992e:	e01b      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009930:	2304      	movs	r3, #4
 8009932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009936:	e017      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009938:	2308      	movs	r3, #8
 800993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993e:	e013      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009940:	2310      	movs	r3, #16
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e00f      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009948:	2320      	movs	r3, #32
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e00b      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009950:	2340      	movs	r3, #64	; 0x40
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	e007      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009958:	2380      	movs	r3, #128	; 0x80
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	bf00      	nop
 8009960:	e002      	b.n	8009968 <UART_SetConfig+0x7dc>
 8009962:	2380      	movs	r3, #128	; 0x80
 8009964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a58      	ldr	r2, [pc, #352]	; (8009ad0 <UART_SetConfig+0x944>)
 800996e:	4293      	cmp	r3, r2
 8009970:	f040 80b6 	bne.w	8009ae0 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009978:	2b08      	cmp	r3, #8
 800997a:	d019      	beq.n	80099b0 <UART_SetConfig+0x824>
 800997c:	2b08      	cmp	r3, #8
 800997e:	dc04      	bgt.n	800998a <UART_SetConfig+0x7fe>
 8009980:	2b02      	cmp	r3, #2
 8009982:	d009      	beq.n	8009998 <UART_SetConfig+0x80c>
 8009984:	2b04      	cmp	r3, #4
 8009986:	d00b      	beq.n	80099a0 <UART_SetConfig+0x814>
 8009988:	e034      	b.n	80099f4 <UART_SetConfig+0x868>
 800998a:	2b20      	cmp	r3, #32
 800998c:	d02b      	beq.n	80099e6 <UART_SetConfig+0x85a>
 800998e:	2b40      	cmp	r3, #64	; 0x40
 8009990:	d02c      	beq.n	80099ec <UART_SetConfig+0x860>
 8009992:	2b10      	cmp	r3, #16
 8009994:	d014      	beq.n	80099c0 <UART_SetConfig+0x834>
 8009996:	e02d      	b.n	80099f4 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009998:	f7fe f8e4 	bl	8007b64 <HAL_RCCEx_GetD3PCLK1Freq>
 800999c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800999e:	e02f      	b.n	8009a00 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a0:	f107 0314 	add.w	r3, r7, #20
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe f8f3 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099ae:	e027      	b.n	8009a00 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fa37 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099be:	e01f      	b.n	8009a00 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c0:	4b42      	ldr	r3, [pc, #264]	; (8009acc <UART_SetConfig+0x940>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0320 	and.w	r3, r3, #32
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099cc:	4b3f      	ldr	r3, [pc, #252]	; (8009acc <UART_SetConfig+0x940>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	08db      	lsrs	r3, r3, #3
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	4a3f      	ldr	r2, [pc, #252]	; (8009ad4 <UART_SetConfig+0x948>)
 80099d8:	fa22 f303 	lsr.w	r3, r2, r3
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099de:	e00f      	b.n	8009a00 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80099e0:	4b3c      	ldr	r3, [pc, #240]	; (8009ad4 <UART_SetConfig+0x948>)
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099e4:	e00c      	b.n	8009a00 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099e6:	4b3c      	ldr	r3, [pc, #240]	; (8009ad8 <UART_SetConfig+0x94c>)
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099ea:	e009      	b.n	8009a00 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099f2:	e005      	b.n	8009a00 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8251 	beq.w	8009eaa <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	4a33      	ldr	r2, [pc, #204]	; (8009adc <UART_SetConfig+0x950>)
 8009a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a1a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	6a3a      	ldr	r2, [r7, #32]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d305      	bcc.n	8009a38 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a32:	6a3a      	ldr	r2, [r7, #32]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d903      	bls.n	8009a40 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a3e:	e234      	b.n	8009eaa <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	4618      	mov	r0, r3
 8009a44:	f04f 0100 	mov.w	r1, #0
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	4a23      	ldr	r2, [pc, #140]	; (8009adc <UART_SetConfig+0x950>)
 8009a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f04f 0400 	mov.w	r4, #0
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4623      	mov	r3, r4
 8009a5c:	f7f6 fc98 	bl	8000390 <__aeabi_uldivmod>
 8009a60:	4603      	mov	r3, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4619      	mov	r1, r3
 8009a66:	4622      	mov	r2, r4
 8009a68:	f04f 0300 	mov.w	r3, #0
 8009a6c:	f04f 0400 	mov.w	r4, #0
 8009a70:	0214      	lsls	r4, r2, #8
 8009a72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009a76:	020b      	lsls	r3, r1, #8
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6852      	ldr	r2, [r2, #4]
 8009a7c:	0852      	lsrs	r2, r2, #1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	f04f 0200 	mov.w	r2, #0
 8009a84:	eb13 0b01 	adds.w	fp, r3, r1
 8009a88:	eb44 0c02 	adc.w	ip, r4, r2
 8009a8c:	4658      	mov	r0, fp
 8009a8e:	4661      	mov	r1, ip
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f04f 0400 	mov.w	r4, #0
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4623      	mov	r3, r4
 8009a9c:	f7f6 fc78 	bl	8000390 <__aeabi_uldivmod>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aac:	d308      	bcc.n	8009ac0 <UART_SetConfig+0x934>
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ab4:	d204      	bcs.n	8009ac0 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009abc:	60da      	str	r2, [r3, #12]
 8009abe:	e1f4      	b.n	8009eaa <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ac6:	e1f0      	b.n	8009eaa <UART_SetConfig+0xd1e>
 8009ac8:	40011c00 	.word	0x40011c00
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	58000c00 	.word	0x58000c00
 8009ad4:	03d09000 	.word	0x03d09000
 8009ad8:	003d0900 	.word	0x003d0900
 8009adc:	0800bcb4 	.word	0x0800bcb4
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ae8:	f040 80f8 	bne.w	8009cdc <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8009aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009af0:	2b40      	cmp	r3, #64	; 0x40
 8009af2:	f200 80b7 	bhi.w	8009c64 <UART_SetConfig+0xad8>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <UART_SetConfig+0x970>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009c01 	.word	0x08009c01
 8009b00:	08009c09 	.word	0x08009c09
 8009b04:	08009c65 	.word	0x08009c65
 8009b08:	08009c65 	.word	0x08009c65
 8009b0c:	08009c11 	.word	0x08009c11
 8009b10:	08009c65 	.word	0x08009c65
 8009b14:	08009c65 	.word	0x08009c65
 8009b18:	08009c65 	.word	0x08009c65
 8009b1c:	08009c21 	.word	0x08009c21
 8009b20:	08009c65 	.word	0x08009c65
 8009b24:	08009c65 	.word	0x08009c65
 8009b28:	08009c65 	.word	0x08009c65
 8009b2c:	08009c65 	.word	0x08009c65
 8009b30:	08009c65 	.word	0x08009c65
 8009b34:	08009c65 	.word	0x08009c65
 8009b38:	08009c65 	.word	0x08009c65
 8009b3c:	08009c31 	.word	0x08009c31
 8009b40:	08009c65 	.word	0x08009c65
 8009b44:	08009c65 	.word	0x08009c65
 8009b48:	08009c65 	.word	0x08009c65
 8009b4c:	08009c65 	.word	0x08009c65
 8009b50:	08009c65 	.word	0x08009c65
 8009b54:	08009c65 	.word	0x08009c65
 8009b58:	08009c65 	.word	0x08009c65
 8009b5c:	08009c65 	.word	0x08009c65
 8009b60:	08009c65 	.word	0x08009c65
 8009b64:	08009c65 	.word	0x08009c65
 8009b68:	08009c65 	.word	0x08009c65
 8009b6c:	08009c65 	.word	0x08009c65
 8009b70:	08009c65 	.word	0x08009c65
 8009b74:	08009c65 	.word	0x08009c65
 8009b78:	08009c65 	.word	0x08009c65
 8009b7c:	08009c57 	.word	0x08009c57
 8009b80:	08009c65 	.word	0x08009c65
 8009b84:	08009c65 	.word	0x08009c65
 8009b88:	08009c65 	.word	0x08009c65
 8009b8c:	08009c65 	.word	0x08009c65
 8009b90:	08009c65 	.word	0x08009c65
 8009b94:	08009c65 	.word	0x08009c65
 8009b98:	08009c65 	.word	0x08009c65
 8009b9c:	08009c65 	.word	0x08009c65
 8009ba0:	08009c65 	.word	0x08009c65
 8009ba4:	08009c65 	.word	0x08009c65
 8009ba8:	08009c65 	.word	0x08009c65
 8009bac:	08009c65 	.word	0x08009c65
 8009bb0:	08009c65 	.word	0x08009c65
 8009bb4:	08009c65 	.word	0x08009c65
 8009bb8:	08009c65 	.word	0x08009c65
 8009bbc:	08009c65 	.word	0x08009c65
 8009bc0:	08009c65 	.word	0x08009c65
 8009bc4:	08009c65 	.word	0x08009c65
 8009bc8:	08009c65 	.word	0x08009c65
 8009bcc:	08009c65 	.word	0x08009c65
 8009bd0:	08009c65 	.word	0x08009c65
 8009bd4:	08009c65 	.word	0x08009c65
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c65 	.word	0x08009c65
 8009be0:	08009c65 	.word	0x08009c65
 8009be4:	08009c65 	.word	0x08009c65
 8009be8:	08009c65 	.word	0x08009c65
 8009bec:	08009c65 	.word	0x08009c65
 8009bf0:	08009c65 	.word	0x08009c65
 8009bf4:	08009c65 	.word	0x08009c65
 8009bf8:	08009c65 	.word	0x08009c65
 8009bfc:	08009c5d 	.word	0x08009c5d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c00:	f7fc feaa 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 8009c04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c06:	e033      	b.n	8009c70 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c08:	f7fc febc 	bl	8006984 <HAL_RCC_GetPCLK2Freq>
 8009c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c0e:	e02f      	b.n	8009c70 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c10:	f107 0314 	add.w	r3, r7, #20
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fd ffbb 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c1e:	e027      	b.n	8009c70 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe f8ff 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c2e:	e01f      	b.n	8009c70 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c30:	4ba8      	ldr	r3, [pc, #672]	; (8009ed4 <UART_SetConfig+0xd48>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0320 	and.w	r3, r3, #32
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d009      	beq.n	8009c50 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c3c:	4ba5      	ldr	r3, [pc, #660]	; (8009ed4 <UART_SetConfig+0xd48>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	08db      	lsrs	r3, r3, #3
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	4aa4      	ldr	r2, [pc, #656]	; (8009ed8 <UART_SetConfig+0xd4c>)
 8009c48:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c4e:	e00f      	b.n	8009c70 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009c50:	4ba1      	ldr	r3, [pc, #644]	; (8009ed8 <UART_SetConfig+0xd4c>)
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c54:	e00c      	b.n	8009c70 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c56:	4ba1      	ldr	r3, [pc, #644]	; (8009edc <UART_SetConfig+0xd50>)
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c5a:	e009      	b.n	8009c70 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c62:	e005      	b.n	8009c70 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 8119 	beq.w	8009eaa <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	4a98      	ldr	r2, [pc, #608]	; (8009ee0 <UART_SetConfig+0xd54>)
 8009c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c82:	461a      	mov	r2, r3
 8009c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c8a:	005a      	lsls	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	441a      	add	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	2b0f      	cmp	r3, #15
 8009ca4:	d916      	bls.n	8009cd4 <UART_SetConfig+0xb48>
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cac:	d212      	bcs.n	8009cd4 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	f023 030f 	bic.w	r3, r3, #15
 8009cb6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	085b      	lsrs	r3, r3, #1
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f003 0307 	and.w	r3, r3, #7
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009cd0:	60da      	str	r2, [r3, #12]
 8009cd2:	e0ea      	b.n	8009eaa <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cda:	e0e6      	b.n	8009eaa <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ce0:	2b40      	cmp	r3, #64	; 0x40
 8009ce2:	f200 80b7 	bhi.w	8009e54 <UART_SetConfig+0xcc8>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <UART_SetConfig+0xb60>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009df1 	.word	0x08009df1
 8009cf0:	08009df9 	.word	0x08009df9
 8009cf4:	08009e55 	.word	0x08009e55
 8009cf8:	08009e55 	.word	0x08009e55
 8009cfc:	08009e01 	.word	0x08009e01
 8009d00:	08009e55 	.word	0x08009e55
 8009d04:	08009e55 	.word	0x08009e55
 8009d08:	08009e55 	.word	0x08009e55
 8009d0c:	08009e11 	.word	0x08009e11
 8009d10:	08009e55 	.word	0x08009e55
 8009d14:	08009e55 	.word	0x08009e55
 8009d18:	08009e55 	.word	0x08009e55
 8009d1c:	08009e55 	.word	0x08009e55
 8009d20:	08009e55 	.word	0x08009e55
 8009d24:	08009e55 	.word	0x08009e55
 8009d28:	08009e55 	.word	0x08009e55
 8009d2c:	08009e21 	.word	0x08009e21
 8009d30:	08009e55 	.word	0x08009e55
 8009d34:	08009e55 	.word	0x08009e55
 8009d38:	08009e55 	.word	0x08009e55
 8009d3c:	08009e55 	.word	0x08009e55
 8009d40:	08009e55 	.word	0x08009e55
 8009d44:	08009e55 	.word	0x08009e55
 8009d48:	08009e55 	.word	0x08009e55
 8009d4c:	08009e55 	.word	0x08009e55
 8009d50:	08009e55 	.word	0x08009e55
 8009d54:	08009e55 	.word	0x08009e55
 8009d58:	08009e55 	.word	0x08009e55
 8009d5c:	08009e55 	.word	0x08009e55
 8009d60:	08009e55 	.word	0x08009e55
 8009d64:	08009e55 	.word	0x08009e55
 8009d68:	08009e55 	.word	0x08009e55
 8009d6c:	08009e47 	.word	0x08009e47
 8009d70:	08009e55 	.word	0x08009e55
 8009d74:	08009e55 	.word	0x08009e55
 8009d78:	08009e55 	.word	0x08009e55
 8009d7c:	08009e55 	.word	0x08009e55
 8009d80:	08009e55 	.word	0x08009e55
 8009d84:	08009e55 	.word	0x08009e55
 8009d88:	08009e55 	.word	0x08009e55
 8009d8c:	08009e55 	.word	0x08009e55
 8009d90:	08009e55 	.word	0x08009e55
 8009d94:	08009e55 	.word	0x08009e55
 8009d98:	08009e55 	.word	0x08009e55
 8009d9c:	08009e55 	.word	0x08009e55
 8009da0:	08009e55 	.word	0x08009e55
 8009da4:	08009e55 	.word	0x08009e55
 8009da8:	08009e55 	.word	0x08009e55
 8009dac:	08009e55 	.word	0x08009e55
 8009db0:	08009e55 	.word	0x08009e55
 8009db4:	08009e55 	.word	0x08009e55
 8009db8:	08009e55 	.word	0x08009e55
 8009dbc:	08009e55 	.word	0x08009e55
 8009dc0:	08009e55 	.word	0x08009e55
 8009dc4:	08009e55 	.word	0x08009e55
 8009dc8:	08009e55 	.word	0x08009e55
 8009dcc:	08009e55 	.word	0x08009e55
 8009dd0:	08009e55 	.word	0x08009e55
 8009dd4:	08009e55 	.word	0x08009e55
 8009dd8:	08009e55 	.word	0x08009e55
 8009ddc:	08009e55 	.word	0x08009e55
 8009de0:	08009e55 	.word	0x08009e55
 8009de4:	08009e55 	.word	0x08009e55
 8009de8:	08009e55 	.word	0x08009e55
 8009dec:	08009e4d 	.word	0x08009e4d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df0:	f7fc fdb2 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 8009df4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009df6:	e033      	b.n	8009e60 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df8:	f7fc fdc4 	bl	8006984 <HAL_RCC_GetPCLK2Freq>
 8009dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009dfe:	e02f      	b.n	8009e60 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e00:	f107 0314 	add.w	r3, r7, #20
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fd fec3 	bl	8007b90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e0e:	e027      	b.n	8009e60 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e10:	f107 0308 	add.w	r3, r7, #8
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe f807 	bl	8007e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e1e:	e01f      	b.n	8009e60 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e20:	4b2c      	ldr	r3, [pc, #176]	; (8009ed4 <UART_SetConfig+0xd48>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0320 	and.w	r3, r3, #32
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d009      	beq.n	8009e40 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e2c:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <UART_SetConfig+0xd48>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	08db      	lsrs	r3, r3, #3
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	4a28      	ldr	r2, [pc, #160]	; (8009ed8 <UART_SetConfig+0xd4c>)
 8009e38:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e3e:	e00f      	b.n	8009e60 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009e40:	4b25      	ldr	r3, [pc, #148]	; (8009ed8 <UART_SetConfig+0xd4c>)
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e44:	e00c      	b.n	8009e60 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e46:	4b25      	ldr	r3, [pc, #148]	; (8009edc <UART_SetConfig+0xd50>)
 8009e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e4a:	e009      	b.n	8009e60 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e52:	e005      	b.n	8009e60 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d021      	beq.n	8009eaa <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	4a1d      	ldr	r2, [pc, #116]	; (8009ee0 <UART_SetConfig+0xd54>)
 8009e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e74:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	085b      	lsrs	r3, r3, #1
 8009e7e:	441a      	add	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	2b0f      	cmp	r3, #15
 8009e90:	d908      	bls.n	8009ea4 <UART_SetConfig+0xd18>
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e98:	d204      	bcs.n	8009ea4 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea0:	60da      	str	r2, [r3, #12]
 8009ea2:	e002      	b.n	8009eaa <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009ec6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3738      	adds	r7, #56	; 0x38
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	03d09000 	.word	0x03d09000
 8009edc:	003d0900 	.word	0x003d0900
 8009ee0:	0800bcb4 	.word	0x0800bcb4

08009ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00a      	beq.n	8009f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d01a      	beq.n	8009ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fe2:	d10a      	bne.n	8009ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  }
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a038:	f7f7 fe64 	bl	8001d04 <HAL_GetTick>
 800a03c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d10e      	bne.n	800a06a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a04c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f82c 	bl	800a0b8 <UART_WaitOnFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e022      	b.n	800a0b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0304 	and.w	r3, r3, #4
 800a074:	2b04      	cmp	r3, #4
 800a076:	d10e      	bne.n	800a096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f816 	bl	800a0b8 <UART_WaitOnFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e00c      	b.n	800a0b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2220      	movs	r2, #32
 800a09a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c8:	e062      	b.n	800a190 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d0:	d05e      	beq.n	800a190 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0d2:	f7f7 fe17 	bl	8001d04 <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d302      	bcc.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11d      	bne.n	800a124 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e045      	b.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0304 	and.w	r3, r3, #4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d02e      	beq.n	800a190 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a13c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a140:	d126      	bne.n	800a190 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a14a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a15a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 0201 	bic.w	r2, r2, #1
 800a16a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2220      	movs	r2, #32
 800a170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2220      	movs	r2, #32
 800a178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2220      	movs	r2, #32
 800a180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e00f      	b.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69da      	ldr	r2, [r3, #28]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	4013      	ands	r3, r2
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	bf0c      	ite	eq
 800a1a0:	2301      	moveq	r3, #1
 800a1a2:	2300      	movne	r3, #0
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d08d      	beq.n	800a0ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d101      	bne.n	800a1ce <HAL_UARTEx_DisableFifoMode+0x16>
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	e027      	b.n	800a21e <HAL_UARTEx_DisableFifoMode+0x66>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2224      	movs	r2, #36	; 0x24
 800a1da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0201 	bic.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a23e:	2302      	movs	r3, #2
 800a240:	e02d      	b.n	800a29e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2224      	movs	r2, #36	; 0x24
 800a24e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 0201 	bic.w	r2, r2, #1
 800a268:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f850 	bl	800a324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2220      	movs	r2, #32
 800a290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d101      	bne.n	800a2be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e02d      	b.n	800a31a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2224      	movs	r2, #36	; 0x24
 800a2ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 0201 	bic.w	r2, r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f812 	bl	800a324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b089      	sub	sp, #36	; 0x24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a32c:	4a2f      	ldr	r2, [pc, #188]	; (800a3ec <UARTEx_SetNbDataToProcess+0xc8>)
 800a32e:	f107 0314 	add.w	r3, r7, #20
 800a332:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a336:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a33a:	4a2d      	ldr	r2, [pc, #180]	; (800a3f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a344:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d108      	bne.n	800a362 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a360:	e03d      	b.n	800a3de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a362:	2310      	movs	r3, #16
 800a364:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a366:	2310      	movs	r3, #16
 800a368:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	0e5b      	lsrs	r3, r3, #25
 800a372:	b2db      	uxtb	r3, r3
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	0f5b      	lsrs	r3, r3, #29
 800a382:	b2db      	uxtb	r3, r3
 800a384:	f003 0307 	and.w	r3, r3, #7
 800a388:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a38a:	7fbb      	ldrb	r3, [r7, #30]
 800a38c:	7f3a      	ldrb	r2, [r7, #28]
 800a38e:	f107 0120 	add.w	r1, r7, #32
 800a392:	440a      	add	r2, r1
 800a394:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	7f3a      	ldrb	r2, [r7, #28]
 800a39e:	f107 0120 	add.w	r1, r7, #32
 800a3a2:	440a      	add	r2, r1
 800a3a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a3a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a3b4:	7ffb      	ldrb	r3, [r7, #31]
 800a3b6:	7f7a      	ldrb	r2, [r7, #29]
 800a3b8:	f107 0120 	add.w	r1, r7, #32
 800a3bc:	440a      	add	r2, r1
 800a3be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a3c2:	fb02 f303 	mul.w	r3, r2, r3
 800a3c6:	7f7a      	ldrb	r2, [r7, #29]
 800a3c8:	f107 0120 	add.w	r1, r7, #32
 800a3cc:	440a      	add	r2, r1
 800a3ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a3d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3de:	bf00      	nop
 800a3e0:	3724      	adds	r7, #36	; 0x24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	0800b48c 	.word	0x0800b48c
 800a3f0:	0800b494 	.word	0x0800b494

0800a3f4 <calloc>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <calloc+0xc>)
 800a3f6:	460a      	mov	r2, r1
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	f000 b850 	b.w	800a4a0 <_calloc_r>
 800a400:	24000018 	.word	0x24000018

0800a404 <__errno>:
 800a404:	4b01      	ldr	r3, [pc, #4]	; (800a40c <__errno+0x8>)
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	24000018 	.word	0x24000018

0800a410 <exit>:
 800a410:	b508      	push	{r3, lr}
 800a412:	4b07      	ldr	r3, [pc, #28]	; (800a430 <exit+0x20>)
 800a414:	4604      	mov	r4, r0
 800a416:	b113      	cbz	r3, 800a41e <exit+0xe>
 800a418:	2100      	movs	r1, #0
 800a41a:	f3af 8000 	nop.w
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <exit+0x24>)
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a424:	b103      	cbz	r3, 800a428 <exit+0x18>
 800a426:	4798      	blx	r3
 800a428:	4620      	mov	r0, r4
 800a42a:	f7f7 fa91 	bl	8001950 <_exit>
 800a42e:	bf00      	nop
 800a430:	00000000 	.word	0x00000000
 800a434:	0800bccc 	.word	0x0800bccc

0800a438 <__libc_init_array>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	4e0d      	ldr	r6, [pc, #52]	; (800a470 <__libc_init_array+0x38>)
 800a43c:	4c0d      	ldr	r4, [pc, #52]	; (800a474 <__libc_init_array+0x3c>)
 800a43e:	1ba4      	subs	r4, r4, r6
 800a440:	10a4      	asrs	r4, r4, #2
 800a442:	2500      	movs	r5, #0
 800a444:	42a5      	cmp	r5, r4
 800a446:	d109      	bne.n	800a45c <__libc_init_array+0x24>
 800a448:	4e0b      	ldr	r6, [pc, #44]	; (800a478 <__libc_init_array+0x40>)
 800a44a:	4c0c      	ldr	r4, [pc, #48]	; (800a47c <__libc_init_array+0x44>)
 800a44c:	f000 ffea 	bl	800b424 <_init>
 800a450:	1ba4      	subs	r4, r4, r6
 800a452:	10a4      	asrs	r4, r4, #2
 800a454:	2500      	movs	r5, #0
 800a456:	42a5      	cmp	r5, r4
 800a458:	d105      	bne.n	800a466 <__libc_init_array+0x2e>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a460:	4798      	blx	r3
 800a462:	3501      	adds	r5, #1
 800a464:	e7ee      	b.n	800a444 <__libc_init_array+0xc>
 800a466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a46a:	4798      	blx	r3
 800a46c:	3501      	adds	r5, #1
 800a46e:	e7f2      	b.n	800a456 <__libc_init_array+0x1e>
 800a470:	0800bd6c 	.word	0x0800bd6c
 800a474:	0800bd6c 	.word	0x0800bd6c
 800a478:	0800bd6c 	.word	0x0800bd6c
 800a47c:	0800bd70 	.word	0x0800bd70

0800a480 <malloc>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <malloc+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f000 b867 	b.w	800a558 <_malloc_r>
 800a48a:	bf00      	nop
 800a48c:	24000018 	.word	0x24000018

0800a490 <memset>:
 800a490:	4402      	add	r2, r0
 800a492:	4603      	mov	r3, r0
 800a494:	4293      	cmp	r3, r2
 800a496:	d100      	bne.n	800a49a <memset+0xa>
 800a498:	4770      	bx	lr
 800a49a:	f803 1b01 	strb.w	r1, [r3], #1
 800a49e:	e7f9      	b.n	800a494 <memset+0x4>

0800a4a0 <_calloc_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	fb02 f401 	mul.w	r4, r2, r1
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	f000 f856 	bl	800a558 <_malloc_r>
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	b118      	cbz	r0, 800a4b8 <_calloc_r+0x18>
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	f7ff ffec 	bl	800a490 <memset>
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}

0800a4bc <_free_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4605      	mov	r5, r0
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	d045      	beq.n	800a550 <_free_r+0x94>
 800a4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c8:	1f0c      	subs	r4, r1, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bfb8      	it	lt
 800a4ce:	18e4      	addlt	r4, r4, r3
 800a4d0:	f000 fbce 	bl	800ac70 <__malloc_lock>
 800a4d4:	4a1f      	ldr	r2, [pc, #124]	; (800a554 <_free_r+0x98>)
 800a4d6:	6813      	ldr	r3, [r2, #0]
 800a4d8:	4610      	mov	r0, r2
 800a4da:	b933      	cbnz	r3, 800a4ea <_free_r+0x2e>
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	6014      	str	r4, [r2, #0]
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4e6:	f000 bbc4 	b.w	800ac72 <__malloc_unlock>
 800a4ea:	42a3      	cmp	r3, r4
 800a4ec:	d90c      	bls.n	800a508 <_free_r+0x4c>
 800a4ee:	6821      	ldr	r1, [r4, #0]
 800a4f0:	1862      	adds	r2, r4, r1
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	bf04      	itt	eq
 800a4f6:	681a      	ldreq	r2, [r3, #0]
 800a4f8:	685b      	ldreq	r3, [r3, #4]
 800a4fa:	6063      	str	r3, [r4, #4]
 800a4fc:	bf04      	itt	eq
 800a4fe:	1852      	addeq	r2, r2, r1
 800a500:	6022      	streq	r2, [r4, #0]
 800a502:	6004      	str	r4, [r0, #0]
 800a504:	e7ec      	b.n	800a4e0 <_free_r+0x24>
 800a506:	4613      	mov	r3, r2
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	b10a      	cbz	r2, 800a510 <_free_r+0x54>
 800a50c:	42a2      	cmp	r2, r4
 800a50e:	d9fa      	bls.n	800a506 <_free_r+0x4a>
 800a510:	6819      	ldr	r1, [r3, #0]
 800a512:	1858      	adds	r0, r3, r1
 800a514:	42a0      	cmp	r0, r4
 800a516:	d10b      	bne.n	800a530 <_free_r+0x74>
 800a518:	6820      	ldr	r0, [r4, #0]
 800a51a:	4401      	add	r1, r0
 800a51c:	1858      	adds	r0, r3, r1
 800a51e:	4282      	cmp	r2, r0
 800a520:	6019      	str	r1, [r3, #0]
 800a522:	d1dd      	bne.n	800a4e0 <_free_r+0x24>
 800a524:	6810      	ldr	r0, [r2, #0]
 800a526:	6852      	ldr	r2, [r2, #4]
 800a528:	605a      	str	r2, [r3, #4]
 800a52a:	4401      	add	r1, r0
 800a52c:	6019      	str	r1, [r3, #0]
 800a52e:	e7d7      	b.n	800a4e0 <_free_r+0x24>
 800a530:	d902      	bls.n	800a538 <_free_r+0x7c>
 800a532:	230c      	movs	r3, #12
 800a534:	602b      	str	r3, [r5, #0]
 800a536:	e7d3      	b.n	800a4e0 <_free_r+0x24>
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	1821      	adds	r1, r4, r0
 800a53c:	428a      	cmp	r2, r1
 800a53e:	bf04      	itt	eq
 800a540:	6811      	ldreq	r1, [r2, #0]
 800a542:	6852      	ldreq	r2, [r2, #4]
 800a544:	6062      	str	r2, [r4, #4]
 800a546:	bf04      	itt	eq
 800a548:	1809      	addeq	r1, r1, r0
 800a54a:	6021      	streq	r1, [r4, #0]
 800a54c:	605c      	str	r4, [r3, #4]
 800a54e:	e7c7      	b.n	800a4e0 <_free_r+0x24>
 800a550:	bd38      	pop	{r3, r4, r5, pc}
 800a552:	bf00      	nop
 800a554:	240000b0 	.word	0x240000b0

0800a558 <_malloc_r>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	1ccd      	adds	r5, r1, #3
 800a55c:	f025 0503 	bic.w	r5, r5, #3
 800a560:	3508      	adds	r5, #8
 800a562:	2d0c      	cmp	r5, #12
 800a564:	bf38      	it	cc
 800a566:	250c      	movcc	r5, #12
 800a568:	2d00      	cmp	r5, #0
 800a56a:	4606      	mov	r6, r0
 800a56c:	db01      	blt.n	800a572 <_malloc_r+0x1a>
 800a56e:	42a9      	cmp	r1, r5
 800a570:	d903      	bls.n	800a57a <_malloc_r+0x22>
 800a572:	230c      	movs	r3, #12
 800a574:	6033      	str	r3, [r6, #0]
 800a576:	2000      	movs	r0, #0
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	f000 fb79 	bl	800ac70 <__malloc_lock>
 800a57e:	4a21      	ldr	r2, [pc, #132]	; (800a604 <_malloc_r+0xac>)
 800a580:	6814      	ldr	r4, [r2, #0]
 800a582:	4621      	mov	r1, r4
 800a584:	b991      	cbnz	r1, 800a5ac <_malloc_r+0x54>
 800a586:	4c20      	ldr	r4, [pc, #128]	; (800a608 <_malloc_r+0xb0>)
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	b91b      	cbnz	r3, 800a594 <_malloc_r+0x3c>
 800a58c:	4630      	mov	r0, r6
 800a58e:	f000 f8a1 	bl	800a6d4 <_sbrk_r>
 800a592:	6020      	str	r0, [r4, #0]
 800a594:	4629      	mov	r1, r5
 800a596:	4630      	mov	r0, r6
 800a598:	f000 f89c 	bl	800a6d4 <_sbrk_r>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d124      	bne.n	800a5ea <_malloc_r+0x92>
 800a5a0:	230c      	movs	r3, #12
 800a5a2:	6033      	str	r3, [r6, #0]
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f000 fb64 	bl	800ac72 <__malloc_unlock>
 800a5aa:	e7e4      	b.n	800a576 <_malloc_r+0x1e>
 800a5ac:	680b      	ldr	r3, [r1, #0]
 800a5ae:	1b5b      	subs	r3, r3, r5
 800a5b0:	d418      	bmi.n	800a5e4 <_malloc_r+0x8c>
 800a5b2:	2b0b      	cmp	r3, #11
 800a5b4:	d90f      	bls.n	800a5d6 <_malloc_r+0x7e>
 800a5b6:	600b      	str	r3, [r1, #0]
 800a5b8:	50cd      	str	r5, [r1, r3]
 800a5ba:	18cc      	adds	r4, r1, r3
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f000 fb58 	bl	800ac72 <__malloc_unlock>
 800a5c2:	f104 000b 	add.w	r0, r4, #11
 800a5c6:	1d23      	adds	r3, r4, #4
 800a5c8:	f020 0007 	bic.w	r0, r0, #7
 800a5cc:	1ac3      	subs	r3, r0, r3
 800a5ce:	d0d3      	beq.n	800a578 <_malloc_r+0x20>
 800a5d0:	425a      	negs	r2, r3
 800a5d2:	50e2      	str	r2, [r4, r3]
 800a5d4:	e7d0      	b.n	800a578 <_malloc_r+0x20>
 800a5d6:	428c      	cmp	r4, r1
 800a5d8:	684b      	ldr	r3, [r1, #4]
 800a5da:	bf16      	itet	ne
 800a5dc:	6063      	strne	r3, [r4, #4]
 800a5de:	6013      	streq	r3, [r2, #0]
 800a5e0:	460c      	movne	r4, r1
 800a5e2:	e7eb      	b.n	800a5bc <_malloc_r+0x64>
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	6849      	ldr	r1, [r1, #4]
 800a5e8:	e7cc      	b.n	800a584 <_malloc_r+0x2c>
 800a5ea:	1cc4      	adds	r4, r0, #3
 800a5ec:	f024 0403 	bic.w	r4, r4, #3
 800a5f0:	42a0      	cmp	r0, r4
 800a5f2:	d005      	beq.n	800a600 <_malloc_r+0xa8>
 800a5f4:	1a21      	subs	r1, r4, r0
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f000 f86c 	bl	800a6d4 <_sbrk_r>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d0cf      	beq.n	800a5a0 <_malloc_r+0x48>
 800a600:	6025      	str	r5, [r4, #0]
 800a602:	e7db      	b.n	800a5bc <_malloc_r+0x64>
 800a604:	240000b0 	.word	0x240000b0
 800a608:	240000b4 	.word	0x240000b4

0800a60c <_puts_r>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	460e      	mov	r6, r1
 800a610:	4605      	mov	r5, r0
 800a612:	b118      	cbz	r0, 800a61c <_puts_r+0x10>
 800a614:	6983      	ldr	r3, [r0, #24]
 800a616:	b90b      	cbnz	r3, 800a61c <_puts_r+0x10>
 800a618:	f000 fa3c 	bl	800aa94 <__sinit>
 800a61c:	69ab      	ldr	r3, [r5, #24]
 800a61e:	68ac      	ldr	r4, [r5, #8]
 800a620:	b913      	cbnz	r3, 800a628 <_puts_r+0x1c>
 800a622:	4628      	mov	r0, r5
 800a624:	f000 fa36 	bl	800aa94 <__sinit>
 800a628:	4b23      	ldr	r3, [pc, #140]	; (800a6b8 <_puts_r+0xac>)
 800a62a:	429c      	cmp	r4, r3
 800a62c:	d117      	bne.n	800a65e <_puts_r+0x52>
 800a62e:	686c      	ldr	r4, [r5, #4]
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	071b      	lsls	r3, r3, #28
 800a634:	d51d      	bpl.n	800a672 <_puts_r+0x66>
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	b1db      	cbz	r3, 800a672 <_puts_r+0x66>
 800a63a:	3e01      	subs	r6, #1
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a642:	3b01      	subs	r3, #1
 800a644:	60a3      	str	r3, [r4, #8]
 800a646:	b9e9      	cbnz	r1, 800a684 <_puts_r+0x78>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	da2e      	bge.n	800a6aa <_puts_r+0x9e>
 800a64c:	4622      	mov	r2, r4
 800a64e:	210a      	movs	r1, #10
 800a650:	4628      	mov	r0, r5
 800a652:	f000 f86f 	bl	800a734 <__swbuf_r>
 800a656:	3001      	adds	r0, #1
 800a658:	d011      	beq.n	800a67e <_puts_r+0x72>
 800a65a:	200a      	movs	r0, #10
 800a65c:	e011      	b.n	800a682 <_puts_r+0x76>
 800a65e:	4b17      	ldr	r3, [pc, #92]	; (800a6bc <_puts_r+0xb0>)
 800a660:	429c      	cmp	r4, r3
 800a662:	d101      	bne.n	800a668 <_puts_r+0x5c>
 800a664:	68ac      	ldr	r4, [r5, #8]
 800a666:	e7e3      	b.n	800a630 <_puts_r+0x24>
 800a668:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <_puts_r+0xb4>)
 800a66a:	429c      	cmp	r4, r3
 800a66c:	bf08      	it	eq
 800a66e:	68ec      	ldreq	r4, [r5, #12]
 800a670:	e7de      	b.n	800a630 <_puts_r+0x24>
 800a672:	4621      	mov	r1, r4
 800a674:	4628      	mov	r0, r5
 800a676:	f000 f8af 	bl	800a7d8 <__swsetup_r>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d0dd      	beq.n	800a63a <_puts_r+0x2e>
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	2b00      	cmp	r3, #0
 800a686:	da04      	bge.n	800a692 <_puts_r+0x86>
 800a688:	69a2      	ldr	r2, [r4, #24]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	dc06      	bgt.n	800a69c <_puts_r+0x90>
 800a68e:	290a      	cmp	r1, #10
 800a690:	d004      	beq.n	800a69c <_puts_r+0x90>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	6022      	str	r2, [r4, #0]
 800a698:	7019      	strb	r1, [r3, #0]
 800a69a:	e7cf      	b.n	800a63c <_puts_r+0x30>
 800a69c:	4622      	mov	r2, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 f848 	bl	800a734 <__swbuf_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d1c9      	bne.n	800a63c <_puts_r+0x30>
 800a6a8:	e7e9      	b.n	800a67e <_puts_r+0x72>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	200a      	movs	r0, #10
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	6022      	str	r2, [r4, #0]
 800a6b2:	7018      	strb	r0, [r3, #0]
 800a6b4:	e7e5      	b.n	800a682 <_puts_r+0x76>
 800a6b6:	bf00      	nop
 800a6b8:	0800bcf0 	.word	0x0800bcf0
 800a6bc:	0800bd10 	.word	0x0800bd10
 800a6c0:	0800bcd0 	.word	0x0800bcd0

0800a6c4 <puts>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <puts+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f7ff bf9f 	b.w	800a60c <_puts_r>
 800a6ce:	bf00      	nop
 800a6d0:	24000018 	.word	0x24000018

0800a6d4 <_sbrk_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4c06      	ldr	r4, [pc, #24]	; (800a6f0 <_sbrk_r+0x1c>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4605      	mov	r5, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	f7f7 f9ae 	bl	8001a40 <_sbrk>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_sbrk_r+0x1a>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_sbrk_r+0x1a>
 800a6ec:	602b      	str	r3, [r5, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	240003e4 	.word	0x240003e4

0800a6f4 <siprintf>:
 800a6f4:	b40e      	push	{r1, r2, r3}
 800a6f6:	b500      	push	{lr}
 800a6f8:	b09c      	sub	sp, #112	; 0x70
 800a6fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a6fc:	9002      	str	r0, [sp, #8]
 800a6fe:	9006      	str	r0, [sp, #24]
 800a700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a704:	4809      	ldr	r0, [pc, #36]	; (800a72c <siprintf+0x38>)
 800a706:	9107      	str	r1, [sp, #28]
 800a708:	9104      	str	r1, [sp, #16]
 800a70a:	4909      	ldr	r1, [pc, #36]	; (800a730 <siprintf+0x3c>)
 800a70c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a710:	9105      	str	r1, [sp, #20]
 800a712:	6800      	ldr	r0, [r0, #0]
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	a902      	add	r1, sp, #8
 800a718:	f000 fb06 	bl	800ad28 <_svfiprintf_r>
 800a71c:	9b02      	ldr	r3, [sp, #8]
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]
 800a722:	b01c      	add	sp, #112	; 0x70
 800a724:	f85d eb04 	ldr.w	lr, [sp], #4
 800a728:	b003      	add	sp, #12
 800a72a:	4770      	bx	lr
 800a72c:	24000018 	.word	0x24000018
 800a730:	ffff0208 	.word	0xffff0208

0800a734 <__swbuf_r>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	460e      	mov	r6, r1
 800a738:	4614      	mov	r4, r2
 800a73a:	4605      	mov	r5, r0
 800a73c:	b118      	cbz	r0, 800a746 <__swbuf_r+0x12>
 800a73e:	6983      	ldr	r3, [r0, #24]
 800a740:	b90b      	cbnz	r3, 800a746 <__swbuf_r+0x12>
 800a742:	f000 f9a7 	bl	800aa94 <__sinit>
 800a746:	4b21      	ldr	r3, [pc, #132]	; (800a7cc <__swbuf_r+0x98>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	d12a      	bne.n	800a7a2 <__swbuf_r+0x6e>
 800a74c:	686c      	ldr	r4, [r5, #4]
 800a74e:	69a3      	ldr	r3, [r4, #24]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	071a      	lsls	r2, r3, #28
 800a756:	d52e      	bpl.n	800a7b6 <__swbuf_r+0x82>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	b363      	cbz	r3, 800a7b6 <__swbuf_r+0x82>
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	1ac0      	subs	r0, r0, r3
 800a762:	6963      	ldr	r3, [r4, #20]
 800a764:	b2f6      	uxtb	r6, r6
 800a766:	4283      	cmp	r3, r0
 800a768:	4637      	mov	r7, r6
 800a76a:	dc04      	bgt.n	800a776 <__swbuf_r+0x42>
 800a76c:	4621      	mov	r1, r4
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 f926 	bl	800a9c0 <_fflush_r>
 800a774:	bb28      	cbnz	r0, 800a7c2 <__swbuf_r+0x8e>
 800a776:	68a3      	ldr	r3, [r4, #8]
 800a778:	3b01      	subs	r3, #1
 800a77a:	60a3      	str	r3, [r4, #8]
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	6022      	str	r2, [r4, #0]
 800a782:	701e      	strb	r6, [r3, #0]
 800a784:	6963      	ldr	r3, [r4, #20]
 800a786:	3001      	adds	r0, #1
 800a788:	4283      	cmp	r3, r0
 800a78a:	d004      	beq.n	800a796 <__swbuf_r+0x62>
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	07db      	lsls	r3, r3, #31
 800a790:	d519      	bpl.n	800a7c6 <__swbuf_r+0x92>
 800a792:	2e0a      	cmp	r6, #10
 800a794:	d117      	bne.n	800a7c6 <__swbuf_r+0x92>
 800a796:	4621      	mov	r1, r4
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 f911 	bl	800a9c0 <_fflush_r>
 800a79e:	b190      	cbz	r0, 800a7c6 <__swbuf_r+0x92>
 800a7a0:	e00f      	b.n	800a7c2 <__swbuf_r+0x8e>
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <__swbuf_r+0x9c>)
 800a7a4:	429c      	cmp	r4, r3
 800a7a6:	d101      	bne.n	800a7ac <__swbuf_r+0x78>
 800a7a8:	68ac      	ldr	r4, [r5, #8]
 800a7aa:	e7d0      	b.n	800a74e <__swbuf_r+0x1a>
 800a7ac:	4b09      	ldr	r3, [pc, #36]	; (800a7d4 <__swbuf_r+0xa0>)
 800a7ae:	429c      	cmp	r4, r3
 800a7b0:	bf08      	it	eq
 800a7b2:	68ec      	ldreq	r4, [r5, #12]
 800a7b4:	e7cb      	b.n	800a74e <__swbuf_r+0x1a>
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f000 f80d 	bl	800a7d8 <__swsetup_r>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d0cc      	beq.n	800a75c <__swbuf_r+0x28>
 800a7c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	0800bcf0 	.word	0x0800bcf0
 800a7d0:	0800bd10 	.word	0x0800bd10
 800a7d4:	0800bcd0 	.word	0x0800bcd0

0800a7d8 <__swsetup_r>:
 800a7d8:	4b32      	ldr	r3, [pc, #200]	; (800a8a4 <__swsetup_r+0xcc>)
 800a7da:	b570      	push	{r4, r5, r6, lr}
 800a7dc:	681d      	ldr	r5, [r3, #0]
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	b125      	cbz	r5, 800a7ee <__swsetup_r+0x16>
 800a7e4:	69ab      	ldr	r3, [r5, #24]
 800a7e6:	b913      	cbnz	r3, 800a7ee <__swsetup_r+0x16>
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f000 f953 	bl	800aa94 <__sinit>
 800a7ee:	4b2e      	ldr	r3, [pc, #184]	; (800a8a8 <__swsetup_r+0xd0>)
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	d10f      	bne.n	800a814 <__swsetup_r+0x3c>
 800a7f4:	686c      	ldr	r4, [r5, #4]
 800a7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	0715      	lsls	r5, r2, #28
 800a7fe:	d42c      	bmi.n	800a85a <__swsetup_r+0x82>
 800a800:	06d0      	lsls	r0, r2, #27
 800a802:	d411      	bmi.n	800a828 <__swsetup_r+0x50>
 800a804:	2209      	movs	r2, #9
 800a806:	6032      	str	r2, [r6, #0]
 800a808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a80c:	81a3      	strh	r3, [r4, #12]
 800a80e:	f04f 30ff 	mov.w	r0, #4294967295
 800a812:	e03e      	b.n	800a892 <__swsetup_r+0xba>
 800a814:	4b25      	ldr	r3, [pc, #148]	; (800a8ac <__swsetup_r+0xd4>)
 800a816:	429c      	cmp	r4, r3
 800a818:	d101      	bne.n	800a81e <__swsetup_r+0x46>
 800a81a:	68ac      	ldr	r4, [r5, #8]
 800a81c:	e7eb      	b.n	800a7f6 <__swsetup_r+0x1e>
 800a81e:	4b24      	ldr	r3, [pc, #144]	; (800a8b0 <__swsetup_r+0xd8>)
 800a820:	429c      	cmp	r4, r3
 800a822:	bf08      	it	eq
 800a824:	68ec      	ldreq	r4, [r5, #12]
 800a826:	e7e6      	b.n	800a7f6 <__swsetup_r+0x1e>
 800a828:	0751      	lsls	r1, r2, #29
 800a82a:	d512      	bpl.n	800a852 <__swsetup_r+0x7a>
 800a82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a82e:	b141      	cbz	r1, 800a842 <__swsetup_r+0x6a>
 800a830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a834:	4299      	cmp	r1, r3
 800a836:	d002      	beq.n	800a83e <__swsetup_r+0x66>
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff fe3f 	bl	800a4bc <_free_r>
 800a83e:	2300      	movs	r3, #0
 800a840:	6363      	str	r3, [r4, #52]	; 0x34
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a848:	81a3      	strh	r3, [r4, #12]
 800a84a:	2300      	movs	r3, #0
 800a84c:	6063      	str	r3, [r4, #4]
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f043 0308 	orr.w	r3, r3, #8
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	b94b      	cbnz	r3, 800a872 <__swsetup_r+0x9a>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a868:	d003      	beq.n	800a872 <__swsetup_r+0x9a>
 800a86a:	4621      	mov	r1, r4
 800a86c:	4630      	mov	r0, r6
 800a86e:	f000 f9bf 	bl	800abf0 <__smakebuf_r>
 800a872:	89a2      	ldrh	r2, [r4, #12]
 800a874:	f012 0301 	ands.w	r3, r2, #1
 800a878:	d00c      	beq.n	800a894 <__swsetup_r+0xbc>
 800a87a:	2300      	movs	r3, #0
 800a87c:	60a3      	str	r3, [r4, #8]
 800a87e:	6963      	ldr	r3, [r4, #20]
 800a880:	425b      	negs	r3, r3
 800a882:	61a3      	str	r3, [r4, #24]
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	b953      	cbnz	r3, 800a89e <__swsetup_r+0xc6>
 800a888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a890:	d1ba      	bne.n	800a808 <__swsetup_r+0x30>
 800a892:	bd70      	pop	{r4, r5, r6, pc}
 800a894:	0792      	lsls	r2, r2, #30
 800a896:	bf58      	it	pl
 800a898:	6963      	ldrpl	r3, [r4, #20]
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	e7f2      	b.n	800a884 <__swsetup_r+0xac>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e7f7      	b.n	800a892 <__swsetup_r+0xba>
 800a8a2:	bf00      	nop
 800a8a4:	24000018 	.word	0x24000018
 800a8a8:	0800bcf0 	.word	0x0800bcf0
 800a8ac:	0800bd10 	.word	0x0800bd10
 800a8b0:	0800bcd0 	.word	0x0800bcd0

0800a8b4 <__sflush_r>:
 800a8b4:	898a      	ldrh	r2, [r1, #12]
 800a8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	0710      	lsls	r0, r2, #28
 800a8be:	460c      	mov	r4, r1
 800a8c0:	d458      	bmi.n	800a974 <__sflush_r+0xc0>
 800a8c2:	684b      	ldr	r3, [r1, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dc05      	bgt.n	800a8d4 <__sflush_r+0x20>
 800a8c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dc02      	bgt.n	800a8d4 <__sflush_r+0x20>
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8d6:	2e00      	cmp	r6, #0
 800a8d8:	d0f9      	beq.n	800a8ce <__sflush_r+0x1a>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8e0:	682f      	ldr	r7, [r5, #0]
 800a8e2:	6a21      	ldr	r1, [r4, #32]
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	d032      	beq.n	800a94e <__sflush_r+0x9a>
 800a8e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	075a      	lsls	r2, r3, #29
 800a8ee:	d505      	bpl.n	800a8fc <__sflush_r+0x48>
 800a8f0:	6863      	ldr	r3, [r4, #4]
 800a8f2:	1ac0      	subs	r0, r0, r3
 800a8f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8f6:	b10b      	cbz	r3, 800a8fc <__sflush_r+0x48>
 800a8f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8fa:	1ac0      	subs	r0, r0, r3
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4602      	mov	r2, r0
 800a900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a902:	6a21      	ldr	r1, [r4, #32]
 800a904:	4628      	mov	r0, r5
 800a906:	47b0      	blx	r6
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	d106      	bne.n	800a91c <__sflush_r+0x68>
 800a90e:	6829      	ldr	r1, [r5, #0]
 800a910:	291d      	cmp	r1, #29
 800a912:	d848      	bhi.n	800a9a6 <__sflush_r+0xf2>
 800a914:	4a29      	ldr	r2, [pc, #164]	; (800a9bc <__sflush_r+0x108>)
 800a916:	40ca      	lsrs	r2, r1
 800a918:	07d6      	lsls	r6, r2, #31
 800a91a:	d544      	bpl.n	800a9a6 <__sflush_r+0xf2>
 800a91c:	2200      	movs	r2, #0
 800a91e:	6062      	str	r2, [r4, #4]
 800a920:	04d9      	lsls	r1, r3, #19
 800a922:	6922      	ldr	r2, [r4, #16]
 800a924:	6022      	str	r2, [r4, #0]
 800a926:	d504      	bpl.n	800a932 <__sflush_r+0x7e>
 800a928:	1c42      	adds	r2, r0, #1
 800a92a:	d101      	bne.n	800a930 <__sflush_r+0x7c>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b903      	cbnz	r3, 800a932 <__sflush_r+0x7e>
 800a930:	6560      	str	r0, [r4, #84]	; 0x54
 800a932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a934:	602f      	str	r7, [r5, #0]
 800a936:	2900      	cmp	r1, #0
 800a938:	d0c9      	beq.n	800a8ce <__sflush_r+0x1a>
 800a93a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a93e:	4299      	cmp	r1, r3
 800a940:	d002      	beq.n	800a948 <__sflush_r+0x94>
 800a942:	4628      	mov	r0, r5
 800a944:	f7ff fdba 	bl	800a4bc <_free_r>
 800a948:	2000      	movs	r0, #0
 800a94a:	6360      	str	r0, [r4, #52]	; 0x34
 800a94c:	e7c0      	b.n	800a8d0 <__sflush_r+0x1c>
 800a94e:	2301      	movs	r3, #1
 800a950:	4628      	mov	r0, r5
 800a952:	47b0      	blx	r6
 800a954:	1c41      	adds	r1, r0, #1
 800a956:	d1c8      	bne.n	800a8ea <__sflush_r+0x36>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0c5      	beq.n	800a8ea <__sflush_r+0x36>
 800a95e:	2b1d      	cmp	r3, #29
 800a960:	d001      	beq.n	800a966 <__sflush_r+0xb2>
 800a962:	2b16      	cmp	r3, #22
 800a964:	d101      	bne.n	800a96a <__sflush_r+0xb6>
 800a966:	602f      	str	r7, [r5, #0]
 800a968:	e7b1      	b.n	800a8ce <__sflush_r+0x1a>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	e7ad      	b.n	800a8d0 <__sflush_r+0x1c>
 800a974:	690f      	ldr	r7, [r1, #16]
 800a976:	2f00      	cmp	r7, #0
 800a978:	d0a9      	beq.n	800a8ce <__sflush_r+0x1a>
 800a97a:	0793      	lsls	r3, r2, #30
 800a97c:	680e      	ldr	r6, [r1, #0]
 800a97e:	bf08      	it	eq
 800a980:	694b      	ldreq	r3, [r1, #20]
 800a982:	600f      	str	r7, [r1, #0]
 800a984:	bf18      	it	ne
 800a986:	2300      	movne	r3, #0
 800a988:	eba6 0807 	sub.w	r8, r6, r7
 800a98c:	608b      	str	r3, [r1, #8]
 800a98e:	f1b8 0f00 	cmp.w	r8, #0
 800a992:	dd9c      	ble.n	800a8ce <__sflush_r+0x1a>
 800a994:	4643      	mov	r3, r8
 800a996:	463a      	mov	r2, r7
 800a998:	6a21      	ldr	r1, [r4, #32]
 800a99a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b0      	blx	r6
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	dc06      	bgt.n	800a9b2 <__sflush_r+0xfe>
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9aa:	81a3      	strh	r3, [r4, #12]
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	e78e      	b.n	800a8d0 <__sflush_r+0x1c>
 800a9b2:	4407      	add	r7, r0
 800a9b4:	eba8 0800 	sub.w	r8, r8, r0
 800a9b8:	e7e9      	b.n	800a98e <__sflush_r+0xda>
 800a9ba:	bf00      	nop
 800a9bc:	20400001 	.word	0x20400001

0800a9c0 <_fflush_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	690b      	ldr	r3, [r1, #16]
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	b1db      	cbz	r3, 800aa02 <_fflush_r+0x42>
 800a9ca:	b118      	cbz	r0, 800a9d4 <_fflush_r+0x14>
 800a9cc:	6983      	ldr	r3, [r0, #24]
 800a9ce:	b90b      	cbnz	r3, 800a9d4 <_fflush_r+0x14>
 800a9d0:	f000 f860 	bl	800aa94 <__sinit>
 800a9d4:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <_fflush_r+0x48>)
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	d109      	bne.n	800a9ee <_fflush_r+0x2e>
 800a9da:	686c      	ldr	r4, [r5, #4]
 800a9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e0:	b17b      	cbz	r3, 800aa02 <_fflush_r+0x42>
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ea:	f7ff bf63 	b.w	800a8b4 <__sflush_r>
 800a9ee:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <_fflush_r+0x4c>)
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	d101      	bne.n	800a9f8 <_fflush_r+0x38>
 800a9f4:	68ac      	ldr	r4, [r5, #8]
 800a9f6:	e7f1      	b.n	800a9dc <_fflush_r+0x1c>
 800a9f8:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <_fflush_r+0x50>)
 800a9fa:	429c      	cmp	r4, r3
 800a9fc:	bf08      	it	eq
 800a9fe:	68ec      	ldreq	r4, [r5, #12]
 800aa00:	e7ec      	b.n	800a9dc <_fflush_r+0x1c>
 800aa02:	2000      	movs	r0, #0
 800aa04:	bd38      	pop	{r3, r4, r5, pc}
 800aa06:	bf00      	nop
 800aa08:	0800bcf0 	.word	0x0800bcf0
 800aa0c:	0800bd10 	.word	0x0800bd10
 800aa10:	0800bcd0 	.word	0x0800bcd0

0800aa14 <std>:
 800aa14:	2300      	movs	r3, #0
 800aa16:	b510      	push	{r4, lr}
 800aa18:	4604      	mov	r4, r0
 800aa1a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa1e:	6083      	str	r3, [r0, #8]
 800aa20:	8181      	strh	r1, [r0, #12]
 800aa22:	6643      	str	r3, [r0, #100]	; 0x64
 800aa24:	81c2      	strh	r2, [r0, #14]
 800aa26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa2a:	6183      	str	r3, [r0, #24]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	2208      	movs	r2, #8
 800aa30:	305c      	adds	r0, #92	; 0x5c
 800aa32:	f7ff fd2d 	bl	800a490 <memset>
 800aa36:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <std+0x38>)
 800aa38:	6263      	str	r3, [r4, #36]	; 0x24
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <std+0x3c>)
 800aa3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <std+0x40>)
 800aa40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <std+0x44>)
 800aa44:	6224      	str	r4, [r4, #32]
 800aa46:	6323      	str	r3, [r4, #48]	; 0x30
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0800b229 	.word	0x0800b229
 800aa50:	0800b24b 	.word	0x0800b24b
 800aa54:	0800b283 	.word	0x0800b283
 800aa58:	0800b2a7 	.word	0x0800b2a7

0800aa5c <_cleanup_r>:
 800aa5c:	4901      	ldr	r1, [pc, #4]	; (800aa64 <_cleanup_r+0x8>)
 800aa5e:	f000 b885 	b.w	800ab6c <_fwalk_reent>
 800aa62:	bf00      	nop
 800aa64:	0800a9c1 	.word	0x0800a9c1

0800aa68 <__sfmoreglue>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	1e4a      	subs	r2, r1, #1
 800aa6c:	2568      	movs	r5, #104	; 0x68
 800aa6e:	4355      	muls	r5, r2
 800aa70:	460e      	mov	r6, r1
 800aa72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa76:	f7ff fd6f 	bl	800a558 <_malloc_r>
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	b140      	cbz	r0, 800aa90 <__sfmoreglue+0x28>
 800aa7e:	2100      	movs	r1, #0
 800aa80:	e9c0 1600 	strd	r1, r6, [r0]
 800aa84:	300c      	adds	r0, #12
 800aa86:	60a0      	str	r0, [r4, #8]
 800aa88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa8c:	f7ff fd00 	bl	800a490 <memset>
 800aa90:	4620      	mov	r0, r4
 800aa92:	bd70      	pop	{r4, r5, r6, pc}

0800aa94 <__sinit>:
 800aa94:	6983      	ldr	r3, [r0, #24]
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	bb33      	cbnz	r3, 800aaea <__sinit+0x56>
 800aa9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800aaa0:	6503      	str	r3, [r0, #80]	; 0x50
 800aaa2:	4b12      	ldr	r3, [pc, #72]	; (800aaec <__sinit+0x58>)
 800aaa4:	4a12      	ldr	r2, [pc, #72]	; (800aaf0 <__sinit+0x5c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6282      	str	r2, [r0, #40]	; 0x28
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	bf04      	itt	eq
 800aaae:	2301      	moveq	r3, #1
 800aab0:	6183      	streq	r3, [r0, #24]
 800aab2:	f000 f81f 	bl	800aaf4 <__sfp>
 800aab6:	6060      	str	r0, [r4, #4]
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 f81b 	bl	800aaf4 <__sfp>
 800aabe:	60a0      	str	r0, [r4, #8]
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 f817 	bl	800aaf4 <__sfp>
 800aac6:	2200      	movs	r2, #0
 800aac8:	60e0      	str	r0, [r4, #12]
 800aaca:	2104      	movs	r1, #4
 800aacc:	6860      	ldr	r0, [r4, #4]
 800aace:	f7ff ffa1 	bl	800aa14 <std>
 800aad2:	2201      	movs	r2, #1
 800aad4:	2109      	movs	r1, #9
 800aad6:	68a0      	ldr	r0, [r4, #8]
 800aad8:	f7ff ff9c 	bl	800aa14 <std>
 800aadc:	2202      	movs	r2, #2
 800aade:	2112      	movs	r1, #18
 800aae0:	68e0      	ldr	r0, [r4, #12]
 800aae2:	f7ff ff97 	bl	800aa14 <std>
 800aae6:	2301      	movs	r3, #1
 800aae8:	61a3      	str	r3, [r4, #24]
 800aaea:	bd10      	pop	{r4, pc}
 800aaec:	0800bccc 	.word	0x0800bccc
 800aaf0:	0800aa5d 	.word	0x0800aa5d

0800aaf4 <__sfp>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	4b1b      	ldr	r3, [pc, #108]	; (800ab64 <__sfp+0x70>)
 800aaf8:	681e      	ldr	r6, [r3, #0]
 800aafa:	69b3      	ldr	r3, [r6, #24]
 800aafc:	4607      	mov	r7, r0
 800aafe:	b913      	cbnz	r3, 800ab06 <__sfp+0x12>
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffc7 	bl	800aa94 <__sinit>
 800ab06:	3648      	adds	r6, #72	; 0x48
 800ab08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	d503      	bpl.n	800ab18 <__sfp+0x24>
 800ab10:	6833      	ldr	r3, [r6, #0]
 800ab12:	b133      	cbz	r3, 800ab22 <__sfp+0x2e>
 800ab14:	6836      	ldr	r6, [r6, #0]
 800ab16:	e7f7      	b.n	800ab08 <__sfp+0x14>
 800ab18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab1c:	b16d      	cbz	r5, 800ab3a <__sfp+0x46>
 800ab1e:	3468      	adds	r4, #104	; 0x68
 800ab20:	e7f4      	b.n	800ab0c <__sfp+0x18>
 800ab22:	2104      	movs	r1, #4
 800ab24:	4638      	mov	r0, r7
 800ab26:	f7ff ff9f 	bl	800aa68 <__sfmoreglue>
 800ab2a:	6030      	str	r0, [r6, #0]
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d1f1      	bne.n	800ab14 <__sfp+0x20>
 800ab30:	230c      	movs	r3, #12
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4604      	mov	r4, r0
 800ab36:	4620      	mov	r0, r4
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <__sfp+0x74>)
 800ab3c:	6665      	str	r5, [r4, #100]	; 0x64
 800ab3e:	e9c4 5500 	strd	r5, r5, [r4]
 800ab42:	60a5      	str	r5, [r4, #8]
 800ab44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ab48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab54:	f7ff fc9c 	bl	800a490 <memset>
 800ab58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab60:	e7e9      	b.n	800ab36 <__sfp+0x42>
 800ab62:	bf00      	nop
 800ab64:	0800bccc 	.word	0x0800bccc
 800ab68:	ffff0001 	.word	0xffff0001

0800ab6c <_fwalk_reent>:
 800ab6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab78:	2600      	movs	r6, #0
 800ab7a:	b914      	cbnz	r4, 800ab82 <_fwalk_reent+0x16>
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ab86:	3f01      	subs	r7, #1
 800ab88:	d501      	bpl.n	800ab8e <_fwalk_reent+0x22>
 800ab8a:	6824      	ldr	r4, [r4, #0]
 800ab8c:	e7f5      	b.n	800ab7a <_fwalk_reent+0xe>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d907      	bls.n	800aba4 <_fwalk_reent+0x38>
 800ab94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	d003      	beq.n	800aba4 <_fwalk_reent+0x38>
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4640      	mov	r0, r8
 800aba0:	47c8      	blx	r9
 800aba2:	4306      	orrs	r6, r0
 800aba4:	3568      	adds	r5, #104	; 0x68
 800aba6:	e7ee      	b.n	800ab86 <_fwalk_reent+0x1a>

0800aba8 <__swhatbuf_r>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	460e      	mov	r6, r1
 800abac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb0:	2900      	cmp	r1, #0
 800abb2:	b096      	sub	sp, #88	; 0x58
 800abb4:	4614      	mov	r4, r2
 800abb6:	461d      	mov	r5, r3
 800abb8:	da07      	bge.n	800abca <__swhatbuf_r+0x22>
 800abba:	2300      	movs	r3, #0
 800abbc:	602b      	str	r3, [r5, #0]
 800abbe:	89b3      	ldrh	r3, [r6, #12]
 800abc0:	061a      	lsls	r2, r3, #24
 800abc2:	d410      	bmi.n	800abe6 <__swhatbuf_r+0x3e>
 800abc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abc8:	e00e      	b.n	800abe8 <__swhatbuf_r+0x40>
 800abca:	466a      	mov	r2, sp
 800abcc:	f000 fb92 	bl	800b2f4 <_fstat_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	dbf2      	blt.n	800abba <__swhatbuf_r+0x12>
 800abd4:	9a01      	ldr	r2, [sp, #4]
 800abd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abde:	425a      	negs	r2, r3
 800abe0:	415a      	adcs	r2, r3
 800abe2:	602a      	str	r2, [r5, #0]
 800abe4:	e7ee      	b.n	800abc4 <__swhatbuf_r+0x1c>
 800abe6:	2340      	movs	r3, #64	; 0x40
 800abe8:	2000      	movs	r0, #0
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	b016      	add	sp, #88	; 0x58
 800abee:	bd70      	pop	{r4, r5, r6, pc}

0800abf0 <__smakebuf_r>:
 800abf0:	898b      	ldrh	r3, [r1, #12]
 800abf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abf4:	079d      	lsls	r5, r3, #30
 800abf6:	4606      	mov	r6, r0
 800abf8:	460c      	mov	r4, r1
 800abfa:	d507      	bpl.n	800ac0c <__smakebuf_r+0x1c>
 800abfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	6123      	str	r3, [r4, #16]
 800ac04:	2301      	movs	r3, #1
 800ac06:	6163      	str	r3, [r4, #20]
 800ac08:	b002      	add	sp, #8
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}
 800ac0c:	ab01      	add	r3, sp, #4
 800ac0e:	466a      	mov	r2, sp
 800ac10:	f7ff ffca 	bl	800aba8 <__swhatbuf_r>
 800ac14:	9900      	ldr	r1, [sp, #0]
 800ac16:	4605      	mov	r5, r0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff fc9d 	bl	800a558 <_malloc_r>
 800ac1e:	b948      	cbnz	r0, 800ac34 <__smakebuf_r+0x44>
 800ac20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac24:	059a      	lsls	r2, r3, #22
 800ac26:	d4ef      	bmi.n	800ac08 <__smakebuf_r+0x18>
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	e7e3      	b.n	800abfc <__smakebuf_r+0xc>
 800ac34:	4b0d      	ldr	r3, [pc, #52]	; (800ac6c <__smakebuf_r+0x7c>)
 800ac36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	6020      	str	r0, [r4, #0]
 800ac3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac40:	81a3      	strh	r3, [r4, #12]
 800ac42:	9b00      	ldr	r3, [sp, #0]
 800ac44:	6163      	str	r3, [r4, #20]
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	6120      	str	r0, [r4, #16]
 800ac4a:	b15b      	cbz	r3, 800ac64 <__smakebuf_r+0x74>
 800ac4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 fb61 	bl	800b318 <_isatty_r>
 800ac56:	b128      	cbz	r0, 800ac64 <__smakebuf_r+0x74>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f023 0303 	bic.w	r3, r3, #3
 800ac5e:	f043 0301 	orr.w	r3, r3, #1
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	431d      	orrs	r5, r3
 800ac68:	81a5      	strh	r5, [r4, #12]
 800ac6a:	e7cd      	b.n	800ac08 <__smakebuf_r+0x18>
 800ac6c:	0800aa5d 	.word	0x0800aa5d

0800ac70 <__malloc_lock>:
 800ac70:	4770      	bx	lr

0800ac72 <__malloc_unlock>:
 800ac72:	4770      	bx	lr

0800ac74 <__ssputs_r>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	688e      	ldr	r6, [r1, #8]
 800ac7a:	429e      	cmp	r6, r3
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4690      	mov	r8, r2
 800ac82:	4699      	mov	r9, r3
 800ac84:	d837      	bhi.n	800acf6 <__ssputs_r+0x82>
 800ac86:	898a      	ldrh	r2, [r1, #12]
 800ac88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac8c:	d031      	beq.n	800acf2 <__ssputs_r+0x7e>
 800ac8e:	6825      	ldr	r5, [r4, #0]
 800ac90:	6909      	ldr	r1, [r1, #16]
 800ac92:	1a6f      	subs	r7, r5, r1
 800ac94:	6965      	ldr	r5, [r4, #20]
 800ac96:	2302      	movs	r3, #2
 800ac98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac9c:	fb95 f5f3 	sdiv	r5, r5, r3
 800aca0:	f109 0301 	add.w	r3, r9, #1
 800aca4:	443b      	add	r3, r7
 800aca6:	429d      	cmp	r5, r3
 800aca8:	bf38      	it	cc
 800acaa:	461d      	movcc	r5, r3
 800acac:	0553      	lsls	r3, r2, #21
 800acae:	d530      	bpl.n	800ad12 <__ssputs_r+0x9e>
 800acb0:	4629      	mov	r1, r5
 800acb2:	f7ff fc51 	bl	800a558 <_malloc_r>
 800acb6:	4606      	mov	r6, r0
 800acb8:	b950      	cbnz	r0, 800acd0 <__ssputs_r+0x5c>
 800acba:	230c      	movs	r3, #12
 800acbc:	f8ca 3000 	str.w	r3, [sl]
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd0:	463a      	mov	r2, r7
 800acd2:	6921      	ldr	r1, [r4, #16]
 800acd4:	f000 fb42 	bl	800b35c <memcpy>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	6126      	str	r6, [r4, #16]
 800ace6:	6165      	str	r5, [r4, #20]
 800ace8:	443e      	add	r6, r7
 800acea:	1bed      	subs	r5, r5, r7
 800acec:	6026      	str	r6, [r4, #0]
 800acee:	60a5      	str	r5, [r4, #8]
 800acf0:	464e      	mov	r6, r9
 800acf2:	454e      	cmp	r6, r9
 800acf4:	d900      	bls.n	800acf8 <__ssputs_r+0x84>
 800acf6:	464e      	mov	r6, r9
 800acf8:	4632      	mov	r2, r6
 800acfa:	4641      	mov	r1, r8
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	f000 fb38 	bl	800b372 <memmove>
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	1b9b      	subs	r3, r3, r6
 800ad06:	60a3      	str	r3, [r4, #8]
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	441e      	add	r6, r3
 800ad0c:	6026      	str	r6, [r4, #0]
 800ad0e:	2000      	movs	r0, #0
 800ad10:	e7dc      	b.n	800accc <__ssputs_r+0x58>
 800ad12:	462a      	mov	r2, r5
 800ad14:	f000 fb46 	bl	800b3a4 <_realloc_r>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d1e2      	bne.n	800ace4 <__ssputs_r+0x70>
 800ad1e:	6921      	ldr	r1, [r4, #16]
 800ad20:	4650      	mov	r0, sl
 800ad22:	f7ff fbcb 	bl	800a4bc <_free_r>
 800ad26:	e7c8      	b.n	800acba <__ssputs_r+0x46>

0800ad28 <_svfiprintf_r>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	461d      	mov	r5, r3
 800ad2e:	898b      	ldrh	r3, [r1, #12]
 800ad30:	061f      	lsls	r7, r3, #24
 800ad32:	b09d      	sub	sp, #116	; 0x74
 800ad34:	4680      	mov	r8, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	4616      	mov	r6, r2
 800ad3a:	d50f      	bpl.n	800ad5c <_svfiprintf_r+0x34>
 800ad3c:	690b      	ldr	r3, [r1, #16]
 800ad3e:	b96b      	cbnz	r3, 800ad5c <_svfiprintf_r+0x34>
 800ad40:	2140      	movs	r1, #64	; 0x40
 800ad42:	f7ff fc09 	bl	800a558 <_malloc_r>
 800ad46:	6020      	str	r0, [r4, #0]
 800ad48:	6120      	str	r0, [r4, #16]
 800ad4a:	b928      	cbnz	r0, 800ad58 <_svfiprintf_r+0x30>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	f8c8 3000 	str.w	r3, [r8]
 800ad52:	f04f 30ff 	mov.w	r0, #4294967295
 800ad56:	e0c8      	b.n	800aeea <_svfiprintf_r+0x1c2>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	6163      	str	r3, [r4, #20]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad60:	2320      	movs	r3, #32
 800ad62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad66:	2330      	movs	r3, #48	; 0x30
 800ad68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad6c:	9503      	str	r5, [sp, #12]
 800ad6e:	f04f 0b01 	mov.w	fp, #1
 800ad72:	4637      	mov	r7, r6
 800ad74:	463d      	mov	r5, r7
 800ad76:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad7a:	b10b      	cbz	r3, 800ad80 <_svfiprintf_r+0x58>
 800ad7c:	2b25      	cmp	r3, #37	; 0x25
 800ad7e:	d13e      	bne.n	800adfe <_svfiprintf_r+0xd6>
 800ad80:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad84:	d00b      	beq.n	800ad9e <_svfiprintf_r+0x76>
 800ad86:	4653      	mov	r3, sl
 800ad88:	4632      	mov	r2, r6
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	f7ff ff71 	bl	800ac74 <__ssputs_r>
 800ad92:	3001      	adds	r0, #1
 800ad94:	f000 80a4 	beq.w	800aee0 <_svfiprintf_r+0x1b8>
 800ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9a:	4453      	add	r3, sl
 800ad9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9e:	783b      	ldrb	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 809d 	beq.w	800aee0 <_svfiprintf_r+0x1b8>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f04f 32ff 	mov.w	r2, #4294967295
 800adac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb8:	931a      	str	r3, [sp, #104]	; 0x68
 800adba:	462f      	mov	r7, r5
 800adbc:	2205      	movs	r2, #5
 800adbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800adc2:	4850      	ldr	r0, [pc, #320]	; (800af04 <_svfiprintf_r+0x1dc>)
 800adc4:	f7f5 fa94 	bl	80002f0 <memchr>
 800adc8:	9b04      	ldr	r3, [sp, #16]
 800adca:	b9d0      	cbnz	r0, 800ae02 <_svfiprintf_r+0xda>
 800adcc:	06d9      	lsls	r1, r3, #27
 800adce:	bf44      	itt	mi
 800add0:	2220      	movmi	r2, #32
 800add2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800add6:	071a      	lsls	r2, r3, #28
 800add8:	bf44      	itt	mi
 800adda:	222b      	movmi	r2, #43	; 0x2b
 800addc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ade0:	782a      	ldrb	r2, [r5, #0]
 800ade2:	2a2a      	cmp	r2, #42	; 0x2a
 800ade4:	d015      	beq.n	800ae12 <_svfiprintf_r+0xea>
 800ade6:	9a07      	ldr	r2, [sp, #28]
 800ade8:	462f      	mov	r7, r5
 800adea:	2000      	movs	r0, #0
 800adec:	250a      	movs	r5, #10
 800adee:	4639      	mov	r1, r7
 800adf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf4:	3b30      	subs	r3, #48	; 0x30
 800adf6:	2b09      	cmp	r3, #9
 800adf8:	d94d      	bls.n	800ae96 <_svfiprintf_r+0x16e>
 800adfa:	b1b8      	cbz	r0, 800ae2c <_svfiprintf_r+0x104>
 800adfc:	e00f      	b.n	800ae1e <_svfiprintf_r+0xf6>
 800adfe:	462f      	mov	r7, r5
 800ae00:	e7b8      	b.n	800ad74 <_svfiprintf_r+0x4c>
 800ae02:	4a40      	ldr	r2, [pc, #256]	; (800af04 <_svfiprintf_r+0x1dc>)
 800ae04:	1a80      	subs	r0, r0, r2
 800ae06:	fa0b f000 	lsl.w	r0, fp, r0
 800ae0a:	4318      	orrs	r0, r3
 800ae0c:	9004      	str	r0, [sp, #16]
 800ae0e:	463d      	mov	r5, r7
 800ae10:	e7d3      	b.n	800adba <_svfiprintf_r+0x92>
 800ae12:	9a03      	ldr	r2, [sp, #12]
 800ae14:	1d11      	adds	r1, r2, #4
 800ae16:	6812      	ldr	r2, [r2, #0]
 800ae18:	9103      	str	r1, [sp, #12]
 800ae1a:	2a00      	cmp	r2, #0
 800ae1c:	db01      	blt.n	800ae22 <_svfiprintf_r+0xfa>
 800ae1e:	9207      	str	r2, [sp, #28]
 800ae20:	e004      	b.n	800ae2c <_svfiprintf_r+0x104>
 800ae22:	4252      	negs	r2, r2
 800ae24:	f043 0302 	orr.w	r3, r3, #2
 800ae28:	9207      	str	r2, [sp, #28]
 800ae2a:	9304      	str	r3, [sp, #16]
 800ae2c:	783b      	ldrb	r3, [r7, #0]
 800ae2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae30:	d10c      	bne.n	800ae4c <_svfiprintf_r+0x124>
 800ae32:	787b      	ldrb	r3, [r7, #1]
 800ae34:	2b2a      	cmp	r3, #42	; 0x2a
 800ae36:	d133      	bne.n	800aea0 <_svfiprintf_r+0x178>
 800ae38:	9b03      	ldr	r3, [sp, #12]
 800ae3a:	1d1a      	adds	r2, r3, #4
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	9203      	str	r2, [sp, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfb8      	it	lt
 800ae44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae48:	3702      	adds	r7, #2
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	4d2e      	ldr	r5, [pc, #184]	; (800af08 <_svfiprintf_r+0x1e0>)
 800ae4e:	7839      	ldrb	r1, [r7, #0]
 800ae50:	2203      	movs	r2, #3
 800ae52:	4628      	mov	r0, r5
 800ae54:	f7f5 fa4c 	bl	80002f0 <memchr>
 800ae58:	b138      	cbz	r0, 800ae6a <_svfiprintf_r+0x142>
 800ae5a:	2340      	movs	r3, #64	; 0x40
 800ae5c:	1b40      	subs	r0, r0, r5
 800ae5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae62:	9b04      	ldr	r3, [sp, #16]
 800ae64:	4303      	orrs	r3, r0
 800ae66:	3701      	adds	r7, #1
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	7839      	ldrb	r1, [r7, #0]
 800ae6c:	4827      	ldr	r0, [pc, #156]	; (800af0c <_svfiprintf_r+0x1e4>)
 800ae6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae72:	2206      	movs	r2, #6
 800ae74:	1c7e      	adds	r6, r7, #1
 800ae76:	f7f5 fa3b 	bl	80002f0 <memchr>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d038      	beq.n	800aef0 <_svfiprintf_r+0x1c8>
 800ae7e:	4b24      	ldr	r3, [pc, #144]	; (800af10 <_svfiprintf_r+0x1e8>)
 800ae80:	bb13      	cbnz	r3, 800aec8 <_svfiprintf_r+0x1a0>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	3307      	adds	r3, #7
 800ae86:	f023 0307 	bic.w	r3, r3, #7
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	9303      	str	r3, [sp, #12]
 800ae8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae90:	444b      	add	r3, r9
 800ae92:	9309      	str	r3, [sp, #36]	; 0x24
 800ae94:	e76d      	b.n	800ad72 <_svfiprintf_r+0x4a>
 800ae96:	fb05 3202 	mla	r2, r5, r2, r3
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	e7a6      	b.n	800adee <_svfiprintf_r+0xc6>
 800aea0:	2300      	movs	r3, #0
 800aea2:	3701      	adds	r7, #1
 800aea4:	9305      	str	r3, [sp, #20]
 800aea6:	4619      	mov	r1, r3
 800aea8:	250a      	movs	r5, #10
 800aeaa:	4638      	mov	r0, r7
 800aeac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb0:	3a30      	subs	r2, #48	; 0x30
 800aeb2:	2a09      	cmp	r2, #9
 800aeb4:	d903      	bls.n	800aebe <_svfiprintf_r+0x196>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0c8      	beq.n	800ae4c <_svfiprintf_r+0x124>
 800aeba:	9105      	str	r1, [sp, #20]
 800aebc:	e7c6      	b.n	800ae4c <_svfiprintf_r+0x124>
 800aebe:	fb05 2101 	mla	r1, r5, r1, r2
 800aec2:	2301      	movs	r3, #1
 800aec4:	4607      	mov	r7, r0
 800aec6:	e7f0      	b.n	800aeaa <_svfiprintf_r+0x182>
 800aec8:	ab03      	add	r3, sp, #12
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	4622      	mov	r2, r4
 800aece:	4b11      	ldr	r3, [pc, #68]	; (800af14 <_svfiprintf_r+0x1ec>)
 800aed0:	a904      	add	r1, sp, #16
 800aed2:	4640      	mov	r0, r8
 800aed4:	f3af 8000 	nop.w
 800aed8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aedc:	4681      	mov	r9, r0
 800aede:	d1d6      	bne.n	800ae8e <_svfiprintf_r+0x166>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	065b      	lsls	r3, r3, #25
 800aee4:	f53f af35 	bmi.w	800ad52 <_svfiprintf_r+0x2a>
 800aee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeea:	b01d      	add	sp, #116	; 0x74
 800aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef0:	ab03      	add	r3, sp, #12
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	4622      	mov	r2, r4
 800aef6:	4b07      	ldr	r3, [pc, #28]	; (800af14 <_svfiprintf_r+0x1ec>)
 800aef8:	a904      	add	r1, sp, #16
 800aefa:	4640      	mov	r0, r8
 800aefc:	f000 f882 	bl	800b004 <_printf_i>
 800af00:	e7ea      	b.n	800aed8 <_svfiprintf_r+0x1b0>
 800af02:	bf00      	nop
 800af04:	0800bd30 	.word	0x0800bd30
 800af08:	0800bd36 	.word	0x0800bd36
 800af0c:	0800bd3a 	.word	0x0800bd3a
 800af10:	00000000 	.word	0x00000000
 800af14:	0800ac75 	.word	0x0800ac75

0800af18 <_printf_common>:
 800af18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	4691      	mov	r9, r2
 800af1e:	461f      	mov	r7, r3
 800af20:	688a      	ldr	r2, [r1, #8]
 800af22:	690b      	ldr	r3, [r1, #16]
 800af24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af28:	4293      	cmp	r3, r2
 800af2a:	bfb8      	it	lt
 800af2c:	4613      	movlt	r3, r2
 800af2e:	f8c9 3000 	str.w	r3, [r9]
 800af32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af36:	4606      	mov	r6, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	b112      	cbz	r2, 800af42 <_printf_common+0x2a>
 800af3c:	3301      	adds	r3, #1
 800af3e:	f8c9 3000 	str.w	r3, [r9]
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	0699      	lsls	r1, r3, #26
 800af46:	bf42      	ittt	mi
 800af48:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af4c:	3302      	addmi	r3, #2
 800af4e:	f8c9 3000 	strmi.w	r3, [r9]
 800af52:	6825      	ldr	r5, [r4, #0]
 800af54:	f015 0506 	ands.w	r5, r5, #6
 800af58:	d107      	bne.n	800af6a <_printf_common+0x52>
 800af5a:	f104 0a19 	add.w	sl, r4, #25
 800af5e:	68e3      	ldr	r3, [r4, #12]
 800af60:	f8d9 2000 	ldr.w	r2, [r9]
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	42ab      	cmp	r3, r5
 800af68:	dc28      	bgt.n	800afbc <_printf_common+0xa4>
 800af6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af6e:	6822      	ldr	r2, [r4, #0]
 800af70:	3300      	adds	r3, #0
 800af72:	bf18      	it	ne
 800af74:	2301      	movne	r3, #1
 800af76:	0692      	lsls	r2, r2, #26
 800af78:	d42d      	bmi.n	800afd6 <_printf_common+0xbe>
 800af7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af7e:	4639      	mov	r1, r7
 800af80:	4630      	mov	r0, r6
 800af82:	47c0      	blx	r8
 800af84:	3001      	adds	r0, #1
 800af86:	d020      	beq.n	800afca <_printf_common+0xb2>
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	68e5      	ldr	r5, [r4, #12]
 800af8c:	f8d9 2000 	ldr.w	r2, [r9]
 800af90:	f003 0306 	and.w	r3, r3, #6
 800af94:	2b04      	cmp	r3, #4
 800af96:	bf08      	it	eq
 800af98:	1aad      	subeq	r5, r5, r2
 800af9a:	68a3      	ldr	r3, [r4, #8]
 800af9c:	6922      	ldr	r2, [r4, #16]
 800af9e:	bf0c      	ite	eq
 800afa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afa4:	2500      	movne	r5, #0
 800afa6:	4293      	cmp	r3, r2
 800afa8:	bfc4      	itt	gt
 800afaa:	1a9b      	subgt	r3, r3, r2
 800afac:	18ed      	addgt	r5, r5, r3
 800afae:	f04f 0900 	mov.w	r9, #0
 800afb2:	341a      	adds	r4, #26
 800afb4:	454d      	cmp	r5, r9
 800afb6:	d11a      	bne.n	800afee <_printf_common+0xd6>
 800afb8:	2000      	movs	r0, #0
 800afba:	e008      	b.n	800afce <_printf_common+0xb6>
 800afbc:	2301      	movs	r3, #1
 800afbe:	4652      	mov	r2, sl
 800afc0:	4639      	mov	r1, r7
 800afc2:	4630      	mov	r0, r6
 800afc4:	47c0      	blx	r8
 800afc6:	3001      	adds	r0, #1
 800afc8:	d103      	bne.n	800afd2 <_printf_common+0xba>
 800afca:	f04f 30ff 	mov.w	r0, #4294967295
 800afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd2:	3501      	adds	r5, #1
 800afd4:	e7c3      	b.n	800af5e <_printf_common+0x46>
 800afd6:	18e1      	adds	r1, r4, r3
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	2030      	movs	r0, #48	; 0x30
 800afdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afe0:	4422      	add	r2, r4
 800afe2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afe6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afea:	3302      	adds	r3, #2
 800afec:	e7c5      	b.n	800af7a <_printf_common+0x62>
 800afee:	2301      	movs	r3, #1
 800aff0:	4622      	mov	r2, r4
 800aff2:	4639      	mov	r1, r7
 800aff4:	4630      	mov	r0, r6
 800aff6:	47c0      	blx	r8
 800aff8:	3001      	adds	r0, #1
 800affa:	d0e6      	beq.n	800afca <_printf_common+0xb2>
 800affc:	f109 0901 	add.w	r9, r9, #1
 800b000:	e7d8      	b.n	800afb4 <_printf_common+0x9c>
	...

0800b004 <_printf_i>:
 800b004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b008:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b00c:	460c      	mov	r4, r1
 800b00e:	7e09      	ldrb	r1, [r1, #24]
 800b010:	b085      	sub	sp, #20
 800b012:	296e      	cmp	r1, #110	; 0x6e
 800b014:	4617      	mov	r7, r2
 800b016:	4606      	mov	r6, r0
 800b018:	4698      	mov	r8, r3
 800b01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b01c:	f000 80b3 	beq.w	800b186 <_printf_i+0x182>
 800b020:	d822      	bhi.n	800b068 <_printf_i+0x64>
 800b022:	2963      	cmp	r1, #99	; 0x63
 800b024:	d036      	beq.n	800b094 <_printf_i+0x90>
 800b026:	d80a      	bhi.n	800b03e <_printf_i+0x3a>
 800b028:	2900      	cmp	r1, #0
 800b02a:	f000 80b9 	beq.w	800b1a0 <_printf_i+0x19c>
 800b02e:	2958      	cmp	r1, #88	; 0x58
 800b030:	f000 8083 	beq.w	800b13a <_printf_i+0x136>
 800b034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b038:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b03c:	e032      	b.n	800b0a4 <_printf_i+0xa0>
 800b03e:	2964      	cmp	r1, #100	; 0x64
 800b040:	d001      	beq.n	800b046 <_printf_i+0x42>
 800b042:	2969      	cmp	r1, #105	; 0x69
 800b044:	d1f6      	bne.n	800b034 <_printf_i+0x30>
 800b046:	6820      	ldr	r0, [r4, #0]
 800b048:	6813      	ldr	r3, [r2, #0]
 800b04a:	0605      	lsls	r5, r0, #24
 800b04c:	f103 0104 	add.w	r1, r3, #4
 800b050:	d52a      	bpl.n	800b0a8 <_printf_i+0xa4>
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6011      	str	r1, [r2, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	da03      	bge.n	800b062 <_printf_i+0x5e>
 800b05a:	222d      	movs	r2, #45	; 0x2d
 800b05c:	425b      	negs	r3, r3
 800b05e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b062:	486f      	ldr	r0, [pc, #444]	; (800b220 <_printf_i+0x21c>)
 800b064:	220a      	movs	r2, #10
 800b066:	e039      	b.n	800b0dc <_printf_i+0xd8>
 800b068:	2973      	cmp	r1, #115	; 0x73
 800b06a:	f000 809d 	beq.w	800b1a8 <_printf_i+0x1a4>
 800b06e:	d808      	bhi.n	800b082 <_printf_i+0x7e>
 800b070:	296f      	cmp	r1, #111	; 0x6f
 800b072:	d020      	beq.n	800b0b6 <_printf_i+0xb2>
 800b074:	2970      	cmp	r1, #112	; 0x70
 800b076:	d1dd      	bne.n	800b034 <_printf_i+0x30>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	f043 0320 	orr.w	r3, r3, #32
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	e003      	b.n	800b08a <_printf_i+0x86>
 800b082:	2975      	cmp	r1, #117	; 0x75
 800b084:	d017      	beq.n	800b0b6 <_printf_i+0xb2>
 800b086:	2978      	cmp	r1, #120	; 0x78
 800b088:	d1d4      	bne.n	800b034 <_printf_i+0x30>
 800b08a:	2378      	movs	r3, #120	; 0x78
 800b08c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b090:	4864      	ldr	r0, [pc, #400]	; (800b224 <_printf_i+0x220>)
 800b092:	e055      	b.n	800b140 <_printf_i+0x13c>
 800b094:	6813      	ldr	r3, [r2, #0]
 800b096:	1d19      	adds	r1, r3, #4
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	6011      	str	r1, [r2, #0]
 800b09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e08c      	b.n	800b1c2 <_printf_i+0x1be>
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6011      	str	r1, [r2, #0]
 800b0ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0b0:	bf18      	it	ne
 800b0b2:	b21b      	sxthne	r3, r3
 800b0b4:	e7cf      	b.n	800b056 <_printf_i+0x52>
 800b0b6:	6813      	ldr	r3, [r2, #0]
 800b0b8:	6825      	ldr	r5, [r4, #0]
 800b0ba:	1d18      	adds	r0, r3, #4
 800b0bc:	6010      	str	r0, [r2, #0]
 800b0be:	0628      	lsls	r0, r5, #24
 800b0c0:	d501      	bpl.n	800b0c6 <_printf_i+0xc2>
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	e002      	b.n	800b0cc <_printf_i+0xc8>
 800b0c6:	0668      	lsls	r0, r5, #25
 800b0c8:	d5fb      	bpl.n	800b0c2 <_printf_i+0xbe>
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	4854      	ldr	r0, [pc, #336]	; (800b220 <_printf_i+0x21c>)
 800b0ce:	296f      	cmp	r1, #111	; 0x6f
 800b0d0:	bf14      	ite	ne
 800b0d2:	220a      	movne	r2, #10
 800b0d4:	2208      	moveq	r2, #8
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0dc:	6865      	ldr	r5, [r4, #4]
 800b0de:	60a5      	str	r5, [r4, #8]
 800b0e0:	2d00      	cmp	r5, #0
 800b0e2:	f2c0 8095 	blt.w	800b210 <_printf_i+0x20c>
 800b0e6:	6821      	ldr	r1, [r4, #0]
 800b0e8:	f021 0104 	bic.w	r1, r1, #4
 800b0ec:	6021      	str	r1, [r4, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d13d      	bne.n	800b16e <_printf_i+0x16a>
 800b0f2:	2d00      	cmp	r5, #0
 800b0f4:	f040 808e 	bne.w	800b214 <_printf_i+0x210>
 800b0f8:	4665      	mov	r5, ip
 800b0fa:	2a08      	cmp	r2, #8
 800b0fc:	d10b      	bne.n	800b116 <_printf_i+0x112>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	07db      	lsls	r3, r3, #31
 800b102:	d508      	bpl.n	800b116 <_printf_i+0x112>
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	6862      	ldr	r2, [r4, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	bfde      	ittt	le
 800b10c:	2330      	movle	r3, #48	; 0x30
 800b10e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b112:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b116:	ebac 0305 	sub.w	r3, ip, r5
 800b11a:	6123      	str	r3, [r4, #16]
 800b11c:	f8cd 8000 	str.w	r8, [sp]
 800b120:	463b      	mov	r3, r7
 800b122:	aa03      	add	r2, sp, #12
 800b124:	4621      	mov	r1, r4
 800b126:	4630      	mov	r0, r6
 800b128:	f7ff fef6 	bl	800af18 <_printf_common>
 800b12c:	3001      	adds	r0, #1
 800b12e:	d14d      	bne.n	800b1cc <_printf_i+0x1c8>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	b005      	add	sp, #20
 800b136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b13a:	4839      	ldr	r0, [pc, #228]	; (800b220 <_printf_i+0x21c>)
 800b13c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b140:	6813      	ldr	r3, [r2, #0]
 800b142:	6821      	ldr	r1, [r4, #0]
 800b144:	1d1d      	adds	r5, r3, #4
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6015      	str	r5, [r2, #0]
 800b14a:	060a      	lsls	r2, r1, #24
 800b14c:	d50b      	bpl.n	800b166 <_printf_i+0x162>
 800b14e:	07ca      	lsls	r2, r1, #31
 800b150:	bf44      	itt	mi
 800b152:	f041 0120 	orrmi.w	r1, r1, #32
 800b156:	6021      	strmi	r1, [r4, #0]
 800b158:	b91b      	cbnz	r3, 800b162 <_printf_i+0x15e>
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	f022 0220 	bic.w	r2, r2, #32
 800b160:	6022      	str	r2, [r4, #0]
 800b162:	2210      	movs	r2, #16
 800b164:	e7b7      	b.n	800b0d6 <_printf_i+0xd2>
 800b166:	064d      	lsls	r5, r1, #25
 800b168:	bf48      	it	mi
 800b16a:	b29b      	uxthmi	r3, r3
 800b16c:	e7ef      	b.n	800b14e <_printf_i+0x14a>
 800b16e:	4665      	mov	r5, ip
 800b170:	fbb3 f1f2 	udiv	r1, r3, r2
 800b174:	fb02 3311 	mls	r3, r2, r1, r3
 800b178:	5cc3      	ldrb	r3, [r0, r3]
 800b17a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b17e:	460b      	mov	r3, r1
 800b180:	2900      	cmp	r1, #0
 800b182:	d1f5      	bne.n	800b170 <_printf_i+0x16c>
 800b184:	e7b9      	b.n	800b0fa <_printf_i+0xf6>
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	6825      	ldr	r5, [r4, #0]
 800b18a:	6961      	ldr	r1, [r4, #20]
 800b18c:	1d18      	adds	r0, r3, #4
 800b18e:	6010      	str	r0, [r2, #0]
 800b190:	0628      	lsls	r0, r5, #24
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	d501      	bpl.n	800b19a <_printf_i+0x196>
 800b196:	6019      	str	r1, [r3, #0]
 800b198:	e002      	b.n	800b1a0 <_printf_i+0x19c>
 800b19a:	066a      	lsls	r2, r5, #25
 800b19c:	d5fb      	bpl.n	800b196 <_printf_i+0x192>
 800b19e:	8019      	strh	r1, [r3, #0]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	6123      	str	r3, [r4, #16]
 800b1a4:	4665      	mov	r5, ip
 800b1a6:	e7b9      	b.n	800b11c <_printf_i+0x118>
 800b1a8:	6813      	ldr	r3, [r2, #0]
 800b1aa:	1d19      	adds	r1, r3, #4
 800b1ac:	6011      	str	r1, [r2, #0]
 800b1ae:	681d      	ldr	r5, [r3, #0]
 800b1b0:	6862      	ldr	r2, [r4, #4]
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	f7f5 f89b 	bl	80002f0 <memchr>
 800b1ba:	b108      	cbz	r0, 800b1c0 <_printf_i+0x1bc>
 800b1bc:	1b40      	subs	r0, r0, r5
 800b1be:	6060      	str	r0, [r4, #4]
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	6123      	str	r3, [r4, #16]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ca:	e7a7      	b.n	800b11c <_printf_i+0x118>
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	462a      	mov	r2, r5
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	47c0      	blx	r8
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	d0aa      	beq.n	800b130 <_printf_i+0x12c>
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	079b      	lsls	r3, r3, #30
 800b1de:	d413      	bmi.n	800b208 <_printf_i+0x204>
 800b1e0:	68e0      	ldr	r0, [r4, #12]
 800b1e2:	9b03      	ldr	r3, [sp, #12]
 800b1e4:	4298      	cmp	r0, r3
 800b1e6:	bfb8      	it	lt
 800b1e8:	4618      	movlt	r0, r3
 800b1ea:	e7a3      	b.n	800b134 <_printf_i+0x130>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	464a      	mov	r2, r9
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	47c0      	blx	r8
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	d09a      	beq.n	800b130 <_printf_i+0x12c>
 800b1fa:	3501      	adds	r5, #1
 800b1fc:	68e3      	ldr	r3, [r4, #12]
 800b1fe:	9a03      	ldr	r2, [sp, #12]
 800b200:	1a9b      	subs	r3, r3, r2
 800b202:	42ab      	cmp	r3, r5
 800b204:	dcf2      	bgt.n	800b1ec <_printf_i+0x1e8>
 800b206:	e7eb      	b.n	800b1e0 <_printf_i+0x1dc>
 800b208:	2500      	movs	r5, #0
 800b20a:	f104 0919 	add.w	r9, r4, #25
 800b20e:	e7f5      	b.n	800b1fc <_printf_i+0x1f8>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1ac      	bne.n	800b16e <_printf_i+0x16a>
 800b214:	7803      	ldrb	r3, [r0, #0]
 800b216:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b21a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b21e:	e76c      	b.n	800b0fa <_printf_i+0xf6>
 800b220:	0800bd41 	.word	0x0800bd41
 800b224:	0800bd52 	.word	0x0800bd52

0800b228 <__sread>:
 800b228:	b510      	push	{r4, lr}
 800b22a:	460c      	mov	r4, r1
 800b22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b230:	f000 f8de 	bl	800b3f0 <_read_r>
 800b234:	2800      	cmp	r0, #0
 800b236:	bfab      	itete	ge
 800b238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b23a:	89a3      	ldrhlt	r3, [r4, #12]
 800b23c:	181b      	addge	r3, r3, r0
 800b23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b242:	bfac      	ite	ge
 800b244:	6563      	strge	r3, [r4, #84]	; 0x54
 800b246:	81a3      	strhlt	r3, [r4, #12]
 800b248:	bd10      	pop	{r4, pc}

0800b24a <__swrite>:
 800b24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b24e:	461f      	mov	r7, r3
 800b250:	898b      	ldrh	r3, [r1, #12]
 800b252:	05db      	lsls	r3, r3, #23
 800b254:	4605      	mov	r5, r0
 800b256:	460c      	mov	r4, r1
 800b258:	4616      	mov	r6, r2
 800b25a:	d505      	bpl.n	800b268 <__swrite+0x1e>
 800b25c:	2302      	movs	r3, #2
 800b25e:	2200      	movs	r2, #0
 800b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b264:	f000 f868 	bl	800b338 <_lseek_r>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	4632      	mov	r2, r6
 800b276:	463b      	mov	r3, r7
 800b278:	4628      	mov	r0, r5
 800b27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b27e:	f000 b817 	b.w	800b2b0 <_write_r>

0800b282 <__sseek>:
 800b282:	b510      	push	{r4, lr}
 800b284:	460c      	mov	r4, r1
 800b286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28a:	f000 f855 	bl	800b338 <_lseek_r>
 800b28e:	1c43      	adds	r3, r0, #1
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	bf15      	itete	ne
 800b294:	6560      	strne	r0, [r4, #84]	; 0x54
 800b296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b29e:	81a3      	strheq	r3, [r4, #12]
 800b2a0:	bf18      	it	ne
 800b2a2:	81a3      	strhne	r3, [r4, #12]
 800b2a4:	bd10      	pop	{r4, pc}

0800b2a6 <__sclose>:
 800b2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2aa:	f000 b813 	b.w	800b2d4 <_close_r>
	...

0800b2b0 <_write_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4c07      	ldr	r4, [pc, #28]	; (800b2d0 <_write_r+0x20>)
 800b2b4:	4605      	mov	r5, r0
 800b2b6:	4608      	mov	r0, r1
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	6022      	str	r2, [r4, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f7f6 fb6d 	bl	800199e <_write>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_write_r+0x1e>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_write_r+0x1e>
 800b2cc:	602b      	str	r3, [r5, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	240003e4 	.word	0x240003e4

0800b2d4 <_close_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4c06      	ldr	r4, [pc, #24]	; (800b2f0 <_close_r+0x1c>)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4605      	mov	r5, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	f7f6 fb79 	bl	80019d6 <_close>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d102      	bne.n	800b2ee <_close_r+0x1a>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	b103      	cbz	r3, 800b2ee <_close_r+0x1a>
 800b2ec:	602b      	str	r3, [r5, #0]
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
 800b2f0:	240003e4 	.word	0x240003e4

0800b2f4 <_fstat_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4c07      	ldr	r4, [pc, #28]	; (800b314 <_fstat_r+0x20>)
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	4611      	mov	r1, r2
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	f7f6 fb74 	bl	80019ee <_fstat>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d102      	bne.n	800b310 <_fstat_r+0x1c>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	b103      	cbz	r3, 800b310 <_fstat_r+0x1c>
 800b30e:	602b      	str	r3, [r5, #0]
 800b310:	bd38      	pop	{r3, r4, r5, pc}
 800b312:	bf00      	nop
 800b314:	240003e4 	.word	0x240003e4

0800b318 <_isatty_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4c06      	ldr	r4, [pc, #24]	; (800b334 <_isatty_r+0x1c>)
 800b31c:	2300      	movs	r3, #0
 800b31e:	4605      	mov	r5, r0
 800b320:	4608      	mov	r0, r1
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	f7f6 fb73 	bl	8001a0e <_isatty>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_isatty_r+0x1a>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_isatty_r+0x1a>
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	240003e4 	.word	0x240003e4

0800b338 <_lseek_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4c07      	ldr	r4, [pc, #28]	; (800b358 <_lseek_r+0x20>)
 800b33c:	4605      	mov	r5, r0
 800b33e:	4608      	mov	r0, r1
 800b340:	4611      	mov	r1, r2
 800b342:	2200      	movs	r2, #0
 800b344:	6022      	str	r2, [r4, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	f7f6 fb6c 	bl	8001a24 <_lseek>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_lseek_r+0x1e>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	b103      	cbz	r3, 800b356 <_lseek_r+0x1e>
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	240003e4 	.word	0x240003e4

0800b35c <memcpy>:
 800b35c:	b510      	push	{r4, lr}
 800b35e:	1e43      	subs	r3, r0, #1
 800b360:	440a      	add	r2, r1
 800b362:	4291      	cmp	r1, r2
 800b364:	d100      	bne.n	800b368 <memcpy+0xc>
 800b366:	bd10      	pop	{r4, pc}
 800b368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b36c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b370:	e7f7      	b.n	800b362 <memcpy+0x6>

0800b372 <memmove>:
 800b372:	4288      	cmp	r0, r1
 800b374:	b510      	push	{r4, lr}
 800b376:	eb01 0302 	add.w	r3, r1, r2
 800b37a:	d807      	bhi.n	800b38c <memmove+0x1a>
 800b37c:	1e42      	subs	r2, r0, #1
 800b37e:	4299      	cmp	r1, r3
 800b380:	d00a      	beq.n	800b398 <memmove+0x26>
 800b382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b386:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b38a:	e7f8      	b.n	800b37e <memmove+0xc>
 800b38c:	4283      	cmp	r3, r0
 800b38e:	d9f5      	bls.n	800b37c <memmove+0xa>
 800b390:	1881      	adds	r1, r0, r2
 800b392:	1ad2      	subs	r2, r2, r3
 800b394:	42d3      	cmn	r3, r2
 800b396:	d100      	bne.n	800b39a <memmove+0x28>
 800b398:	bd10      	pop	{r4, pc}
 800b39a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b39e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b3a2:	e7f7      	b.n	800b394 <memmove+0x22>

0800b3a4 <_realloc_r>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	4607      	mov	r7, r0
 800b3a8:	4614      	mov	r4, r2
 800b3aa:	460e      	mov	r6, r1
 800b3ac:	b921      	cbnz	r1, 800b3b8 <_realloc_r+0x14>
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3b4:	f7ff b8d0 	b.w	800a558 <_malloc_r>
 800b3b8:	b922      	cbnz	r2, 800b3c4 <_realloc_r+0x20>
 800b3ba:	f7ff f87f 	bl	800a4bc <_free_r>
 800b3be:	4625      	mov	r5, r4
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c4:	f000 f826 	bl	800b414 <_malloc_usable_size_r>
 800b3c8:	42a0      	cmp	r0, r4
 800b3ca:	d20f      	bcs.n	800b3ec <_realloc_r+0x48>
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	f7ff f8c2 	bl	800a558 <_malloc_r>
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d0f2      	beq.n	800b3c0 <_realloc_r+0x1c>
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4622      	mov	r2, r4
 800b3de:	f7ff ffbd 	bl	800b35c <memcpy>
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f7ff f869 	bl	800a4bc <_free_r>
 800b3ea:	e7e9      	b.n	800b3c0 <_realloc_r+0x1c>
 800b3ec:	4635      	mov	r5, r6
 800b3ee:	e7e7      	b.n	800b3c0 <_realloc_r+0x1c>

0800b3f0 <_read_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4c07      	ldr	r4, [pc, #28]	; (800b410 <_read_r+0x20>)
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	6022      	str	r2, [r4, #0]
 800b3fe:	461a      	mov	r2, r3
 800b400:	f7f6 fab0 	bl	8001964 <_read>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d102      	bne.n	800b40e <_read_r+0x1e>
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	b103      	cbz	r3, 800b40e <_read_r+0x1e>
 800b40c:	602b      	str	r3, [r5, #0]
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	240003e4 	.word	0x240003e4

0800b414 <_malloc_usable_size_r>:
 800b414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b418:	1f18      	subs	r0, r3, #4
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	bfbc      	itt	lt
 800b41e:	580b      	ldrlt	r3, [r1, r0]
 800b420:	18c0      	addlt	r0, r0, r3
 800b422:	4770      	bx	lr

0800b424 <_init>:
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b426:	bf00      	nop
 800b428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42a:	bc08      	pop	{r3}
 800b42c:	469e      	mov	lr, r3
 800b42e:	4770      	bx	lr

0800b430 <_fini>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	bf00      	nop
 800b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b436:	bc08      	pop	{r3}
 800b438:	469e      	mov	lr, r3
 800b43a:	4770      	bx	lr
