
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae40  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9f4  0800b9f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9fc  0800b9fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9fc  0800b9fc  0001b9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800ba04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  24000074  0800ba78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000380  0800ba78  00020380  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c16  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b0  00000000  00000000  00044cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00048668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00049d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000336cd  00000000  00000000  0004b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000145ef  00000000  00000000  0007e9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001561e0  00000000  00000000  00092f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e917c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006afc  00000000  00000000  001e91f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b0d8 	.word	0x0800b0d8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800b0d8 	.word	0x0800b0d8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int i;

  char uart_buf[50];
  int uart_buf_len;
  volatile uint32_t timer_count = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 f8e3 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f897 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fb5d 	bl	8000d60 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a6:	f000 fb23 	bl	8000cf0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006aa:	f000 facd 	bl	8000c48 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006ae:	f000 fb17 	bl	8000ce0 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006b2:	f000 f95d 	bl	8000970 <MX_ADC1_Init>
  MX_DAC1_Init();
 80006b6:	f000 f9d5 	bl	8000a64 <MX_DAC1_Init>
  MX_TIM6_Init();
 80006ba:	f000 fa59 	bl	8000b70 <MX_TIM6_Init>
  MX_TIM2_Init();
 80006be:	f000 fa03 	bl	8000ac8 <MX_TIM2_Init>
  MX_TIM7_Init();
 80006c2:	f000 fa8b 	bl	8000bdc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
//  s_ref = init_nco(1. / 4000., 0);
  s_ref = init_nco(1. / 100., 0);
 80006c6:	eddf 0a37 	vldr	s1, [pc, #220]	; 80007a4 <main+0x114>
 80006ca:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80007a8 <main+0x118>
 80006ce:	f000 fc8f 	bl	8000ff0 <init_nco>
 80006d2:	6478      	str	r0, [r7, #68]	; 0x44
//  s_ref = init_nco(250. / 1000., 0);
//  s_2 = init_nco(249. / 4000., 0);
//
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 80006d4:	2102      	movs	r1, #2
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f009 fce5 	bl	800a0a8 <calloc>
 80006de:	4603      	mov	r3, r0
 80006e0:	643b      	str	r3, [r7, #64]	; 0x40
//	  printf("Failed to allocate memory for arrays\n");
//	  exit(EXIT_FAILURE);
//  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 80006e2:	4832      	ldr	r0, [pc, #200]	; (80007ac <main+0x11c>)
 80006e4:	f007 fe4e 	bl	8008384 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4831      	ldr	r0, [pc, #196]	; (80007b0 <main+0x120>)
 80006ec:	f002 f9ab 	bl	8002a46 <HAL_DAC_Start>


  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, BLOCKSIZE, DAC_ALIGN_12B_R);
 80006f0:	2300      	movs	r3, #0
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80006fa:	2100      	movs	r1, #0
 80006fc:	482c      	ldr	r0, [pc, #176]	; (80007b0 <main+0x120>)
 80006fe:	f002 f9f5 	bl	8002aec <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN WHILE */

//  uart_buf_len = sprintf(uart_buf, "\nTesting\r\n");
//  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 8000702:	482c      	ldr	r0, [pc, #176]	; (80007b4 <main+0x124>)
 8000704:	f007 fe6c 	bl	80083e0 <HAL_TIM_Base_Start_IT>

  /* Timer to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000708:	482b      	ldr	r0, [pc, #172]	; (80007b8 <main+0x128>)
 800070a:	f007 fe3b 	bl	8008384 <HAL_TIM_Base_Start>
  i = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c

  while (1)
  {

	  if (update_freq_flag) {
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <main+0x12c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0fa      	beq.n	8000712 <main+0x82>
		  timer_count = __HAL_TIM_GET_COUNTER(&htim2);
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <main+0x128>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	607b      	str	r3, [r7, #4]
	//	  uart_buf_len = sprintf(uart_buf, "%d\r\n", timer_count);
	//	  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

	//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		  timer_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <main+0x128>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	607b      	str	r3, [r7, #4]

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((timer_count * 200 - REF_OSC_FREQ)) ;		//Round to the nearest hundred Hz
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	22c8      	movs	r2, #200	; 0xc8
 8000730:	fb02 f203 	mul.w	r2, r2, r3
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <main+0x130>)
 8000736:	4413      	add	r3, r2
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
		  if (freq < 0)
 800073a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800073c:	2b00      	cmp	r3, #0
 800073e:	da02      	bge.n	8000746 <main+0xb6>
			  freq = -freq;
 8000740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000742:	425b      	negs	r3, r3
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48

		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x128>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
		  uart_buf_len = sprintf(uart_buf, "%d counts\r\n", freq);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000754:	491b      	ldr	r1, [pc, #108]	; (80007c4 <main+0x134>)
 8000756:	4618      	mov	r0, r3
 8000758:	f009 fe26 	bl	800a3a8 <siprintf>
 800075c:	63f8      	str	r0, [r7, #60]	; 0x3c
		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
 800075e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000760:	b29a      	uxth	r2, r3
 8000762:	f107 0108 	add.w	r1, r7, #8
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	4817      	ldr	r0, [pc, #92]	; (80007c8 <main+0x138>)
 800076a:	f008 fad3 	bl	8008d14 <HAL_UART_Transmit>

		//	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
		  nco_set_frequency(s_ref, (float)freq / 100000.);
 800076e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000770:	ee07 3a90 	vmov	s15, r3
 8000774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000778:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007cc <main+0x13c>
 800077c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000780:	eeb0 0a66 	vmov.f32	s0, s13
 8000784:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000786:	f000 fccb 	bl	8001120 <nco_set_frequency>
		  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 800078a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800078e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000790:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000792:	f000 fc75 	bl	8001080 <nco_get_samples>
	//	  nco_set_frequency(s_ref, (float)(i%5 + 1)/100.);
		  update_freq_flag = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <main+0x12c>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		  i++;
 800079c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800079e:	3301      	adds	r3, #1
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (update_freq_flag) {
 80007a2:	e7b6      	b.n	8000712 <main+0x82>
 80007a4:	00000000 	.word	0x00000000
 80007a8:	3c23d70a 	.word	0x3c23d70a
 80007ac:	24000290 	.word	0x24000290
 80007b0:	2400009c 	.word	0x2400009c
 80007b4:	24000328 	.word	0x24000328
 80007b8:	240002dc 	.word	0x240002dc
 80007bc:	24000374 	.word	0x24000374
 80007c0:	fffc2f70 	.word	0xfffc2f70
 80007c4:	0800b0f0 	.word	0x0800b0f0
 80007c8:	240000b0 	.word	0x240000b0
 80007cc:	47c35000 	.word	0x47c35000

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0ca      	sub	sp, #296	; 0x128
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 fcb0 	bl	800a144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 fca9 	bl	800a144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	23b8      	movs	r3, #184	; 0xb8
 80007f8:	461a      	mov	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f009 fca2 	bl	800a144 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f004 ff69 	bl	80056d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <SystemClock_Config+0x194>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a54      	ldr	r2, [pc, #336]	; (8000964 <SystemClock_Config+0x194>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b52      	ldr	r3, [pc, #328]	; (8000964 <SystemClock_Config+0x194>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000820:	463b      	mov	r3, r7
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	463b      	mov	r3, r7
 8000826:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <SystemClock_Config+0x194>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000838:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <SystemClock_Config+0x198>)
 800083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083c:	f023 0303 	bic.w	r3, r3, #3
 8000840:	4a49      	ldr	r2, [pc, #292]	; (8000968 <SystemClock_Config+0x198>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000848:	2329      	movs	r3, #41	; 0x29
 800084a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000852:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000868:	2302      	movs	r3, #2
 800086a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000874:	2318      	movs	r3, #24
 8000876:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088c:	230c      	movs	r3, #12
 800088e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 ff72 	bl	800578c <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008ae:	f000 fb95 	bl	8000fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	233f      	movs	r3, #63	; 0x3f
 80008b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2303      	movs	r3, #3
 80008ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80008e6:	2102      	movs	r1, #2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f005 fb37 	bl	8005f5c <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80008f4:	f000 fb72 	bl	8000fdc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <SystemClock_Config+0x19c>)
 80008fc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2201      	movs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2210      	movs	r2, #16
 8000908:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2202      	movs	r2, #2
 800090e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2202      	movs	r2, #2
 8000914:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2202      	movs	r2, #2
 800091a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	22c0      	movs	r2, #192	; 0xc0
 8000920:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800093a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f005 fe8b 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x188>
  {
    Error_Handler();
 8000954:	f000 fb42 	bl	8000fdc <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	58024800 	.word	0x58024800
 8000968:	58024400 	.word	0x58024400
 800096c:	000c0002 	.word	0x000c0002

08000970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_ADC1_Init+0xe8>)
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <MX_ADC1_Init+0xec>)
 8000998:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_ADC1_Init+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009cc:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009dc:	2203      	movs	r2, #3
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f4:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_ADC1_Init+0xe8>)
 80009f6:	f001 f975 	bl	8001ce4 <HAL_ADC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a00:	f000 faec 	bl	8000fdc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_ADC1_Init+0xe8>)
 8000a10:	f001 fe50 	bl	80026b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a1a:	f000 fadf 	bl	8000fdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_ADC1_Init+0xf0>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a22:	2306      	movs	r3, #6
 8000a24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a2e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a30:	2304      	movs	r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_ADC1_Init+0xe8>)
 8000a42:	f001 faa9 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a4c:	f000 fac6 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	240001b4 	.word	0x240001b4
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	14f00020 	.word	0x14f00020

08000a64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2224      	movs	r2, #36	; 0x24
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f009 fb67 	bl	800a144 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_DAC1_Init+0x5c>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MX_DAC1_Init+0x60>)
 8000a7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <MX_DAC1_Init+0x5c>)
 8000a7e:	f001 ffc0 	bl	8002a02 <HAL_DAC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a88:	f000 faa8 	bl	8000fdc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000a90:	2316      	movs	r3, #22
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_DAC1_Init+0x5c>)
 8000aa8:	f002 f8fc 	bl	8002ca4 <HAL_DAC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 fa93 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2400009c 	.word	0x2400009c
 8000ac4:	40007400 	.word	0x40007400

08000ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000b12:	f007 fbdf 	bl	80082d4 <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 fa5e 	bl	8000fdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b20:	2307      	movs	r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b24:	2350      	movs	r3, #80	; 0x50
 8000b26:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000b38:	f007 fda7 	bl	800868a <HAL_TIM_SlaveConfigSynchro>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b42:	f000 fa4b 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_TIM2_Init+0xa4>)
 8000b54:	f007 ffe8 	bl	8008b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b5e:	f000 fa3d 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	240002dc 	.word	0x240002dc

08000b70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 960 - 1;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b94:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000b98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000ba2:	f007 fb97 	bl	80082d4 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bac:	f000 fa16 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM6_Init+0x64>)
 8000bbe:	f007 ffb3 	bl	8008b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bc8:	f000 fa08 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000290 	.word	0x24000290
 8000bd8:	40001000 	.word	0x40001000

08000bdc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_TIM7_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bf4:	225f      	movs	r2, #95	; 0x5f
 8000bf6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c00:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c04:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c0e:	f007 fb61 	bl	80082d4 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c18:	f000 f9e0 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_TIM7_Init+0x64>)
 8000c2a:	f007 ff7d 	bl	8008b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c34:	f000 f9d2 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	24000328 	.word	0x24000328
 8000c44:	40001400 	.word	0x40001400

08000c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c4e:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <MX_USART3_UART_Init+0x94>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c92:	f007 ffef 	bl	8008c74 <HAL_UART_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c9c:	f000 f99e 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000ca4:	f009 f91b 	bl	8009ede <HAL_UARTEx_SetTxFifoThreshold>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cae:	f000 f995 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000cb6:	f009 f950 	bl	8009f5a <HAL_UARTEx_SetRxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f000 f98c 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000cc6:	f009 f8d1 	bl	8009e6c <HAL_UARTEx_DisableFifoMode>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 f984 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	240000b0 	.word	0x240000b0
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_DMA_Init+0x6c>)
 8000cf8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <MX_DMA_Init+0x6c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_DMA_Init+0x6c>)
 8000d08:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_DMA_Init+0x6c>)
 8000d16:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d1a:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <MX_DMA_Init+0x6c>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_DMA_Init+0x6c>)
 8000d26:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	200b      	movs	r0, #11
 8000d38:	f001 fe2f 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d3c:	200b      	movs	r0, #11
 8000d3e:	f001 fe46 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2038      	movs	r0, #56	; 0x38
 8000d48:	f001 fe27 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d4c:	2038      	movs	r0, #56	; 0x38
 8000d4e:	f001 fe3e 	bl	80029ce <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024400 	.word	0x58024400

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7c:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d86:	4b83      	ldr	r3, [pc, #524]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d94:	4b7f      	ldr	r3, [pc, #508]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9a:	4a7e      	ldr	r2, [pc, #504]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000d9c:	f043 0320 	orr.w	r3, r3, #32
 8000da0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000da4:	4b7b      	ldr	r3, [pc, #492]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000daa:	f003 0320 	and.w	r3, r3, #32
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	4b78      	ldr	r3, [pc, #480]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db8:	4a76      	ldr	r2, [pc, #472]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc2:	4b74      	ldr	r3, [pc, #464]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000dc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b70      	ldr	r3, [pc, #448]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd6:	4a6f      	ldr	r2, [pc, #444]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de0:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b69      	ldr	r3, [pc, #420]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000df0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df4:	4a67      	ldr	r2, [pc, #412]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dfe:	4b65      	ldr	r3, [pc, #404]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0c:	4b61      	ldr	r3, [pc, #388]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e12:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e1c:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e30:	4a58      	ldr	r2, [pc, #352]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e3a:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e48:	4b52      	ldr	r3, [pc, #328]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4e:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e58:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <MX_GPIO_Init+0x234>)
 8000e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6c:	484a      	ldr	r0, [pc, #296]	; (8000f98 <MX_GPIO_Init+0x238>)
 8000e6e:	f004 fbff 	bl	8005670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e78:	4848      	ldr	r0, [pc, #288]	; (8000f9c <MX_GPIO_Init+0x23c>)
 8000e7a:	f004 fbf9 	bl	8005670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2102      	movs	r1, #2
 8000e82:	4847      	ldr	r0, [pc, #284]	; (8000fa0 <MX_GPIO_Init+0x240>)
 8000e84:	f004 fbf4 	bl	8005670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4841      	ldr	r0, [pc, #260]	; (8000fa4 <MX_GPIO_Init+0x244>)
 8000e9e:	f004 fa37 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4837      	ldr	r0, [pc, #220]	; (8000f98 <MX_GPIO_Init+0x238>)
 8000ebc:	f004 fa28 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ec0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4830      	ldr	r0, [pc, #192]	; (8000f9c <MX_GPIO_Init+0x23c>)
 8000eda:	f004 fa19 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MX_GPIO_Init+0x248>)
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482e      	ldr	r0, [pc, #184]	; (8000fac <MX_GPIO_Init+0x24c>)
 8000ef2:	f004 fa0d 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <MX_GPIO_Init+0x250>)
 8000f0c:	f004 fa00 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f22:	230a      	movs	r3, #10
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <MX_GPIO_Init+0x250>)
 8000f2e:	f004 f9ef 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000f32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <MX_GPIO_Init+0x250>)
 8000f4c:	f004 f9e0 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_GPIO_Init+0x23c>)
 8000f6c:	f004 f9d0 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f70:	2302      	movs	r3, #2
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_GPIO_Init+0x240>)
 8000f88:	f004 f9c2 	bl	8005310 <HAL_GPIO_Init>

}
 8000f8c:	bf00      	nop
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58021400 	.word	0x58021400
 8000f9c:	58020400 	.word	0x58020400
 8000fa0:	58021000 	.word	0x58021000
 8000fa4:	58020800 	.word	0x58020800
 8000fa8:	11110000 	.word	0x11110000
 8000fac:	58021800 	.word	0x58021800
 8000fb0:	58020000 	.word	0x58020000

08000fb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc0:	f004 fb6f 	bl	80056a2 <HAL_GPIO_TogglePin>
	update_freq_flag = 1;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	24000374 	.word	0x24000374

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	0000      	movs	r0, r0
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ffa:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8000ffe:	200c      	movs	r0, #12
 8001000:	f009 f898 	bl	800a134 <malloc>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <init_nco+0x88>)
 8001010:	f009 f9b2 	bl	800a378 <puts>
        exit(EXIT_FAILURE);
 8001014:	2001      	movs	r0, #1
 8001016:	f009 f855 	bl	800a0c4 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 800101a:	edd7 7a01 	vldr	s15, [r7, #4]
 800101e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001022:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800107c <init_nco+0x8c>
 8001026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 2a90 	vmov	r2, s15
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8001036:	edd7 7a00 	vldr	s15, [r7]
 800103a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800103e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800107c <init_nco+0x8c>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800104a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001070 <init_nco+0x80>
 800104e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001052:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001056:	ee17 2a90 	vmov	r2, s15
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	53c8d4f1 	.word	0x53c8d4f1
 8001074:	401921fb 	.word	0x401921fb
 8001078:	0800b0fc 	.word	0x0800b0fc
 800107c:	4f000000 	.word	0x4f000000

08001080 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e038      	b.n	8001104 <nco_get_samples+0x84>

        if ((i == 0) && (s->acc == 0)) {
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <nco_get_samples+0x28>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <nco_get_samples+0x28>
            s->acc = 0;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	e008      	b.n	80010ba <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
        }
        //kprime[n]
        kprime = s->acc + s->theta;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	0ddb      	lsrs	r3, r3, #23
 80010cc:	617b      	str	r3, [r7, #20]
//		y[i] = index;
//        y[i] = (int)((cosine[i / 2] * 2048)/2 + 2047);
        y[i] = (unsigned int)((cosine[index] + 1) * 2047);
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <nco_get_samples+0x98>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800111c <nco_get_samples+0x9c>
 80010e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	b292      	uxth	r2, r2
 80010fc:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3c2      	bcc.n	8001092 <nco_get_samples+0x12>
//        y[i] = (unsigned int)((cosine[index] * 4095) / 2 + 2047);
//        y[i] = cosine[i];
	}
}
 800110c:	bf00      	nop
 800110e:	3724      	adds	r7, #36	; 0x24
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	0800b12c 	.word	0x0800b12c
 800111c:	44ffe000 	.word	0x44ffe000

08001120 <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 800112c:	edd7 7a00 	vldr	s15, [r7]
 8001130:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001134:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001154 <nco_set_frequency+0x34>
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	ee17 2a90 	vmov	r2, s15
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	4f000000 	.word	0x4f000000

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_MspInit+0x30>)
 8001160:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x30>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x30>)
 8001170:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58024400 	.word	0x58024400

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a30      	ldr	r2, [pc, #192]	; (800126c <HAL_ADC_MspInit+0xe0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d159      	bne.n	8001262 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_ADC_MspInit+0xe4>)
 80011b0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_ADC_MspInit+0xe4>)
 80011b6:	f043 0320 	orr.w	r3, r3, #32
 80011ba:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <HAL_ADC_MspInit+0xe4>)
 80011c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_ADC_MspInit+0xe4>)
 80011ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_ADC_MspInit+0xe4>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_ADC_MspInit+0xe4>)
 80011de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ee:	2303      	movs	r3, #3
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	481d      	ldr	r0, [pc, #116]	; (8001274 <HAL_ADC_MspInit+0xe8>)
 80011fe:	f004 f887 	bl	8005310 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_ADC_MspInit+0xf0>)
 8001206:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_ADC_MspInit+0xec>)
 800120a:	2209      	movs	r2, #9
 800120c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_ADC_MspInit+0xec>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001228:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_ADC_MspInit+0xec>)
 800122c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001230:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001238:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_ADC_MspInit+0xec>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <HAL_ADC_MspInit+0xec>)
 8001248:	f001 fee6 	bl	8003018 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8001252:	f7ff fec3 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_ADC_MspInit+0xec>)
 800125a:	64da      	str	r2, [r3, #76]	; 0x4c
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_ADC_MspInit+0xec>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000
 8001270:	58024400 	.word	0x58024400
 8001274:	58020400 	.word	0x58020400
 8001278:	24000218 	.word	0x24000218
 800127c:	40020010 	.word	0x40020010

08001280 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a30      	ldr	r2, [pc, #192]	; (8001360 <HAL_DAC_MspInit+0xe0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d159      	bne.n	8001356 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_DAC_MspInit+0xe4>)
 80012a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012a8:	4a2e      	ldr	r2, [pc, #184]	; (8001364 <HAL_DAC_MspInit+0xe4>)
 80012aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_DAC_MspInit+0xe4>)
 80012b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_DAC_MspInit+0xe4>)
 80012c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012c6:	4a27      	ldr	r2, [pc, #156]	; (8001364 <HAL_DAC_MspInit+0xe4>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_DAC_MspInit+0xe4>)
 80012d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012de:	2310      	movs	r3, #16
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	481d      	ldr	r0, [pc, #116]	; (8001368 <HAL_DAC_MspInit+0xe8>)
 80012f2:	f004 f80d 	bl	8005310 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_DAC_MspInit+0xec>)
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_DAC_MspInit+0xf0>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_DAC_MspInit+0xec>)
 80012fe:	2243      	movs	r2, #67	; 0x43
 8001300:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_DAC_MspInit+0xec>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001314:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800131c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001324:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800133a:	480c      	ldr	r0, [pc, #48]	; (800136c <HAL_DAC_MspInit+0xec>)
 800133c:	f001 fe6c 	bl	8003018 <HAL_DMA_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001346:	f7ff fe49 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_DAC_MspInit+0xec>)
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_DAC_MspInit+0xec>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40007400 	.word	0x40007400
 8001364:	58024400 	.word	0x58024400
 8001368:	58020000 	.word	0x58020000
 800136c:	2400013c 	.word	0x2400013c
 8001370:	40020410 	.word	0x40020410

08001374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001394:	d12e      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	4b32      	ldr	r3, [pc, #200]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 8001398:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800139c:	4a30      	ldr	r2, [pc, #192]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 80013a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 80013b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 80013c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <HAL_TIM_Base_MspInit+0xf0>)
 80013ee:	f003 ff8f 	bl	8005310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013f2:	e030      	b.n	8001456 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM6)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_TIM_Base_MspInit+0xf4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10f      	bne.n	800141e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 8001400:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001404:	4a16      	ldr	r2, [pc, #88]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 8001410:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
}
 800141c:	e01b      	b.n	8001456 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM7)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_TIM_Base_MspInit+0xf8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d116      	bne.n	8001456 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 800142a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0xec>)
 800143a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2037      	movs	r0, #55	; 0x37
 800144c:	f001 faa5 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001450:	2037      	movs	r0, #55	; 0x37
 8001452:	f001 fabc 	bl	80029ce <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3730      	adds	r7, #48	; 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	58024400 	.word	0x58024400
 8001464:	58020000 	.word	0x58020000
 8001468:	40001000 	.word	0x40001000
 800146c:	40001400 	.word	0x40001400

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_UART_MspInit+0x88>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12e      	bne.n	80014f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_UART_MspInit+0x8c>)
 8001494:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_UART_MspInit+0x8c>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_UART_MspInit+0x8c>)
 80014a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_UART_MspInit+0x8c>)
 80014b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_UART_MspInit+0x8c>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_UART_MspInit+0x8c>)
 80014c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e0:	2307      	movs	r3, #7
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_UART_MspInit+0x90>)
 80014ec:	f003 ff10 	bl	8005310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004800 	.word	0x40004800
 80014fc:	58024400 	.word	0x58024400
 8001500:	58020c00 	.word	0x58020c00

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f9f6 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Stream0_IRQHandler+0x10>)
 8001566:	f002 fb51 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24000218 	.word	0x24000218

08001574 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM7_IRQHandler+0x10>)
 800157a:	f006 ff67 	bl	800844c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000328 	.word	0x24000328

08001588 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA2_Stream0_IRQHandler+0x10>)
 800158e:	f002 fb3d 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2400013c 	.word	0x2400013c

0800159c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a6:	f008 fd87 	bl	800a0b8 <__errno>
 80015aa:	4602      	mov	r2, r0
 80015ac:	2316      	movs	r3, #22
 80015ae:	6013      	str	r3, [r2, #0]
	return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_exit>:

void _exit (int status)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ce:	e7fe      	b.n	80015ce <_exit+0x12>

080015d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015e2:	f3af 8000 	nop.w
 80015e6:	4601      	mov	r1, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	b2ca      	uxtb	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_read+0x12>
	}

return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e009      	b.n	8001630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf1      	blt.n	800161c <_write+0x12>
	}
	return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_close>:

int _close(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	605a      	str	r2, [r3, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f008 fcec 	bl	800a0b8 <__errno>
 80016e0:	4602      	mov	r2, r0
 80016e2:	230c      	movs	r3, #12
 80016e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	24100000 	.word	0x24100000
 800170c:	00000400 	.word	0x00000400
 8001710:	24000090 	.word	0x24000090
 8001714:	24000380 	.word	0x24000380

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <SystemInit+0xd8>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <SystemInit+0xd8>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <SystemInit+0xdc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	2b02      	cmp	r3, #2
 8001736:	d807      	bhi.n	8001748 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <SystemInit+0xdc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 030f 	bic.w	r3, r3, #15
 8001740:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <SystemInit+0xdc>)
 8001742:	f043 0303 	orr.w	r3, r3, #3
 8001746:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <SystemInit+0xe0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <SystemInit+0xe0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <SystemInit+0xe0>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <SystemInit+0xe0>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4926      	ldr	r1, [pc, #152]	; (80017f8 <SystemInit+0xe0>)
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <SystemInit+0xe4>)
 8001762:	4013      	ands	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <SystemInit+0xdc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	2b03      	cmp	r3, #3
 8001770:	d907      	bls.n	8001782 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <SystemInit+0xdc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 030f 	bic.w	r3, r3, #15
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <SystemInit+0xdc>)
 800177c:	f043 0303 	orr.w	r3, r3, #3
 8001780:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <SystemInit+0xe0>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <SystemInit+0xe0>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <SystemInit+0xe0>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <SystemInit+0xe0>)
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <SystemInit+0xe8>)
 8001798:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <SystemInit+0xe0>)
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <SystemInit+0xec>)
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <SystemInit+0xe0>)
 80017a2:	4a19      	ldr	r2, [pc, #100]	; (8001808 <SystemInit+0xf0>)
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <SystemInit+0xe0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <SystemInit+0xe0>)
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <SystemInit+0xf0>)
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <SystemInit+0xe0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <SystemInit+0xe0>)
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <SystemInit+0xf0>)
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <SystemInit+0xe0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <SystemInit+0xe0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <SystemInit+0xe0>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <SystemInit+0xe0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <SystemInit+0xf4>)
 80017d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SystemInit+0xd8>)
 80017e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	52002000 	.word	0x52002000
 80017f8:	58024400 	.word	0x58024400
 80017fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001800:	02020200 	.word	0x02020200
 8001804:	01ff0000 	.word	0x01ff0000
 8001808:	01010280 	.word	0x01010280
 800180c:	52004000 	.word	0x52004000

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001814:	f7ff ff80 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800181a:	e003      	b.n	8001824 <LoopCopyDataInit>

0800181c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800181e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001822:	3104      	adds	r1, #4

08001824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800182a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800182c:	d3f6      	bcc.n	800181c <CopyDataInit>
  ldr  r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001830:	e002      	b.n	8001838 <LoopFillZerobss>

08001832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001834:	f842 3b04 	str.w	r3, [r2], #4

08001838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800183c:	d3f9      	bcc.n	8001832 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183e:	f008 fc55 	bl	800a0ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7fe ff25 	bl	8000690 <main>
  bx  lr
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 800184c:	0800ba04 	.word	0x0800ba04
  ldr  r0, =_sdata
 8001850:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001854:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8001858:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 800185c:	24000380 	.word	0x24000380

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186a:	2003      	movs	r0, #3
 800186c:	f001 f88a 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001870:	f004 fd2a 	bl	80062c8 <HAL_RCC_GetSysClockFreq>
 8001874:	4601      	mov	r1, r0
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_Init+0x68>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <HAL_Init+0x6c>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa21 f303 	lsr.w	r3, r1, r3
 800188c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_Init+0x68>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_Init+0x6c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_Init+0x70>)
 80018a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <HAL_Init+0x74>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f814 	bl	80018dc <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e002      	b.n	80018c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018be:	f7ff fc4b 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58024400 	.word	0x58024400
 80018d0:	0800b92c 	.word	0x0800b92c
 80018d4:	24000004 	.word	0x24000004
 80018d8:	24000000 	.word	0x24000000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e021      	b.n	8001934 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_InitTick+0x64>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_InitTick+0x60>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f86f 	bl	80029ea <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f001 f839 	bl	800299a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x68>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2400000c 	.word	0x2400000c
 8001940:	24000000 	.word	0x24000000
 8001944:	24000008 	.word	0x24000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2400000c 	.word	0x2400000c
 800196c:	24000378 	.word	0x24000378

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	24000378 	.word	0x24000378

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_Delay+0x40>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2400000c 	.word	0x2400000c

080019cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3360      	adds	r3, #96	; 0x60
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	611a      	str	r2, [r3, #16]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b087      	sub	sp, #28
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3360      	adds	r3, #96	; 0x60
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3330      	adds	r3, #48	; 0x30
 8001aec:	461a      	mov	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	4413      	add	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	211f      	movs	r1, #31
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	401a      	ands	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	f003 011f 	and.w	r1, r3, #31
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3314      	adds	r3, #20
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0e5b      	lsrs	r3, r3, #25
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	0d1b      	lsrs	r3, r3, #20
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2107      	movs	r1, #7
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	0d1b      	lsrs	r3, r3, #20
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b7e:	bf00      	nop
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0318 	and.w	r3, r3, #24
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb0:	40d9      	lsrs	r1, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	000fffff 	.word	0x000fffff

08001bd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6093      	str	r3, [r2, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	5fffffc0 	.word	0x5fffffc0

08001bf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	6fffffc0 	.word	0x6fffffc0

08001c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_IsEnabled+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_IsEnabled+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e137      	b.n	8001f6e <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fa3d 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff67 	bl	8001bf8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff4d 	bl	8001bd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff82 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d113      	bne.n	8001d72 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff66 	bl	8001c20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d54:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_ADC_Init+0x294>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	4a88      	ldr	r2, [pc, #544]	; (8001f7c <HAL_ADC_Init+0x298>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff66 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff77 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001da8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 80d2 	bne.w	8001f5c <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 80ce 	bne.w	8001f5c <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dc8:	f043 0202 	orr.w	r2, r3, #2
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff4b 	bl	8001c70 <LL_ADC_IsEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d110      	bne.n	8001e02 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de0:	4867      	ldr	r0, [pc, #412]	; (8001f80 <HAL_ADC_Init+0x29c>)
 8001de2:	f7ff ff45 	bl	8001c70 <LL_ADC_IsEnabled>
 8001de6:	4604      	mov	r4, r0
 8001de8:	4866      	ldr	r0, [pc, #408]	; (8001f84 <HAL_ADC_Init+0x2a0>)
 8001dea:	f7ff ff41 	bl	8001c70 <LL_ADC_IsEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4323      	orrs	r3, r4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4862      	ldr	r0, [pc, #392]	; (8001f88 <HAL_ADC_Init+0x2a4>)
 8001dfe:	f7ff fde5 	bl	80019cc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7d5b      	ldrb	r3, [r3, #21]
 8001e06:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001e12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7f1b      	ldrb	r3, [r3, #28]
 8001e18:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7f1b      	ldrb	r3, [r3, #28]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d106      	bne.n	8001e34 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	045b      	lsls	r3, r3, #17
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <HAL_ADC_Init+0x2a8>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff14 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001e6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff21 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 8001e7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d14a      	bne.n	8001f18 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d147      	bne.n	8001f18 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7d1b      	ldrb	r3, [r3, #20]
 8001e8c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <HAL_ADC_Init+0x2ac>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	69b9      	ldr	r1, [r7, #24]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d11b      	bne.n	8001eec <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_ADC_Init+0x2b0>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ec8:	3a01      	subs	r2, #1
 8001eca:	0411      	lsls	r1, r2, #16
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001edc:	430a      	orrs	r2, r1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e007      	b.n	8001efc <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 faee 	bl	80024f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f023 010f 	bic.w	r1, r3, #15
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	e007      	b.n	8001f4a <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 020f 	bic.w	r2, r2, #15
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
 8001f5a:	e007      	b.n	8001f6c <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	24000000 	.word	0x24000000
 8001f7c:	053e2d63 	.word	0x053e2d63
 8001f80:	40022000 	.word	0x40022000
 8001f84:	40022100 	.word	0x40022100
 8001f88:	40022300 	.word	0x40022300
 8001f8c:	fff0c003 	.word	0xfff0c003
 8001f90:	ffffbffc 	.word	0xffffbffc
 8001f94:	fc00f81e 	.word	0xfc00f81e

08001f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b099      	sub	sp, #100	; 0x64
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4aa1      	ldr	r2, [pc, #644]	; (8002238 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x2a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e283      	b.n	80024ca <HAL_ADC_ConfigChannel+0x532>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe61 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 8268 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x62>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	e00f      	b.n	800201a <HAL_ADC_ConfigChannel+0x82>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2201      	movs	r2, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	69d1      	ldr	r1, [r2, #28]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	f7ff fd51 	bl	8001adc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fe29 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8002044:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe36 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 8002050:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80a0 	bne.w	800219a <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 809c 	bne.w	800219a <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	461a      	mov	r2, r3
 8002070:	f7ff fd60 	bl	8001b34 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <HAL_ADC_ConfigChannel+0x102>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	e00a      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x118>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d027      	beq.n	800210a <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c8:	f7ff fcb4 	bl	8001a34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7e5b      	ldrb	r3, [r3, #25]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x14a>
 80020dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020e0:	e000      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x14c>
 80020e2:	2300      	movs	r3, #0
 80020e4:	461a      	mov	r2, r3
 80020e6:	f7ff fcde 	bl	8001aa6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	7e1b      	ldrb	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x168>
 80020fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020fe:	e000      	b.n	8002102 <HAL_ADC_ConfigChannel+0x16a>
 8002100:	2300      	movs	r3, #0
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff fcb6 	bl	8001a74 <LL_ADC_SetDataRightShift>
 8002108:	e047      	b.n	800219a <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	069b      	lsls	r3, r3, #26
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800212c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	069b      	lsls	r3, r3, #26
 800213e:	429a      	cmp	r2, r3
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002150:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002158:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	429a      	cmp	r2, r3
 8002164:	d107      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002174:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	069b      	lsls	r3, r3, #26
 8002186:	429a      	cmp	r2, r3
 8002188:	d107      	bne.n	800219a <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002198:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd66 	bl	8001c70 <LL_ADC_IsEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8189 	bne.w	80024be <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f7ff fce7 	bl	8001b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_ADC_ConfigChannel+0x2a0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	f040 80ff 	bne.w	80023c8 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10b      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x25a>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b09      	cmp	r3, #9
 80021e8:	bf94      	ite	ls
 80021ea:	2301      	movls	r3, #1
 80021ec:	2300      	movhi	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e012      	b.n	8002218 <HAL_ADC_ConfigChannel+0x280>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b09      	cmp	r3, #9
 8002210:	bf94      	ite	ls
 8002212:	2301      	movls	r3, #1
 8002214:	2300      	movhi	r3, #0
 8002216:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002218:	2b00      	cmp	r3, #0
 800221a:	d066      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x2a4>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	069b      	lsls	r3, r3, #26
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002236:	e010      	b.n	800225a <HAL_ADC_ConfigChannel+0x2c2>
 8002238:	47ff0000 	.word	0x47ff0000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	069b      	lsls	r3, r3, #26
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_ADC_ConfigChannel+0x2e2>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0e9b      	lsrs	r3, r3, #26
 800226c:	3301      	adds	r3, #1
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	e010      	b.n	800229c <HAL_ADC_ConfigChannel+0x304>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	ea42 0103 	orr.w	r1, r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x32a>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	051b      	lsls	r3, r3, #20
 80022c0:	e011      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x34e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e6:	430b      	orrs	r3, r1
 80022e8:	e069      	b.n	80023be <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x36e>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0e9b      	lsrs	r3, r3, #26
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002304:	e00e      	b.n	8002324 <HAL_ADC_ConfigChannel+0x38c>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	61fb      	str	r3, [r7, #28]
  return result;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	069b      	lsls	r3, r3, #26
 8002320:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x3ac>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	e010      	b.n	8002366 <HAL_ADC_ConfigChannel+0x3ce>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	617b      	str	r3, [r7, #20]
  return result;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	ea42 0103 	orr.w	r1, r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x3fa>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	3301      	adds	r3, #1
 800237e:	f003 021f 	and.w	r2, r3, #31
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	3b1e      	subs	r3, #30
 800238a:	051b      	lsls	r3, r3, #20
 800238c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002390:	e014      	b.n	80023bc <HAL_ADC_ConfigChannel+0x424>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	60fb      	str	r3, [r7, #12]
  return result;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	051b      	lsls	r3, r3, #20
 80023b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023bc:	430b      	orrs	r3, r1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff fbb6 	bl	8001b34 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	da76      	bge.n	80024be <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d0:	4840      	ldr	r0, [pc, #256]	; (80024d4 <HAL_ADC_ConfigChannel+0x53c>)
 80023d2:	f7ff fb21 	bl	8001a18 <LL_ADC_GetCommonPathInternalCh>
 80023d6:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d8:	483f      	ldr	r0, [pc, #252]	; (80024d8 <HAL_ADC_ConfigChannel+0x540>)
 80023da:	f7ff fc49 	bl	8001c70 <LL_ADC_IsEnabled>
 80023de:	4604      	mov	r4, r0
 80023e0:	483e      	ldr	r0, [pc, #248]	; (80024dc <HAL_ADC_ConfigChannel+0x544>)
 80023e2:	f7ff fc45 	bl	8001c70 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4323      	orrs	r3, r4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d154      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <HAL_ADC_ConfigChannel+0x548>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d121      	bne.n	800243c <HAL_ADC_ConfigChannel+0x4a4>
 80023f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11c      	bne.n	800243c <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_ADC_ConfigChannel+0x544>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d158      	bne.n	80024be <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800240c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002412:	4619      	mov	r1, r3
 8002414:	482f      	ldr	r0, [pc, #188]	; (80024d4 <HAL_ADC_ConfigChannel+0x53c>)
 8002416:	f7ff faec 	bl	80019f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800241a:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <HAL_ADC_ConfigChannel+0x54c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_ADC_ConfigChannel+0x550>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800242c:	e002      	b.n	8002434 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243a:	e040      	b.n	80024be <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <HAL_ADC_ConfigChannel+0x554>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_ADC_ConfigChannel+0x4d2>
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_ADC_ConfigChannel+0x544>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d131      	bne.n	80024be <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002460:	4619      	mov	r1, r3
 8002462:	481c      	ldr	r0, [pc, #112]	; (80024d4 <HAL_ADC_ConfigChannel+0x53c>)
 8002464:	f7ff fac5 	bl	80019f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002468:	e029      	b.n	80024be <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <HAL_ADC_ConfigChannel+0x558>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d124      	bne.n	80024be <HAL_ADC_ConfigChannel+0x526>
 8002474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11f      	bne.n	80024be <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_ADC_ConfigChannel+0x544>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d11a      	bne.n	80024be <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800248e:	4619      	mov	r1, r3
 8002490:	4810      	ldr	r0, [pc, #64]	; (80024d4 <HAL_ADC_ConfigChannel+0x53c>)
 8002492:	f7ff faae 	bl	80019f2 <LL_ADC_SetCommonPathInternalCh>
 8002496:	e012      	b.n	80024be <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024aa:	e008      	b.n	80024be <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3764      	adds	r7, #100	; 0x64
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022300 	.word	0x40022300
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40022100 	.word	0x40022100
 80024e0:	cb840000 	.word	0xcb840000
 80024e4:	24000000 	.word	0x24000000
 80024e8:	053e2d63 	.word	0x053e2d63
 80024ec:	bac04000 	.word	0xbac04000
 80024f0:	cfb80000 	.word	0xcfb80000

080024f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024fc:	4b56      	ldr	r3, [pc, #344]	; (8002658 <ADC_ConfigureBoostMode+0x164>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01a      	beq.n	800253e <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002508:	f004 f850 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 800250c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002516:	d006      	beq.n	8002526 <ADC_ConfigureBoostMode+0x32>
 8002518:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800251c:	d00b      	beq.n	8002536 <ADC_ConfigureBoostMode+0x42>
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d000      	beq.n	8002526 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002524:	e05d      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	60fb      	str	r3, [r7, #12]
        break;
 8002534:	e055      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
        break;
 800253c:	e051      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800253e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002542:	f004 ff43 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002546:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002550:	d02a      	beq.n	80025a8 <ADC_ConfigureBoostMode+0xb4>
 8002552:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002556:	d813      	bhi.n	8002580 <ADC_ConfigureBoostMode+0x8c>
 8002558:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800255c:	d024      	beq.n	80025a8 <ADC_ConfigureBoostMode+0xb4>
 800255e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002562:	d806      	bhi.n	8002572 <ADC_ConfigureBoostMode+0x7e>
 8002564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002568:	d01e      	beq.n	80025a8 <ADC_ConfigureBoostMode+0xb4>
 800256a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800256e:	d01b      	beq.n	80025a8 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002570:	e037      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002576:	d017      	beq.n	80025a8 <ADC_ConfigureBoostMode+0xb4>
 8002578:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800257c:	d014      	beq.n	80025a8 <ADC_ConfigureBoostMode+0xb4>
        break;
 800257e:	e030      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002580:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002584:	d021      	beq.n	80025ca <ADC_ConfigureBoostMode+0xd6>
 8002586:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800258a:	d806      	bhi.n	800259a <ADC_ConfigureBoostMode+0xa6>
 800258c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002590:	d013      	beq.n	80025ba <ADC_ConfigureBoostMode+0xc6>
 8002592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002596:	d014      	beq.n	80025c2 <ADC_ConfigureBoostMode+0xce>
        break;
 8002598:	e023      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800259a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800259e:	d018      	beq.n	80025d2 <ADC_ConfigureBoostMode+0xde>
 80025a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025a4:	d019      	beq.n	80025da <ADC_ConfigureBoostMode+0xe6>
        break;
 80025a6:	e01c      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0c9b      	lsrs	r3, r3, #18
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]
        break;
 80025b8:	e013      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
        break;
 80025c0:	e00f      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	60fb      	str	r3, [r7, #12]
        break;
 80025c8:	e00b      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	60fb      	str	r3, [r7, #12]
        break;
 80025d0:	e007      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	09db      	lsrs	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]
        break;
 80025d8:	e003      	b.n	80025e2 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	60fb      	str	r3, [r7, #12]
        break;
 80025e0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <ADC_ConfigureBoostMode+0x168>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d808      	bhi.n	8002602 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002600:	e025      	b.n	800264e <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a16      	ldr	r2, [pc, #88]	; (8002660 <ADC_ConfigureBoostMode+0x16c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d80a      	bhi.n	8002620 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261c:	609a      	str	r2, [r3, #8]
}
 800261e:	e016      	b.n	800264e <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <ADC_ConfigureBoostMode+0x170>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d80a      	bhi.n	800263e <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	e007      	b.n	800264e <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40022300 	.word	0x40022300
 800265c:	005f5e10 	.word	0x005f5e10
 8002660:	00bebc20 	.word	0x00bebc20
 8002664:	017d7840 	.word	0x017d7840

08002668 <LL_ADC_IsEnabled>:
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <LL_ADC_IsEnabled+0x18>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <LL_ADC_IsEnabled+0x1a>
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_REG_IsConversionOngoing>:
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d101      	bne.n	80026a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b09f      	sub	sp, #124	; 0x7c
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e07c      	b.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3d      	ldr	r2, [pc, #244]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80026e4:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	e001      	b.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e05f      	b.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffbd 	bl	800268e <LL_ADC_REG_IsConversionOngoing>
 8002714:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ffb7 	bl	800268e <LL_ADC_REG_IsConversionOngoing>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d141      	bne.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002728:	2b00      	cmp	r3, #0
 800272a:	d13e      	bne.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800272e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	431a      	orrs	r2, r3
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274a:	4822      	ldr	r0, [pc, #136]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 800274c:	f7ff ff8c 	bl	8002668 <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	4821      	ldr	r0, [pc, #132]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002754:	f7ff ff88 	bl	8002668 <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	4323      	orrs	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d12e      	bne.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002766:	4013      	ands	r3, r2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	430a      	orrs	r2, r1
 8002772:	431a      	orrs	r2, r3
 8002774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002776:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002778:	e021      	b.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002788:	f7ff ff6e 	bl	8002668 <LL_ADC_IsEnabled>
 800278c:	4604      	mov	r4, r0
 800278e:	4812      	ldr	r0, [pc, #72]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002790:	f7ff ff6a 	bl	8002668 <LL_ADC_IsEnabled>
 8002794:	4603      	mov	r3, r0
 8002796:	4323      	orrs	r3, r4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d110      	bne.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800279c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a8:	e009      	b.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027bc:	e000      	b.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	377c      	adds	r7, #124	; 0x7c
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40022100 	.word	0x40022100
 80027dc:	40022300 	.word	0x40022300
 80027e0:	fffff0e0 	.word	0xfffff0e0

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <__NVIC_SetPriorityGrouping+0x40>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x40>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00
 8002828:	05fa0000 	.word	0x05fa0000

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	; (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	; (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7ff ff8e 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff29 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff40 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff90 	bl	80028d8 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5f 	bl	8002884 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff33 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa4 	bl	8002940 <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e014      	b.n	8002a3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	791b      	ldrb	r3, [r3, #4]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fe fc2b 	bl	8001280 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	795b      	ldrb	r3, [r3, #5]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_DAC_Start+0x16>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e040      	b.n	8002ade <HAL_DAC_Start+0x98>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11d      	bne.n	8002ad0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	e014      	b.n	8002ad0 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0202 	orr.w	r2, r2, #2
 8002ace:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	795b      	ldrb	r3, [r3, #5]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_DAC_Start_DMA+0x1e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e09e      	b.n	8002c48 <HAL_DAC_Start_DMA+0x15c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2202      	movs	r2, #2
 8002b14:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12a      	bne.n	8002b72 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a4b      	ldr	r2, [pc, #300]	; (8002c50 <HAL_DAC_Start_DMA+0x164>)
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a4a      	ldr	r2, [pc, #296]	; (8002c54 <HAL_DAC_Start_DMA+0x168>)
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <HAL_DAC_Start_DMA+0x16c>)
 8002b32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b42:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d009      	beq.n	8002b5e <HAL_DAC_Start_DMA+0x72>
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d00c      	beq.n	8002b68 <HAL_DAC_Start_DMA+0x7c>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d000      	beq.n	8002b54 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002b52:	e039      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3308      	adds	r3, #8
 8002b5a:	613b      	str	r3, [r7, #16]
        break;
 8002b5c:	e034      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	613b      	str	r3, [r7, #16]
        break;
 8002b66:	e02f      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	613b      	str	r3, [r7, #16]
        break;
 8002b70:	e02a      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a39      	ldr	r2, [pc, #228]	; (8002c5c <HAL_DAC_Start_DMA+0x170>)
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_DAC_Start_DMA+0x174>)
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4a37      	ldr	r2, [pc, #220]	; (8002c64 <HAL_DAC_Start_DMA+0x178>)
 8002b88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d009      	beq.n	8002bb4 <HAL_DAC_Start_DMA+0xc8>
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d00c      	beq.n	8002bbe <HAL_DAC_Start_DMA+0xd2>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d000      	beq.n	8002baa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ba8:	e00e      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	613b      	str	r3, [r7, #16]
        break;
 8002bb2:	e009      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3318      	adds	r3, #24
 8002bba:	613b      	str	r3, [r7, #16]
        break;
 8002bbc:	e004      	b.n	8002bc8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	331c      	adds	r3, #28
 8002bc4:	613b      	str	r3, [r7, #16]
        break;
 8002bc6:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d111      	bne.n	8002bf2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6898      	ldr	r0, [r3, #8]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	f000 fda6 	bl	8003738 <HAL_DMA_Start_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
 8002bf0:	e010      	b.n	8002c14 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68d8      	ldr	r0, [r3, #12]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	f000 fd94 	bl	8003738 <HAL_DMA_Start_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10c      	bne.n	8002c3a <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e005      	b.n	8002c46 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f043 0204 	orr.w	r2, r3, #4
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	08002f05 	.word	0x08002f05
 8002c54:	08002f27 	.word	0x08002f27
 8002c58:	08002f43 	.word	0x08002f43
 8002c5c:	08002fad 	.word	0x08002fad
 8002c60:	08002fcf 	.word	0x08002fcf
 8002c64:	08002feb 	.word	0x08002feb

08002c68 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	795b      	ldrb	r3, [r3, #5]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_DAC_ConfigChannel+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e11d      	b.n	8002ef8 <HAL_DAC_ConfigChannel+0x254>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d174      	bne.n	8002dba <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fe4e 	bl	8001970 <HAL_GetTick>
 8002cd4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d134      	bne.n	8002d46 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cdc:	e011      	b.n	8002d02 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cde:	f7fe fe47 	bl	8001970 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d90a      	bls.n	8002d02 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f043 0208 	orr.w	r2, r3, #8
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0fa      	b.n	8002ef8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d08:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_DAC_ConfigChannel+0x25c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e6      	bne.n	8002cde <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fe fe39 	bl	8001988 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	6992      	ldr	r2, [r2, #24]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d20:	e01e      	b.n	8002d60 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d22:	f7fe fe25 	bl	8001970 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d90a      	bls.n	8002d46 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f043 0208 	orr.w	r2, r3, #8
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0d8      	b.n	8002ef8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	dbe8      	blt.n	8002d22 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7fe fe19 	bl	8001988 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	6992      	ldr	r2, [r2, #24]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	ea02 0103 	and.w	r1, r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	21ff      	movs	r1, #255	; 0xff
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	ea02 0103 	and.w	r1, r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d11d      	bne.n	8002dfe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	221f      	movs	r2, #31
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4013      	ands	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e00f      	b.n	8002e48 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d102      	bne.n	8002e36 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	e008      	b.n	8002e48 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e001      	b.n	8002e48 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	22c0      	movs	r2, #192	; 0xc0
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20008000 	.word	0x20008000

08002f04 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff fea8 	bl	8002c68 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	711a      	strb	r2, [r3, #4]
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fea1 	bl	8002c7c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fe97 	bl	8002c90 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	711a      	strb	r2, [r3, #4]
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ffd8 	bl	8002f70 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	711a      	strb	r2, [r3, #4]
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f7ff ffd1 	bl	8002f84 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff ffc7 	bl	8002f98 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	711a      	strb	r2, [r3, #4]
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7fe fca6 	bl	8001970 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e37f      	b.n	8003730 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a66      	ldr	r2, [pc, #408]	; (80031d0 <HAL_DMA_Init+0x1b8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04a      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_DMA_Init+0x1bc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d045      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_DMA_Init+0x1c0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d040      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a62      	ldr	r2, [pc, #392]	; (80031dc <HAL_DMA_Init+0x1c4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d03b      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a60      	ldr	r2, [pc, #384]	; (80031e0 <HAL_DMA_Init+0x1c8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d036      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5f      	ldr	r2, [pc, #380]	; (80031e4 <HAL_DMA_Init+0x1cc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d031      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a5d      	ldr	r2, [pc, #372]	; (80031e8 <HAL_DMA_Init+0x1d0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02c      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a5c      	ldr	r2, [pc, #368]	; (80031ec <HAL_DMA_Init+0x1d4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d027      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a5a      	ldr	r2, [pc, #360]	; (80031f0 <HAL_DMA_Init+0x1d8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a59      	ldr	r2, [pc, #356]	; (80031f4 <HAL_DMA_Init+0x1dc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01d      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_DMA_Init+0x1e0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a56      	ldr	r2, [pc, #344]	; (80031fc <HAL_DMA_Init+0x1e4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a54      	ldr	r2, [pc, #336]	; (8003200 <HAL_DMA_Init+0x1e8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_DMA_Init+0x1ec>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_DMA_Init+0x1f0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_DMA_Init+0xb8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_DMA_Init+0x1f4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Init+0xbc>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_Init+0xbe>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 813c 	beq.w	8003354 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a37      	ldr	r2, [pc, #220]	; (80031d0 <HAL_DMA_Init+0x1b8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d04a      	beq.n	800318c <HAL_DMA_Init+0x174>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a36      	ldr	r2, [pc, #216]	; (80031d4 <HAL_DMA_Init+0x1bc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d045      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <HAL_DMA_Init+0x1c0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d040      	beq.n	800318c <HAL_DMA_Init+0x174>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a33      	ldr	r2, [pc, #204]	; (80031dc <HAL_DMA_Init+0x1c4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d03b      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a31      	ldr	r2, [pc, #196]	; (80031e0 <HAL_DMA_Init+0x1c8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d036      	beq.n	800318c <HAL_DMA_Init+0x174>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a30      	ldr	r2, [pc, #192]	; (80031e4 <HAL_DMA_Init+0x1cc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d031      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2e      	ldr	r2, [pc, #184]	; (80031e8 <HAL_DMA_Init+0x1d0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02c      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2d      	ldr	r2, [pc, #180]	; (80031ec <HAL_DMA_Init+0x1d4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d027      	beq.n	800318c <HAL_DMA_Init+0x174>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_DMA_Init+0x1d8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d022      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <HAL_DMA_Init+0x1dc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d01d      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <HAL_DMA_Init+0x1e0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d018      	beq.n	800318c <HAL_DMA_Init+0x174>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a27      	ldr	r2, [pc, #156]	; (80031fc <HAL_DMA_Init+0x1e4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a25      	ldr	r2, [pc, #148]	; (8003200 <HAL_DMA_Init+0x1e8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00e      	beq.n	800318c <HAL_DMA_Init+0x174>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a24      	ldr	r2, [pc, #144]	; (8003204 <HAL_DMA_Init+0x1ec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a22      	ldr	r2, [pc, #136]	; (8003208 <HAL_DMA_Init+0x1f0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_DMA_Init+0x174>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a21      	ldr	r2, [pc, #132]	; (800320c <HAL_DMA_Init+0x1f4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d108      	bne.n	800319e <HAL_DMA_Init+0x186>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e007      	b.n	80031ae <HAL_DMA_Init+0x196>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031ae:	e02f      	b.n	8003210 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b0:	f7fe fbde 	bl	8001970 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d928      	bls.n	8003210 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e2af      	b.n	8003730 <HAL_DMA_Init+0x718>
 80031d0:	40020010 	.word	0x40020010
 80031d4:	40020028 	.word	0x40020028
 80031d8:	40020040 	.word	0x40020040
 80031dc:	40020058 	.word	0x40020058
 80031e0:	40020070 	.word	0x40020070
 80031e4:	40020088 	.word	0x40020088
 80031e8:	400200a0 	.word	0x400200a0
 80031ec:	400200b8 	.word	0x400200b8
 80031f0:	40020410 	.word	0x40020410
 80031f4:	40020428 	.word	0x40020428
 80031f8:	40020440 	.word	0x40020440
 80031fc:	40020458 	.word	0x40020458
 8003200:	40020470 	.word	0x40020470
 8003204:	40020488 	.word	0x40020488
 8003208:	400204a0 	.word	0x400204a0
 800320c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1c8      	bne.n	80031b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_DMA_Init+0x3e0>)
 800322a:	4013      	ands	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003236:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b28      	cmp	r3, #40	; 0x28
 800327a:	d903      	bls.n	8003284 <HAL_DMA_Init+0x26c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b2e      	cmp	r3, #46	; 0x2e
 8003282:	d91f      	bls.n	80032c4 <HAL_DMA_Init+0x2ac>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b3e      	cmp	r3, #62	; 0x3e
 800328a:	d903      	bls.n	8003294 <HAL_DMA_Init+0x27c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b42      	cmp	r3, #66	; 0x42
 8003292:	d917      	bls.n	80032c4 <HAL_DMA_Init+0x2ac>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b46      	cmp	r3, #70	; 0x46
 800329a:	d903      	bls.n	80032a4 <HAL_DMA_Init+0x28c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b48      	cmp	r3, #72	; 0x48
 80032a2:	d90f      	bls.n	80032c4 <HAL_DMA_Init+0x2ac>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b4e      	cmp	r3, #78	; 0x4e
 80032aa:	d903      	bls.n	80032b4 <HAL_DMA_Init+0x29c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b52      	cmp	r3, #82	; 0x52
 80032b2:	d907      	bls.n	80032c4 <HAL_DMA_Init+0x2ac>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b73      	cmp	r3, #115	; 0x73
 80032ba:	d905      	bls.n	80032c8 <HAL_DMA_Init+0x2b0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b77      	cmp	r3, #119	; 0x77
 80032c2:	d801      	bhi.n	80032c8 <HAL_DMA_Init+0x2b0>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <HAL_DMA_Init+0x2b2>
 80032c8:	2300      	movs	r3, #0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 0307 	bic.w	r3, r3, #7
 80032ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d117      	bne.n	8003330 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f001 fe72 	bl	8004ffc <DMA_CheckFifoParam>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e1ff      	b.n	8003730 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f001 fdad 	bl	8004e98 <DMA_CalcBaseAndBitshift>
 800333e:	4603      	mov	r3, r0
 8003340:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	223f      	movs	r2, #63	; 0x3f
 800334c:	409a      	lsls	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	e0fe      	b.n	8003552 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a28      	ldr	r2, [pc, #160]	; (80033fc <HAL_DMA_Init+0x3e4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d04a      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_DMA_Init+0x3e8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d045      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a25      	ldr	r2, [pc, #148]	; (8003404 <HAL_DMA_Init+0x3ec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d040      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a24      	ldr	r2, [pc, #144]	; (8003408 <HAL_DMA_Init+0x3f0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d03b      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_DMA_Init+0x3f4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d036      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a21      	ldr	r2, [pc, #132]	; (8003410 <HAL_DMA_Init+0x3f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d031      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <HAL_DMA_Init+0x3fc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02c      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_DMA_Init+0x400>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d027      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_DMA_Init+0x404>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d022      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_DMA_Init+0x408>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01d      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_DMA_Init+0x40c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a18      	ldr	r2, [pc, #96]	; (8003428 <HAL_DMA_Init+0x410>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a16      	ldr	r2, [pc, #88]	; (800342c <HAL_DMA_Init+0x414>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_DMA_Init+0x418>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a13      	ldr	r2, [pc, #76]	; (8003434 <HAL_DMA_Init+0x41c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_Init+0x3dc>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a12      	ldr	r2, [pc, #72]	; (8003438 <HAL_DMA_Init+0x420>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d123      	bne.n	800343c <HAL_DMA_Init+0x424>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e022      	b.n	800343e <HAL_DMA_Init+0x426>
 80033f8:	fe10803f 	.word	0xfe10803f
 80033fc:	48022c08 	.word	0x48022c08
 8003400:	48022c1c 	.word	0x48022c1c
 8003404:	48022c30 	.word	0x48022c30
 8003408:	48022c44 	.word	0x48022c44
 800340c:	48022c58 	.word	0x48022c58
 8003410:	48022c6c 	.word	0x48022c6c
 8003414:	48022c80 	.word	0x48022c80
 8003418:	48022c94 	.word	0x48022c94
 800341c:	58025408 	.word	0x58025408
 8003420:	5802541c 	.word	0x5802541c
 8003424:	58025430 	.word	0x58025430
 8003428:	58025444 	.word	0x58025444
 800342c:	58025458 	.word	0x58025458
 8003430:	5802546c 	.word	0x5802546c
 8003434:	58025480 	.word	0x58025480
 8003438:	58025494 	.word	0x58025494
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07e      	beq.n	8003540 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a80      	ldr	r2, [pc, #512]	; (8003648 <HAL_DMA_Init+0x630>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d021      	beq.n	8003490 <HAL_DMA_Init+0x478>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a7e      	ldr	r2, [pc, #504]	; (800364c <HAL_DMA_Init+0x634>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01c      	beq.n	8003490 <HAL_DMA_Init+0x478>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7d      	ldr	r2, [pc, #500]	; (8003650 <HAL_DMA_Init+0x638>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d017      	beq.n	8003490 <HAL_DMA_Init+0x478>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a7b      	ldr	r2, [pc, #492]	; (8003654 <HAL_DMA_Init+0x63c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d012      	beq.n	8003490 <HAL_DMA_Init+0x478>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7a      	ldr	r2, [pc, #488]	; (8003658 <HAL_DMA_Init+0x640>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00d      	beq.n	8003490 <HAL_DMA_Init+0x478>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a78      	ldr	r2, [pc, #480]	; (800365c <HAL_DMA_Init+0x644>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d008      	beq.n	8003490 <HAL_DMA_Init+0x478>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a77      	ldr	r2, [pc, #476]	; (8003660 <HAL_DMA_Init+0x648>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <HAL_DMA_Init+0x478>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a75      	ldr	r2, [pc, #468]	; (8003664 <HAL_DMA_Init+0x64c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4b6e      	ldr	r3, [pc, #440]	; (8003668 <HAL_DMA_Init+0x650>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d008      	beq.n	80034cc <HAL_DMA_Init+0x4b4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d102      	bne.n	80034c8 <HAL_DMA_Init+0x4b0>
 80034c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c6:	e002      	b.n	80034ce <HAL_DMA_Init+0x4b6>
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_DMA_Init+0x4b6>
 80034cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <HAL_DMA_Init+0x654>)
 8003514:	4413      	add	r3, r2
 8003516:	4a56      	ldr	r2, [pc, #344]	; (8003670 <HAL_DMA_Init+0x658>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 fcb7 	bl	8004e98 <DMA_CalcBaseAndBitshift>
 800352a:	4603      	mov	r3, r0
 800352c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2201      	movs	r2, #1
 8003538:	409a      	lsls	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	e008      	b.n	8003552 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0ee      	b.n	8003730 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a47      	ldr	r2, [pc, #284]	; (8003674 <HAL_DMA_Init+0x65c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d072      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a45      	ldr	r2, [pc, #276]	; (8003678 <HAL_DMA_Init+0x660>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d06d      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a44      	ldr	r2, [pc, #272]	; (800367c <HAL_DMA_Init+0x664>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d068      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a42      	ldr	r2, [pc, #264]	; (8003680 <HAL_DMA_Init+0x668>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d063      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_DMA_Init+0x66c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d05e      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <HAL_DMA_Init+0x670>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d059      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3e      	ldr	r2, [pc, #248]	; (800368c <HAL_DMA_Init+0x674>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d054      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <HAL_DMA_Init+0x678>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d04f      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <HAL_DMA_Init+0x67c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d04a      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a39      	ldr	r2, [pc, #228]	; (8003698 <HAL_DMA_Init+0x680>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d045      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_DMA_Init+0x684>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d040      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a36      	ldr	r2, [pc, #216]	; (80036a0 <HAL_DMA_Init+0x688>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d03b      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a35      	ldr	r2, [pc, #212]	; (80036a4 <HAL_DMA_Init+0x68c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d036      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <HAL_DMA_Init+0x690>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d031      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a32      	ldr	r2, [pc, #200]	; (80036ac <HAL_DMA_Init+0x694>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <HAL_DMA_Init+0x698>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_DMA_Init+0x630>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_DMA_Init+0x634>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01d      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a11      	ldr	r2, [pc, #68]	; (8003650 <HAL_DMA_Init+0x638>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <HAL_DMA_Init+0x63c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <HAL_DMA_Init+0x640>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0c      	ldr	r2, [pc, #48]	; (800365c <HAL_DMA_Init+0x644>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_DMA_Init+0x648>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_Init+0x62a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_DMA_Init+0x64c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d138      	bne.n	80036b4 <HAL_DMA_Init+0x69c>
 8003642:	2301      	movs	r3, #1
 8003644:	e037      	b.n	80036b6 <HAL_DMA_Init+0x69e>
 8003646:	bf00      	nop
 8003648:	58025408 	.word	0x58025408
 800364c:	5802541c 	.word	0x5802541c
 8003650:	58025430 	.word	0x58025430
 8003654:	58025444 	.word	0x58025444
 8003658:	58025458 	.word	0x58025458
 800365c:	5802546c 	.word	0x5802546c
 8003660:	58025480 	.word	0x58025480
 8003664:	58025494 	.word	0x58025494
 8003668:	fffe000f 	.word	0xfffe000f
 800366c:	a7fdabf8 	.word	0xa7fdabf8
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d032      	beq.n	8003720 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 fd1a 	bl	80050f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d102      	bne.n	80036ce <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036e2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <HAL_DMA_Init+0x6f6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d80c      	bhi.n	800370e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 fd97 	bl	8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e008      	b.n	8003720 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e226      	b.n	8003ba2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Start_IT+0x2a>
 800375e:	2302      	movs	r3, #2
 8003760:	e21f      	b.n	8003ba2 <HAL_DMA_Start_IT+0x46a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	f040 820a 	bne.w	8003b8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a68      	ldr	r2, [pc, #416]	; (800392c <HAL_DMA_Start_IT+0x1f4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04a      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_DMA_Start_IT+0x1f8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d045      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a65      	ldr	r2, [pc, #404]	; (8003934 <HAL_DMA_Start_IT+0x1fc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d040      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a63      	ldr	r2, [pc, #396]	; (8003938 <HAL_DMA_Start_IT+0x200>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d03b      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a62      	ldr	r2, [pc, #392]	; (800393c <HAL_DMA_Start_IT+0x204>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d036      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a60      	ldr	r2, [pc, #384]	; (8003940 <HAL_DMA_Start_IT+0x208>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5f      	ldr	r2, [pc, #380]	; (8003944 <HAL_DMA_Start_IT+0x20c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d02c      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_DMA_Start_IT+0x210>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d027      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5c      	ldr	r2, [pc, #368]	; (800394c <HAL_DMA_Start_IT+0x214>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5a      	ldr	r2, [pc, #360]	; (8003950 <HAL_DMA_Start_IT+0x218>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a59      	ldr	r2, [pc, #356]	; (8003954 <HAL_DMA_Start_IT+0x21c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a57      	ldr	r2, [pc, #348]	; (8003958 <HAL_DMA_Start_IT+0x220>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a56      	ldr	r2, [pc, #344]	; (800395c <HAL_DMA_Start_IT+0x224>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_DMA_Start_IT+0x228>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a53      	ldr	r2, [pc, #332]	; (8003964 <HAL_DMA_Start_IT+0x22c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_Start_IT+0xee>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_DMA_Start_IT+0x230>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d108      	bne.n	8003838 <HAL_DMA_Start_IT+0x100>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e007      	b.n	8003848 <HAL_DMA_Start_IT+0x110>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f001 f93e 	bl	8004ad0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a34      	ldr	r2, [pc, #208]	; (800392c <HAL_DMA_Start_IT+0x1f4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d04a      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a33      	ldr	r2, [pc, #204]	; (8003930 <HAL_DMA_Start_IT+0x1f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a31      	ldr	r2, [pc, #196]	; (8003934 <HAL_DMA_Start_IT+0x1fc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d040      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a30      	ldr	r2, [pc, #192]	; (8003938 <HAL_DMA_Start_IT+0x200>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2e      	ldr	r2, [pc, #184]	; (800393c <HAL_DMA_Start_IT+0x204>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2d      	ldr	r2, [pc, #180]	; (8003940 <HAL_DMA_Start_IT+0x208>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <HAL_DMA_Start_IT+0x20c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <HAL_DMA_Start_IT+0x210>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a28      	ldr	r2, [pc, #160]	; (800394c <HAL_DMA_Start_IT+0x214>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a27      	ldr	r2, [pc, #156]	; (8003950 <HAL_DMA_Start_IT+0x218>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a25      	ldr	r2, [pc, #148]	; (8003954 <HAL_DMA_Start_IT+0x21c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a24      	ldr	r2, [pc, #144]	; (8003958 <HAL_DMA_Start_IT+0x220>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a22      	ldr	r2, [pc, #136]	; (800395c <HAL_DMA_Start_IT+0x224>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a21      	ldr	r2, [pc, #132]	; (8003960 <HAL_DMA_Start_IT+0x228>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <HAL_DMA_Start_IT+0x22c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_Start_IT+0x1bc>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <HAL_DMA_Start_IT+0x230>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_DMA_Start_IT+0x1c0>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_DMA_Start_IT+0x1c2>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d036      	beq.n	800396c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 021e 	bic.w	r2, r3, #30
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0216 	orr.w	r2, r2, #22
 8003910:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03e      	beq.n	8003998 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0208 	orr.w	r2, r2, #8
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e035      	b.n	8003998 <HAL_DMA_Start_IT+0x260>
 800392c:	40020010 	.word	0x40020010
 8003930:	40020028 	.word	0x40020028
 8003934:	40020040 	.word	0x40020040
 8003938:	40020058 	.word	0x40020058
 800393c:	40020070 	.word	0x40020070
 8003940:	40020088 	.word	0x40020088
 8003944:	400200a0 	.word	0x400200a0
 8003948:	400200b8 	.word	0x400200b8
 800394c:	40020410 	.word	0x40020410
 8003950:	40020428 	.word	0x40020428
 8003954:	40020440 	.word	0x40020440
 8003958:	40020458 	.word	0x40020458
 800395c:	40020470 	.word	0x40020470
 8003960:	40020488 	.word	0x40020488
 8003964:	400204a0 	.word	0x400204a0
 8003968:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 020e 	bic.w	r2, r3, #14
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 020a 	orr.w	r2, r2, #10
 800397e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0204 	orr.w	r2, r2, #4
 8003996:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a83      	ldr	r2, [pc, #524]	; (8003bac <HAL_DMA_Start_IT+0x474>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d072      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a82      	ldr	r2, [pc, #520]	; (8003bb0 <HAL_DMA_Start_IT+0x478>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d06d      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_DMA_Start_IT+0x47c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d068      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7f      	ldr	r2, [pc, #508]	; (8003bb8 <HAL_DMA_Start_IT+0x480>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d063      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7d      	ldr	r2, [pc, #500]	; (8003bbc <HAL_DMA_Start_IT+0x484>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d05e      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7c      	ldr	r2, [pc, #496]	; (8003bc0 <HAL_DMA_Start_IT+0x488>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d059      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a7a      	ldr	r2, [pc, #488]	; (8003bc4 <HAL_DMA_Start_IT+0x48c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d054      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a79      	ldr	r2, [pc, #484]	; (8003bc8 <HAL_DMA_Start_IT+0x490>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04f      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a77      	ldr	r2, [pc, #476]	; (8003bcc <HAL_DMA_Start_IT+0x494>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d04a      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a76      	ldr	r2, [pc, #472]	; (8003bd0 <HAL_DMA_Start_IT+0x498>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d045      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a74      	ldr	r2, [pc, #464]	; (8003bd4 <HAL_DMA_Start_IT+0x49c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d040      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a73      	ldr	r2, [pc, #460]	; (8003bd8 <HAL_DMA_Start_IT+0x4a0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d03b      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a71      	ldr	r2, [pc, #452]	; (8003bdc <HAL_DMA_Start_IT+0x4a4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d036      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a70      	ldr	r2, [pc, #448]	; (8003be0 <HAL_DMA_Start_IT+0x4a8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d031      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a6e      	ldr	r2, [pc, #440]	; (8003be4 <HAL_DMA_Start_IT+0x4ac>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d02c      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6d      	ldr	r2, [pc, #436]	; (8003be8 <HAL_DMA_Start_IT+0x4b0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d027      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6b      	ldr	r2, [pc, #428]	; (8003bec <HAL_DMA_Start_IT+0x4b4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d022      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6a      	ldr	r2, [pc, #424]	; (8003bf0 <HAL_DMA_Start_IT+0x4b8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d01d      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a68      	ldr	r2, [pc, #416]	; (8003bf4 <HAL_DMA_Start_IT+0x4bc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d018      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <HAL_DMA_Start_IT+0x4c0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <HAL_DMA_Start_IT+0x4c4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a64      	ldr	r2, [pc, #400]	; (8003c00 <HAL_DMA_Start_IT+0x4c8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <HAL_DMA_Start_IT+0x4cc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_DMA_Start_IT+0x350>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a61      	ldr	r2, [pc, #388]	; (8003c08 <HAL_DMA_Start_IT+0x4d0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Start_IT+0x354>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_Start_IT+0x356>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a37      	ldr	r2, [pc, #220]	; (8003bac <HAL_DMA_Start_IT+0x474>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d04a      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a36      	ldr	r2, [pc, #216]	; (8003bb0 <HAL_DMA_Start_IT+0x478>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d045      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <HAL_DMA_Start_IT+0x47c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d040      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	; (8003bb8 <HAL_DMA_Start_IT+0x480>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d03b      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <HAL_DMA_Start_IT+0x484>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d036      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <HAL_DMA_Start_IT+0x488>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d031      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2e      	ldr	r2, [pc, #184]	; (8003bc4 <HAL_DMA_Start_IT+0x48c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02c      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <HAL_DMA_Start_IT+0x490>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d027      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <HAL_DMA_Start_IT+0x494>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d022      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <HAL_DMA_Start_IT+0x498>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d01d      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <HAL_DMA_Start_IT+0x49c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d018      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_DMA_Start_IT+0x4a0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <HAL_DMA_Start_IT+0x4a4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00e      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_DMA_Start_IT+0x4a8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_DMA_Start_IT+0x4ac>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_Start_IT+0x430>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a21      	ldr	r2, [pc, #132]	; (8003be8 <HAL_DMA_Start_IT+0x4b0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <HAL_DMA_Start_IT+0x442>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e012      	b.n	8003ba0 <HAL_DMA_Start_IT+0x468>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e009      	b.n	8003ba0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	58025408 	.word	0x58025408
 8003bf0:	5802541c 	.word	0x5802541c
 8003bf4:	58025430 	.word	0x58025430
 8003bf8:	58025444 	.word	0x58025444
 8003bfc:	58025458 	.word	0x58025458
 8003c00:	5802546c 	.word	0x5802546c
 8003c04:	58025480 	.word	0x58025480
 8003c08:	58025494 	.word	0x58025494

08003c0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c18:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <HAL_DMA_IRQHandler+0x1ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a67      	ldr	r2, [pc, #412]	; (8003dbc <HAL_DMA_IRQHandler+0x1b0>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0a9b      	lsrs	r3, r3, #10
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <HAL_DMA_IRQHandler+0x1b4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5d      	ldr	r2, [pc, #372]	; (8003dc4 <HAL_DMA_IRQHandler+0x1b8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5c      	ldr	r2, [pc, #368]	; (8003dc8 <HAL_DMA_IRQHandler+0x1bc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5a      	ldr	r2, [pc, #360]	; (8003dcc <HAL_DMA_IRQHandler+0x1c0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a59      	ldr	r2, [pc, #356]	; (8003dd0 <HAL_DMA_IRQHandler+0x1c4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a57      	ldr	r2, [pc, #348]	; (8003dd4 <HAL_DMA_IRQHandler+0x1c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a56      	ldr	r2, [pc, #344]	; (8003dd8 <HAL_DMA_IRQHandler+0x1cc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_DMA_IRQHandler+0x1d0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a53      	ldr	r2, [pc, #332]	; (8003de0 <HAL_DMA_IRQHandler+0x1d4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a51      	ldr	r2, [pc, #324]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a50      	ldr	r2, [pc, #320]	; (8003de8 <HAL_DMA_IRQHandler+0x1dc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_DMA_IRQHandler+0x1e0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_DMA_IRQHandler+0x1e4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	; (8003df4 <HAL_DMA_IRQHandler+0x1e8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4a      	ldr	r2, [pc, #296]	; (8003df8 <HAL_DMA_IRQHandler+0x1ec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_DMA_IRQHandler+0x1f0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0xd6>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_DMA_IRQHandler+0xd8>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 842b 	beq.w	8004540 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80a2 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2e      	ldr	r2, [pc, #184]	; (8003dc0 <HAL_DMA_IRQHandler+0x1b4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <HAL_DMA_IRQHandler+0x1b8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <HAL_DMA_IRQHandler+0x1bc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <HAL_DMA_IRQHandler+0x1c0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <HAL_DMA_IRQHandler+0x1c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <HAL_DMA_IRQHandler+0x1c8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <HAL_DMA_IRQHandler+0x1cc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <HAL_DMA_IRQHandler+0x1d0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <HAL_DMA_IRQHandler+0x1d4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <HAL_DMA_IRQHandler+0x1dc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_DMA_IRQHandler+0x1e0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_DMA_IRQHandler+0x1e4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_DMA_IRQHandler+0x1e8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_DMA_IRQHandler+0x1ec>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_DMA_IRQHandler+0x1f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d12f      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x1f4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e02e      	b.n	8003e14 <HAL_DMA_IRQHandler+0x208>
 8003db6:	bf00      	nop
 8003db8:	24000000 	.word	0x24000000
 8003dbc:	1b4e81b5 	.word	0x1b4e81b5
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf14      	ite	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	2300      	moveq	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2208      	movs	r2, #8
 8003e32:	409a      	lsls	r2, r3
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06e      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a69      	ldr	r2, [pc, #420]	; (8004004 <HAL_DMA_IRQHandler+0x3f8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d04a      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a67      	ldr	r2, [pc, #412]	; (8004008 <HAL_DMA_IRQHandler+0x3fc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d045      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a66      	ldr	r2, [pc, #408]	; (800400c <HAL_DMA_IRQHandler+0x400>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d040      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a64      	ldr	r2, [pc, #400]	; (8004010 <HAL_DMA_IRQHandler+0x404>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d03b      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a63      	ldr	r2, [pc, #396]	; (8004014 <HAL_DMA_IRQHandler+0x408>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d036      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a61      	ldr	r2, [pc, #388]	; (8004018 <HAL_DMA_IRQHandler+0x40c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d031      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a60      	ldr	r2, [pc, #384]	; (800401c <HAL_DMA_IRQHandler+0x410>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d02c      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a5e      	ldr	r2, [pc, #376]	; (8004020 <HAL_DMA_IRQHandler+0x414>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d027      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_DMA_IRQHandler+0x418>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d022      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_DMA_IRQHandler+0x41c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01d      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5a      	ldr	r2, [pc, #360]	; (800402c <HAL_DMA_IRQHandler+0x420>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d018      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a58      	ldr	r2, [pc, #352]	; (8004030 <HAL_DMA_IRQHandler+0x424>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a57      	ldr	r2, [pc, #348]	; (8004034 <HAL_DMA_IRQHandler+0x428>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a55      	ldr	r2, [pc, #340]	; (8004038 <HAL_DMA_IRQHandler+0x42c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a54      	ldr	r2, [pc, #336]	; (800403c <HAL_DMA_IRQHandler+0x430>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_DMA_IRQHandler+0x434>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10a      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x304>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e003      	b.n	8003f18 <HAL_DMA_IRQHandler+0x30c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2201      	movs	r2, #1
 8003f26:	409a      	lsls	r2, r3
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f043 0202 	orr.w	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2204      	movs	r2, #4
 8003f42:	409a      	lsls	r2, r3
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 808f 	beq.w	800406c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <HAL_DMA_IRQHandler+0x3f8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04a      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <HAL_DMA_IRQHandler+0x3fc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d045      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_DMA_IRQHandler+0x400>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a27      	ldr	r2, [pc, #156]	; (8004010 <HAL_DMA_IRQHandler+0x404>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d03b      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <HAL_DMA_IRQHandler+0x408>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d036      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <HAL_DMA_IRQHandler+0x40c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d031      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a23      	ldr	r2, [pc, #140]	; (800401c <HAL_DMA_IRQHandler+0x410>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d02c      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a21      	ldr	r2, [pc, #132]	; (8004020 <HAL_DMA_IRQHandler+0x414>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_DMA_IRQHandler+0x418>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <HAL_DMA_IRQHandler+0x41c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_DMA_IRQHandler+0x420>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_DMA_IRQHandler+0x424>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_DMA_IRQHandler+0x428>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_DMA_IRQHandler+0x42c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_DMA_IRQHandler+0x430>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <HAL_DMA_IRQHandler+0x434>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d12a      	bne.n	8004044 <HAL_DMA_IRQHandler+0x438>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e023      	b.n	800404c <HAL_DMA_IRQHandler+0x440>
 8004004:	40020010 	.word	0x40020010
 8004008:	40020028 	.word	0x40020028
 800400c:	40020040 	.word	0x40020040
 8004010:	40020058 	.word	0x40020058
 8004014:	40020070 	.word	0x40020070
 8004018:	40020088 	.word	0x40020088
 800401c:	400200a0 	.word	0x400200a0
 8004020:	400200b8 	.word	0x400200b8
 8004024:	40020410 	.word	0x40020410
 8004028:	40020428 	.word	0x40020428
 800402c:	40020440 	.word	0x40020440
 8004030:	40020458 	.word	0x40020458
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	400204a0 	.word	0x400204a0
 8004040:	400204b8 	.word	0x400204b8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2204      	movs	r2, #4
 800405a:	409a      	lsls	r2, r3
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2210      	movs	r2, #16
 8004076:	409a      	lsls	r2, r3
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80a6 	beq.w	80041ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a85      	ldr	r2, [pc, #532]	; (800429c <HAL_DMA_IRQHandler+0x690>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d04a      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <HAL_DMA_IRQHandler+0x694>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d045      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a82      	ldr	r2, [pc, #520]	; (80042a4 <HAL_DMA_IRQHandler+0x698>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d040      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a80      	ldr	r2, [pc, #512]	; (80042a8 <HAL_DMA_IRQHandler+0x69c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d03b      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7f      	ldr	r2, [pc, #508]	; (80042ac <HAL_DMA_IRQHandler+0x6a0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d036      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a7d      	ldr	r2, [pc, #500]	; (80042b0 <HAL_DMA_IRQHandler+0x6a4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7c      	ldr	r2, [pc, #496]	; (80042b4 <HAL_DMA_IRQHandler+0x6a8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d02c      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_DMA_IRQHandler+0x6ac>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d027      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a79      	ldr	r2, [pc, #484]	; (80042bc <HAL_DMA_IRQHandler+0x6b0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d022      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a77      	ldr	r2, [pc, #476]	; (80042c0 <HAL_DMA_IRQHandler+0x6b4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01d      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a76      	ldr	r2, [pc, #472]	; (80042c4 <HAL_DMA_IRQHandler+0x6b8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_DMA_IRQHandler+0x6bc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a73      	ldr	r2, [pc, #460]	; (80042cc <HAL_DMA_IRQHandler+0x6c0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a71      	ldr	r2, [pc, #452]	; (80042d0 <HAL_DMA_IRQHandler+0x6c4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a70      	ldr	r2, [pc, #448]	; (80042d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a6e      	ldr	r2, [pc, #440]	; (80042d8 <HAL_DMA_IRQHandler+0x6cc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10a      	bne.n	8004138 <HAL_DMA_IRQHandler+0x52c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e009      	b.n	800414c <HAL_DMA_IRQHandler+0x540>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d03e      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2210      	movs	r2, #16
 800415a:	409a      	lsls	r2, r3
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d108      	bne.n	800418e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d024      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
 800418c:	e01f      	b.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01b      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
 800419e:	e016      	b.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0208 	bic.w	r2, r2, #8
 80041bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2220      	movs	r2, #32
 80041d8:	409a      	lsls	r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8110 	beq.w	8004404 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_DMA_IRQHandler+0x690>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_DMA_IRQHandler+0x694>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <HAL_DMA_IRQHandler+0x698>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_DMA_IRQHandler+0x69c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a26      	ldr	r2, [pc, #152]	; (80042ac <HAL_DMA_IRQHandler+0x6a0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_DMA_IRQHandler+0x6a4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a23      	ldr	r2, [pc, #140]	; (80042b4 <HAL_DMA_IRQHandler+0x6a8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_DMA_IRQHandler+0x6ac>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a20      	ldr	r2, [pc, #128]	; (80042bc <HAL_DMA_IRQHandler+0x6b0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_DMA_IRQHandler+0x6b4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_DMA_IRQHandler+0x6b8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_DMA_IRQHandler+0x6bc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <HAL_DMA_IRQHandler+0x6c0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_DMA_IRQHandler+0x6c4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_DMA_IRQHandler+0x6c8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_DMA_IRQHandler+0x6cc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d12b      	bne.n	80042dc <HAL_DMA_IRQHandler+0x6d0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e02a      	b.n	80042f0 <HAL_DMA_IRQHandler+0x6e4>
 800429a:	bf00      	nop
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8087 	beq.w	8004404 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2220      	movs	r2, #32
 8004300:	409a      	lsls	r2, r3
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b04      	cmp	r3, #4
 8004310:	d139      	bne.n	8004386 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0216 	bic.w	r2, r2, #22
 8004320:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_DMA_IRQHandler+0x736>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	223f      	movs	r2, #63	; 0x3f
 800435c:	409a      	lsls	r2, r3
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8382 	beq.w	8004a80 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
          }
          return;
 8004384:	e37c      	b.n	8004a80 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
 80043b2:	e027      	b.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
 80043c4:	e01e      	b.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0210 	bic.w	r2, r2, #16
 80043e2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 833e 	beq.w	8004a8a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8088 	beq.w	800452c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2204      	movs	r2, #4
 8004420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a8e      	ldr	r2, [pc, #568]	; (8004664 <HAL_DMA_IRQHandler+0xa58>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a8d      	ldr	r2, [pc, #564]	; (8004668 <HAL_DMA_IRQHandler+0xa5c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a8b      	ldr	r2, [pc, #556]	; (800466c <HAL_DMA_IRQHandler+0xa60>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a8a      	ldr	r2, [pc, #552]	; (8004670 <HAL_DMA_IRQHandler+0xa64>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a88      	ldr	r2, [pc, #544]	; (8004674 <HAL_DMA_IRQHandler+0xa68>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a87      	ldr	r2, [pc, #540]	; (8004678 <HAL_DMA_IRQHandler+0xa6c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a85      	ldr	r2, [pc, #532]	; (800467c <HAL_DMA_IRQHandler+0xa70>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a84      	ldr	r2, [pc, #528]	; (8004680 <HAL_DMA_IRQHandler+0xa74>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a82      	ldr	r2, [pc, #520]	; (8004684 <HAL_DMA_IRQHandler+0xa78>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a81      	ldr	r2, [pc, #516]	; (8004688 <HAL_DMA_IRQHandler+0xa7c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7f      	ldr	r2, [pc, #508]	; (800468c <HAL_DMA_IRQHandler+0xa80>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7e      	ldr	r2, [pc, #504]	; (8004690 <HAL_DMA_IRQHandler+0xa84>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a7c      	ldr	r2, [pc, #496]	; (8004694 <HAL_DMA_IRQHandler+0xa88>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7b      	ldr	r2, [pc, #492]	; (8004698 <HAL_DMA_IRQHandler+0xa8c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a79      	ldr	r2, [pc, #484]	; (800469c <HAL_DMA_IRQHandler+0xa90>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a78      	ldr	r2, [pc, #480]	; (80046a0 <HAL_DMA_IRQHandler+0xa94>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x8ca>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e007      	b.n	80044e6 <HAL_DMA_IRQHandler+0x8da>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d307      	bcc.n	8004502 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f2      	bne.n	80044e6 <HAL_DMA_IRQHandler+0x8da>
 8004500:	e000      	b.n	8004504 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004502:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004522:	e003      	b.n	800452c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 82aa 	beq.w	8004a8a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
 800453e:	e2a4      	b.n	8004a8a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a57      	ldr	r2, [pc, #348]	; (80046a4 <HAL_DMA_IRQHandler+0xa98>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <HAL_DMA_IRQHandler+0xa9c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a54      	ldr	r2, [pc, #336]	; (80046ac <HAL_DMA_IRQHandler+0xaa0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a53      	ldr	r2, [pc, #332]	; (80046b0 <HAL_DMA_IRQHandler+0xaa4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a51      	ldr	r2, [pc, #324]	; (80046b4 <HAL_DMA_IRQHandler+0xaa8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a50      	ldr	r2, [pc, #320]	; (80046b8 <HAL_DMA_IRQHandler+0xaac>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a4e      	ldr	r2, [pc, #312]	; (80046bc <HAL_DMA_IRQHandler+0xab0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4d      	ldr	r2, [pc, #308]	; (80046c0 <HAL_DMA_IRQHandler+0xab4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a4b      	ldr	r2, [pc, #300]	; (80046c4 <HAL_DMA_IRQHandler+0xab8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <HAL_DMA_IRQHandler+0xabc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a48      	ldr	r2, [pc, #288]	; (80046cc <HAL_DMA_IRQHandler+0xac0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a47      	ldr	r2, [pc, #284]	; (80046d0 <HAL_DMA_IRQHandler+0xac4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a45      	ldr	r2, [pc, #276]	; (80046d4 <HAL_DMA_IRQHandler+0xac8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a44      	ldr	r2, [pc, #272]	; (80046d8 <HAL_DMA_IRQHandler+0xacc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a42      	ldr	r2, [pc, #264]	; (80046dc <HAL_DMA_IRQHandler+0xad0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x9d4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a41      	ldr	r2, [pc, #260]	; (80046e0 <HAL_DMA_IRQHandler+0xad4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x9d8>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_IRQHandler+0x9da>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 824f 	beq.w	8004a8a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2204      	movs	r2, #4
 80045fe:	409a      	lsls	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80dd 	beq.w	80047c4 <HAL_DMA_IRQHandler+0xbb8>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80d7 	beq.w	80047c4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2204      	movs	r2, #4
 8004620:	409a      	lsls	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d059      	beq.n	80046e4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8220 	beq.w	8004a84 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464c:	e21a      	b.n	8004a84 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8216 	beq.w	8004a84 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004660:	e210      	b.n	8004a84 <HAL_DMA_IRQHandler+0xe78>
 8004662:	bf00      	nop
 8004664:	40020010 	.word	0x40020010
 8004668:	40020028 	.word	0x40020028
 800466c:	40020040 	.word	0x40020040
 8004670:	40020058 	.word	0x40020058
 8004674:	40020070 	.word	0x40020070
 8004678:	40020088 	.word	0x40020088
 800467c:	400200a0 	.word	0x400200a0
 8004680:	400200b8 	.word	0x400200b8
 8004684:	40020410 	.word	0x40020410
 8004688:	40020428 	.word	0x40020428
 800468c:	40020440 	.word	0x40020440
 8004690:	40020458 	.word	0x40020458
 8004694:	40020470 	.word	0x40020470
 8004698:	40020488 	.word	0x40020488
 800469c:	400204a0 	.word	0x400204a0
 80046a0:	400204b8 	.word	0x400204b8
 80046a4:	48022c08 	.word	0x48022c08
 80046a8:	48022c1c 	.word	0x48022c1c
 80046ac:	48022c30 	.word	0x48022c30
 80046b0:	48022c44 	.word	0x48022c44
 80046b4:	48022c58 	.word	0x48022c58
 80046b8:	48022c6c 	.word	0x48022c6c
 80046bc:	48022c80 	.word	0x48022c80
 80046c0:	48022c94 	.word	0x48022c94
 80046c4:	58025408 	.word	0x58025408
 80046c8:	5802541c 	.word	0x5802541c
 80046cc:	58025430 	.word	0x58025430
 80046d0:	58025444 	.word	0x58025444
 80046d4:	58025458 	.word	0x58025458
 80046d8:	5802546c 	.word	0x5802546c
 80046dc:	58025480 	.word	0x58025480
 80046e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d160      	bne.n	80047b0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a8c      	ldr	r2, [pc, #560]	; (8004924 <HAL_DMA_IRQHandler+0xd18>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d04a      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a8a      	ldr	r2, [pc, #552]	; (8004928 <HAL_DMA_IRQHandler+0xd1c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d045      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a89      	ldr	r2, [pc, #548]	; (800492c <HAL_DMA_IRQHandler+0xd20>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d040      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a87      	ldr	r2, [pc, #540]	; (8004930 <HAL_DMA_IRQHandler+0xd24>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d03b      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a86      	ldr	r2, [pc, #536]	; (8004934 <HAL_DMA_IRQHandler+0xd28>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d036      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a84      	ldr	r2, [pc, #528]	; (8004938 <HAL_DMA_IRQHandler+0xd2c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d031      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a83      	ldr	r2, [pc, #524]	; (800493c <HAL_DMA_IRQHandler+0xd30>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d02c      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a81      	ldr	r2, [pc, #516]	; (8004940 <HAL_DMA_IRQHandler+0xd34>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d027      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a80      	ldr	r2, [pc, #512]	; (8004944 <HAL_DMA_IRQHandler+0xd38>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7e      	ldr	r2, [pc, #504]	; (8004948 <HAL_DMA_IRQHandler+0xd3c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7d      	ldr	r2, [pc, #500]	; (800494c <HAL_DMA_IRQHandler+0xd40>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7b      	ldr	r2, [pc, #492]	; (8004950 <HAL_DMA_IRQHandler+0xd44>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7a      	ldr	r2, [pc, #488]	; (8004954 <HAL_DMA_IRQHandler+0xd48>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a78      	ldr	r2, [pc, #480]	; (8004958 <HAL_DMA_IRQHandler+0xd4c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a77      	ldr	r2, [pc, #476]	; (800495c <HAL_DMA_IRQHandler+0xd50>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_DMA_IRQHandler+0xb82>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a75      	ldr	r2, [pc, #468]	; (8004960 <HAL_DMA_IRQHandler+0xd54>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <HAL_DMA_IRQHandler+0xb94>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0208 	bic.w	r2, r2, #8
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e007      	b.n	80047b0 <HAL_DMA_IRQHandler+0xba4>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8165 	beq.w	8004a84 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c2:	e15f      	b.n	8004a84 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2202      	movs	r2, #2
 80047ce:	409a      	lsls	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80c5 	beq.w	8004964 <HAL_DMA_IRQHandler+0xd58>
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80bf 	beq.w	8004964 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2202      	movs	r2, #2
 80047f0:	409a      	lsls	r2, r3
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d018      	beq.n	8004832 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 813a 	beq.w	8004a88 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800481c:	e134      	b.n	8004a88 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8130 	beq.w	8004a88 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004830:	e12a      	b.n	8004a88 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d168      	bne.n	800490e <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a38      	ldr	r2, [pc, #224]	; (8004924 <HAL_DMA_IRQHandler+0xd18>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d04a      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a37      	ldr	r2, [pc, #220]	; (8004928 <HAL_DMA_IRQHandler+0xd1c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d045      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a35      	ldr	r2, [pc, #212]	; (800492c <HAL_DMA_IRQHandler+0xd20>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d040      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a34      	ldr	r2, [pc, #208]	; (8004930 <HAL_DMA_IRQHandler+0xd24>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d03b      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a32      	ldr	r2, [pc, #200]	; (8004934 <HAL_DMA_IRQHandler+0xd28>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d036      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a31      	ldr	r2, [pc, #196]	; (8004938 <HAL_DMA_IRQHandler+0xd2c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d031      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <HAL_DMA_IRQHandler+0xd30>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d02c      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <HAL_DMA_IRQHandler+0xd34>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d027      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2c      	ldr	r2, [pc, #176]	; (8004944 <HAL_DMA_IRQHandler+0xd38>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d022      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2b      	ldr	r2, [pc, #172]	; (8004948 <HAL_DMA_IRQHandler+0xd3c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01d      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a29      	ldr	r2, [pc, #164]	; (800494c <HAL_DMA_IRQHandler+0xd40>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <HAL_DMA_IRQHandler+0xd44>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_DMA_IRQHandler+0xd48>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a25      	ldr	r2, [pc, #148]	; (8004958 <HAL_DMA_IRQHandler+0xd4c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a23      	ldr	r2, [pc, #140]	; (800495c <HAL_DMA_IRQHandler+0xd50>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_DMA_IRQHandler+0xcd0>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a22      	ldr	r2, [pc, #136]	; (8004960 <HAL_DMA_IRQHandler+0xd54>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <HAL_DMA_IRQHandler+0xce2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0214 	bic.w	r2, r2, #20
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e007      	b.n	80048fe <HAL_DMA_IRQHandler+0xcf2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 020a 	bic.w	r2, r2, #10
 80048fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80b8 	beq.w	8004a88 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004920:	e0b2      	b.n	8004a88 <HAL_DMA_IRQHandler+0xe7c>
 8004922:	bf00      	nop
 8004924:	40020010 	.word	0x40020010
 8004928:	40020028 	.word	0x40020028
 800492c:	40020040 	.word	0x40020040
 8004930:	40020058 	.word	0x40020058
 8004934:	40020070 	.word	0x40020070
 8004938:	40020088 	.word	0x40020088
 800493c:	400200a0 	.word	0x400200a0
 8004940:	400200b8 	.word	0x400200b8
 8004944:	40020410 	.word	0x40020410
 8004948:	40020428 	.word	0x40020428
 800494c:	40020440 	.word	0x40020440
 8004950:	40020458 	.word	0x40020458
 8004954:	40020470 	.word	0x40020470
 8004958:	40020488 	.word	0x40020488
 800495c:	400204a0 	.word	0x400204a0
 8004960:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2208      	movs	r2, #8
 800496e:	409a      	lsls	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8088 	beq.w	8004a8a <HAL_DMA_IRQHandler+0xe7e>
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8082 	beq.w	8004a8a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a41      	ldr	r2, [pc, #260]	; (8004a90 <HAL_DMA_IRQHandler+0xe84>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3f      	ldr	r2, [pc, #252]	; (8004a94 <HAL_DMA_IRQHandler+0xe88>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3e      	ldr	r2, [pc, #248]	; (8004a98 <HAL_DMA_IRQHandler+0xe8c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <HAL_DMA_IRQHandler+0xe90>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a3b      	ldr	r2, [pc, #236]	; (8004aa0 <HAL_DMA_IRQHandler+0xe94>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a39      	ldr	r2, [pc, #228]	; (8004aa4 <HAL_DMA_IRQHandler+0xe98>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a38      	ldr	r2, [pc, #224]	; (8004aa8 <HAL_DMA_IRQHandler+0xe9c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a36      	ldr	r2, [pc, #216]	; (8004aac <HAL_DMA_IRQHandler+0xea0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a35      	ldr	r2, [pc, #212]	; (8004ab0 <HAL_DMA_IRQHandler+0xea4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <HAL_DMA_IRQHandler+0xea8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a32      	ldr	r2, [pc, #200]	; (8004ab8 <HAL_DMA_IRQHandler+0xeac>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a30      	ldr	r2, [pc, #192]	; (8004abc <HAL_DMA_IRQHandler+0xeb0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <HAL_DMA_IRQHandler+0xeb4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <HAL_DMA_IRQHandler+0xeb8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <HAL_DMA_IRQHandler+0xebc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xe1a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <HAL_DMA_IRQHandler+0xec0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_DMA_IRQHandler+0xe2c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 021c 	bic.w	r2, r2, #28
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e007      	b.n	8004a48 <HAL_DMA_IRQHandler+0xe3c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020e 	bic.w	r2, r2, #14
 8004a46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2201      	movs	r2, #1
 8004a52:	409a      	lsls	r2, r3
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e004      	b.n	8004a8a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004a80:	bf00      	nop
 8004a82:	e002      	b.n	8004a8a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a8a:	3728      	adds	r7, #40	; 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40020010 	.word	0x40020010
 8004a94:	40020028 	.word	0x40020028
 8004a98:	40020040 	.word	0x40020040
 8004a9c:	40020058 	.word	0x40020058
 8004aa0:	40020070 	.word	0x40020070
 8004aa4:	40020088 	.word	0x40020088
 8004aa8:	400200a0 	.word	0x400200a0
 8004aac:	400200b8 	.word	0x400200b8
 8004ab0:	40020410 	.word	0x40020410
 8004ab4:	40020428 	.word	0x40020428
 8004ab8:	40020440 	.word	0x40020440
 8004abc:	40020458 	.word	0x40020458
 8004ac0:	40020470 	.word	0x40020470
 8004ac4:	40020488 	.word	0x40020488
 8004ac8:	400204a0 	.word	0x400204a0
 8004acc:	400204b8 	.word	0x400204b8

08004ad0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a84      	ldr	r2, [pc, #528]	; (8004d00 <DMA_SetConfig+0x230>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d072      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a82      	ldr	r2, [pc, #520]	; (8004d04 <DMA_SetConfig+0x234>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d06d      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a81      	ldr	r2, [pc, #516]	; (8004d08 <DMA_SetConfig+0x238>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d068      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a7f      	ldr	r2, [pc, #508]	; (8004d0c <DMA_SetConfig+0x23c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d063      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a7e      	ldr	r2, [pc, #504]	; (8004d10 <DMA_SetConfig+0x240>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d05e      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7c      	ldr	r2, [pc, #496]	; (8004d14 <DMA_SetConfig+0x244>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d059      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a7b      	ldr	r2, [pc, #492]	; (8004d18 <DMA_SetConfig+0x248>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d054      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a79      	ldr	r2, [pc, #484]	; (8004d1c <DMA_SetConfig+0x24c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d04f      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a78      	ldr	r2, [pc, #480]	; (8004d20 <DMA_SetConfig+0x250>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d04a      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a76      	ldr	r2, [pc, #472]	; (8004d24 <DMA_SetConfig+0x254>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d045      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a75      	ldr	r2, [pc, #468]	; (8004d28 <DMA_SetConfig+0x258>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d040      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a73      	ldr	r2, [pc, #460]	; (8004d2c <DMA_SetConfig+0x25c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d03b      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a72      	ldr	r2, [pc, #456]	; (8004d30 <DMA_SetConfig+0x260>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d036      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a70      	ldr	r2, [pc, #448]	; (8004d34 <DMA_SetConfig+0x264>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d031      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6f      	ldr	r2, [pc, #444]	; (8004d38 <DMA_SetConfig+0x268>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d02c      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6d      	ldr	r2, [pc, #436]	; (8004d3c <DMA_SetConfig+0x26c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d027      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	; (8004d40 <DMA_SetConfig+0x270>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d022      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <DMA_SetConfig+0x274>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01d      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <DMA_SetConfig+0x278>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d018      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a67      	ldr	r2, [pc, #412]	; (8004d4c <DMA_SetConfig+0x27c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a66      	ldr	r2, [pc, #408]	; (8004d50 <DMA_SetConfig+0x280>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a64      	ldr	r2, [pc, #400]	; (8004d54 <DMA_SetConfig+0x284>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a63      	ldr	r2, [pc, #396]	; (8004d58 <DMA_SetConfig+0x288>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <DMA_SetConfig+0x10a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a61      	ldr	r2, [pc, #388]	; (8004d5c <DMA_SetConfig+0x28c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <DMA_SetConfig+0x10e>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <DMA_SetConfig+0x110>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004bfe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3e      	ldr	r2, [pc, #248]	; (8004d00 <DMA_SetConfig+0x230>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d04a      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <DMA_SetConfig+0x234>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d045      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a3b      	ldr	r2, [pc, #236]	; (8004d08 <DMA_SetConfig+0x238>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d040      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a3a      	ldr	r2, [pc, #232]	; (8004d0c <DMA_SetConfig+0x23c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d03b      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a38      	ldr	r2, [pc, #224]	; (8004d10 <DMA_SetConfig+0x240>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d036      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a37      	ldr	r2, [pc, #220]	; (8004d14 <DMA_SetConfig+0x244>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d031      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a35      	ldr	r2, [pc, #212]	; (8004d18 <DMA_SetConfig+0x248>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02c      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <DMA_SetConfig+0x24c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d027      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a32      	ldr	r2, [pc, #200]	; (8004d20 <DMA_SetConfig+0x250>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d022      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <DMA_SetConfig+0x254>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d01d      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2f      	ldr	r2, [pc, #188]	; (8004d28 <DMA_SetConfig+0x258>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d018      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2e      	ldr	r2, [pc, #184]	; (8004d2c <DMA_SetConfig+0x25c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <DMA_SetConfig+0x260>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <DMA_SetConfig+0x264>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <DMA_SetConfig+0x268>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <DMA_SetConfig+0x1d0>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a28      	ldr	r2, [pc, #160]	; (8004d3c <DMA_SetConfig+0x26c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <DMA_SetConfig+0x1d4>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <DMA_SetConfig+0x1d6>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d05a      	beq.n	8004d60 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	223f      	movs	r2, #63	; 0x3f
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cc8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d108      	bne.n	8004cec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cea:	e0af      	b.n	8004e4c <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
}
 8004cfc:	e0a6      	b.n	8004e4c <DMA_SetConfig+0x37c>
 8004cfe:	bf00      	nop
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	58025408 	.word	0x58025408
 8004d44:	5802541c 	.word	0x5802541c
 8004d48:	58025430 	.word	0x58025430
 8004d4c:	58025444 	.word	0x58025444
 8004d50:	58025458 	.word	0x58025458
 8004d54:	5802546c 	.word	0x5802546c
 8004d58:	58025480 	.word	0x58025480
 8004d5c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <DMA_SetConfig+0x388>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d04a      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <DMA_SetConfig+0x38c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d045      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <DMA_SetConfig+0x390>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d040      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <DMA_SetConfig+0x394>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d03b      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a36      	ldr	r2, [pc, #216]	; (8004e68 <DMA_SetConfig+0x398>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d036      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a35      	ldr	r2, [pc, #212]	; (8004e6c <DMA_SetConfig+0x39c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d031      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a33      	ldr	r2, [pc, #204]	; (8004e70 <DMA_SetConfig+0x3a0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d02c      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a32      	ldr	r2, [pc, #200]	; (8004e74 <DMA_SetConfig+0x3a4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d027      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <DMA_SetConfig+0x3a8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <DMA_SetConfig+0x3ac>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01d      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2d      	ldr	r2, [pc, #180]	; (8004e80 <DMA_SetConfig+0x3b0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <DMA_SetConfig+0x3b4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <DMA_SetConfig+0x3b8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <DMA_SetConfig+0x3bc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a27      	ldr	r2, [pc, #156]	; (8004e90 <DMA_SetConfig+0x3c0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <DMA_SetConfig+0x330>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a26      	ldr	r2, [pc, #152]	; (8004e94 <DMA_SetConfig+0x3c4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d101      	bne.n	8004e04 <DMA_SetConfig+0x334>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <DMA_SetConfig+0x336>
 8004e04:	2300      	movs	r3, #0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2201      	movs	r2, #1
 8004e14:	409a      	lsls	r2, r3
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d108      	bne.n	8004e3c <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	60da      	str	r2, [r3, #12]
}
 8004e3a:	e007      	b.n	8004e4c <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	48022c08 	.word	0x48022c08
 8004e5c:	48022c1c 	.word	0x48022c1c
 8004e60:	48022c30 	.word	0x48022c30
 8004e64:	48022c44 	.word	0x48022c44
 8004e68:	48022c58 	.word	0x48022c58
 8004e6c:	48022c6c 	.word	0x48022c6c
 8004e70:	48022c80 	.word	0x48022c80
 8004e74:	48022c94 	.word	0x48022c94
 8004e78:	58025408 	.word	0x58025408
 8004e7c:	5802541c 	.word	0x5802541c
 8004e80:	58025430 	.word	0x58025430
 8004e84:	58025444 	.word	0x58025444
 8004e88:	58025458 	.word	0x58025458
 8004e8c:	5802546c 	.word	0x5802546c
 8004e90:	58025480 	.word	0x58025480
 8004e94:	58025494 	.word	0x58025494

08004e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a42      	ldr	r2, [pc, #264]	; (8004fb0 <DMA_CalcBaseAndBitshift+0x118>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d04a      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a41      	ldr	r2, [pc, #260]	; (8004fb4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d045      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3f      	ldr	r2, [pc, #252]	; (8004fb8 <DMA_CalcBaseAndBitshift+0x120>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d040      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a3e      	ldr	r2, [pc, #248]	; (8004fbc <DMA_CalcBaseAndBitshift+0x124>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d03b      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x128>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d036      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d031      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a39      	ldr	r2, [pc, #228]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x130>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02c      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a38      	ldr	r2, [pc, #224]	; (8004fcc <DMA_CalcBaseAndBitshift+0x134>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d027      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a36      	ldr	r2, [pc, #216]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d022      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a35      	ldr	r2, [pc, #212]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d01d      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a33      	ldr	r2, [pc, #204]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x140>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a32      	ldr	r2, [pc, #200]	; (8004fdc <DMA_CalcBaseAndBitshift+0x144>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <DMA_CalcBaseAndBitshift+0x148>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2f      	ldr	r2, [pc, #188]	; (8004fe4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2d      	ldr	r2, [pc, #180]	; (8004fe8 <DMA_CalcBaseAndBitshift+0x150>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xa8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	; (8004fec <DMA_CalcBaseAndBitshift+0x154>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <DMA_CalcBaseAndBitshift+0xac>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <DMA_CalcBaseAndBitshift+0xae>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d024      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3b10      	subs	r3, #16
 8004f52:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x158>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f64:	5cd3      	ldrb	r3, [r2, r3]
 8004f66:	461a      	mov	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d908      	bls.n	8004f84 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x160>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	1d1a      	adds	r2, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	659a      	str	r2, [r3, #88]	; 0x58
 8004f82:	e00d      	b.n	8004fa0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x160>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6593      	str	r3, [r2, #88]	; 0x58
 8004f92:	e005      	b.n	8004fa0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40020010 	.word	0x40020010
 8004fb4:	40020028 	.word	0x40020028
 8004fb8:	40020040 	.word	0x40020040
 8004fbc:	40020058 	.word	0x40020058
 8004fc0:	40020070 	.word	0x40020070
 8004fc4:	40020088 	.word	0x40020088
 8004fc8:	400200a0 	.word	0x400200a0
 8004fcc:	400200b8 	.word	0x400200b8
 8004fd0:	40020410 	.word	0x40020410
 8004fd4:	40020428 	.word	0x40020428
 8004fd8:	40020440 	.word	0x40020440
 8004fdc:	40020458 	.word	0x40020458
 8004fe0:	40020470 	.word	0x40020470
 8004fe4:	40020488 	.word	0x40020488
 8004fe8:	400204a0 	.word	0x400204a0
 8004fec:	400204b8 	.word	0x400204b8
 8004ff0:	aaaaaaab 	.word	0xaaaaaaab
 8004ff4:	0800b93c 	.word	0x0800b93c
 8004ff8:	fffffc00 	.word	0xfffffc00

08004ffc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d120      	bne.n	8005052 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	2b03      	cmp	r3, #3
 8005016:	d858      	bhi.n	80050ca <DMA_CheckFifoParam+0xce>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <DMA_CheckFifoParam+0x24>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005031 	.word	0x08005031
 8005024:	08005043 	.word	0x08005043
 8005028:	08005031 	.word	0x08005031
 800502c:	080050cb 	.word	0x080050cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d048      	beq.n	80050ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005040:	e045      	b.n	80050ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800504a:	d142      	bne.n	80050d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005050:	e03f      	b.n	80050d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	d123      	bne.n	80050a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	2b03      	cmp	r3, #3
 8005062:	d838      	bhi.n	80050d6 <DMA_CheckFifoParam+0xda>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <DMA_CheckFifoParam+0x70>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	08005083 	.word	0x08005083
 8005074:	0800507d 	.word	0x0800507d
 8005078:	08005095 	.word	0x08005095
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
        break;
 8005080:	e030      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d025      	beq.n	80050da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005092:	e022      	b.n	80050da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800509c:	d11f      	bne.n	80050de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050a2:	e01c      	b.n	80050de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d902      	bls.n	80050b2 <DMA_CheckFifoParam+0xb6>
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d003      	beq.n	80050b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050b0:	e018      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
        break;
 80050b6:	e015      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00e      	beq.n	80050e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
    break;
 80050c8:	e00b      	b.n	80050e2 <DMA_CheckFifoParam+0xe6>
        break;
 80050ca:	bf00      	nop
 80050cc:	e00a      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        break;
 80050ce:	bf00      	nop
 80050d0:	e008      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        break;
 80050d2:	bf00      	nop
 80050d4:	e006      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        break;
 80050d6:	bf00      	nop
 80050d8:	e004      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
        break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <DMA_CheckFifoParam+0xe8>
    break;
 80050e2:	bf00      	nop
    }
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop

080050f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a38      	ldr	r2, [pc, #224]	; (80051e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d022      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a36      	ldr	r2, [pc, #216]	; (80051ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01d      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a35      	ldr	r2, [pc, #212]	; (80051f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d018      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a33      	ldr	r2, [pc, #204]	; (80051f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a32      	ldr	r2, [pc, #200]	; (80051f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a30      	ldr	r2, [pc, #192]	; (80051fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2f      	ldr	r2, [pc, #188]	; (8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01a      	beq.n	8005192 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	3b08      	subs	r3, #8
 8005164:	4a28      	ldr	r2, [pc, #160]	; (8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a24      	ldr	r2, [pc, #144]	; (8005210 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005180:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005190:	e024      	b.n	80051dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	3b10      	subs	r3, #16
 800519a:	4a1e      	ldr	r2, [pc, #120]	; (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d806      	bhi.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	; (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d902      	bls.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3308      	adds	r3, #8
 80051b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4b18      	ldr	r3, [pc, #96]	; (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	58025408 	.word	0x58025408
 80051ec:	5802541c 	.word	0x5802541c
 80051f0:	58025430 	.word	0x58025430
 80051f4:	58025444 	.word	0x58025444
 80051f8:	58025458 	.word	0x58025458
 80051fc:	5802546c 	.word	0x5802546c
 8005200:	58025480 	.word	0x58025480
 8005204:	58025494 	.word	0x58025494
 8005208:	cccccccd 	.word	0xcccccccd
 800520c:	16009600 	.word	0x16009600
 8005210:	58025880 	.word	0x58025880
 8005214:	aaaaaaab 	.word	0xaaaaaaab
 8005218:	400204b8 	.word	0x400204b8
 800521c:	4002040f 	.word	0x4002040f
 8005220:	10008200 	.word	0x10008200
 8005224:	40020880 	.word	0x40020880

08005228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d04a      	beq.n	80052d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d847      	bhi.n	80052d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d022      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d01d      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d018      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a21      	ldr	r2, [pc, #132]	; (80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d101      	bne.n	8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	461a      	mov	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a15      	ldr	r2, [pc, #84]	; (8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052b0:	671a      	str	r2, [r3, #112]	; 0x70
 80052b2:	e009      	b.n	80052c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a11      	ldr	r2, [pc, #68]	; (800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	2201      	movs	r2, #1
 80052ce:	409a      	lsls	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	58025408 	.word	0x58025408
 80052e4:	5802541c 	.word	0x5802541c
 80052e8:	58025430 	.word	0x58025430
 80052ec:	58025444 	.word	0x58025444
 80052f0:	58025458 	.word	0x58025458
 80052f4:	5802546c 	.word	0x5802546c
 80052f8:	58025480 	.word	0x58025480
 80052fc:	58025494 	.word	0x58025494
 8005300:	1600963f 	.word	0x1600963f
 8005304:	58025940 	.word	0x58025940
 8005308:	1000823f 	.word	0x1000823f
 800530c:	40020940 	.word	0x40020940

08005310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800531e:	4b89      	ldr	r3, [pc, #548]	; (8005544 <HAL_GPIO_Init+0x234>)
 8005320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005322:	e194      	b.n	800564e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	2101      	movs	r1, #1
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	4013      	ands	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8186 	beq.w	8005648 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00b      	beq.n	800535c <HAL_GPIO_Init+0x4c>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d007      	beq.n	800535c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005350:	2b11      	cmp	r3, #17
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b12      	cmp	r3, #18
 800535a:	d130      	bne.n	80053be <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	2203      	movs	r2, #3
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005392:	2201      	movs	r2, #1
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43db      	mvns	r3, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 0201 	and.w	r2, r3, #1
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2203      	movs	r2, #3
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0xee>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b12      	cmp	r3, #18
 80053fc:	d123      	bne.n	8005446 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	08da      	lsrs	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3208      	adds	r2, #8
 8005406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	220f      	movs	r2, #15
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4313      	orrs	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	08da      	lsrs	r2, r3, #3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3208      	adds	r2, #8
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	2203      	movs	r2, #3
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0203 	and.w	r2, r3, #3
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80e0 	beq.w	8005648 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005488:	4b2f      	ldr	r3, [pc, #188]	; (8005548 <HAL_GPIO_Init+0x238>)
 800548a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800548e:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <HAL_GPIO_Init+0x238>)
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <HAL_GPIO_Init+0x238>)
 800549a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054a6:	4a29      	ldr	r2, [pc, #164]	; (800554c <HAL_GPIO_Init+0x23c>)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	3302      	adds	r3, #2
 80054ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	220f      	movs	r2, #15
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a20      	ldr	r2, [pc, #128]	; (8005550 <HAL_GPIO_Init+0x240>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d052      	beq.n	8005578 <HAL_GPIO_Init+0x268>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_GPIO_Init+0x244>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_GPIO_Init+0x22e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_GPIO_Init+0x248>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02b      	beq.n	800553a <HAL_GPIO_Init+0x22a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <HAL_GPIO_Init+0x24c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d025      	beq.n	8005536 <HAL_GPIO_Init+0x226>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <HAL_GPIO_Init+0x250>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01f      	beq.n	8005532 <HAL_GPIO_Init+0x222>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_GPIO_Init+0x254>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d019      	beq.n	800552e <HAL_GPIO_Init+0x21e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <HAL_GPIO_Init+0x258>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_GPIO_Init+0x21a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_GPIO_Init+0x25c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00d      	beq.n	8005526 <HAL_GPIO_Init+0x216>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a18      	ldr	r2, [pc, #96]	; (8005570 <HAL_GPIO_Init+0x260>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <HAL_GPIO_Init+0x212>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a17      	ldr	r2, [pc, #92]	; (8005574 <HAL_GPIO_Init+0x264>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d101      	bne.n	800551e <HAL_GPIO_Init+0x20e>
 800551a:	2309      	movs	r3, #9
 800551c:	e02d      	b.n	800557a <HAL_GPIO_Init+0x26a>
 800551e:	230a      	movs	r3, #10
 8005520:	e02b      	b.n	800557a <HAL_GPIO_Init+0x26a>
 8005522:	2308      	movs	r3, #8
 8005524:	e029      	b.n	800557a <HAL_GPIO_Init+0x26a>
 8005526:	2307      	movs	r3, #7
 8005528:	e027      	b.n	800557a <HAL_GPIO_Init+0x26a>
 800552a:	2306      	movs	r3, #6
 800552c:	e025      	b.n	800557a <HAL_GPIO_Init+0x26a>
 800552e:	2305      	movs	r3, #5
 8005530:	e023      	b.n	800557a <HAL_GPIO_Init+0x26a>
 8005532:	2304      	movs	r3, #4
 8005534:	e021      	b.n	800557a <HAL_GPIO_Init+0x26a>
 8005536:	2303      	movs	r3, #3
 8005538:	e01f      	b.n	800557a <HAL_GPIO_Init+0x26a>
 800553a:	2302      	movs	r3, #2
 800553c:	e01d      	b.n	800557a <HAL_GPIO_Init+0x26a>
 800553e:	2301      	movs	r3, #1
 8005540:	e01b      	b.n	800557a <HAL_GPIO_Init+0x26a>
 8005542:	bf00      	nop
 8005544:	58000080 	.word	0x58000080
 8005548:	58024400 	.word	0x58024400
 800554c:	58000400 	.word	0x58000400
 8005550:	58020000 	.word	0x58020000
 8005554:	58020400 	.word	0x58020400
 8005558:	58020800 	.word	0x58020800
 800555c:	58020c00 	.word	0x58020c00
 8005560:	58021000 	.word	0x58021000
 8005564:	58021400 	.word	0x58021400
 8005568:	58021800 	.word	0x58021800
 800556c:	58021c00 	.word	0x58021c00
 8005570:	58022000 	.word	0x58022000
 8005574:	58022400 	.word	0x58022400
 8005578:	2300      	movs	r3, #0
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	f002 0203 	and.w	r2, r2, #3
 8005580:	0092      	lsls	r2, r2, #2
 8005582:	4093      	lsls	r3, r2
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800558a:	4938      	ldr	r1, [pc, #224]	; (800566c <HAL_GPIO_Init+0x35c>)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	3302      	adds	r3, #2
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	3301      	adds	r3, #1
 800564c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f ae63 	bne.w	8005324 <HAL_GPIO_Init+0x14>
  }
}
 800565e:	bf00      	nop
 8005660:	3724      	adds	r7, #36	; 0x24
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	58000400 	.word	0x58000400

08005670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	807b      	strh	r3, [r7, #2]
 800567c:	4613      	mov	r3, r2
 800567e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005680:	787b      	ldrb	r3, [r7, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800568c:	e003      	b.n	8005696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800568e:	887b      	ldrh	r3, [r7, #2]
 8005690:	041a      	lsls	r2, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	619a      	str	r2, [r3, #24]
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	401a      	ands	r2, r3
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d104      	bne.n	80056c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056bc:	887b      	ldrh	r3, [r7, #2]
 80056be:	041a      	lsls	r2, r3, #16
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80056c4:	e002      	b.n	80056cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80056e0:	4b29      	ldr	r3, [pc, #164]	; (8005788 <HAL_PWREx_ConfigSupply+0xb0>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d00a      	beq.n	8005702 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056ec:	4b26      	ldr	r3, [pc, #152]	; (8005788 <HAL_PWREx_ConfigSupply+0xb0>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d001      	beq.n	80056fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e040      	b.n	8005780 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e03e      	b.n	8005780 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005702:	4b21      	ldr	r3, [pc, #132]	; (8005788 <HAL_PWREx_ConfigSupply+0xb0>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800570a:	491f      	ldr	r1, [pc, #124]	; (8005788 <HAL_PWREx_ConfigSupply+0xb0>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4313      	orrs	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005712:	f7fc f92d 	bl	8001970 <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005718:	e009      	b.n	800572e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800571a:	f7fc f929 	bl	8001970 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005728:	d901      	bls.n	800572e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e028      	b.n	8005780 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <HAL_PWREx_ConfigSupply+0xb0>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	d1ee      	bne.n	800571a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b1e      	cmp	r3, #30
 8005740:	d008      	beq.n	8005754 <HAL_PWREx_ConfigSupply+0x7c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b2e      	cmp	r3, #46	; 0x2e
 8005746:	d005      	beq.n	8005754 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b1d      	cmp	r3, #29
 800574c:	d002      	beq.n	8005754 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b2d      	cmp	r3, #45	; 0x2d
 8005752:	d114      	bne.n	800577e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005754:	f7fc f90c 	bl	8001970 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800575a:	e009      	b.n	8005770 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800575c:	f7fc f908 	bl	8001970 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576a:	d901      	bls.n	8005770 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e007      	b.n	8005780 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_PWREx_ConfigSupply+0xb0>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577c:	d1ee      	bne.n	800575c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	58024800 	.word	0x58024800

0800578c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08c      	sub	sp, #48	; 0x30
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e3d7      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80b3 	beq.w	8005912 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ac:	4b90      	ldr	r3, [pc, #576]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057b6:	4b8e      	ldr	r3, [pc, #568]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d007      	beq.n	80057d2 <HAL_RCC_OscConfig+0x46>
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b18      	cmp	r3, #24
 80057c6:	d112      	bne.n	80057ee <HAL_RCC_OscConfig+0x62>
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d10d      	bne.n	80057ee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d2:	4b87      	ldr	r3, [pc, #540]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8098 	beq.w	8005910 <HAL_RCC_OscConfig+0x184>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f040 8093 	bne.w	8005910 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e3af      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d106      	bne.n	8005806 <HAL_RCC_OscConfig+0x7a>
 80057f8:	4b7d      	ldr	r3, [pc, #500]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a7c      	ldr	r2, [pc, #496]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e058      	b.n	80058b8 <HAL_RCC_OscConfig+0x12c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d112      	bne.n	8005834 <HAL_RCC_OscConfig+0xa8>
 800580e:	4b78      	ldr	r3, [pc, #480]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a77      	ldr	r2, [pc, #476]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4b75      	ldr	r3, [pc, #468]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a74      	ldr	r2, [pc, #464]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005820:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b72      	ldr	r3, [pc, #456]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a71      	ldr	r2, [pc, #452]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800582c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e041      	b.n	80058b8 <HAL_RCC_OscConfig+0x12c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583c:	d112      	bne.n	8005864 <HAL_RCC_OscConfig+0xd8>
 800583e:	4b6c      	ldr	r3, [pc, #432]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a6b      	ldr	r2, [pc, #428]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b69      	ldr	r3, [pc, #420]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a68      	ldr	r2, [pc, #416]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005850:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	4b66      	ldr	r3, [pc, #408]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a65      	ldr	r2, [pc, #404]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e029      	b.n	80058b8 <HAL_RCC_OscConfig+0x12c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800586c:	d112      	bne.n	8005894 <HAL_RCC_OscConfig+0x108>
 800586e:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5f      	ldr	r2, [pc, #380]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	4b5d      	ldr	r3, [pc, #372]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	4b5a      	ldr	r3, [pc, #360]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a59      	ldr	r2, [pc, #356]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e011      	b.n	80058b8 <HAL_RCC_OscConfig+0x12c>
 8005894:	4b56      	ldr	r3, [pc, #344]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a55      	ldr	r2, [pc, #340]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800589a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80058a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4f      	ldr	r2, [pc, #316]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80058b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80058b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d013      	beq.n	80058e8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fc f856 	bl	8001970 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fc f852 	bl	8001970 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e339      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058da:	4b45      	ldr	r3, [pc, #276]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x13c>
 80058e6:	e014      	b.n	8005912 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fc f842 	bl	8001970 <HAL_GetTick>
 80058ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fc f83e 	bl	8001970 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e325      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005902:	4b3b      	ldr	r3, [pc, #236]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x164>
 800590e:	e000      	b.n	8005912 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d070      	beq.n	8005a00 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800591e:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005926:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005928:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_RCC_OscConfig+0x1b8>
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2b18      	cmp	r3, #24
 8005938:	d11b      	bne.n	8005972 <HAL_RCC_OscConfig+0x1e6>
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d116      	bne.n	8005972 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_RCC_OscConfig+0x1d0>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e2f8      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595c:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	4921      	ldr	r1, [pc, #132]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005970:	e046      	b.n	8005a00 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d026      	beq.n	80059c8 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 0219 	bic.w	r2, r3, #25
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	491a      	ldr	r1, [pc, #104]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fb fff0 	bl	8001970 <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005994:	f7fb ffec 	bl	8001970 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e2d3      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	490b      	ldr	r1, [pc, #44]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	604b      	str	r3, [r1, #4]
 80059c6:	e01b      	b.n	8005a00 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <HAL_RCC_OscConfig+0x264>)
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fb ffcc 	bl	8001970 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fb ffc8 	bl	8001970 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d904      	bls.n	80059f4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e2af      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
 80059ee:	bf00      	nop
 80059f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059f4:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ed      	bne.n	80059dc <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d06a      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0c:	4b93      	ldr	r3, [pc, #588]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a14:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a16:	4b91      	ldr	r3, [pc, #580]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d007      	beq.n	8005a32 <HAL_RCC_OscConfig+0x2a6>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b18      	cmp	r3, #24
 8005a26:	d11b      	bne.n	8005a60 <HAL_RCC_OscConfig+0x2d4>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d116      	bne.n	8005a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a32:	4b8a      	ldr	r3, [pc, #552]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_RCC_OscConfig+0x2be>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d001      	beq.n	8005a4a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e281      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a4a:	4b84      	ldr	r3, [pc, #528]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	4980      	ldr	r1, [pc, #512]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a5e:	e040      	b.n	8005ae2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d023      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a68:	4b7c      	ldr	r3, [pc, #496]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a7b      	ldr	r2, [pc, #492]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fb ff7c 	bl	8001970 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a7c:	f7fb ff78 	bl	8001970 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e25f      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a8e:	4b73      	ldr	r3, [pc, #460]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a9a:	4b70      	ldr	r3, [pc, #448]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	496c      	ldr	r1, [pc, #432]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60cb      	str	r3, [r1, #12]
 8005aae:	e018      	b.n	8005ae2 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ab0:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fb ff58 	bl	8001970 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ac4:	f7fb ff54 	bl	8001970 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e23b      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ad6:	4b61      	ldr	r3, [pc, #388]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d036      	beq.n	8005b5c <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d019      	beq.n	8005b2a <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af6:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afa:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005afc:	f043 0301 	orr.w	r3, r3, #1
 8005b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b02:	f7fb ff35 	bl	8001970 <HAL_GetTick>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b0a:	f7fb ff31 	bl	8001970 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e218      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b1c:	4b4f      	ldr	r3, [pc, #316]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x37e>
 8005b28:	e018      	b.n	8005b5c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b2a:	4b4c      	ldr	r3, [pc, #304]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2e:	4a4b      	ldr	r2, [pc, #300]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b36:	f7fb ff1b 	bl	8001970 <HAL_GetTick>
 8005b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b3e:	f7fb ff17 	bl	8001970 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e1fe      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b50:	4b42      	ldr	r3, [pc, #264]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f0      	bne.n	8005b3e <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d036      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d019      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b70:	4b3a      	ldr	r3, [pc, #232]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a39      	ldr	r2, [pc, #228]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b7c:	f7fb fef8 	bl	8001970 <HAL_GetTick>
 8005b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b84:	f7fb fef4 	bl	8001970 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e1db      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b96:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x3f8>
 8005ba2:	e018      	b.n	8005bd6 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ba4:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bb0:	f7fb fede 	bl	8001970 <HAL_GetTick>
 8005bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005bb8:	f7fb feda 	bl	8001970 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e1c1      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f0      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80af 	beq.w	8005d42 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005be4:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <HAL_RCC_OscConfig+0x4d4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <HAL_RCC_OscConfig+0x4d4>)
 8005bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bf0:	f7fb febe 	bl	8001970 <HAL_GetTick>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bf8:	f7fb feba 	bl	8001970 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e1a1      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <HAL_RCC_OscConfig+0x4d4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4a0>
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	4a0e      	ldr	r2, [pc, #56]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2a:	e05b      	b.n	8005ce4 <HAL_RCC_OscConfig+0x558>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d117      	bne.n	8005c64 <HAL_RCC_OscConfig+0x4d8>
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	4a02      	ldr	r2, [pc, #8]	; (8005c5c <HAL_RCC_OscConfig+0x4d0>)
 8005c52:	f023 0304 	bic.w	r3, r3, #4
 8005c56:	6713      	str	r3, [r2, #112]	; 0x70
 8005c58:	e044      	b.n	8005ce4 <HAL_RCC_OscConfig+0x558>
 8005c5a:	bf00      	nop
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	58024800 	.word	0x58024800
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d112      	bne.n	8005c92 <HAL_RCC_OscConfig+0x506>
 8005c6c:	4b95      	ldr	r3, [pc, #596]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a94      	ldr	r2, [pc, #592]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c72:	f043 0304 	orr.w	r3, r3, #4
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a91      	ldr	r2, [pc, #580]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
 8005c84:	4b8f      	ldr	r3, [pc, #572]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a8e      	ldr	r2, [pc, #568]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c90:	e028      	b.n	8005ce4 <HAL_RCC_OscConfig+0x558>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b85      	cmp	r3, #133	; 0x85
 8005c98:	d112      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x534>
 8005c9a:	4b8a      	ldr	r3, [pc, #552]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	4a89      	ldr	r2, [pc, #548]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca6:	4b87      	ldr	r3, [pc, #540]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	4a86      	ldr	r2, [pc, #536]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb2:	4b84      	ldr	r3, [pc, #528]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a83      	ldr	r2, [pc, #524]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbe:	e011      	b.n	8005ce4 <HAL_RCC_OscConfig+0x558>
 8005cc0:	4b80      	ldr	r3, [pc, #512]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	4a7f      	ldr	r2, [pc, #508]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ccc:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd0:	4a7c      	ldr	r2, [pc, #496]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cd2:	f023 0304 	bic.w	r3, r3, #4
 8005cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd8:	4b7a      	ldr	r3, [pc, #488]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cdc:	4a79      	ldr	r2, [pc, #484]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d015      	beq.n	8005d18 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fb fe40 	bl	8001970 <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fb fe3c 	bl	8001970 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e121      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d0a:	4b6e      	ldr	r3, [pc, #440]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ee      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x568>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fb fe2a 	bl	8001970 <HAL_GetTick>
 8005d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d20:	f7fb fe26 	bl	8001970 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e10b      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d36:	4b63      	ldr	r3, [pc, #396]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ee      	bne.n	8005d20 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8100 	beq.w	8005f4c <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d4c:	4b5d      	ldr	r3, [pc, #372]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d54:	2b18      	cmp	r3, #24
 8005d56:	f000 80bb 	beq.w	8005ed0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	f040 8095 	bne.w	8005e8e <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d64:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a56      	ldr	r2, [pc, #344]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fb fdfe 	bl	8001970 <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d78:	f7fb fdfa 	bl	8001970 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e0e1      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d8a:	4b4e      	ldr	r3, [pc, #312]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d96:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9a:	4b4b      	ldr	r3, [pc, #300]	; (8005ec8 <HAL_RCC_OscConfig+0x73c>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005da6:	0112      	lsls	r2, r2, #4
 8005da8:	430a      	orrs	r2, r1
 8005daa:	4946      	ldr	r1, [pc, #280]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	628b      	str	r3, [r1, #40]	; 0x28
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	3b01      	subs	r3, #1
 8005db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	025b      	lsls	r3, r3, #9
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	061b      	lsls	r3, r3, #24
 8005ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005de0:	4938      	ldr	r1, [pc, #224]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005de6:	4b37      	ldr	r3, [pc, #220]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	4a36      	ldr	r2, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005df2:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	4b35      	ldr	r3, [pc, #212]	; (8005ecc <HAL_RCC_OscConfig+0x740>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005dfe:	00d2      	lsls	r2, r2, #3
 8005e00:	4930      	ldr	r1, [pc, #192]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e06:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f023 020c 	bic.w	r2, r3, #12
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	492c      	ldr	r1, [pc, #176]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e18:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	f023 0202 	bic.w	r2, r3, #2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	4927      	ldr	r1, [pc, #156]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e2a:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	4a25      	ldr	r2, [pc, #148]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e36:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e42:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fb fd83 	bl	8001970 <HAL_GetTick>
 8005e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6e:	f7fb fd7f 	bl	8001970 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e066      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x6e2>
 8005e8c:	e05e      	b.n	8005f4c <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fb fd69 	bl	8001970 <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea2:	f7fb fd65 	bl	8001970 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e04c      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eb4:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <HAL_RCC_OscConfig+0x738>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x716>
 8005ec0:	e044      	b.n	8005f4c <HAL_RCC_OscConfig+0x7c0>
 8005ec2:	bf00      	nop
 8005ec4:	58024400 	.word	0x58024400
 8005ec8:	fffffc0c 	.word	0xfffffc0c
 8005ecc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ed0:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <HAL_RCC_OscConfig+0x7cc>)
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <HAL_RCC_OscConfig+0x7cc>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d031      	beq.n	8005f48 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f003 0203 	and.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d12a      	bne.n	8005f48 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d122      	bne.n	8005f48 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d11a      	bne.n	8005f48 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	0a5b      	lsrs	r3, r3, #9
 8005f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d111      	bne.n	8005f48 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d108      	bne.n	8005f48 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3730      	adds	r7, #48	; 0x30
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	58024400 	.word	0x58024400

08005f5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e19c      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f70:	4b8a      	ldr	r3, [pc, #552]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d910      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7e:	4b87      	ldr	r3, [pc, #540]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f023 020f 	bic.w	r2, r3, #15
 8005f86:	4985      	ldr	r1, [pc, #532]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b83      	ldr	r3, [pc, #524]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e184      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	4b7b      	ldr	r3, [pc, #492]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d908      	bls.n	8005fce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fbc:	4b78      	ldr	r3, [pc, #480]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	4975      	ldr	r1, [pc, #468]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	4b70      	ldr	r3, [pc, #448]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d908      	bls.n	8005ffc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fea:	4b6d      	ldr	r3, [pc, #436]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	496a      	ldr	r1, [pc, #424]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d010      	beq.n	800602a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	4b64      	ldr	r3, [pc, #400]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006014:	429a      	cmp	r2, r3
 8006016:	d908      	bls.n	800602a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006018:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	495e      	ldr	r1, [pc, #376]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006026:	4313      	orrs	r3, r2
 8006028:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d010      	beq.n	8006058 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	4b59      	ldr	r3, [pc, #356]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006042:	429a      	cmp	r2, r3
 8006044:	d908      	bls.n	8006058 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006046:	4b56      	ldr	r3, [pc, #344]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4953      	ldr	r1, [pc, #332]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006054:	4313      	orrs	r3, r2
 8006056:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d010      	beq.n	8006086 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	4b4d      	ldr	r3, [pc, #308]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	429a      	cmp	r2, r3
 8006072:	d908      	bls.n	8006086 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006074:	4b4a      	ldr	r3, [pc, #296]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f023 020f 	bic.w	r2, r3, #15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4947      	ldr	r1, [pc, #284]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006082:	4313      	orrs	r3, r2
 8006084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d055      	beq.n	800613e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006092:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	4940      	ldr	r1, [pc, #256]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060ac:	4b3c      	ldr	r3, [pc, #240]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d121      	bne.n	80060fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0f6      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d107      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060c4:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d115      	bne.n	80060fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0ea      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d107      	bne.n	80060ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060dc:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0de      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ec:	4b2c      	ldr	r3, [pc, #176]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0d6      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060fc:	4b28      	ldr	r3, [pc, #160]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f023 0207 	bic.w	r2, r3, #7
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4925      	ldr	r1, [pc, #148]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800610a:	4313      	orrs	r3, r2
 800610c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610e:	f7fb fc2f 	bl	8001970 <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006114:	e00a      	b.n	800612c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006116:	f7fb fc2b 	bl	8001970 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f241 3288 	movw	r2, #5000	; 0x1388
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0be      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612c:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	429a      	cmp	r2, r3
 800613c:	d1eb      	bne.n	8006116 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d010      	beq.n	800616c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	429a      	cmp	r2, r3
 8006158:	d208      	bcs.n	800616c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	490e      	ldr	r1, [pc, #56]	; (80061a0 <HAL_RCC_ClockConfig+0x244>)
 8006168:	4313      	orrs	r3, r2
 800616a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d214      	bcs.n	80061a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 020f 	bic.w	r2, r3, #15
 8006182:	4906      	ldr	r1, [pc, #24]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	4313      	orrs	r3, r2
 8006188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800618a:	4b04      	ldr	r3, [pc, #16]	; (800619c <HAL_RCC_ClockConfig+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d005      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e086      	b.n	80062aa <HAL_RCC_ClockConfig+0x34e>
 800619c:	52002000 	.word	0x52002000
 80061a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d010      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	4b3f      	ldr	r3, [pc, #252]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061bc:	429a      	cmp	r2, r3
 80061be:	d208      	bcs.n	80061d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061c0:	4b3c      	ldr	r3, [pc, #240]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4939      	ldr	r1, [pc, #228]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d010      	beq.n	8006200 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	4b34      	ldr	r3, [pc, #208]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d208      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061ee:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	492e      	ldr	r1, [pc, #184]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006218:	429a      	cmp	r2, r3
 800621a:	d208      	bcs.n	800622e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	4922      	ldr	r1, [pc, #136]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 800622a:	4313      	orrs	r3, r2
 800622c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d010      	beq.n	800625c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006246:	429a      	cmp	r2, r3
 8006248:	d208      	bcs.n	800625c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4917      	ldr	r1, [pc, #92]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 8006258:	4313      	orrs	r3, r2
 800625a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800625c:	f000 f834 	bl	80062c8 <HAL_RCC_GetSysClockFreq>
 8006260:	4601      	mov	r1, r0
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <HAL_RCC_ClockConfig+0x35c>)
 800626e:	5cd3      	ldrb	r3, [r2, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	fa21 f303 	lsr.w	r3, r1, r3
 8006278:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800627a:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <HAL_RCC_ClockConfig+0x358>)
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	4a0d      	ldr	r2, [pc, #52]	; (80062b8 <HAL_RCC_ClockConfig+0x35c>)
 8006284:	5cd3      	ldrb	r3, [r2, r3]
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <HAL_RCC_ClockConfig+0x360>)
 8006292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006294:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <HAL_RCC_ClockConfig+0x364>)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_RCC_ClockConfig+0x368>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fb fb1c 	bl	80018dc <HAL_InitTick>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	58024400 	.word	0x58024400
 80062b8:	0800b92c 	.word	0x0800b92c
 80062bc:	24000004 	.word	0x24000004
 80062c0:	24000000 	.word	0x24000000
 80062c4:	24000008 	.word	0x24000008

080062c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b089      	sub	sp, #36	; 0x24
 80062cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ce:	4baf      	ldr	r3, [pc, #700]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d6:	2b18      	cmp	r3, #24
 80062d8:	f200 814e 	bhi.w	8006578 <HAL_RCC_GetSysClockFreq+0x2b0>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	08006349 	.word	0x08006349
 80062e8:	08006579 	.word	0x08006579
 80062ec:	08006579 	.word	0x08006579
 80062f0:	08006579 	.word	0x08006579
 80062f4:	08006579 	.word	0x08006579
 80062f8:	08006579 	.word	0x08006579
 80062fc:	08006579 	.word	0x08006579
 8006300:	08006579 	.word	0x08006579
 8006304:	0800636f 	.word	0x0800636f
 8006308:	08006579 	.word	0x08006579
 800630c:	08006579 	.word	0x08006579
 8006310:	08006579 	.word	0x08006579
 8006314:	08006579 	.word	0x08006579
 8006318:	08006579 	.word	0x08006579
 800631c:	08006579 	.word	0x08006579
 8006320:	08006579 	.word	0x08006579
 8006324:	08006375 	.word	0x08006375
 8006328:	08006579 	.word	0x08006579
 800632c:	08006579 	.word	0x08006579
 8006330:	08006579 	.word	0x08006579
 8006334:	08006579 	.word	0x08006579
 8006338:	08006579 	.word	0x08006579
 800633c:	08006579 	.word	0x08006579
 8006340:	08006579 	.word	0x08006579
 8006344:	0800637b 	.word	0x0800637b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006348:	4b90      	ldr	r3, [pc, #576]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d009      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006354:	4b8d      	ldr	r3, [pc, #564]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	08db      	lsrs	r3, r3, #3
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	4a8c      	ldr	r2, [pc, #560]	; (8006590 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006366:	e10a      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006368:	4b89      	ldr	r3, [pc, #548]	; (8006590 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800636a:	61bb      	str	r3, [r7, #24]
    break;
 800636c:	e107      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800636e:	4b89      	ldr	r3, [pc, #548]	; (8006594 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006370:	61bb      	str	r3, [r7, #24]
    break;
 8006372:	e104      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006374:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006376:	61bb      	str	r3, [r7, #24]
    break;
 8006378:	e101      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800637a:	4b84      	ldr	r3, [pc, #528]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006384:	4b81      	ldr	r3, [pc, #516]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800638e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006390:	4b7e      	ldr	r3, [pc, #504]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800639a:	4b7c      	ldr	r3, [pc, #496]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80da 	beq.w	8006572 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d05a      	beq.n	800647a <HAL_RCC_GetSysClockFreq+0x1b2>
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d302      	bcc.n	80063ce <HAL_RCC_GetSysClockFreq+0x106>
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d078      	beq.n	80064be <HAL_RCC_GetSysClockFreq+0x1f6>
 80063cc:	e099      	b.n	8006502 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ce:	4b6f      	ldr	r3, [pc, #444]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d02d      	beq.n	8006436 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063da:	4b6c      	ldr	r3, [pc, #432]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	4a6a      	ldr	r2, [pc, #424]	; (8006590 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006404:	4b61      	ldr	r3, [pc, #388]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006414:	ed97 6a02 	vldr	s12, [r7, #8]
 8006418:	eddf 5a60 	vldr	s11, [pc, #384]	; 800659c <HAL_RCC_GetSysClockFreq+0x2d4>
 800641c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006430:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006434:	e087      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	ee07 3a90 	vmov	s15, r3
 800643c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006440:	eddf 6a57 	vldr	s13, [pc, #348]	; 80065a0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006448:	4b50      	ldr	r3, [pc, #320]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006458:	ed97 6a02 	vldr	s12, [r7, #8]
 800645c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800659c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800646c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006474:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006478:	e065      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006484:	eddf 6a47 	vldr	s13, [pc, #284]	; 80065a4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648c:	4b3f      	ldr	r3, [pc, #252]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649c:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800659c <HAL_RCC_GetSysClockFreq+0x2d4>
 80064a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064bc:	e043      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80065a8 <HAL_RCC_GetSysClockFreq+0x2e0>
 80064cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d0:	4b2e      	ldr	r3, [pc, #184]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064e4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800659c <HAL_RCC_GetSysClockFreq+0x2d4>
 80064e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006500:	e021      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80065a4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006524:	ed97 6a02 	vldr	s12, [r7, #8]
 8006528:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800659c <HAL_RCC_GetSysClockFreq+0x2d4>
 800652c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006540:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006544:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006546:	4b11      	ldr	r3, [pc, #68]	; (800658c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	0a5b      	lsrs	r3, r3, #9
 800654c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006550:	3301      	adds	r3, #1
 8006552:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800655e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656a:	ee17 3a90 	vmov	r3, s15
 800656e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006570:	e005      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
    break;
 8006576:	e002      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800657a:	61bb      	str	r3, [r7, #24]
    break;
 800657c:	bf00      	nop
  }

  return sysclockfreq;
 800657e:	69bb      	ldr	r3, [r7, #24]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3724      	adds	r7, #36	; 0x24
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	58024400 	.word	0x58024400
 8006590:	03d09000 	.word	0x03d09000
 8006594:	003d0900 	.word	0x003d0900
 8006598:	007a1200 	.word	0x007a1200
 800659c:	46000000 	.word	0x46000000
 80065a0:	4c742400 	.word	0x4c742400
 80065a4:	4a742400 	.word	0x4a742400
 80065a8:	4af42400 	.word	0x4af42400

080065ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80065b2:	f7ff fe89 	bl	80062c8 <HAL_RCC_GetSysClockFreq>
 80065b6:	4601      	mov	r1, r0
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <HAL_RCC_GetHCLKFreq+0x50>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	0a1b      	lsrs	r3, r3, #8
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <HAL_RCC_GetHCLKFreq+0x54>)
 80065c4:	5cd3      	ldrb	r3, [r2, r3]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	fa21 f303 	lsr.w	r3, r1, r3
 80065ce:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCC_GetHCLKFreq+0x50>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <HAL_RCC_GetHCLKFreq+0x54>)
 80065da:	5cd3      	ldrb	r3, [r2, r3]
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	fa22 f303 	lsr.w	r3, r2, r3
 80065e6:	4a07      	ldr	r2, [pc, #28]	; (8006604 <HAL_RCC_GetHCLKFreq+0x58>)
 80065e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <HAL_RCC_GetHCLKFreq+0x5c>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <HAL_RCC_GetHCLKFreq+0x58>)
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	58024400 	.word	0x58024400
 8006600:	0800b92c 	.word	0x0800b92c
 8006604:	24000004 	.word	0x24000004
 8006608:	24000000 	.word	0x24000000

0800660c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006610:	f7ff ffcc 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 8006614:	4601      	mov	r1, r0
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	4a04      	ldr	r2, [pc, #16]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006622:	5cd3      	ldrb	r3, [r2, r3]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	58024400 	.word	0x58024400
 8006634:	0800b92c 	.word	0x0800b92c

08006638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800663c:	f7ff ffb6 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 8006640:	4601      	mov	r1, r0
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800664e:	5cd3      	ldrb	r3, [r2, r3]
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	58024400 	.word	0x58024400
 8006660:	0800b92c 	.word	0x0800b92c

08006664 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006670:	2300      	movs	r3, #0
 8006672:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006688:	d013      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800668a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800668e:	d802      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006694:	e01f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800669a:	d013      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800669c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066a0:	d01c      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80066a2:	e018      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a4:	4bad      	ldr	r3, [pc, #692]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4aac      	ldr	r2, [pc, #688]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066b0:	e015      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	2102      	movs	r1, #2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 fca7 	bl	800800c <RCCEx_PLL2_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066c2:	e00c      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3324      	adds	r3, #36	; 0x24
 80066c8:	2102      	movs	r1, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fd50 	bl	8008170 <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
      break;
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80066dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066e4:	4b9d      	ldr	r3, [pc, #628]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f0:	499a      	ldr	r1, [pc, #616]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	650b      	str	r3, [r1, #80]	; 0x50
 80066f6:	e001      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d03d      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	2b04      	cmp	r3, #4
 800670e:	d826      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	0800672d 	.word	0x0800672d
 800671c:	0800673b 	.word	0x0800673b
 8006720:	0800674d 	.word	0x0800674d
 8006724:	08006765 	.word	0x08006765
 8006728:	08006765 	.word	0x08006765
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800672c:	4b8b      	ldr	r3, [pc, #556]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4a8a      	ldr	r2, [pc, #552]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006738:	e015      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3304      	adds	r3, #4
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f001 fc63 	bl	800800c <RCCEx_PLL2_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800674a:	e00c      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3324      	adds	r3, #36	; 0x24
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fd0c 	bl	8008170 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	75fb      	strb	r3, [r7, #23]
      break;
 8006762:	e000      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800676c:	4b7b      	ldr	r3, [pc, #492]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800676e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006770:	f023 0207 	bic.w	r2, r3, #7
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	4978      	ldr	r1, [pc, #480]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800677a:	4313      	orrs	r3, r2
 800677c:	650b      	str	r3, [r1, #80]	; 0x50
 800677e:	e001      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800678c:	2b00      	cmp	r3, #0
 800678e:	d043      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006794:	2b80      	cmp	r3, #128	; 0x80
 8006796:	d01f      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d804      	bhi.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d010      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80067a4:	e021      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	d021      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80067b0:	d020      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067b2:	2bc0      	cmp	r3, #192	; 0xc0
 80067b4:	d020      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80067b6:	e018      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b8:	4b68      	ldr	r3, [pc, #416]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4a67      	ldr	r2, [pc, #412]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80067c4:	e019      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3304      	adds	r3, #4
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fc1d 	bl	800800c <RCCEx_PLL2_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80067d6:	e010      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3324      	adds	r3, #36	; 0x24
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fcc6 	bl	8008170 <RCCEx_PLL3_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80067e8:	e007      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
      break;
 80067ee:	e004      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80067f0:	bf00      	nop
 80067f2:	e002      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80067f4:	bf00      	nop
 80067f6:	e000      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80067f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006800:	4b56      	ldr	r3, [pc, #344]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680c:	4953      	ldr	r1, [pc, #332]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800680e:	4313      	orrs	r3, r2
 8006810:	650b      	str	r3, [r1, #80]	; 0x50
 8006812:	e001      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d047      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682c:	d022      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d805      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683c:	d011      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800683e:	e022      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006844:	d022      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006846:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800684a:	d021      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800684c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006850:	d020      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006852:	e018      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006854:	4b41      	ldr	r3, [pc, #260]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	4a40      	ldr	r2, [pc, #256]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800685a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006860:	e019      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f001 fbcf 	bl	800800c <RCCEx_PLL2_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006872:	e010      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fc78 	bl	8008170 <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006884:	e007      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	75fb      	strb	r3, [r7, #23]
      break;
 800688a:	e004      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 800688c:	bf00      	nop
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800689c:	4b2f      	ldr	r3, [pc, #188]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	492c      	ldr	r1, [pc, #176]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	650b      	str	r3, [r1, #80]	; 0x50
 80068ae:	e001      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d032      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d009      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d802      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d018      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80068d0:	e014      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d009      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80068d6:	2b30      	cmp	r3, #48	; 0x30
 80068d8:	d015      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 80068da:	e00f      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068dc:	4b1f      	ldr	r3, [pc, #124]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	4a1e      	ldr	r2, [pc, #120]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80068e8:	e00e      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	2102      	movs	r1, #2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 fb8b 	bl	800800c <RCCEx_PLL2_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80068fa:	e005      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006900:	e002      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691a:	4910      	ldr	r1, [pc, #64]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800691c:	4313      	orrs	r3, r2
 800691e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006920:	e001      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d044      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693a:	d021      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800693c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006940:	d805      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694a:	d010      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800694c:	e021      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800694e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006952:	d021      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006958:	d020      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x338>
 800695a:	e01a      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800695c:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006960:	4ba6      	ldr	r3, [pc, #664]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4aa5      	ldr	r2, [pc, #660]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800696c:	e017      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f001 fb49 	bl	800800c <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800697e:	e00e      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fbf2 	bl	8008170 <RCCEx_PLL3_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006990:	e005      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
      break;
 8006996:	e002      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006998:	bf00      	nop
 800699a:	e000      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 800699c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069a4:	4b95      	ldr	r3, [pc, #596]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80069a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b0:	4992      	ldr	r1, [pc, #584]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	650b      	str	r3, [r1, #80]	; 0x50
 80069b6:	e001      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d042      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d0:	d01b      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80069d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d6:	d805      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d022      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80069e2:	e01b      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80069e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069e8:	d01d      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80069ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ee:	d01c      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80069f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069f4:	d01b      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80069f6:	e011      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3304      	adds	r3, #4
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 fb04 	bl	800800c <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a08:	e012      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3324      	adds	r3, #36	; 0x24
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fbad 	bl	8008170 <RCCEx_PLL3_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a1a:	e009      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	e006      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006a22:	bf00      	nop
 8006a24:	e004      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006a26:	bf00      	nop
 8006a28:	e002      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e000      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a36:	4b71      	ldr	r3, [pc, #452]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a42:	496e      	ldr	r1, [pc, #440]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	650b      	str	r3, [r1, #80]	; 0x50
 8006a48:	e001      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d049      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a64:	d02a      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6a:	d808      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a70:	d00f      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a76:	d015      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d021      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006a7c:	e01b      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a82:	d01f      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006a84:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006a88:	d01e      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d01d      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006a90:	e011      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fab7 	bl	800800c <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006aa2:	e014      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fb60 	bl	8008170 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ab4:	e00b      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aba:	e008      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006abc:	bf00      	nop
 8006abe:	e006      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e004      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006ac4:	bf00      	nop
 8006ac6:	e002      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ad4:	4b49      	ldr	r3, [pc, #292]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ae2:	4946      	ldr	r1, [pc, #280]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	658b      	str	r3, [r1, #88]	; 0x58
 8006ae8:	e001      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d02d      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b02:	d005      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b08:	d009      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d013      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b0e:	e00f      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b10:	4b3a      	ldr	r3, [pc, #232]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	4a39      	ldr	r2, [pc, #228]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b1c:	e00c      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2101      	movs	r1, #1
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 fa71 	bl	800800c <RCCEx_PLL2_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	75fb      	strb	r3, [r7, #23]
      break;
 8006b34:	e000      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b3e:	4b2f      	ldr	r3, [pc, #188]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4a:	492c      	ldr	r1, [pc, #176]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	650b      	str	r3, [r1, #80]	; 0x50
 8006b50:	e001      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d031      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d81a      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006ba7 	.word	0x08006ba7
 8006b74:	08006b81 	.word	0x08006b81
 8006b78:	08006b8f 	.word	0x08006b8f
 8006b7c:	08006ba7 	.word	0x08006ba7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b80:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b8c:	e00c      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3304      	adds	r3, #4
 8006b92:	2102      	movs	r1, #2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fa39 	bl	800800c <RCCEx_PLL2_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	f023 0203 	bic.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	4910      	ldr	r1, [pc, #64]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bc0:	e001      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 808a 	beq.w	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006be0:	f7fa fec6 	bl	8001970 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006be6:	e00d      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be8:	f7fa fec2 	bl	8001970 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d906      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8006bfa:	e009      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c04:	4bba      	ldr	r3, [pc, #744]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0eb      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d166      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c16:	4bb7      	ldr	r3, [pc, #732]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c20:	4053      	eors	r3, r2
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d013      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c2a:	4bb2      	ldr	r3, [pc, #712]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c34:	4baf      	ldr	r3, [pc, #700]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c38:	4aae      	ldr	r2, [pc, #696]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c40:	4bac      	ldr	r3, [pc, #688]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	4aab      	ldr	r2, [pc, #684]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c4c:	4aa9      	ldr	r2, [pc, #676]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5c:	d115      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5e:	f7fa fe87 	bl	8001970 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c64:	e00b      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c66:	f7fa fe83 	bl	8001970 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d902      	bls.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c7c:	e005      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c7e:	4b9d      	ldr	r3, [pc, #628]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0ed      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d126      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9e:	d10d      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006ca0:	4b94      	ldr	r3, [pc, #592]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cae:	0919      	lsrs	r1, r3, #4
 8006cb0:	4b91      	ldr	r3, [pc, #580]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	498f      	ldr	r1, [pc, #572]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]
 8006cba:	e005      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006cbc:	4b8d      	ldr	r3, [pc, #564]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	4a8c      	ldr	r2, [pc, #560]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cc6:	6113      	str	r3, [r2, #16]
 8006cc8:	4b8a      	ldr	r3, [pc, #552]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd6:	4987      	ldr	r1, [pc, #540]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	670b      	str	r3, [r1, #112]	; 0x70
 8006cdc:	e004      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	75bb      	strb	r3, [r7, #22]
 8006ce2:	e001      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d07f      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfa:	2b28      	cmp	r3, #40	; 0x28
 8006cfc:	d866      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006dd3 	.word	0x08006dd3
 8006d08:	08006dcd 	.word	0x08006dcd
 8006d0c:	08006dcd 	.word	0x08006dcd
 8006d10:	08006dcd 	.word	0x08006dcd
 8006d14:	08006dcd 	.word	0x08006dcd
 8006d18:	08006dcd 	.word	0x08006dcd
 8006d1c:	08006dcd 	.word	0x08006dcd
 8006d20:	08006dcd 	.word	0x08006dcd
 8006d24:	08006da9 	.word	0x08006da9
 8006d28:	08006dcd 	.word	0x08006dcd
 8006d2c:	08006dcd 	.word	0x08006dcd
 8006d30:	08006dcd 	.word	0x08006dcd
 8006d34:	08006dcd 	.word	0x08006dcd
 8006d38:	08006dcd 	.word	0x08006dcd
 8006d3c:	08006dcd 	.word	0x08006dcd
 8006d40:	08006dcd 	.word	0x08006dcd
 8006d44:	08006dbb 	.word	0x08006dbb
 8006d48:	08006dcd 	.word	0x08006dcd
 8006d4c:	08006dcd 	.word	0x08006dcd
 8006d50:	08006dcd 	.word	0x08006dcd
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006dcd 	.word	0x08006dcd
 8006d5c:	08006dcd 	.word	0x08006dcd
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006dd3 	.word	0x08006dd3
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dcd 	.word	0x08006dcd
 8006d70:	08006dcd 	.word	0x08006dcd
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006dcd 	.word	0x08006dcd
 8006d84:	08006dd3 	.word	0x08006dd3
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006dcd 	.word	0x08006dcd
 8006d94:	08006dcd 	.word	0x08006dcd
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	08006dd3 	.word	0x08006dd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	2101      	movs	r1, #1
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 f92c 	bl	800800c <RCCEx_PLL2_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006db8:	e00c      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3324      	adds	r3, #36	; 0x24
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f9d5 	bl	8008170 <RCCEx_PLL3_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006dca:	e003      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8006dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006dda:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de8:	4942      	ldr	r1, [pc, #264]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	654b      	str	r3, [r1, #84]	; 0x54
 8006dee:	e001      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d038      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	d821      	bhi.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e53 	.word	0x08006e53
 8006e14:	08006e29 	.word	0x08006e29
 8006e18:	08006e3b 	.word	0x08006e3b
 8006e1c:	08006e53 	.word	0x08006e53
 8006e20:	08006e53 	.word	0x08006e53
 8006e24:	08006e53 	.word	0x08006e53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 f8ec 	bl	800800c <RCCEx_PLL2_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e38:	e00c      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3324      	adds	r3, #36	; 0x24
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f995 	bl	8008170 <RCCEx_PLL3_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e4a:	e003      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8006e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e5a:	4b26      	ldr	r3, [pc, #152]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	f023 0207 	bic.w	r2, r3, #7
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e66:	4923      	ldr	r1, [pc, #140]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e6c:	e001      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d040      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	d821      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006ed3 	.word	0x08006ed3
 8006e94:	08006ea9 	.word	0x08006ea9
 8006e98:	08006ebb 	.word	0x08006ebb
 8006e9c:	08006ed3 	.word	0x08006ed3
 8006ea0:	08006ed3 	.word	0x08006ed3
 8006ea4:	08006ed3 	.word	0x08006ed3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	2101      	movs	r1, #1
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 f8ac 	bl	800800c <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006eb8:	e00c      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 f955 	bl	8008170 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8006ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d110      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eda:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	f023 0207 	bic.w	r2, r3, #7
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ee8:	4902      	ldr	r1, [pc, #8]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	658b      	str	r3, [r1, #88]	; 0x58
 8006eee:	e007      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006ef0:	58024800 	.word	0x58024800
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d044      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f16:	d01b      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1c:	d805      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d022      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8006f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f26:	d00a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006f28:	e01b      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2e:	d01d      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x908>
 8006f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f34:	d01c      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8006f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f3a:	d01b      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006f3c:	e011      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 f861 	bl	800800c <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f4e:	e012      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3324      	adds	r3, #36	; 0x24
 8006f54:	2102      	movs	r1, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f90a 	bl	8008170 <RCCEx_PLL3_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f60:	e009      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
      break;
 8006f66:	e006      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e004      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e002      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f7c:	4bb3      	ldr	r3, [pc, #716]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f8a:	49b0      	ldr	r1, [pc, #704]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f90:	e001      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d044      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fac:	d01b      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8006fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb2:	d805      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d022      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8006fbe:	e01b      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d01d      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8006fc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fca:	d01c      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8006fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd0:	d01b      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8006fd2:	e011      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f816 	bl	800800c <RCCEx_PLL2_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fe4:	e012      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3324      	adds	r3, #36	; 0x24
 8006fea:	2102      	movs	r1, #2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 f8bf 	bl	8008170 <RCCEx_PLL3_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ff6:	e009      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffc:	e006      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006ffe:	bf00      	nop
 8007000:	e004      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007002:	bf00      	nop
 8007004:	e002      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007006:	bf00      	nop
 8007008:	e000      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800700a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007012:	4b8e      	ldr	r3, [pc, #568]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007020:	498a      	ldr	r1, [pc, #552]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007022:	4313      	orrs	r3, r2
 8007024:	658b      	str	r3, [r1, #88]	; 0x58
 8007026:	e001      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d044      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800703e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007042:	d01b      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8007044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007048:	d805      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d022      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800704e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007054:	e01b      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705a:	d01d      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800705c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007060:	d01c      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8007062:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007066:	d01b      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8007068:	e011      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3304      	adds	r3, #4
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f000 ffcb 	bl	800800c <RCCEx_PLL2_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800707a:	e012      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3324      	adds	r3, #36	; 0x24
 8007080:	2102      	movs	r1, #2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f874 	bl	8008170 <RCCEx_PLL3_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800708c:	e009      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	75fb      	strb	r3, [r7, #23]
      break;
 8007092:	e006      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007094:	bf00      	nop
 8007096:	e004      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007098:	bf00      	nop
 800709a:	e002      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80070a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070a8:	4b68      	ldr	r3, [pc, #416]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070b6:	4965      	ldr	r1, [pc, #404]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	658b      	str	r3, [r1, #88]	; 0x58
 80070bc:	e001      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d8:	d10a      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	2102      	movs	r1, #2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f845 	bl	8008170 <RCCEx_PLL3_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070f0:	4b56      	ldr	r3, [pc, #344]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fe:	4953      	ldr	r1, [pc, #332]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007100:	4313      	orrs	r3, r2
 8007102:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711a:	d10a      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3324      	adds	r3, #36	; 0x24
 8007120:	2102      	movs	r1, #2
 8007122:	4618      	mov	r0, r3
 8007124:	f001 f824 	bl	8008170 <RCCEx_PLL3_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007132:	4b46      	ldr	r3, [pc, #280]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007140:	4942      	ldr	r1, [pc, #264]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007142:	4313      	orrs	r3, r2
 8007144:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d030      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715c:	d00d      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xb16>
 800715e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007162:	d016      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d111      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f000 ff4c 	bl	800800c <RCCEx_PLL2_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007178:	e00c      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3324      	adds	r3, #36	; 0x24
 800717e:	2102      	movs	r1, #2
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fff5 	bl	8008170 <RCCEx_PLL3_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800718a:	e003      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
      break;
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800719a:	4b2c      	ldr	r3, [pc, #176]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071a8:	4928      	ldr	r1, [pc, #160]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	658b      	str	r3, [r1, #88]	; 0x58
 80071ae:	e001      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d02f      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ca:	d00c      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80071cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071d0:	d015      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d6:	d10f      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d8:	4b1c      	ldr	r3, [pc, #112]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4a1b      	ldr	r2, [pc, #108]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3324      	adds	r3, #36	; 0x24
 80071ea:	2101      	movs	r1, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 ffbf 	bl	8008170 <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071f6:	e003      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	75fb      	strb	r3, [r7, #23]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 80071fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007206:	4b11      	ldr	r3, [pc, #68]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007214:	490d      	ldr	r1, [pc, #52]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007216:	4313      	orrs	r3, r2
 8007218:	654b      	str	r3, [r1, #84]	; 0x54
 800721a:	e001      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02c      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007238:	d00a      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800723a:	e012      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800723c:	4b03      	ldr	r3, [pc, #12]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4a02      	ldr	r2, [pc, #8]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007248:	e00e      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800724a:	bf00      	nop
 800724c:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	2102      	movs	r1, #2
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fed8 	bl	800800c <RCCEx_PLL2_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007260:	e002      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
      break;
 8007266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800726e:	4b56      	ldr	r3, [pc, #344]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727a:	4953      	ldr	r1, [pc, #332]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800727c:	4313      	orrs	r3, r2
 800727e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007280:	e001      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3324      	adds	r3, #36	; 0x24
 8007296:	2102      	movs	r1, #2
 8007298:	4618      	mov	r0, r3
 800729a:	f000 ff69 	bl	8008170 <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d031      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d00c      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d802      	bhi.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 80072ca:	e00d      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80072cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d0:	d00f      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 80072d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072d6:	d00e      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80072d8:	e006      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072da:	4b3b      	ldr	r3, [pc, #236]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	4a3a      	ldr	r2, [pc, #232]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80072e6:	e007      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
      break;
 80072ec:	e004      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80072ee:	bf00      	nop
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80072f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072fe:	4b32      	ldr	r3, [pc, #200]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730c:	492e      	ldr	r1, [pc, #184]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800730e:	4313      	orrs	r3, r2
 8007310:	654b      	str	r3, [r1, #84]	; 0x54
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007324:	4b28      	ldr	r3, [pc, #160]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007328:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007330:	4925      	ldr	r1, [pc, #148]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007332:	4313      	orrs	r3, r2
 8007334:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007342:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734e:	491e      	ldr	r1, [pc, #120]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007350:	4313      	orrs	r3, r2
 8007352:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007360:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007364:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736c:	4916      	ldr	r1, [pc, #88]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800736e:	4313      	orrs	r3, r2
 8007370:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007388:	6113      	str	r3, [r2, #16]
 800738a:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007394:	490c      	ldr	r1, [pc, #48]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007396:	4313      	orrs	r3, r2
 8007398:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da08      	bge.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ae:	4906      	ldr	r1, [pc, #24]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	58024400 	.word	0x58024400

080073cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b090      	sub	sp, #64	; 0x40
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073da:	d150      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80073dc:	4ba1      	ldr	r3, [pc, #644]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d844      	bhi.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007409 	.word	0x08007409
 80073f8:	08007419 	.word	0x08007419
 80073fc:	08007429 	.word	0x08007429
 8007400:	08007471 	.word	0x08007471
 8007404:	08007439 	.word	0x08007439
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fcb1 	bl	8007d74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007416:	e1ef      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007418:	f107 0318 	add.w	r3, r7, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fa11 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007426:	e1e7      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fb55 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007436:	e1df      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007438:	4b8a      	ldr	r3, [pc, #552]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800743a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007440:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007448:	4b87      	ldr	r3, [pc, #540]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800744c:	e1d4      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007454:	d102      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007456:	4b85      	ldr	r3, [pc, #532]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800745a:	e1cd      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007462:	d102      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007464:	4b82      	ldr	r3, [pc, #520]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007468:	e1c6      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746e:	e1c3      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007470:	4b80      	ldr	r3, [pc, #512]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007474:	e1c0      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800747a:	bf00      	nop
 800747c:	e1bc      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007484:	d14f      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007486:	4b77      	ldr	r3, [pc, #476]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800748e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d01c      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d804      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d00e      	beq.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80074a2:	e03c      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80074a4:	2bc0      	cmp	r3, #192	; 0xc0
 80074a6:	d037      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80074a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ac:	d018      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80074ae:	e036      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fc5d 	bl	8007d74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074be:	e19b      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c0:	f107 0318 	add.w	r3, r7, #24
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f9bd 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ce:	e193      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fb01 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074de:	e18b      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074e0:	4b60      	ldr	r3, [pc, #384]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80074f0:	4b5d      	ldr	r3, [pc, #372]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80074f4:	e180      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80074fe:	4b5b      	ldr	r3, [pc, #364]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007502:	e179      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800750a:	d102      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800750c:	4b58      	ldr	r3, [pc, #352]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007510:	e172      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007516:	e16f      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007518:	4b56      	ldr	r3, [pc, #344]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800751c:	e16c      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007522:	bf00      	nop
 8007524:	e168      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752c:	d153      	bne.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800752e:	4b4d      	ldr	r3, [pc, #308]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007532:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007536:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753e:	d01f      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007544:	d805      	bhi.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800754a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754e:	d00f      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007550:	e03d      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007552:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007556:	d037      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755c:	d018      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800755e:	e036      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fc05 	bl	8007d74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800756e:	e143      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007570:	f107 0318 	add.w	r3, r7, #24
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f965 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800757e:	e13b      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	4618      	mov	r0, r3
 8007586:	f000 faa9 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800758e:	e133      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007590:	4b34      	ldr	r3, [pc, #208]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007598:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	2b00      	cmp	r3, #0
 800759e:	d102      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80075a0:	4b31      	ldr	r3, [pc, #196]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 80075a4:	e128      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ac:	d102      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80075ae:	4b2f      	ldr	r3, [pc, #188]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b2:	e121      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ba:	d102      	bne.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80075bc:	4b2c      	ldr	r3, [pc, #176]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075c0:	e11a      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075c6:	e117      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075cc:	e114      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075d2:	bf00      	nop
 80075d4:	e110      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075dc:	d15d      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80075de:	4b21      	ldr	r3, [pc, #132]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80075e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ee:	d01f      	beq.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80075f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f4:	d805      	bhi.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fe:	d00f      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007600:	e047      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007606:	d041      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800760c:	d018      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800760e:	e040      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fbad 	bl	8007d74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800761e:	e0eb      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007620:	f107 0318 	add.w	r3, r7, #24
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f90d 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800762e:	e0e3      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007630:	f107 030c 	add.w	r3, r7, #12
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fa51 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800763e:	e0db      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007648:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007654:	e0d0      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765c:	d10c      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800765e:	4b03      	ldr	r3, [pc, #12]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007662:	e0c9      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007664:	58024400 	.word	0x58024400
 8007668:	03d09000 	.word	0x03d09000
 800766c:	003d0900 	.word	0x003d0900
 8007670:	007a1200 	.word	0x007a1200
 8007674:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767e:	d102      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007680:	4b60      	ldr	r3, [pc, #384]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007684:	e0b8      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768a:	e0b5      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800768c:	4b5e      	ldr	r3, [pc, #376]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007690:	e0b2      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007696:	bf00      	nop
 8007698:	e0ae      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076a0:	d13d      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80076a2:	4b5a      	ldr	r3, [pc, #360]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80076a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d00c      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80076b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b8:	d011      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d12b      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076be:	f107 0318 	add.w	r3, r7, #24
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 f8be 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076cc:	e094      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ce:	f107 030c 	add.w	r3, r7, #12
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fa02 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076dc:	e08c      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80076de:	4b4b      	ldr	r3, [pc, #300]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80076e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076e6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80076ee:	4b48      	ldr	r3, [pc, #288]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80076f2:	e081      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80076f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076fa:	d102      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 80076fc:	4b45      	ldr	r3, [pc, #276]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007700:	e07a      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007708:	d102      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 800770a:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	e073      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007714:	e070      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800771a:	bf00      	nop
 800771c:	e06c      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d11f      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007726:	4b39      	ldr	r3, [pc, #228]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800773a:	d008      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 800773c:	e00f      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800773e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fb16 	bl	8007d74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800774c:	e054      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774e:	f107 0318 	add.w	r3, r7, #24
 8007752:	4618      	mov	r0, r3
 8007754:	f000 f876 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800775c:	e04c      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007762:	bf00      	nop
 8007764:	e048      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800776c:	d142      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800776e:	4b27      	ldr	r3, [pc, #156]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777e:	d029      	beq.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007784:	d808      	bhi.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778a:	d013      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007790:	d018      	beq.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007796:	e029      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800779c:	d020      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800779e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80077a2:	d020      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a8:	d017      	beq.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80077aa:	e01f      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80077ac:	f000 f834 	bl	8007818 <HAL_RCCEx_GetD3PCLK1Freq>
 80077b0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80077b2:	e021      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b4:	f107 0318 	add.w	r3, r7, #24
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f843 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c2:	e019      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c4:	f107 030c 	add.w	r3, r7, #12
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 f987 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077d2:	e011      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80077d4:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077d8:	e00e      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80077da:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077de:	e00b      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077e4:	e008      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ea:	e005      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f0:	bf00      	nop
 80077f2:	e001      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3740      	adds	r7, #64	; 0x40
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	007a1200 	.word	0x007a1200
 8007808:	00bb8000 	.word	0x00bb8000
 800780c:	58024400 	.word	0x58024400
 8007810:	03d09000 	.word	0x03d09000
 8007814:	003d0900 	.word	0x003d0900

08007818 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800781c:	f7fe fec6 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 8007820:	4601      	mov	r1, r0
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	091b      	lsrs	r3, r3, #4
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	4a04      	ldr	r2, [pc, #16]	; (8007840 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800782e:	5cd3      	ldrb	r3, [r2, r3]
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd80      	pop	{r7, pc}
 800783c:	58024400 	.word	0x58024400
 8007840:	0800b92c 	.word	0x0800b92c

08007844 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800784c:	4b9d      	ldr	r3, [pc, #628]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007856:	4b9b      	ldr	r3, [pc, #620]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	0b1b      	lsrs	r3, r3, #12
 800785c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007860:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007862:	4b98      	ldr	r3, [pc, #608]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	091b      	lsrs	r3, r3, #4
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800786e:	4b95      	ldr	r3, [pc, #596]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007872:	08db      	lsrs	r3, r3, #3
 8007874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	fb02 f303 	mul.w	r3, r2, r3
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 810a 	beq.w	8007aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d05a      	beq.n	800794e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007898:	2b01      	cmp	r3, #1
 800789a:	d302      	bcc.n	80078a2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800789c:	2b02      	cmp	r3, #2
 800789e:	d078      	beq.n	8007992 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80078a0:	e099      	b.n	80079d6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a2:	4b88      	ldr	r3, [pc, #544]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d02d      	beq.n	800790a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078ae:	4b85      	ldr	r3, [pc, #532]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	08db      	lsrs	r3, r3, #3
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	4a83      	ldr	r2, [pc, #524]	; (8007ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80078ba:	fa22 f303 	lsr.w	r3, r2, r3
 80078be:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d8:	4b7a      	ldr	r3, [pc, #488]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80078f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007904:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007908:	e087      	b.n	8007a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007914:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791c:	4b69      	ldr	r3, [pc, #420]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007930:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800794c:	e065      	b.n	8007a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007958:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800795c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007960:	4b58      	ldr	r3, [pc, #352]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007970:	ed97 6a03 	vldr	s12, [r7, #12]
 8007974:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007990:	e043      	b.n	8007a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80079a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a4:	4b47      	ldr	r3, [pc, #284]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80079bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079d4:	e021      	b.n	8007a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80079e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e8:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f0:	ee07 3a90 	vmov	s15, r3
 80079f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a18:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007a1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	0a5b      	lsrs	r3, r3, #9
 8007a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a40:	ee17 2a90 	vmov	r2, s15
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007a48:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6e:	ee17 2a90 	vmov	r2, s15
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	0e1b      	lsrs	r3, r3, #24
 8007a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9c:	ee17 2a90 	vmov	r2, s15
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007aa4:	e008      	b.n	8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	609a      	str	r2, [r3, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	3724      	adds	r7, #36	; 0x24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	46000000 	.word	0x46000000
 8007ad0:	4c742400 	.word	0x4c742400
 8007ad4:	4a742400 	.word	0x4a742400
 8007ad8:	4af42400 	.word	0x4af42400

08007adc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ae4:	4b9d      	ldr	r3, [pc, #628]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007aee:	4b9b      	ldr	r3, [pc, #620]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	0d1b      	lsrs	r3, r3, #20
 8007af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007af8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007afa:	4b98      	ldr	r3, [pc, #608]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	0a1b      	lsrs	r3, r3, #8
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007b06:	4b95      	ldr	r3, [pc, #596]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	08db      	lsrs	r3, r3, #3
 8007b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	fb02 f303 	mul.w	r3, r2, r3
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 810a 	beq.w	8007d3e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d05a      	beq.n	8007be6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d302      	bcc.n	8007b3a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d078      	beq.n	8007c2a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007b38:	e099      	b.n	8007c6e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b3a:	4b88      	ldr	r3, [pc, #544]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d02d      	beq.n	8007ba2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b46:	4b85      	ldr	r3, [pc, #532]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	08db      	lsrs	r3, r3, #3
 8007b4c:	f003 0303 	and.w	r3, r3, #3
 8007b50:	4a83      	ldr	r2, [pc, #524]	; (8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007b52:	fa22 f303 	lsr.w	r3, r2, r3
 8007b56:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b70:	4b7a      	ldr	r3, [pc, #488]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b78:	ee07 3a90 	vmov	s15, r3
 8007b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ba0:	e087      	b.n	8007cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d68 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb4:	4b69      	ldr	r3, [pc, #420]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbc:	ee07 3a90 	vmov	s15, r3
 8007bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007be4:	e065      	b.n	8007cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	ee07 3a90 	vmov	s15, r3
 8007bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf8:	4b58      	ldr	r3, [pc, #352]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c28:	e043      	b.n	8007cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3c:	4b47      	ldr	r3, [pc, #284]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c44:	ee07 3a90 	vmov	s15, r3
 8007c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c6c:	e021      	b.n	8007cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c80:	4b36      	ldr	r3, [pc, #216]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cb0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	0a5b      	lsrs	r3, r3, #9
 8007cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd8:	ee17 2a90 	vmov	r2, s15
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ce0:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	0c1b      	lsrs	r3, r3, #16
 8007ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d06:	ee17 2a90 	vmov	r2, s15
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	0e1b      	lsrs	r3, r3, #24
 8007d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d34:	ee17 2a90 	vmov	r2, s15
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d3c:	e008      	b.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
}
 8007d50:	bf00      	nop
 8007d52:	3724      	adds	r7, #36	; 0x24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	03d09000 	.word	0x03d09000
 8007d64:	46000000 	.word	0x46000000
 8007d68:	4c742400 	.word	0x4c742400
 8007d6c:	4a742400 	.word	0x4a742400
 8007d70:	4af42400 	.word	0x4af42400

08007d74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b089      	sub	sp, #36	; 0x24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d7c:	4b9d      	ldr	r3, [pc, #628]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007d86:	4b9b      	ldr	r3, [pc, #620]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	091b      	lsrs	r3, r3, #4
 8007d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d92:	4b98      	ldr	r3, [pc, #608]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d9c:	4b95      	ldr	r3, [pc, #596]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da0:	08db      	lsrs	r3, r3, #3
 8007da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 810a 	beq.w	8007fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d05a      	beq.n	8007e7c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d302      	bcc.n	8007dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d078      	beq.n	8007ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007dce:	e099      	b.n	8007f04 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dd0:	4b88      	ldr	r3, [pc, #544]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d02d      	beq.n	8007e38 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ddc:	4b85      	ldr	r3, [pc, #532]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	08db      	lsrs	r3, r3, #3
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	4a84      	ldr	r2, [pc, #528]	; (8007ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dec:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e06:	4b7b      	ldr	r3, [pc, #492]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ffc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e36:	e087      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008000 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e4a:	4b6a      	ldr	r3, [pc, #424]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ffc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e7a:	e065      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008004 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8e:	4b59      	ldr	r3, [pc, #356]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ffc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebe:	e043      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008008 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed2:	4b48      	ldr	r3, [pc, #288]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ffc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f02:	e021      	b.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008004 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f16:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ffc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f46:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007f48:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	0a5b      	lsrs	r3, r3, #9
 8007f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6e:	ee17 2a90 	vmov	r2, s15
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007f76:	4b1f      	ldr	r3, [pc, #124]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	0c1b      	lsrs	r3, r3, #16
 8007f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9c:	ee17 2a90 	vmov	r2, s15
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007fa4:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	0e1b      	lsrs	r3, r3, #24
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fca:	ee17 2a90 	vmov	r2, s15
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	609a      	str	r2, [r3, #8]
}
 8007fe6:	bf00      	nop
 8007fe8:	3724      	adds	r7, #36	; 0x24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	03d09000 	.word	0x03d09000
 8007ffc:	46000000 	.word	0x46000000
 8008000:	4c742400 	.word	0x4c742400
 8008004:	4a742400 	.word	0x4a742400
 8008008:	4af42400 	.word	0x4af42400

0800800c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800801a:	4b53      	ldr	r3, [pc, #332]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d101      	bne.n	800802a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e099      	b.n	800815e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800802a:	4b4f      	ldr	r3, [pc, #316]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a4e      	ldr	r2, [pc, #312]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008036:	f7f9 fc9b 	bl	8001970 <HAL_GetTick>
 800803a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800803c:	e008      	b.n	8008050 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800803e:	f7f9 fc97 	bl	8001970 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e086      	b.n	800815e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008050:	4b45      	ldr	r3, [pc, #276]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f0      	bne.n	800803e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800805c:	4b42      	ldr	r3, [pc, #264]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	031b      	lsls	r3, r3, #12
 800806a:	493f      	ldr	r1, [pc, #252]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 800806c:	4313      	orrs	r3, r2
 800806e:	628b      	str	r3, [r1, #40]	; 0x28
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	3b01      	subs	r3, #1
 8008076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	3b01      	subs	r3, #1
 8008080:	025b      	lsls	r3, r3, #9
 8008082:	b29b      	uxth	r3, r3
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	3b01      	subs	r3, #1
 800808c:	041b      	lsls	r3, r3, #16
 800808e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	3b01      	subs	r3, #1
 800809a:	061b      	lsls	r3, r3, #24
 800809c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080a0:	4931      	ldr	r1, [pc, #196]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080a6:	4b30      	ldr	r3, [pc, #192]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	492d      	ldr	r1, [pc, #180]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080b8:	4b2b      	ldr	r3, [pc, #172]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	f023 0220 	bic.w	r2, r3, #32
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	4928      	ldr	r1, [pc, #160]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080ca:	4b27      	ldr	r3, [pc, #156]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	4a26      	ldr	r2, [pc, #152]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080d0:	f023 0310 	bic.w	r3, r3, #16
 80080d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080d6:	4b24      	ldr	r3, [pc, #144]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080da:	4b24      	ldr	r3, [pc, #144]	; (800816c <RCCEx_PLL2_Config+0x160>)
 80080dc:	4013      	ands	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	69d2      	ldr	r2, [r2, #28]
 80080e2:	00d2      	lsls	r2, r2, #3
 80080e4:	4920      	ldr	r1, [pc, #128]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080ea:	4b1f      	ldr	r3, [pc, #124]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a1e      	ldr	r2, [pc, #120]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080f0:	f043 0310 	orr.w	r3, r3, #16
 80080f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080fc:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	4a19      	ldr	r2, [pc, #100]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008108:	e00f      	b.n	800812a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d106      	bne.n	800811e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008110:	4b15      	ldr	r3, [pc, #84]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	4a14      	ldr	r2, [pc, #80]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800811a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800811c:	e005      	b.n	800812a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4a11      	ldr	r2, [pc, #68]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008128:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800812a:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a0e      	ldr	r2, [pc, #56]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008136:	f7f9 fc1b 	bl	8001970 <HAL_GetTick>
 800813a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800813c:	e008      	b.n	8008150 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800813e:	f7f9 fc17 	bl	8001970 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d901      	bls.n	8008150 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e006      	b.n	800815e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <RCCEx_PLL2_Config+0x15c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0f0      	beq.n	800813e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	58024400 	.word	0x58024400
 800816c:	ffff0007 	.word	0xffff0007

08008170 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800817e:	4b53      	ldr	r3, [pc, #332]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	2b03      	cmp	r3, #3
 8008188:	d101      	bne.n	800818e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e099      	b.n	80082c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800818e:	4b4f      	ldr	r3, [pc, #316]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a4e      	ldr	r2, [pc, #312]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819a:	f7f9 fbe9 	bl	8001970 <HAL_GetTick>
 800819e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081a0:	e008      	b.n	80081b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081a2:	f7f9 fbe5 	bl	8001970 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e086      	b.n	80082c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081b4:	4b45      	ldr	r3, [pc, #276]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f0      	bne.n	80081a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081c0:	4b42      	ldr	r3, [pc, #264]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	051b      	lsls	r3, r3, #20
 80081ce:	493f      	ldr	r1, [pc, #252]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	628b      	str	r3, [r1, #40]	; 0x28
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	3b01      	subs	r3, #1
 80081da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	025b      	lsls	r3, r3, #9
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	431a      	orrs	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	061b      	lsls	r3, r3, #24
 8008200:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008204:	4931      	ldr	r1, [pc, #196]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008206:	4313      	orrs	r3, r2
 8008208:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800820a:	4b30      	ldr	r3, [pc, #192]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	492d      	ldr	r1, [pc, #180]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008218:	4313      	orrs	r3, r2
 800821a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800821c:	4b2b      	ldr	r3, [pc, #172]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	4928      	ldr	r1, [pc, #160]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 800822a:	4313      	orrs	r3, r2
 800822c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800822e:	4b27      	ldr	r3, [pc, #156]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	4a26      	ldr	r2, [pc, #152]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800823a:	4b24      	ldr	r3, [pc, #144]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 800823c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <RCCEx_PLL3_Config+0x160>)
 8008240:	4013      	ands	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	69d2      	ldr	r2, [r2, #28]
 8008246:	00d2      	lsls	r2, r2, #3
 8008248:	4920      	ldr	r1, [pc, #128]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 800824a:	4313      	orrs	r3, r2
 800824c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800824e:	4b1f      	ldr	r3, [pc, #124]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d106      	bne.n	800826e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	4a19      	ldr	r2, [pc, #100]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800826a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800826c:	e00f      	b.n	800828e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d106      	bne.n	8008282 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008274:	4b15      	ldr	r3, [pc, #84]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	4a14      	ldr	r2, [pc, #80]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 800827a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800827e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008280:	e005      	b.n	800828e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008282:	4b12      	ldr	r3, [pc, #72]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	4a11      	ldr	r2, [pc, #68]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800828c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a0e      	ldr	r2, [pc, #56]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 8008294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829a:	f7f9 fb69 	bl	8001970 <HAL_GetTick>
 800829e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082a0:	e008      	b.n	80082b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082a2:	f7f9 fb65 	bl	8001970 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e006      	b.n	80082c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <RCCEx_PLL3_Config+0x15c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0f0      	beq.n	80082a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	58024400 	.word	0x58024400
 80082d0:	ffff0007 	.word	0xffff0007

080082d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e049      	b.n	800837a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f9 f83a 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f000 fa24 	bl	8008760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	d001      	beq.n	800839c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e019      	b.n	80083d0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <HAL_TIM_Base_Start+0x58>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d00b      	beq.n	80083ce <HAL_TIM_Base_Start+0x4a>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083bc:	d007      	beq.n	80083ce <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	00010007 	.word	0x00010007

080083e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d001      	beq.n	80083f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e021      	b.n	800843c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <HAL_TIM_Base_Start_IT+0x68>)
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b06      	cmp	r3, #6
 8008420:	d00b      	beq.n	800843a <HAL_TIM_Base_Start_IT+0x5a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008428:	d007      	beq.n	800843a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f042 0201 	orr.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	00010007 	.word	0x00010007

0800844c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d122      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b02      	cmp	r3, #2
 800846e:	d11b      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0202 	mvn.w	r2, #2
 8008478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f947 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f939 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f94a 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d122      	bne.n	80084fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0204 	mvn.w	r2, #4
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f91d 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f90f 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f920 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b08      	cmp	r3, #8
 8008508:	d122      	bne.n	8008550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b08      	cmp	r3, #8
 8008516:	d11b      	bne.n	8008550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0208 	mvn.w	r2, #8
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2204      	movs	r2, #4
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f8f3 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8e5 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f8f6 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	2b10      	cmp	r3, #16
 800855c:	d122      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b10      	cmp	r3, #16
 800856a:	d11b      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0210 	mvn.w	r2, #16
 8008574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2208      	movs	r2, #8
 800857a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8c9 	bl	8008722 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8bb 	bl	800870e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8cc 	bl	8008736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d10e      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d107      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0201 	mvn.w	r2, #1
 80085c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7f8 fcf2 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d10e      	bne.n	80085fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d107      	bne.n	80085fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb28 	bl	8008c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860a:	d10e      	bne.n	800862a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008616:	2b80      	cmp	r3, #128	; 0x80
 8008618:	d107      	bne.n	800862a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb1b 	bl	8008c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	d10e      	bne.n	8008656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	d107      	bne.n	8008656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800864e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f87a 	bl	800874a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b20      	cmp	r3, #32
 8008662:	d10e      	bne.n	8008682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b20      	cmp	r3, #32
 8008670:	d107      	bne.n	8008682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f06f 0220 	mvn.w	r2, #32
 800867a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fadb 	bl	8008c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800869e:	2302      	movs	r3, #2
 80086a0:	e031      	b.n	8008706 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2202      	movs	r2, #2
 80086ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f8ed 	bl	8008894 <TIM_SlaveTimer_SetConfig>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e018      	b.n	8008706 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
	...

08008760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a40      	ldr	r2, [pc, #256]	; (8008874 <TIM_Base_SetConfig+0x114>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d013      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877e:	d00f      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a3d      	ldr	r2, [pc, #244]	; (8008878 <TIM_Base_SetConfig+0x118>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00b      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a3c      	ldr	r2, [pc, #240]	; (800887c <TIM_Base_SetConfig+0x11c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d007      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a3b      	ldr	r2, [pc, #236]	; (8008880 <TIM_Base_SetConfig+0x120>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a3a      	ldr	r2, [pc, #232]	; (8008884 <TIM_Base_SetConfig+0x124>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d108      	bne.n	80087b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2f      	ldr	r2, [pc, #188]	; (8008874 <TIM_Base_SetConfig+0x114>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01f      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c0:	d01b      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <TIM_Base_SetConfig+0x118>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d017      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2b      	ldr	r2, [pc, #172]	; (800887c <TIM_Base_SetConfig+0x11c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <TIM_Base_SetConfig+0x120>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00f      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a29      	ldr	r2, [pc, #164]	; (8008884 <TIM_Base_SetConfig+0x124>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00b      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a28      	ldr	r2, [pc, #160]	; (8008888 <TIM_Base_SetConfig+0x128>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d007      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a27      	ldr	r2, [pc, #156]	; (800888c <TIM_Base_SetConfig+0x12c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d003      	beq.n	80087fa <TIM_Base_SetConfig+0x9a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a26      	ldr	r2, [pc, #152]	; (8008890 <TIM_Base_SetConfig+0x130>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d108      	bne.n	800880c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a10      	ldr	r2, [pc, #64]	; (8008874 <TIM_Base_SetConfig+0x114>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00f      	beq.n	8008858 <TIM_Base_SetConfig+0xf8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a12      	ldr	r2, [pc, #72]	; (8008884 <TIM_Base_SetConfig+0x124>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00b      	beq.n	8008858 <TIM_Base_SetConfig+0xf8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a11      	ldr	r2, [pc, #68]	; (8008888 <TIM_Base_SetConfig+0x128>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d007      	beq.n	8008858 <TIM_Base_SetConfig+0xf8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a10      	ldr	r2, [pc, #64]	; (800888c <TIM_Base_SetConfig+0x12c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_Base_SetConfig+0xf8>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a0f      	ldr	r2, [pc, #60]	; (8008890 <TIM_Base_SetConfig+0x130>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d103      	bne.n	8008860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	615a      	str	r2, [r3, #20]
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	40010000 	.word	0x40010000
 8008878:	40000400 	.word	0x40000400
 800887c:	40000800 	.word	0x40000800
 8008880:	40000c00 	.word	0x40000c00
 8008884:	40010400 	.word	0x40010400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800

08008894 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4b56      	ldr	r3, [pc, #344]	; (8008a04 <TIM_SlaveTimer_SetConfig+0x170>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4b53      	ldr	r3, [pc, #332]	; (8008a08 <TIM_SlaveTimer_SetConfig+0x174>)
 80088bc:	4013      	ands	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088da:	f000 808c 	beq.w	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 80088de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e2:	d818      	bhi.n	8008916 <TIM_SlaveTimer_SetConfig+0x82>
 80088e4:	2b30      	cmp	r3, #48	; 0x30
 80088e6:	f000 8086 	beq.w	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 80088ea:	2b30      	cmp	r3, #48	; 0x30
 80088ec:	d807      	bhi.n	80088fe <TIM_SlaveTimer_SetConfig+0x6a>
 80088ee:	2b10      	cmp	r3, #16
 80088f0:	f000 8081 	beq.w	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d07e      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d07c      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80088fc:	e07c      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 80088fe:	2b50      	cmp	r3, #80	; 0x50
 8008900:	d065      	beq.n	80089ce <TIM_SlaveTimer_SetConfig+0x13a>
 8008902:	2b50      	cmp	r3, #80	; 0x50
 8008904:	d802      	bhi.n	800890c <TIM_SlaveTimer_SetConfig+0x78>
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d038      	beq.n	800897c <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 800890a:	e075      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800890c:	2b60      	cmp	r3, #96	; 0x60
 800890e:	d068      	beq.n	80089e2 <TIM_SlaveTimer_SetConfig+0x14e>
 8008910:	2b70      	cmp	r3, #112	; 0x70
 8008912:	d028      	beq.n	8008966 <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8008914:	e070      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008916:	4a3d      	ldr	r2, [pc, #244]	; (8008a0c <TIM_SlaveTimer_SetConfig+0x178>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d06c      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 800891c:	4a3b      	ldr	r2, [pc, #236]	; (8008a0c <TIM_SlaveTimer_SetConfig+0x178>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d810      	bhi.n	8008944 <TIM_SlaveTimer_SetConfig+0xb0>
 8008922:	4a3b      	ldr	r2, [pc, #236]	; (8008a10 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d066      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 8008928:	4a39      	ldr	r2, [pc, #228]	; (8008a10 <TIM_SlaveTimer_SetConfig+0x17c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d803      	bhi.n	8008936 <TIM_SlaveTimer_SetConfig+0xa2>
 800892e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008932:	d060      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008934:	e060      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008936:	4a37      	ldr	r2, [pc, #220]	; (8008a14 <TIM_SlaveTimer_SetConfig+0x180>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d05c      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 800893c:	4a36      	ldr	r2, [pc, #216]	; (8008a18 <TIM_SlaveTimer_SetConfig+0x184>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d059      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008942:	e059      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008944:	4a35      	ldr	r2, [pc, #212]	; (8008a1c <TIM_SlaveTimer_SetConfig+0x188>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d055      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 800894a:	4a34      	ldr	r2, [pc, #208]	; (8008a1c <TIM_SlaveTimer_SetConfig+0x188>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d803      	bhi.n	8008958 <TIM_SlaveTimer_SetConfig+0xc4>
 8008950:	4a33      	ldr	r2, [pc, #204]	; (8008a20 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d04f      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008956:	e04f      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800895c:	d04b      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
 800895e:	4a31      	ldr	r2, [pc, #196]	; (8008a24 <TIM_SlaveTimer_SetConfig+0x190>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d048      	beq.n	80089f6 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008964:	e048      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68d9      	ldr	r1, [r3, #12]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f000 f8b6 	bl	8008ae6 <TIM_ETR_SetConfig>
      break;
 800897a:	e03d      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b05      	cmp	r3, #5
 8008982:	d101      	bne.n	8008988 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e038      	b.n	80089fa <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0201 	bic.w	r2, r2, #1
 800899e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ae:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	621a      	str	r2, [r3, #32]
      break;
 80089cc:	e014      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6899      	ldr	r1, [r3, #8]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	461a      	mov	r2, r3
 80089dc:	f000 f824 	bl	8008a28 <TIM_TI1_ConfigInputStage>
      break;
 80089e0:	e00a      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6899      	ldr	r1, [r3, #8]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f000 f849 	bl	8008a86 <TIM_TI2_ConfigInputStage>
      break;
 80089f4:	e000      	b.n	80089f8 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 80089f6:	bf00      	nop
  }
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	ffcfff8f 	.word	0xffcfff8f
 8008a08:	fffefff8 	.word	0xfffefff8
 8008a0c:	00100050 	.word	0x00100050
 8008a10:	00100020 	.word	0x00100020
 8008a14:	00100030 	.word	0x00100030
 8008a18:	00100040 	.word	0x00100040
 8008a1c:	00100070 	.word	0x00100070
 8008a20:	00100060 	.word	0x00100060
 8008a24:	00200010 	.word	0x00200010

08008a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f023 0201 	bic.w	r2, r3, #1
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f023 030a 	bic.w	r3, r3, #10
 8008a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b087      	sub	sp, #28
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f023 0210 	bic.w	r2, r3, #16
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	031b      	lsls	r3, r3, #12
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	621a      	str	r2, [r3, #32]
}
 8008ada:	bf00      	nop
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b087      	sub	sp, #28
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
 8008af2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	021a      	lsls	r2, r3, #8
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	609a      	str	r2, [r3, #8]
}
 8008b1a:	bf00      	nop
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
	...

08008b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e068      	b.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a2e      	ldr	r2, [pc, #184]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d004      	beq.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a2d      	ldr	r2, [pc, #180]	; (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d108      	bne.n	8008b86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a1e      	ldr	r2, [pc, #120]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d01d      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb2:	d018      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00e      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a18      	ldr	r2, [pc, #96]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d009      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a13      	ldr	r2, [pc, #76]	; (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d004      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a14      	ldr	r2, [pc, #80]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d10c      	bne.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40010400 	.word	0x40010400
 8008c28:	40000400 	.word	0x40000400
 8008c2c:	40000800 	.word	0x40000800
 8008c30:	40000c00 	.word	0x40000c00
 8008c34:	40001800 	.word	0x40001800

08008c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e042      	b.n	8008d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f8 fbe9 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2224      	movs	r2, #36	; 0x24
 8008ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f8c2 	bl	8008e40 <UART_SetConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e022      	b.n	8008d0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 ff62 	bl	8009b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 ffe9 	bl	8009cdc <UART_CheckIdleState>
 8008d0a:	4603      	mov	r3, r0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	; 0x28
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	4613      	mov	r3, r2
 8008d22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	f040 8083 	bne.w	8008e36 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <HAL_UART_Transmit+0x28>
 8008d36:	88fb      	ldrh	r3, [r7, #6]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e07b      	b.n	8008e38 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_UART_Transmit+0x3a>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e074      	b.n	8008e38 <HAL_UART_Transmit+0x124>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2221      	movs	r2, #33	; 0x21
 8008d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008d66:	f7f8 fe03 	bl	8001970 <HAL_GetTick>
 8008d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	88fa      	ldrh	r2, [r7, #6]
 8008d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d84:	d108      	bne.n	8008d98 <HAL_UART_Transmit+0x84>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d104      	bne.n	8008d98 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	e003      	b.n	8008da0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008da8:	e02c      	b.n	8008e04 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	2180      	movs	r1, #128	; 0x80
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 ffd9 	bl	8009d6c <UART_WaitOnFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e039      	b.n	8008e38 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	3302      	adds	r3, #2
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	e007      	b.n	8008df2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	3301      	adds	r3, #1
 8008df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1cc      	bne.n	8008daa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2200      	movs	r2, #0
 8008e18:	2140      	movs	r1, #64	; 0x40
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 ffa6 	bl	8009d6c <UART_WaitOnFlagUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e006      	b.n	8008e38 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e000      	b.n	8008e38 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008e36:	2302      	movs	r3, #2
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3720      	adds	r7, #32
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008e44:	b08e      	sub	sp, #56	; 0x38
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4bc1      	ldr	r3, [pc, #772]	; (8009180 <UART_SetConfig+0x340>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6812      	ldr	r2, [r2, #0]
 8008e80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e82:	430b      	orrs	r3, r1
 8008e84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4ab7      	ldr	r2, [pc, #732]	; (8009184 <UART_SetConfig+0x344>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d004      	beq.n	8008eb6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	4bb2      	ldr	r3, [pc, #712]	; (8009188 <UART_SetConfig+0x348>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	6812      	ldr	r2, [r2, #0]
 8008ec4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ec6:	430b      	orrs	r3, r1
 8008ec8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	f023 010f 	bic.w	r1, r3, #15
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4aa9      	ldr	r2, [pc, #676]	; (800918c <UART_SetConfig+0x34c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d177      	bne.n	8008fda <UART_SetConfig+0x19a>
 8008eea:	4ba9      	ldr	r3, [pc, #676]	; (8009190 <UART_SetConfig+0x350>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ef2:	2b28      	cmp	r3, #40	; 0x28
 8008ef4:	d86c      	bhi.n	8008fd0 <UART_SetConfig+0x190>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <UART_SetConfig+0xbc>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008fa1 	.word	0x08008fa1
 8008f00:	08008fd1 	.word	0x08008fd1
 8008f04:	08008fd1 	.word	0x08008fd1
 8008f08:	08008fd1 	.word	0x08008fd1
 8008f0c:	08008fd1 	.word	0x08008fd1
 8008f10:	08008fd1 	.word	0x08008fd1
 8008f14:	08008fd1 	.word	0x08008fd1
 8008f18:	08008fd1 	.word	0x08008fd1
 8008f1c:	08008fa9 	.word	0x08008fa9
 8008f20:	08008fd1 	.word	0x08008fd1
 8008f24:	08008fd1 	.word	0x08008fd1
 8008f28:	08008fd1 	.word	0x08008fd1
 8008f2c:	08008fd1 	.word	0x08008fd1
 8008f30:	08008fd1 	.word	0x08008fd1
 8008f34:	08008fd1 	.word	0x08008fd1
 8008f38:	08008fd1 	.word	0x08008fd1
 8008f3c:	08008fb1 	.word	0x08008fb1
 8008f40:	08008fd1 	.word	0x08008fd1
 8008f44:	08008fd1 	.word	0x08008fd1
 8008f48:	08008fd1 	.word	0x08008fd1
 8008f4c:	08008fd1 	.word	0x08008fd1
 8008f50:	08008fd1 	.word	0x08008fd1
 8008f54:	08008fd1 	.word	0x08008fd1
 8008f58:	08008fd1 	.word	0x08008fd1
 8008f5c:	08008fb9 	.word	0x08008fb9
 8008f60:	08008fd1 	.word	0x08008fd1
 8008f64:	08008fd1 	.word	0x08008fd1
 8008f68:	08008fd1 	.word	0x08008fd1
 8008f6c:	08008fd1 	.word	0x08008fd1
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	08008fd1 	.word	0x08008fd1
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fc1 	.word	0x08008fc1
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08008fd1 	.word	0x08008fd1
 8008f88:	08008fd1 	.word	0x08008fd1
 8008f8c:	08008fd1 	.word	0x08008fd1
 8008f90:	08008fd1 	.word	0x08008fd1
 8008f94:	08008fd1 	.word	0x08008fd1
 8008f98:	08008fd1 	.word	0x08008fd1
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e339      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fa8:	2304      	movs	r3, #4
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e335      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e331      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fb8:	2310      	movs	r3, #16
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e32d      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e329      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e325      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	bf00      	nop
 8008fd8:	e320      	b.n	800961c <UART_SetConfig+0x7dc>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a6d      	ldr	r2, [pc, #436]	; (8009194 <UART_SetConfig+0x354>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d132      	bne.n	800904a <UART_SetConfig+0x20a>
 8008fe4:	4b6a      	ldr	r3, [pc, #424]	; (8009190 <UART_SetConfig+0x350>)
 8008fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	2b05      	cmp	r3, #5
 8008fee:	d827      	bhi.n	8009040 <UART_SetConfig+0x200>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <UART_SetConfig+0x1b8>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009019 	.word	0x08009019
 8009000:	08009021 	.word	0x08009021
 8009004:	08009029 	.word	0x08009029
 8009008:	08009031 	.word	0x08009031
 800900c:	08009039 	.word	0x08009039
 8009010:	2300      	movs	r3, #0
 8009012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009016:	e301      	b.n	800961c <UART_SetConfig+0x7dc>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901e:	e2fd      	b.n	800961c <UART_SetConfig+0x7dc>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009026:	e2f9      	b.n	800961c <UART_SetConfig+0x7dc>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902e:	e2f5      	b.n	800961c <UART_SetConfig+0x7dc>
 8009030:	2320      	movs	r3, #32
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009036:	e2f1      	b.n	800961c <UART_SetConfig+0x7dc>
 8009038:	2340      	movs	r3, #64	; 0x40
 800903a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903e:	e2ed      	b.n	800961c <UART_SetConfig+0x7dc>
 8009040:	2380      	movs	r3, #128	; 0x80
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	bf00      	nop
 8009048:	e2e8      	b.n	800961c <UART_SetConfig+0x7dc>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a52      	ldr	r2, [pc, #328]	; (8009198 <UART_SetConfig+0x358>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d132      	bne.n	80090ba <UART_SetConfig+0x27a>
 8009054:	4b4e      	ldr	r3, [pc, #312]	; (8009190 <UART_SetConfig+0x350>)
 8009056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	2b05      	cmp	r3, #5
 800905e:	d827      	bhi.n	80090b0 <UART_SetConfig+0x270>
 8009060:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <UART_SetConfig+0x228>)
 8009062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009066:	bf00      	nop
 8009068:	08009081 	.word	0x08009081
 800906c:	08009089 	.word	0x08009089
 8009070:	08009091 	.word	0x08009091
 8009074:	08009099 	.word	0x08009099
 8009078:	080090a1 	.word	0x080090a1
 800907c:	080090a9 	.word	0x080090a9
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009086:	e2c9      	b.n	800961c <UART_SetConfig+0x7dc>
 8009088:	2304      	movs	r3, #4
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908e:	e2c5      	b.n	800961c <UART_SetConfig+0x7dc>
 8009090:	2308      	movs	r3, #8
 8009092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009096:	e2c1      	b.n	800961c <UART_SetConfig+0x7dc>
 8009098:	2310      	movs	r3, #16
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e2bd      	b.n	800961c <UART_SetConfig+0x7dc>
 80090a0:	2320      	movs	r3, #32
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	e2b9      	b.n	800961c <UART_SetConfig+0x7dc>
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ae:	e2b5      	b.n	800961c <UART_SetConfig+0x7dc>
 80090b0:	2380      	movs	r3, #128	; 0x80
 80090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b6:	bf00      	nop
 80090b8:	e2b0      	b.n	800961c <UART_SetConfig+0x7dc>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a37      	ldr	r2, [pc, #220]	; (800919c <UART_SetConfig+0x35c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d132      	bne.n	800912a <UART_SetConfig+0x2ea>
 80090c4:	4b32      	ldr	r3, [pc, #200]	; (8009190 <UART_SetConfig+0x350>)
 80090c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b05      	cmp	r3, #5
 80090ce:	d827      	bhi.n	8009120 <UART_SetConfig+0x2e0>
 80090d0:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0x298>)
 80090d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d6:	bf00      	nop
 80090d8:	080090f1 	.word	0x080090f1
 80090dc:	080090f9 	.word	0x080090f9
 80090e0:	08009101 	.word	0x08009101
 80090e4:	08009109 	.word	0x08009109
 80090e8:	08009111 	.word	0x08009111
 80090ec:	08009119 	.word	0x08009119
 80090f0:	2300      	movs	r3, #0
 80090f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f6:	e291      	b.n	800961c <UART_SetConfig+0x7dc>
 80090f8:	2304      	movs	r3, #4
 80090fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fe:	e28d      	b.n	800961c <UART_SetConfig+0x7dc>
 8009100:	2308      	movs	r3, #8
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009106:	e289      	b.n	800961c <UART_SetConfig+0x7dc>
 8009108:	2310      	movs	r3, #16
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e285      	b.n	800961c <UART_SetConfig+0x7dc>
 8009110:	2320      	movs	r3, #32
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	e281      	b.n	800961c <UART_SetConfig+0x7dc>
 8009118:	2340      	movs	r3, #64	; 0x40
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911e:	e27d      	b.n	800961c <UART_SetConfig+0x7dc>
 8009120:	2380      	movs	r3, #128	; 0x80
 8009122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009126:	bf00      	nop
 8009128:	e278      	b.n	800961c <UART_SetConfig+0x7dc>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1c      	ldr	r2, [pc, #112]	; (80091a0 <UART_SetConfig+0x360>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d144      	bne.n	80091be <UART_SetConfig+0x37e>
 8009134:	4b16      	ldr	r3, [pc, #88]	; (8009190 <UART_SetConfig+0x350>)
 8009136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	2b05      	cmp	r3, #5
 800913e:	d839      	bhi.n	80091b4 <UART_SetConfig+0x374>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <UART_SetConfig+0x308>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009161 	.word	0x08009161
 800914c:	08009169 	.word	0x08009169
 8009150:	08009171 	.word	0x08009171
 8009154:	08009179 	.word	0x08009179
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091ad 	.word	0x080091ad
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009166:	e259      	b.n	800961c <UART_SetConfig+0x7dc>
 8009168:	2304      	movs	r3, #4
 800916a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916e:	e255      	b.n	800961c <UART_SetConfig+0x7dc>
 8009170:	2308      	movs	r3, #8
 8009172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009176:	e251      	b.n	800961c <UART_SetConfig+0x7dc>
 8009178:	2310      	movs	r3, #16
 800917a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917e:	e24d      	b.n	800961c <UART_SetConfig+0x7dc>
 8009180:	cfff69f3 	.word	0xcfff69f3
 8009184:	58000c00 	.word	0x58000c00
 8009188:	11fff4ff 	.word	0x11fff4ff
 800918c:	40011000 	.word	0x40011000
 8009190:	58024400 	.word	0x58024400
 8009194:	40004400 	.word	0x40004400
 8009198:	40004800 	.word	0x40004800
 800919c:	40004c00 	.word	0x40004c00
 80091a0:	40005000 	.word	0x40005000
 80091a4:	2320      	movs	r3, #32
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e237      	b.n	800961c <UART_SetConfig+0x7dc>
 80091ac:	2340      	movs	r3, #64	; 0x40
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b2:	e233      	b.n	800961c <UART_SetConfig+0x7dc>
 80091b4:	2380      	movs	r3, #128	; 0x80
 80091b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ba:	bf00      	nop
 80091bc:	e22e      	b.n	800961c <UART_SetConfig+0x7dc>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4ab5      	ldr	r2, [pc, #724]	; (8009498 <UART_SetConfig+0x658>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d178      	bne.n	80092ba <UART_SetConfig+0x47a>
 80091c8:	4bb4      	ldr	r3, [pc, #720]	; (800949c <UART_SetConfig+0x65c>)
 80091ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091d0:	2b28      	cmp	r3, #40	; 0x28
 80091d2:	d86d      	bhi.n	80092b0 <UART_SetConfig+0x470>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <UART_SetConfig+0x39c>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009281 	.word	0x08009281
 80091e0:	080092b1 	.word	0x080092b1
 80091e4:	080092b1 	.word	0x080092b1
 80091e8:	080092b1 	.word	0x080092b1
 80091ec:	080092b1 	.word	0x080092b1
 80091f0:	080092b1 	.word	0x080092b1
 80091f4:	080092b1 	.word	0x080092b1
 80091f8:	080092b1 	.word	0x080092b1
 80091fc:	08009289 	.word	0x08009289
 8009200:	080092b1 	.word	0x080092b1
 8009204:	080092b1 	.word	0x080092b1
 8009208:	080092b1 	.word	0x080092b1
 800920c:	080092b1 	.word	0x080092b1
 8009210:	080092b1 	.word	0x080092b1
 8009214:	080092b1 	.word	0x080092b1
 8009218:	080092b1 	.word	0x080092b1
 800921c:	08009291 	.word	0x08009291
 8009220:	080092b1 	.word	0x080092b1
 8009224:	080092b1 	.word	0x080092b1
 8009228:	080092b1 	.word	0x080092b1
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080092b1 	.word	0x080092b1
 8009234:	080092b1 	.word	0x080092b1
 8009238:	080092b1 	.word	0x080092b1
 800923c:	08009299 	.word	0x08009299
 8009240:	080092b1 	.word	0x080092b1
 8009244:	080092b1 	.word	0x080092b1
 8009248:	080092b1 	.word	0x080092b1
 800924c:	080092b1 	.word	0x080092b1
 8009250:	080092b1 	.word	0x080092b1
 8009254:	080092b1 	.word	0x080092b1
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092b1 	.word	0x080092b1
 8009264:	080092b1 	.word	0x080092b1
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092b1 	.word	0x080092b1
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
 8009278:	080092b1 	.word	0x080092b1
 800927c:	080092a9 	.word	0x080092a9
 8009280:	2301      	movs	r3, #1
 8009282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009286:	e1c9      	b.n	800961c <UART_SetConfig+0x7dc>
 8009288:	2304      	movs	r3, #4
 800928a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928e:	e1c5      	b.n	800961c <UART_SetConfig+0x7dc>
 8009290:	2308      	movs	r3, #8
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009296:	e1c1      	b.n	800961c <UART_SetConfig+0x7dc>
 8009298:	2310      	movs	r3, #16
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	e1bd      	b.n	800961c <UART_SetConfig+0x7dc>
 80092a0:	2320      	movs	r3, #32
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	e1b9      	b.n	800961c <UART_SetConfig+0x7dc>
 80092a8:	2340      	movs	r3, #64	; 0x40
 80092aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ae:	e1b5      	b.n	800961c <UART_SetConfig+0x7dc>
 80092b0:	2380      	movs	r3, #128	; 0x80
 80092b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b6:	bf00      	nop
 80092b8:	e1b0      	b.n	800961c <UART_SetConfig+0x7dc>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a78      	ldr	r2, [pc, #480]	; (80094a0 <UART_SetConfig+0x660>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d132      	bne.n	800932a <UART_SetConfig+0x4ea>
 80092c4:	4b75      	ldr	r3, [pc, #468]	; (800949c <UART_SetConfig+0x65c>)
 80092c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	2b05      	cmp	r3, #5
 80092ce:	d827      	bhi.n	8009320 <UART_SetConfig+0x4e0>
 80092d0:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <UART_SetConfig+0x498>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	080092f1 	.word	0x080092f1
 80092dc:	080092f9 	.word	0x080092f9
 80092e0:	08009301 	.word	0x08009301
 80092e4:	08009309 	.word	0x08009309
 80092e8:	08009311 	.word	0x08009311
 80092ec:	08009319 	.word	0x08009319
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f6:	e191      	b.n	800961c <UART_SetConfig+0x7dc>
 80092f8:	2304      	movs	r3, #4
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e18d      	b.n	800961c <UART_SetConfig+0x7dc>
 8009300:	2308      	movs	r3, #8
 8009302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009306:	e189      	b.n	800961c <UART_SetConfig+0x7dc>
 8009308:	2310      	movs	r3, #16
 800930a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930e:	e185      	b.n	800961c <UART_SetConfig+0x7dc>
 8009310:	2320      	movs	r3, #32
 8009312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009316:	e181      	b.n	800961c <UART_SetConfig+0x7dc>
 8009318:	2340      	movs	r3, #64	; 0x40
 800931a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931e:	e17d      	b.n	800961c <UART_SetConfig+0x7dc>
 8009320:	2380      	movs	r3, #128	; 0x80
 8009322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009326:	bf00      	nop
 8009328:	e178      	b.n	800961c <UART_SetConfig+0x7dc>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a5d      	ldr	r2, [pc, #372]	; (80094a4 <UART_SetConfig+0x664>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d132      	bne.n	800939a <UART_SetConfig+0x55a>
 8009334:	4b59      	ldr	r3, [pc, #356]	; (800949c <UART_SetConfig+0x65c>)
 8009336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	2b05      	cmp	r3, #5
 800933e:	d827      	bhi.n	8009390 <UART_SetConfig+0x550>
 8009340:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0x508>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	08009361 	.word	0x08009361
 800934c:	08009369 	.word	0x08009369
 8009350:	08009371 	.word	0x08009371
 8009354:	08009379 	.word	0x08009379
 8009358:	08009381 	.word	0x08009381
 800935c:	08009389 	.word	0x08009389
 8009360:	2300      	movs	r3, #0
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e159      	b.n	800961c <UART_SetConfig+0x7dc>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e155      	b.n	800961c <UART_SetConfig+0x7dc>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e151      	b.n	800961c <UART_SetConfig+0x7dc>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e14d      	b.n	800961c <UART_SetConfig+0x7dc>
 8009380:	2320      	movs	r3, #32
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	e149      	b.n	800961c <UART_SetConfig+0x7dc>
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938e:	e145      	b.n	800961c <UART_SetConfig+0x7dc>
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009396:	bf00      	nop
 8009398:	e140      	b.n	800961c <UART_SetConfig+0x7dc>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a42      	ldr	r2, [pc, #264]	; (80094a8 <UART_SetConfig+0x668>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	f040 8083 	bne.w	80094ac <UART_SetConfig+0x66c>
 80093a6:	4b3d      	ldr	r3, [pc, #244]	; (800949c <UART_SetConfig+0x65c>)
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ae:	2b28      	cmp	r3, #40	; 0x28
 80093b0:	d86c      	bhi.n	800948c <UART_SetConfig+0x64c>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <UART_SetConfig+0x578>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	0800945d 	.word	0x0800945d
 80093bc:	0800948d 	.word	0x0800948d
 80093c0:	0800948d 	.word	0x0800948d
 80093c4:	0800948d 	.word	0x0800948d
 80093c8:	0800948d 	.word	0x0800948d
 80093cc:	0800948d 	.word	0x0800948d
 80093d0:	0800948d 	.word	0x0800948d
 80093d4:	0800948d 	.word	0x0800948d
 80093d8:	08009465 	.word	0x08009465
 80093dc:	0800948d 	.word	0x0800948d
 80093e0:	0800948d 	.word	0x0800948d
 80093e4:	0800948d 	.word	0x0800948d
 80093e8:	0800948d 	.word	0x0800948d
 80093ec:	0800948d 	.word	0x0800948d
 80093f0:	0800948d 	.word	0x0800948d
 80093f4:	0800948d 	.word	0x0800948d
 80093f8:	0800946d 	.word	0x0800946d
 80093fc:	0800948d 	.word	0x0800948d
 8009400:	0800948d 	.word	0x0800948d
 8009404:	0800948d 	.word	0x0800948d
 8009408:	0800948d 	.word	0x0800948d
 800940c:	0800948d 	.word	0x0800948d
 8009410:	0800948d 	.word	0x0800948d
 8009414:	0800948d 	.word	0x0800948d
 8009418:	08009475 	.word	0x08009475
 800941c:	0800948d 	.word	0x0800948d
 8009420:	0800948d 	.word	0x0800948d
 8009424:	0800948d 	.word	0x0800948d
 8009428:	0800948d 	.word	0x0800948d
 800942c:	0800948d 	.word	0x0800948d
 8009430:	0800948d 	.word	0x0800948d
 8009434:	0800948d 	.word	0x0800948d
 8009438:	0800947d 	.word	0x0800947d
 800943c:	0800948d 	.word	0x0800948d
 8009440:	0800948d 	.word	0x0800948d
 8009444:	0800948d 	.word	0x0800948d
 8009448:	0800948d 	.word	0x0800948d
 800944c:	0800948d 	.word	0x0800948d
 8009450:	0800948d 	.word	0x0800948d
 8009454:	0800948d 	.word	0x0800948d
 8009458:	08009485 	.word	0x08009485
 800945c:	2301      	movs	r3, #1
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e0db      	b.n	800961c <UART_SetConfig+0x7dc>
 8009464:	2304      	movs	r3, #4
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e0d7      	b.n	800961c <UART_SetConfig+0x7dc>
 800946c:	2308      	movs	r3, #8
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e0d3      	b.n	800961c <UART_SetConfig+0x7dc>
 8009474:	2310      	movs	r3, #16
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e0cf      	b.n	800961c <UART_SetConfig+0x7dc>
 800947c:	2320      	movs	r3, #32
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	e0cb      	b.n	800961c <UART_SetConfig+0x7dc>
 8009484:	2340      	movs	r3, #64	; 0x40
 8009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800948a:	e0c7      	b.n	800961c <UART_SetConfig+0x7dc>
 800948c:	2380      	movs	r3, #128	; 0x80
 800948e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009492:	bf00      	nop
 8009494:	e0c2      	b.n	800961c <UART_SetConfig+0x7dc>
 8009496:	bf00      	nop
 8009498:	40011400 	.word	0x40011400
 800949c:	58024400 	.word	0x58024400
 80094a0:	40007800 	.word	0x40007800
 80094a4:	40007c00 	.word	0x40007c00
 80094a8:	40011800 	.word	0x40011800
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4ab2      	ldr	r2, [pc, #712]	; (800977c <UART_SetConfig+0x93c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d177      	bne.n	80095a6 <UART_SetConfig+0x766>
 80094b6:	4bb2      	ldr	r3, [pc, #712]	; (8009780 <UART_SetConfig+0x940>)
 80094b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094be:	2b28      	cmp	r3, #40	; 0x28
 80094c0:	d86c      	bhi.n	800959c <UART_SetConfig+0x75c>
 80094c2:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <UART_SetConfig+0x688>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	0800956d 	.word	0x0800956d
 80094cc:	0800959d 	.word	0x0800959d
 80094d0:	0800959d 	.word	0x0800959d
 80094d4:	0800959d 	.word	0x0800959d
 80094d8:	0800959d 	.word	0x0800959d
 80094dc:	0800959d 	.word	0x0800959d
 80094e0:	0800959d 	.word	0x0800959d
 80094e4:	0800959d 	.word	0x0800959d
 80094e8:	08009575 	.word	0x08009575
 80094ec:	0800959d 	.word	0x0800959d
 80094f0:	0800959d 	.word	0x0800959d
 80094f4:	0800959d 	.word	0x0800959d
 80094f8:	0800959d 	.word	0x0800959d
 80094fc:	0800959d 	.word	0x0800959d
 8009500:	0800959d 	.word	0x0800959d
 8009504:	0800959d 	.word	0x0800959d
 8009508:	0800957d 	.word	0x0800957d
 800950c:	0800959d 	.word	0x0800959d
 8009510:	0800959d 	.word	0x0800959d
 8009514:	0800959d 	.word	0x0800959d
 8009518:	0800959d 	.word	0x0800959d
 800951c:	0800959d 	.word	0x0800959d
 8009520:	0800959d 	.word	0x0800959d
 8009524:	0800959d 	.word	0x0800959d
 8009528:	08009585 	.word	0x08009585
 800952c:	0800959d 	.word	0x0800959d
 8009530:	0800959d 	.word	0x0800959d
 8009534:	0800959d 	.word	0x0800959d
 8009538:	0800959d 	.word	0x0800959d
 800953c:	0800959d 	.word	0x0800959d
 8009540:	0800959d 	.word	0x0800959d
 8009544:	0800959d 	.word	0x0800959d
 8009548:	0800958d 	.word	0x0800958d
 800954c:	0800959d 	.word	0x0800959d
 8009550:	0800959d 	.word	0x0800959d
 8009554:	0800959d 	.word	0x0800959d
 8009558:	0800959d 	.word	0x0800959d
 800955c:	0800959d 	.word	0x0800959d
 8009560:	0800959d 	.word	0x0800959d
 8009564:	0800959d 	.word	0x0800959d
 8009568:	08009595 	.word	0x08009595
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009572:	e053      	b.n	800961c <UART_SetConfig+0x7dc>
 8009574:	2304      	movs	r3, #4
 8009576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800957a:	e04f      	b.n	800961c <UART_SetConfig+0x7dc>
 800957c:	2308      	movs	r3, #8
 800957e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009582:	e04b      	b.n	800961c <UART_SetConfig+0x7dc>
 8009584:	2310      	movs	r3, #16
 8009586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800958a:	e047      	b.n	800961c <UART_SetConfig+0x7dc>
 800958c:	2320      	movs	r3, #32
 800958e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009592:	e043      	b.n	800961c <UART_SetConfig+0x7dc>
 8009594:	2340      	movs	r3, #64	; 0x40
 8009596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959a:	e03f      	b.n	800961c <UART_SetConfig+0x7dc>
 800959c:	2380      	movs	r3, #128	; 0x80
 800959e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a2:	bf00      	nop
 80095a4:	e03a      	b.n	800961c <UART_SetConfig+0x7dc>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a76      	ldr	r2, [pc, #472]	; (8009784 <UART_SetConfig+0x944>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d132      	bne.n	8009616 <UART_SetConfig+0x7d6>
 80095b0:	4b73      	ldr	r3, [pc, #460]	; (8009780 <UART_SetConfig+0x940>)
 80095b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b4:	f003 0307 	and.w	r3, r3, #7
 80095b8:	2b05      	cmp	r3, #5
 80095ba:	d827      	bhi.n	800960c <UART_SetConfig+0x7cc>
 80095bc:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <UART_SetConfig+0x784>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	080095dd 	.word	0x080095dd
 80095c8:	080095e5 	.word	0x080095e5
 80095cc:	080095ed 	.word	0x080095ed
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	08009605 	.word	0x08009605
 80095dc:	2302      	movs	r3, #2
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e01b      	b.n	800961c <UART_SetConfig+0x7dc>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e017      	b.n	800961c <UART_SetConfig+0x7dc>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e013      	b.n	800961c <UART_SetConfig+0x7dc>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e00f      	b.n	800961c <UART_SetConfig+0x7dc>
 80095fc:	2320      	movs	r3, #32
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e00b      	b.n	800961c <UART_SetConfig+0x7dc>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e007      	b.n	800961c <UART_SetConfig+0x7dc>
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	bf00      	nop
 8009614:	e002      	b.n	800961c <UART_SetConfig+0x7dc>
 8009616:	2380      	movs	r3, #128	; 0x80
 8009618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a58      	ldr	r2, [pc, #352]	; (8009784 <UART_SetConfig+0x944>)
 8009622:	4293      	cmp	r3, r2
 8009624:	f040 80b6 	bne.w	8009794 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800962c:	2b08      	cmp	r3, #8
 800962e:	d019      	beq.n	8009664 <UART_SetConfig+0x824>
 8009630:	2b08      	cmp	r3, #8
 8009632:	dc04      	bgt.n	800963e <UART_SetConfig+0x7fe>
 8009634:	2b02      	cmp	r3, #2
 8009636:	d009      	beq.n	800964c <UART_SetConfig+0x80c>
 8009638:	2b04      	cmp	r3, #4
 800963a:	d00b      	beq.n	8009654 <UART_SetConfig+0x814>
 800963c:	e034      	b.n	80096a8 <UART_SetConfig+0x868>
 800963e:	2b20      	cmp	r3, #32
 8009640:	d02b      	beq.n	800969a <UART_SetConfig+0x85a>
 8009642:	2b40      	cmp	r3, #64	; 0x40
 8009644:	d02c      	beq.n	80096a0 <UART_SetConfig+0x860>
 8009646:	2b10      	cmp	r3, #16
 8009648:	d014      	beq.n	8009674 <UART_SetConfig+0x834>
 800964a:	e02d      	b.n	80096a8 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800964c:	f7fe f8e4 	bl	8007818 <HAL_RCCEx_GetD3PCLK1Freq>
 8009650:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009652:	e02f      	b.n	80096b4 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009654:	f107 0314 	add.w	r3, r7, #20
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe f8f3 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009662:	e027      	b.n	80096b4 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009664:	f107 0308 	add.w	r3, r7, #8
 8009668:	4618      	mov	r0, r3
 800966a:	f7fe fa37 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009672:	e01f      	b.n	80096b4 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009674:	4b42      	ldr	r3, [pc, #264]	; (8009780 <UART_SetConfig+0x940>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d009      	beq.n	8009694 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009680:	4b3f      	ldr	r3, [pc, #252]	; (8009780 <UART_SetConfig+0x940>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	08db      	lsrs	r3, r3, #3
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	4a3f      	ldr	r2, [pc, #252]	; (8009788 <UART_SetConfig+0x948>)
 800968c:	fa22 f303 	lsr.w	r3, r2, r3
 8009690:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009692:	e00f      	b.n	80096b4 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8009694:	4b3c      	ldr	r3, [pc, #240]	; (8009788 <UART_SetConfig+0x948>)
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009698:	e00c      	b.n	80096b4 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800969a:	4b3c      	ldr	r3, [pc, #240]	; (800978c <UART_SetConfig+0x94c>)
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800969e:	e009      	b.n	80096b4 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096a6:	e005      	b.n	80096b4 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80096b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8251 	beq.w	8009b5e <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	4a33      	ldr	r2, [pc, #204]	; (8009790 <UART_SetConfig+0x950>)
 80096c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096c6:	461a      	mov	r2, r3
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ce:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	4613      	mov	r3, r2
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	4413      	add	r3, r2
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d305      	bcc.n	80096ec <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096e6:	6a3a      	ldr	r2, [r7, #32]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d903      	bls.n	80096f4 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80096f2:	e234      	b.n	8009b5e <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	4618      	mov	r0, r3
 80096f8:	f04f 0100 	mov.w	r1, #0
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	4a23      	ldr	r2, [pc, #140]	; (8009790 <UART_SetConfig+0x950>)
 8009702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009706:	b29b      	uxth	r3, r3
 8009708:	f04f 0400 	mov.w	r4, #0
 800970c:	461a      	mov	r2, r3
 800970e:	4623      	mov	r3, r4
 8009710:	f7f6 fe3e 	bl	8000390 <__aeabi_uldivmod>
 8009714:	4603      	mov	r3, r0
 8009716:	460c      	mov	r4, r1
 8009718:	4619      	mov	r1, r3
 800971a:	4622      	mov	r2, r4
 800971c:	f04f 0300 	mov.w	r3, #0
 8009720:	f04f 0400 	mov.w	r4, #0
 8009724:	0214      	lsls	r4, r2, #8
 8009726:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800972a:	020b      	lsls	r3, r1, #8
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6852      	ldr	r2, [r2, #4]
 8009730:	0852      	lsrs	r2, r2, #1
 8009732:	4611      	mov	r1, r2
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	eb13 0b01 	adds.w	fp, r3, r1
 800973c:	eb44 0c02 	adc.w	ip, r4, r2
 8009740:	4658      	mov	r0, fp
 8009742:	4661      	mov	r1, ip
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f04f 0400 	mov.w	r4, #0
 800974c:	461a      	mov	r2, r3
 800974e:	4623      	mov	r3, r4
 8009750:	f7f6 fe1e 	bl	8000390 <__aeabi_uldivmod>
 8009754:	4603      	mov	r3, r0
 8009756:	460c      	mov	r4, r1
 8009758:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009760:	d308      	bcc.n	8009774 <UART_SetConfig+0x934>
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009768:	d204      	bcs.n	8009774 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	e1f4      	b.n	8009b5e <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800977a:	e1f0      	b.n	8009b5e <UART_SetConfig+0xd1e>
 800977c:	40011c00 	.word	0x40011c00
 8009780:	58024400 	.word	0x58024400
 8009784:	58000c00 	.word	0x58000c00
 8009788:	03d09000 	.word	0x03d09000
 800978c:	003d0900 	.word	0x003d0900
 8009790:	0800b944 	.word	0x0800b944
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800979c:	f040 80f8 	bne.w	8009990 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80097a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	f200 80b7 	bhi.w	8009918 <UART_SetConfig+0xad8>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <UART_SetConfig+0x970>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080098b5 	.word	0x080098b5
 80097b4:	080098bd 	.word	0x080098bd
 80097b8:	08009919 	.word	0x08009919
 80097bc:	08009919 	.word	0x08009919
 80097c0:	080098c5 	.word	0x080098c5
 80097c4:	08009919 	.word	0x08009919
 80097c8:	08009919 	.word	0x08009919
 80097cc:	08009919 	.word	0x08009919
 80097d0:	080098d5 	.word	0x080098d5
 80097d4:	08009919 	.word	0x08009919
 80097d8:	08009919 	.word	0x08009919
 80097dc:	08009919 	.word	0x08009919
 80097e0:	08009919 	.word	0x08009919
 80097e4:	08009919 	.word	0x08009919
 80097e8:	08009919 	.word	0x08009919
 80097ec:	08009919 	.word	0x08009919
 80097f0:	080098e5 	.word	0x080098e5
 80097f4:	08009919 	.word	0x08009919
 80097f8:	08009919 	.word	0x08009919
 80097fc:	08009919 	.word	0x08009919
 8009800:	08009919 	.word	0x08009919
 8009804:	08009919 	.word	0x08009919
 8009808:	08009919 	.word	0x08009919
 800980c:	08009919 	.word	0x08009919
 8009810:	08009919 	.word	0x08009919
 8009814:	08009919 	.word	0x08009919
 8009818:	08009919 	.word	0x08009919
 800981c:	08009919 	.word	0x08009919
 8009820:	08009919 	.word	0x08009919
 8009824:	08009919 	.word	0x08009919
 8009828:	08009919 	.word	0x08009919
 800982c:	08009919 	.word	0x08009919
 8009830:	0800990b 	.word	0x0800990b
 8009834:	08009919 	.word	0x08009919
 8009838:	08009919 	.word	0x08009919
 800983c:	08009919 	.word	0x08009919
 8009840:	08009919 	.word	0x08009919
 8009844:	08009919 	.word	0x08009919
 8009848:	08009919 	.word	0x08009919
 800984c:	08009919 	.word	0x08009919
 8009850:	08009919 	.word	0x08009919
 8009854:	08009919 	.word	0x08009919
 8009858:	08009919 	.word	0x08009919
 800985c:	08009919 	.word	0x08009919
 8009860:	08009919 	.word	0x08009919
 8009864:	08009919 	.word	0x08009919
 8009868:	08009919 	.word	0x08009919
 800986c:	08009919 	.word	0x08009919
 8009870:	08009919 	.word	0x08009919
 8009874:	08009919 	.word	0x08009919
 8009878:	08009919 	.word	0x08009919
 800987c:	08009919 	.word	0x08009919
 8009880:	08009919 	.word	0x08009919
 8009884:	08009919 	.word	0x08009919
 8009888:	08009919 	.word	0x08009919
 800988c:	08009919 	.word	0x08009919
 8009890:	08009919 	.word	0x08009919
 8009894:	08009919 	.word	0x08009919
 8009898:	08009919 	.word	0x08009919
 800989c:	08009919 	.word	0x08009919
 80098a0:	08009919 	.word	0x08009919
 80098a4:	08009919 	.word	0x08009919
 80098a8:	08009919 	.word	0x08009919
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009911 	.word	0x08009911
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b4:	f7fc feaa 	bl	800660c <HAL_RCC_GetPCLK1Freq>
 80098b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80098ba:	e033      	b.n	8009924 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098bc:	f7fc febc 	bl	8006638 <HAL_RCC_GetPCLK2Freq>
 80098c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80098c2:	e02f      	b.n	8009924 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c4:	f107 0314 	add.w	r3, r7, #20
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd ffbb 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098d2:	e027      	b.n	8009924 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe f8ff 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098e2:	e01f      	b.n	8009924 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e4:	4ba8      	ldr	r3, [pc, #672]	; (8009b88 <UART_SetConfig+0xd48>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098f0:	4ba5      	ldr	r3, [pc, #660]	; (8009b88 <UART_SetConfig+0xd48>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	08db      	lsrs	r3, r3, #3
 80098f6:	f003 0303 	and.w	r3, r3, #3
 80098fa:	4aa4      	ldr	r2, [pc, #656]	; (8009b8c <UART_SetConfig+0xd4c>)
 80098fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009900:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009902:	e00f      	b.n	8009924 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009904:	4ba1      	ldr	r3, [pc, #644]	; (8009b8c <UART_SetConfig+0xd4c>)
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009908:	e00c      	b.n	8009924 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800990a:	4ba1      	ldr	r3, [pc, #644]	; (8009b90 <UART_SetConfig+0xd50>)
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800990e:	e009      	b.n	8009924 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009916:	e005      	b.n	8009924 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009922:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8119 	beq.w	8009b5e <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	4a98      	ldr	r2, [pc, #608]	; (8009b94 <UART_SetConfig+0xd54>)
 8009932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009936:	461a      	mov	r2, r3
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	fbb3 f3f2 	udiv	r3, r3, r2
 800993e:	005a      	lsls	r2, r3, #1
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	441a      	add	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009950:	b29b      	uxth	r3, r3
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	2b0f      	cmp	r3, #15
 8009958:	d916      	bls.n	8009988 <UART_SetConfig+0xb48>
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009960:	d212      	bcs.n	8009988 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	b29b      	uxth	r3, r3
 8009966:	f023 030f 	bic.w	r3, r3, #15
 800996a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	b29a      	uxth	r2, r3
 8009978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800997a:	4313      	orrs	r3, r2
 800997c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	e0ea      	b.n	8009b5e <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800998e:	e0e6      	b.n	8009b5e <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009994:	2b40      	cmp	r3, #64	; 0x40
 8009996:	f200 80b7 	bhi.w	8009b08 <UART_SetConfig+0xcc8>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0xb60>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	08009aa5 	.word	0x08009aa5
 80099a4:	08009aad 	.word	0x08009aad
 80099a8:	08009b09 	.word	0x08009b09
 80099ac:	08009b09 	.word	0x08009b09
 80099b0:	08009ab5 	.word	0x08009ab5
 80099b4:	08009b09 	.word	0x08009b09
 80099b8:	08009b09 	.word	0x08009b09
 80099bc:	08009b09 	.word	0x08009b09
 80099c0:	08009ac5 	.word	0x08009ac5
 80099c4:	08009b09 	.word	0x08009b09
 80099c8:	08009b09 	.word	0x08009b09
 80099cc:	08009b09 	.word	0x08009b09
 80099d0:	08009b09 	.word	0x08009b09
 80099d4:	08009b09 	.word	0x08009b09
 80099d8:	08009b09 	.word	0x08009b09
 80099dc:	08009b09 	.word	0x08009b09
 80099e0:	08009ad5 	.word	0x08009ad5
 80099e4:	08009b09 	.word	0x08009b09
 80099e8:	08009b09 	.word	0x08009b09
 80099ec:	08009b09 	.word	0x08009b09
 80099f0:	08009b09 	.word	0x08009b09
 80099f4:	08009b09 	.word	0x08009b09
 80099f8:	08009b09 	.word	0x08009b09
 80099fc:	08009b09 	.word	0x08009b09
 8009a00:	08009b09 	.word	0x08009b09
 8009a04:	08009b09 	.word	0x08009b09
 8009a08:	08009b09 	.word	0x08009b09
 8009a0c:	08009b09 	.word	0x08009b09
 8009a10:	08009b09 	.word	0x08009b09
 8009a14:	08009b09 	.word	0x08009b09
 8009a18:	08009b09 	.word	0x08009b09
 8009a1c:	08009b09 	.word	0x08009b09
 8009a20:	08009afb 	.word	0x08009afb
 8009a24:	08009b09 	.word	0x08009b09
 8009a28:	08009b09 	.word	0x08009b09
 8009a2c:	08009b09 	.word	0x08009b09
 8009a30:	08009b09 	.word	0x08009b09
 8009a34:	08009b09 	.word	0x08009b09
 8009a38:	08009b09 	.word	0x08009b09
 8009a3c:	08009b09 	.word	0x08009b09
 8009a40:	08009b09 	.word	0x08009b09
 8009a44:	08009b09 	.word	0x08009b09
 8009a48:	08009b09 	.word	0x08009b09
 8009a4c:	08009b09 	.word	0x08009b09
 8009a50:	08009b09 	.word	0x08009b09
 8009a54:	08009b09 	.word	0x08009b09
 8009a58:	08009b09 	.word	0x08009b09
 8009a5c:	08009b09 	.word	0x08009b09
 8009a60:	08009b09 	.word	0x08009b09
 8009a64:	08009b09 	.word	0x08009b09
 8009a68:	08009b09 	.word	0x08009b09
 8009a6c:	08009b09 	.word	0x08009b09
 8009a70:	08009b09 	.word	0x08009b09
 8009a74:	08009b09 	.word	0x08009b09
 8009a78:	08009b09 	.word	0x08009b09
 8009a7c:	08009b09 	.word	0x08009b09
 8009a80:	08009b09 	.word	0x08009b09
 8009a84:	08009b09 	.word	0x08009b09
 8009a88:	08009b09 	.word	0x08009b09
 8009a8c:	08009b09 	.word	0x08009b09
 8009a90:	08009b09 	.word	0x08009b09
 8009a94:	08009b09 	.word	0x08009b09
 8009a98:	08009b09 	.word	0x08009b09
 8009a9c:	08009b09 	.word	0x08009b09
 8009aa0:	08009b01 	.word	0x08009b01
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aa4:	f7fc fdb2 	bl	800660c <HAL_RCC_GetPCLK1Freq>
 8009aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009aaa:	e033      	b.n	8009b14 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aac:	f7fc fdc4 	bl	8006638 <HAL_RCC_GetPCLK2Freq>
 8009ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ab2:	e02f      	b.n	8009b14 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fd fec3 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ac2:	e027      	b.n	8009b14 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac4:	f107 0308 	add.w	r3, r7, #8
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe f807 	bl	8007adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ad2:	e01f      	b.n	8009b14 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <UART_SetConfig+0xd48>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ae0:	4b29      	ldr	r3, [pc, #164]	; (8009b88 <UART_SetConfig+0xd48>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	08db      	lsrs	r3, r3, #3
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	4a28      	ldr	r2, [pc, #160]	; (8009b8c <UART_SetConfig+0xd4c>)
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
 8009af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009af2:	e00f      	b.n	8009b14 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009af4:	4b25      	ldr	r3, [pc, #148]	; (8009b8c <UART_SetConfig+0xd4c>)
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009af8:	e00c      	b.n	8009b14 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009afa:	4b25      	ldr	r3, [pc, #148]	; (8009b90 <UART_SetConfig+0xd50>)
 8009afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009afe:	e009      	b.n	8009b14 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b06:	e005      	b.n	8009b14 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b12:	bf00      	nop
    }

    if (pclk != 0U)
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d021      	beq.n	8009b5e <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	4a1d      	ldr	r2, [pc, #116]	; (8009b94 <UART_SetConfig+0xd54>)
 8009b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	085b      	lsrs	r3, r3, #1
 8009b32:	441a      	add	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	2b0f      	cmp	r3, #15
 8009b44:	d908      	bls.n	8009b58 <UART_SetConfig+0xd18>
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b4c:	d204      	bcs.n	8009b58 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b54:	60da      	str	r2, [r3, #12]
 8009b56:	e002      	b.n	8009b5e <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009b7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3738      	adds	r7, #56	; 0x38
 8009b82:	46bd      	mov	sp, r7
 8009b84:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009b88:	58024400 	.word	0x58024400
 8009b8c:	03d09000 	.word	0x03d09000
 8009b90:	003d0900 	.word	0x003d0900
 8009b94:	0800b944 	.word	0x0800b944

08009b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	f003 0308 	and.w	r3, r3, #8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01a      	beq.n	8009cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c96:	d10a      	bne.n	8009cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	605a      	str	r2, [r3, #4]
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009cec:	f7f7 fe40 	bl	8001970 <HAL_GetTick>
 8009cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d10e      	bne.n	8009d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f82c 	bl	8009d6c <UART_WaitOnFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e022      	b.n	8009d64 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d10e      	bne.n	8009d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f816 	bl	8009d6c <UART_WaitOnFlagUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e00c      	b.n	8009d64 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d7c:	e062      	b.n	8009e44 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d84:	d05e      	beq.n	8009e44 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d86:	f7f7 fdf3 	bl	8001970 <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d302      	bcc.n	8009d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d11d      	bne.n	8009dd8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009daa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689a      	ldr	r2, [r3, #8]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0201 	bic.w	r2, r2, #1
 8009dba:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e045      	b.n	8009e64 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d02e      	beq.n	8009e44 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009df4:	d126      	bne.n	8009e44 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e0e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0201 	bic.w	r2, r2, #1
 8009e1e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e00f      	b.n	8009e64 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69da      	ldr	r2, [r3, #28]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	bf0c      	ite	eq
 8009e54:	2301      	moveq	r3, #1
 8009e56:	2300      	movne	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d08d      	beq.n	8009d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d101      	bne.n	8009e82 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e027      	b.n	8009ed2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2224      	movs	r2, #36	; 0x24
 8009e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0201 	bic.w	r2, r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009eb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d101      	bne.n	8009ef6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	e02d      	b.n	8009f52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2224      	movs	r2, #36	; 0x24
 8009f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 0201 	bic.w	r2, r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f850 	bl	8009fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e02d      	b.n	8009fce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2224      	movs	r2, #36	; 0x24
 8009f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0201 	bic.w	r2, r2, #1
 8009f98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f812 	bl	8009fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b089      	sub	sp, #36	; 0x24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009fe0:	4a2f      	ldr	r2, [pc, #188]	; (800a0a0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009fe2:	f107 0314 	add.w	r3, r7, #20
 8009fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009fee:	4a2d      	ldr	r2, [pc, #180]	; (800a0a4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ff8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a000:	2b00      	cmp	r3, #0
 800a002:	d108      	bne.n	800a016 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a014:	e03d      	b.n	800a092 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a016:	2310      	movs	r3, #16
 800a018:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a01a:	2310      	movs	r3, #16
 800a01c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	0e5b      	lsrs	r3, r3, #25
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 0307 	and.w	r3, r3, #7
 800a02c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	0f5b      	lsrs	r3, r3, #29
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a03e:	7fbb      	ldrb	r3, [r7, #30]
 800a040:	7f3a      	ldrb	r2, [r7, #28]
 800a042:	f107 0120 	add.w	r1, r7, #32
 800a046:	440a      	add	r2, r1
 800a048:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a04c:	fb02 f303 	mul.w	r3, r2, r3
 800a050:	7f3a      	ldrb	r2, [r7, #28]
 800a052:	f107 0120 	add.w	r1, r7, #32
 800a056:	440a      	add	r2, r1
 800a058:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a05c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a060:	b29a      	uxth	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a068:	7ffb      	ldrb	r3, [r7, #31]
 800a06a:	7f7a      	ldrb	r2, [r7, #29]
 800a06c:	f107 0120 	add.w	r1, r7, #32
 800a070:	440a      	add	r2, r1
 800a072:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a076:	fb02 f303 	mul.w	r3, r2, r3
 800a07a:	7f7a      	ldrb	r2, [r7, #29]
 800a07c:	f107 0120 	add.w	r1, r7, #32
 800a080:	440a      	add	r2, r1
 800a082:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a086:	fb93 f3f2 	sdiv	r3, r3, r2
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a092:	bf00      	nop
 800a094:	3724      	adds	r7, #36	; 0x24
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	0800b11c 	.word	0x0800b11c
 800a0a4:	0800b124 	.word	0x0800b124

0800a0a8 <calloc>:
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <calloc+0xc>)
 800a0aa:	460a      	mov	r2, r1
 800a0ac:	4601      	mov	r1, r0
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	f000 b850 	b.w	800a154 <_calloc_r>
 800a0b4:	24000010 	.word	0x24000010

0800a0b8 <__errno>:
 800a0b8:	4b01      	ldr	r3, [pc, #4]	; (800a0c0 <__errno+0x8>)
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	24000010 	.word	0x24000010

0800a0c4 <exit>:
 800a0c4:	b508      	push	{r3, lr}
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <exit+0x20>)
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	b113      	cbz	r3, 800a0d2 <exit+0xe>
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	f3af 8000 	nop.w
 800a0d2:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <exit+0x24>)
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a0d8:	b103      	cbz	r3, 800a0dc <exit+0x18>
 800a0da:	4798      	blx	r3
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7f7 fa6d 	bl	80015bc <_exit>
 800a0e2:	bf00      	nop
 800a0e4:	00000000 	.word	0x00000000
 800a0e8:	0800b95c 	.word	0x0800b95c

0800a0ec <__libc_init_array>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4e0d      	ldr	r6, [pc, #52]	; (800a124 <__libc_init_array+0x38>)
 800a0f0:	4c0d      	ldr	r4, [pc, #52]	; (800a128 <__libc_init_array+0x3c>)
 800a0f2:	1ba4      	subs	r4, r4, r6
 800a0f4:	10a4      	asrs	r4, r4, #2
 800a0f6:	2500      	movs	r5, #0
 800a0f8:	42a5      	cmp	r5, r4
 800a0fa:	d109      	bne.n	800a110 <__libc_init_array+0x24>
 800a0fc:	4e0b      	ldr	r6, [pc, #44]	; (800a12c <__libc_init_array+0x40>)
 800a0fe:	4c0c      	ldr	r4, [pc, #48]	; (800a130 <__libc_init_array+0x44>)
 800a100:	f000 ffea 	bl	800b0d8 <_init>
 800a104:	1ba4      	subs	r4, r4, r6
 800a106:	10a4      	asrs	r4, r4, #2
 800a108:	2500      	movs	r5, #0
 800a10a:	42a5      	cmp	r5, r4
 800a10c:	d105      	bne.n	800a11a <__libc_init_array+0x2e>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a114:	4798      	blx	r3
 800a116:	3501      	adds	r5, #1
 800a118:	e7ee      	b.n	800a0f8 <__libc_init_array+0xc>
 800a11a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a11e:	4798      	blx	r3
 800a120:	3501      	adds	r5, #1
 800a122:	e7f2      	b.n	800a10a <__libc_init_array+0x1e>
 800a124:	0800b9fc 	.word	0x0800b9fc
 800a128:	0800b9fc 	.word	0x0800b9fc
 800a12c:	0800b9fc 	.word	0x0800b9fc
 800a130:	0800ba00 	.word	0x0800ba00

0800a134 <malloc>:
 800a134:	4b02      	ldr	r3, [pc, #8]	; (800a140 <malloc+0xc>)
 800a136:	4601      	mov	r1, r0
 800a138:	6818      	ldr	r0, [r3, #0]
 800a13a:	f000 b867 	b.w	800a20c <_malloc_r>
 800a13e:	bf00      	nop
 800a140:	24000010 	.word	0x24000010

0800a144 <memset>:
 800a144:	4402      	add	r2, r0
 800a146:	4603      	mov	r3, r0
 800a148:	4293      	cmp	r3, r2
 800a14a:	d100      	bne.n	800a14e <memset+0xa>
 800a14c:	4770      	bx	lr
 800a14e:	f803 1b01 	strb.w	r1, [r3], #1
 800a152:	e7f9      	b.n	800a148 <memset+0x4>

0800a154 <_calloc_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	fb02 f401 	mul.w	r4, r2, r1
 800a15a:	4621      	mov	r1, r4
 800a15c:	f000 f856 	bl	800a20c <_malloc_r>
 800a160:	4605      	mov	r5, r0
 800a162:	b118      	cbz	r0, 800a16c <_calloc_r+0x18>
 800a164:	4622      	mov	r2, r4
 800a166:	2100      	movs	r1, #0
 800a168:	f7ff ffec 	bl	800a144 <memset>
 800a16c:	4628      	mov	r0, r5
 800a16e:	bd38      	pop	{r3, r4, r5, pc}

0800a170 <_free_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4605      	mov	r5, r0
 800a174:	2900      	cmp	r1, #0
 800a176:	d045      	beq.n	800a204 <_free_r+0x94>
 800a178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17c:	1f0c      	subs	r4, r1, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfb8      	it	lt
 800a182:	18e4      	addlt	r4, r4, r3
 800a184:	f000 fbce 	bl	800a924 <__malloc_lock>
 800a188:	4a1f      	ldr	r2, [pc, #124]	; (800a208 <_free_r+0x98>)
 800a18a:	6813      	ldr	r3, [r2, #0]
 800a18c:	4610      	mov	r0, r2
 800a18e:	b933      	cbnz	r3, 800a19e <_free_r+0x2e>
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	6014      	str	r4, [r2, #0]
 800a194:	4628      	mov	r0, r5
 800a196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a19a:	f000 bbc4 	b.w	800a926 <__malloc_unlock>
 800a19e:	42a3      	cmp	r3, r4
 800a1a0:	d90c      	bls.n	800a1bc <_free_r+0x4c>
 800a1a2:	6821      	ldr	r1, [r4, #0]
 800a1a4:	1862      	adds	r2, r4, r1
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	bf04      	itt	eq
 800a1aa:	681a      	ldreq	r2, [r3, #0]
 800a1ac:	685b      	ldreq	r3, [r3, #4]
 800a1ae:	6063      	str	r3, [r4, #4]
 800a1b0:	bf04      	itt	eq
 800a1b2:	1852      	addeq	r2, r2, r1
 800a1b4:	6022      	streq	r2, [r4, #0]
 800a1b6:	6004      	str	r4, [r0, #0]
 800a1b8:	e7ec      	b.n	800a194 <_free_r+0x24>
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	b10a      	cbz	r2, 800a1c4 <_free_r+0x54>
 800a1c0:	42a2      	cmp	r2, r4
 800a1c2:	d9fa      	bls.n	800a1ba <_free_r+0x4a>
 800a1c4:	6819      	ldr	r1, [r3, #0]
 800a1c6:	1858      	adds	r0, r3, r1
 800a1c8:	42a0      	cmp	r0, r4
 800a1ca:	d10b      	bne.n	800a1e4 <_free_r+0x74>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	4401      	add	r1, r0
 800a1d0:	1858      	adds	r0, r3, r1
 800a1d2:	4282      	cmp	r2, r0
 800a1d4:	6019      	str	r1, [r3, #0]
 800a1d6:	d1dd      	bne.n	800a194 <_free_r+0x24>
 800a1d8:	6810      	ldr	r0, [r2, #0]
 800a1da:	6852      	ldr	r2, [r2, #4]
 800a1dc:	605a      	str	r2, [r3, #4]
 800a1de:	4401      	add	r1, r0
 800a1e0:	6019      	str	r1, [r3, #0]
 800a1e2:	e7d7      	b.n	800a194 <_free_r+0x24>
 800a1e4:	d902      	bls.n	800a1ec <_free_r+0x7c>
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	e7d3      	b.n	800a194 <_free_r+0x24>
 800a1ec:	6820      	ldr	r0, [r4, #0]
 800a1ee:	1821      	adds	r1, r4, r0
 800a1f0:	428a      	cmp	r2, r1
 800a1f2:	bf04      	itt	eq
 800a1f4:	6811      	ldreq	r1, [r2, #0]
 800a1f6:	6852      	ldreq	r2, [r2, #4]
 800a1f8:	6062      	str	r2, [r4, #4]
 800a1fa:	bf04      	itt	eq
 800a1fc:	1809      	addeq	r1, r1, r0
 800a1fe:	6021      	streq	r1, [r4, #0]
 800a200:	605c      	str	r4, [r3, #4]
 800a202:	e7c7      	b.n	800a194 <_free_r+0x24>
 800a204:	bd38      	pop	{r3, r4, r5, pc}
 800a206:	bf00      	nop
 800a208:	24000094 	.word	0x24000094

0800a20c <_malloc_r>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	1ccd      	adds	r5, r1, #3
 800a210:	f025 0503 	bic.w	r5, r5, #3
 800a214:	3508      	adds	r5, #8
 800a216:	2d0c      	cmp	r5, #12
 800a218:	bf38      	it	cc
 800a21a:	250c      	movcc	r5, #12
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	4606      	mov	r6, r0
 800a220:	db01      	blt.n	800a226 <_malloc_r+0x1a>
 800a222:	42a9      	cmp	r1, r5
 800a224:	d903      	bls.n	800a22e <_malloc_r+0x22>
 800a226:	230c      	movs	r3, #12
 800a228:	6033      	str	r3, [r6, #0]
 800a22a:	2000      	movs	r0, #0
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	f000 fb79 	bl	800a924 <__malloc_lock>
 800a232:	4a21      	ldr	r2, [pc, #132]	; (800a2b8 <_malloc_r+0xac>)
 800a234:	6814      	ldr	r4, [r2, #0]
 800a236:	4621      	mov	r1, r4
 800a238:	b991      	cbnz	r1, 800a260 <_malloc_r+0x54>
 800a23a:	4c20      	ldr	r4, [pc, #128]	; (800a2bc <_malloc_r+0xb0>)
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	b91b      	cbnz	r3, 800a248 <_malloc_r+0x3c>
 800a240:	4630      	mov	r0, r6
 800a242:	f000 f8a1 	bl	800a388 <_sbrk_r>
 800a246:	6020      	str	r0, [r4, #0]
 800a248:	4629      	mov	r1, r5
 800a24a:	4630      	mov	r0, r6
 800a24c:	f000 f89c 	bl	800a388 <_sbrk_r>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d124      	bne.n	800a29e <_malloc_r+0x92>
 800a254:	230c      	movs	r3, #12
 800a256:	6033      	str	r3, [r6, #0]
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 fb64 	bl	800a926 <__malloc_unlock>
 800a25e:	e7e4      	b.n	800a22a <_malloc_r+0x1e>
 800a260:	680b      	ldr	r3, [r1, #0]
 800a262:	1b5b      	subs	r3, r3, r5
 800a264:	d418      	bmi.n	800a298 <_malloc_r+0x8c>
 800a266:	2b0b      	cmp	r3, #11
 800a268:	d90f      	bls.n	800a28a <_malloc_r+0x7e>
 800a26a:	600b      	str	r3, [r1, #0]
 800a26c:	50cd      	str	r5, [r1, r3]
 800a26e:	18cc      	adds	r4, r1, r3
 800a270:	4630      	mov	r0, r6
 800a272:	f000 fb58 	bl	800a926 <__malloc_unlock>
 800a276:	f104 000b 	add.w	r0, r4, #11
 800a27a:	1d23      	adds	r3, r4, #4
 800a27c:	f020 0007 	bic.w	r0, r0, #7
 800a280:	1ac3      	subs	r3, r0, r3
 800a282:	d0d3      	beq.n	800a22c <_malloc_r+0x20>
 800a284:	425a      	negs	r2, r3
 800a286:	50e2      	str	r2, [r4, r3]
 800a288:	e7d0      	b.n	800a22c <_malloc_r+0x20>
 800a28a:	428c      	cmp	r4, r1
 800a28c:	684b      	ldr	r3, [r1, #4]
 800a28e:	bf16      	itet	ne
 800a290:	6063      	strne	r3, [r4, #4]
 800a292:	6013      	streq	r3, [r2, #0]
 800a294:	460c      	movne	r4, r1
 800a296:	e7eb      	b.n	800a270 <_malloc_r+0x64>
 800a298:	460c      	mov	r4, r1
 800a29a:	6849      	ldr	r1, [r1, #4]
 800a29c:	e7cc      	b.n	800a238 <_malloc_r+0x2c>
 800a29e:	1cc4      	adds	r4, r0, #3
 800a2a0:	f024 0403 	bic.w	r4, r4, #3
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d005      	beq.n	800a2b4 <_malloc_r+0xa8>
 800a2a8:	1a21      	subs	r1, r4, r0
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f000 f86c 	bl	800a388 <_sbrk_r>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d0cf      	beq.n	800a254 <_malloc_r+0x48>
 800a2b4:	6025      	str	r5, [r4, #0]
 800a2b6:	e7db      	b.n	800a270 <_malloc_r+0x64>
 800a2b8:	24000094 	.word	0x24000094
 800a2bc:	24000098 	.word	0x24000098

0800a2c0 <_puts_r>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	460e      	mov	r6, r1
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	b118      	cbz	r0, 800a2d0 <_puts_r+0x10>
 800a2c8:	6983      	ldr	r3, [r0, #24]
 800a2ca:	b90b      	cbnz	r3, 800a2d0 <_puts_r+0x10>
 800a2cc:	f000 fa3c 	bl	800a748 <__sinit>
 800a2d0:	69ab      	ldr	r3, [r5, #24]
 800a2d2:	68ac      	ldr	r4, [r5, #8]
 800a2d4:	b913      	cbnz	r3, 800a2dc <_puts_r+0x1c>
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 fa36 	bl	800a748 <__sinit>
 800a2dc:	4b23      	ldr	r3, [pc, #140]	; (800a36c <_puts_r+0xac>)
 800a2de:	429c      	cmp	r4, r3
 800a2e0:	d117      	bne.n	800a312 <_puts_r+0x52>
 800a2e2:	686c      	ldr	r4, [r5, #4]
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	071b      	lsls	r3, r3, #28
 800a2e8:	d51d      	bpl.n	800a326 <_puts_r+0x66>
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	b1db      	cbz	r3, 800a326 <_puts_r+0x66>
 800a2ee:	3e01      	subs	r6, #1
 800a2f0:	68a3      	ldr	r3, [r4, #8]
 800a2f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	60a3      	str	r3, [r4, #8]
 800a2fa:	b9e9      	cbnz	r1, 800a338 <_puts_r+0x78>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	da2e      	bge.n	800a35e <_puts_r+0x9e>
 800a300:	4622      	mov	r2, r4
 800a302:	210a      	movs	r1, #10
 800a304:	4628      	mov	r0, r5
 800a306:	f000 f86f 	bl	800a3e8 <__swbuf_r>
 800a30a:	3001      	adds	r0, #1
 800a30c:	d011      	beq.n	800a332 <_puts_r+0x72>
 800a30e:	200a      	movs	r0, #10
 800a310:	e011      	b.n	800a336 <_puts_r+0x76>
 800a312:	4b17      	ldr	r3, [pc, #92]	; (800a370 <_puts_r+0xb0>)
 800a314:	429c      	cmp	r4, r3
 800a316:	d101      	bne.n	800a31c <_puts_r+0x5c>
 800a318:	68ac      	ldr	r4, [r5, #8]
 800a31a:	e7e3      	b.n	800a2e4 <_puts_r+0x24>
 800a31c:	4b15      	ldr	r3, [pc, #84]	; (800a374 <_puts_r+0xb4>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	bf08      	it	eq
 800a322:	68ec      	ldreq	r4, [r5, #12]
 800a324:	e7de      	b.n	800a2e4 <_puts_r+0x24>
 800a326:	4621      	mov	r1, r4
 800a328:	4628      	mov	r0, r5
 800a32a:	f000 f8af 	bl	800a48c <__swsetup_r>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d0dd      	beq.n	800a2ee <_puts_r+0x2e>
 800a332:	f04f 30ff 	mov.w	r0, #4294967295
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	2b00      	cmp	r3, #0
 800a33a:	da04      	bge.n	800a346 <_puts_r+0x86>
 800a33c:	69a2      	ldr	r2, [r4, #24]
 800a33e:	429a      	cmp	r2, r3
 800a340:	dc06      	bgt.n	800a350 <_puts_r+0x90>
 800a342:	290a      	cmp	r1, #10
 800a344:	d004      	beq.n	800a350 <_puts_r+0x90>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	6022      	str	r2, [r4, #0]
 800a34c:	7019      	strb	r1, [r3, #0]
 800a34e:	e7cf      	b.n	800a2f0 <_puts_r+0x30>
 800a350:	4622      	mov	r2, r4
 800a352:	4628      	mov	r0, r5
 800a354:	f000 f848 	bl	800a3e8 <__swbuf_r>
 800a358:	3001      	adds	r0, #1
 800a35a:	d1c9      	bne.n	800a2f0 <_puts_r+0x30>
 800a35c:	e7e9      	b.n	800a332 <_puts_r+0x72>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	200a      	movs	r0, #10
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	7018      	strb	r0, [r3, #0]
 800a368:	e7e5      	b.n	800a336 <_puts_r+0x76>
 800a36a:	bf00      	nop
 800a36c:	0800b980 	.word	0x0800b980
 800a370:	0800b9a0 	.word	0x0800b9a0
 800a374:	0800b960 	.word	0x0800b960

0800a378 <puts>:
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <puts+0xc>)
 800a37a:	4601      	mov	r1, r0
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	f7ff bf9f 	b.w	800a2c0 <_puts_r>
 800a382:	bf00      	nop
 800a384:	24000010 	.word	0x24000010

0800a388 <_sbrk_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4c06      	ldr	r4, [pc, #24]	; (800a3a4 <_sbrk_r+0x1c>)
 800a38c:	2300      	movs	r3, #0
 800a38e:	4605      	mov	r5, r0
 800a390:	4608      	mov	r0, r1
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	f7f7 f98a 	bl	80016ac <_sbrk>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_sbrk_r+0x1a>
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_sbrk_r+0x1a>
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	2400037c 	.word	0x2400037c

0800a3a8 <siprintf>:
 800a3a8:	b40e      	push	{r1, r2, r3}
 800a3aa:	b500      	push	{lr}
 800a3ac:	b09c      	sub	sp, #112	; 0x70
 800a3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a3b0:	9002      	str	r0, [sp, #8]
 800a3b2:	9006      	str	r0, [sp, #24]
 800a3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3b8:	4809      	ldr	r0, [pc, #36]	; (800a3e0 <siprintf+0x38>)
 800a3ba:	9107      	str	r1, [sp, #28]
 800a3bc:	9104      	str	r1, [sp, #16]
 800a3be:	4909      	ldr	r1, [pc, #36]	; (800a3e4 <siprintf+0x3c>)
 800a3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c4:	9105      	str	r1, [sp, #20]
 800a3c6:	6800      	ldr	r0, [r0, #0]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	a902      	add	r1, sp, #8
 800a3cc:	f000 fb06 	bl	800a9dc <_svfiprintf_r>
 800a3d0:	9b02      	ldr	r3, [sp, #8]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	b01c      	add	sp, #112	; 0x70
 800a3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3dc:	b003      	add	sp, #12
 800a3de:	4770      	bx	lr
 800a3e0:	24000010 	.word	0x24000010
 800a3e4:	ffff0208 	.word	0xffff0208

0800a3e8 <__swbuf_r>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	460e      	mov	r6, r1
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	b118      	cbz	r0, 800a3fa <__swbuf_r+0x12>
 800a3f2:	6983      	ldr	r3, [r0, #24]
 800a3f4:	b90b      	cbnz	r3, 800a3fa <__swbuf_r+0x12>
 800a3f6:	f000 f9a7 	bl	800a748 <__sinit>
 800a3fa:	4b21      	ldr	r3, [pc, #132]	; (800a480 <__swbuf_r+0x98>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	d12a      	bne.n	800a456 <__swbuf_r+0x6e>
 800a400:	686c      	ldr	r4, [r5, #4]
 800a402:	69a3      	ldr	r3, [r4, #24]
 800a404:	60a3      	str	r3, [r4, #8]
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	071a      	lsls	r2, r3, #28
 800a40a:	d52e      	bpl.n	800a46a <__swbuf_r+0x82>
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	b363      	cbz	r3, 800a46a <__swbuf_r+0x82>
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	6820      	ldr	r0, [r4, #0]
 800a414:	1ac0      	subs	r0, r0, r3
 800a416:	6963      	ldr	r3, [r4, #20]
 800a418:	b2f6      	uxtb	r6, r6
 800a41a:	4283      	cmp	r3, r0
 800a41c:	4637      	mov	r7, r6
 800a41e:	dc04      	bgt.n	800a42a <__swbuf_r+0x42>
 800a420:	4621      	mov	r1, r4
 800a422:	4628      	mov	r0, r5
 800a424:	f000 f926 	bl	800a674 <_fflush_r>
 800a428:	bb28      	cbnz	r0, 800a476 <__swbuf_r+0x8e>
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	60a3      	str	r3, [r4, #8]
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	6022      	str	r2, [r4, #0]
 800a436:	701e      	strb	r6, [r3, #0]
 800a438:	6963      	ldr	r3, [r4, #20]
 800a43a:	3001      	adds	r0, #1
 800a43c:	4283      	cmp	r3, r0
 800a43e:	d004      	beq.n	800a44a <__swbuf_r+0x62>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	07db      	lsls	r3, r3, #31
 800a444:	d519      	bpl.n	800a47a <__swbuf_r+0x92>
 800a446:	2e0a      	cmp	r6, #10
 800a448:	d117      	bne.n	800a47a <__swbuf_r+0x92>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 f911 	bl	800a674 <_fflush_r>
 800a452:	b190      	cbz	r0, 800a47a <__swbuf_r+0x92>
 800a454:	e00f      	b.n	800a476 <__swbuf_r+0x8e>
 800a456:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <__swbuf_r+0x9c>)
 800a458:	429c      	cmp	r4, r3
 800a45a:	d101      	bne.n	800a460 <__swbuf_r+0x78>
 800a45c:	68ac      	ldr	r4, [r5, #8]
 800a45e:	e7d0      	b.n	800a402 <__swbuf_r+0x1a>
 800a460:	4b09      	ldr	r3, [pc, #36]	; (800a488 <__swbuf_r+0xa0>)
 800a462:	429c      	cmp	r4, r3
 800a464:	bf08      	it	eq
 800a466:	68ec      	ldreq	r4, [r5, #12]
 800a468:	e7cb      	b.n	800a402 <__swbuf_r+0x1a>
 800a46a:	4621      	mov	r1, r4
 800a46c:	4628      	mov	r0, r5
 800a46e:	f000 f80d 	bl	800a48c <__swsetup_r>
 800a472:	2800      	cmp	r0, #0
 800a474:	d0cc      	beq.n	800a410 <__swbuf_r+0x28>
 800a476:	f04f 37ff 	mov.w	r7, #4294967295
 800a47a:	4638      	mov	r0, r7
 800a47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47e:	bf00      	nop
 800a480:	0800b980 	.word	0x0800b980
 800a484:	0800b9a0 	.word	0x0800b9a0
 800a488:	0800b960 	.word	0x0800b960

0800a48c <__swsetup_r>:
 800a48c:	4b32      	ldr	r3, [pc, #200]	; (800a558 <__swsetup_r+0xcc>)
 800a48e:	b570      	push	{r4, r5, r6, lr}
 800a490:	681d      	ldr	r5, [r3, #0]
 800a492:	4606      	mov	r6, r0
 800a494:	460c      	mov	r4, r1
 800a496:	b125      	cbz	r5, 800a4a2 <__swsetup_r+0x16>
 800a498:	69ab      	ldr	r3, [r5, #24]
 800a49a:	b913      	cbnz	r3, 800a4a2 <__swsetup_r+0x16>
 800a49c:	4628      	mov	r0, r5
 800a49e:	f000 f953 	bl	800a748 <__sinit>
 800a4a2:	4b2e      	ldr	r3, [pc, #184]	; (800a55c <__swsetup_r+0xd0>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d10f      	bne.n	800a4c8 <__swsetup_r+0x3c>
 800a4a8:	686c      	ldr	r4, [r5, #4]
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	0715      	lsls	r5, r2, #28
 800a4b2:	d42c      	bmi.n	800a50e <__swsetup_r+0x82>
 800a4b4:	06d0      	lsls	r0, r2, #27
 800a4b6:	d411      	bmi.n	800a4dc <__swsetup_r+0x50>
 800a4b8:	2209      	movs	r2, #9
 800a4ba:	6032      	str	r2, [r6, #0]
 800a4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	e03e      	b.n	800a546 <__swsetup_r+0xba>
 800a4c8:	4b25      	ldr	r3, [pc, #148]	; (800a560 <__swsetup_r+0xd4>)
 800a4ca:	429c      	cmp	r4, r3
 800a4cc:	d101      	bne.n	800a4d2 <__swsetup_r+0x46>
 800a4ce:	68ac      	ldr	r4, [r5, #8]
 800a4d0:	e7eb      	b.n	800a4aa <__swsetup_r+0x1e>
 800a4d2:	4b24      	ldr	r3, [pc, #144]	; (800a564 <__swsetup_r+0xd8>)
 800a4d4:	429c      	cmp	r4, r3
 800a4d6:	bf08      	it	eq
 800a4d8:	68ec      	ldreq	r4, [r5, #12]
 800a4da:	e7e6      	b.n	800a4aa <__swsetup_r+0x1e>
 800a4dc:	0751      	lsls	r1, r2, #29
 800a4de:	d512      	bpl.n	800a506 <__swsetup_r+0x7a>
 800a4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4e2:	b141      	cbz	r1, 800a4f6 <__swsetup_r+0x6a>
 800a4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e8:	4299      	cmp	r1, r3
 800a4ea:	d002      	beq.n	800a4f2 <__swsetup_r+0x66>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff fe3f 	bl	800a170 <_free_r>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4fc:	81a3      	strh	r3, [r4, #12]
 800a4fe:	2300      	movs	r3, #0
 800a500:	6063      	str	r3, [r4, #4]
 800a502:	6923      	ldr	r3, [r4, #16]
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	f043 0308 	orr.w	r3, r3, #8
 800a50c:	81a3      	strh	r3, [r4, #12]
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	b94b      	cbnz	r3, 800a526 <__swsetup_r+0x9a>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a51c:	d003      	beq.n	800a526 <__swsetup_r+0x9a>
 800a51e:	4621      	mov	r1, r4
 800a520:	4630      	mov	r0, r6
 800a522:	f000 f9bf 	bl	800a8a4 <__smakebuf_r>
 800a526:	89a2      	ldrh	r2, [r4, #12]
 800a528:	f012 0301 	ands.w	r3, r2, #1
 800a52c:	d00c      	beq.n	800a548 <__swsetup_r+0xbc>
 800a52e:	2300      	movs	r3, #0
 800a530:	60a3      	str	r3, [r4, #8]
 800a532:	6963      	ldr	r3, [r4, #20]
 800a534:	425b      	negs	r3, r3
 800a536:	61a3      	str	r3, [r4, #24]
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	b953      	cbnz	r3, 800a552 <__swsetup_r+0xc6>
 800a53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a540:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a544:	d1ba      	bne.n	800a4bc <__swsetup_r+0x30>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	0792      	lsls	r2, r2, #30
 800a54a:	bf58      	it	pl
 800a54c:	6963      	ldrpl	r3, [r4, #20]
 800a54e:	60a3      	str	r3, [r4, #8]
 800a550:	e7f2      	b.n	800a538 <__swsetup_r+0xac>
 800a552:	2000      	movs	r0, #0
 800a554:	e7f7      	b.n	800a546 <__swsetup_r+0xba>
 800a556:	bf00      	nop
 800a558:	24000010 	.word	0x24000010
 800a55c:	0800b980 	.word	0x0800b980
 800a560:	0800b9a0 	.word	0x0800b9a0
 800a564:	0800b960 	.word	0x0800b960

0800a568 <__sflush_r>:
 800a568:	898a      	ldrh	r2, [r1, #12]
 800a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	4605      	mov	r5, r0
 800a570:	0710      	lsls	r0, r2, #28
 800a572:	460c      	mov	r4, r1
 800a574:	d458      	bmi.n	800a628 <__sflush_r+0xc0>
 800a576:	684b      	ldr	r3, [r1, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	dc05      	bgt.n	800a588 <__sflush_r+0x20>
 800a57c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	dc02      	bgt.n	800a588 <__sflush_r+0x20>
 800a582:	2000      	movs	r0, #0
 800a584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a58a:	2e00      	cmp	r6, #0
 800a58c:	d0f9      	beq.n	800a582 <__sflush_r+0x1a>
 800a58e:	2300      	movs	r3, #0
 800a590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a594:	682f      	ldr	r7, [r5, #0]
 800a596:	6a21      	ldr	r1, [r4, #32]
 800a598:	602b      	str	r3, [r5, #0]
 800a59a:	d032      	beq.n	800a602 <__sflush_r+0x9a>
 800a59c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	075a      	lsls	r2, r3, #29
 800a5a2:	d505      	bpl.n	800a5b0 <__sflush_r+0x48>
 800a5a4:	6863      	ldr	r3, [r4, #4]
 800a5a6:	1ac0      	subs	r0, r0, r3
 800a5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5aa:	b10b      	cbz	r3, 800a5b0 <__sflush_r+0x48>
 800a5ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5ae:	1ac0      	subs	r0, r0, r3
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5b6:	6a21      	ldr	r1, [r4, #32]
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b0      	blx	r6
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	d106      	bne.n	800a5d0 <__sflush_r+0x68>
 800a5c2:	6829      	ldr	r1, [r5, #0]
 800a5c4:	291d      	cmp	r1, #29
 800a5c6:	d848      	bhi.n	800a65a <__sflush_r+0xf2>
 800a5c8:	4a29      	ldr	r2, [pc, #164]	; (800a670 <__sflush_r+0x108>)
 800a5ca:	40ca      	lsrs	r2, r1
 800a5cc:	07d6      	lsls	r6, r2, #31
 800a5ce:	d544      	bpl.n	800a65a <__sflush_r+0xf2>
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	6062      	str	r2, [r4, #4]
 800a5d4:	04d9      	lsls	r1, r3, #19
 800a5d6:	6922      	ldr	r2, [r4, #16]
 800a5d8:	6022      	str	r2, [r4, #0]
 800a5da:	d504      	bpl.n	800a5e6 <__sflush_r+0x7e>
 800a5dc:	1c42      	adds	r2, r0, #1
 800a5de:	d101      	bne.n	800a5e4 <__sflush_r+0x7c>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b903      	cbnz	r3, 800a5e6 <__sflush_r+0x7e>
 800a5e4:	6560      	str	r0, [r4, #84]	; 0x54
 800a5e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5e8:	602f      	str	r7, [r5, #0]
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	d0c9      	beq.n	800a582 <__sflush_r+0x1a>
 800a5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5f2:	4299      	cmp	r1, r3
 800a5f4:	d002      	beq.n	800a5fc <__sflush_r+0x94>
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f7ff fdba 	bl	800a170 <_free_r>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	6360      	str	r0, [r4, #52]	; 0x34
 800a600:	e7c0      	b.n	800a584 <__sflush_r+0x1c>
 800a602:	2301      	movs	r3, #1
 800a604:	4628      	mov	r0, r5
 800a606:	47b0      	blx	r6
 800a608:	1c41      	adds	r1, r0, #1
 800a60a:	d1c8      	bne.n	800a59e <__sflush_r+0x36>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0c5      	beq.n	800a59e <__sflush_r+0x36>
 800a612:	2b1d      	cmp	r3, #29
 800a614:	d001      	beq.n	800a61a <__sflush_r+0xb2>
 800a616:	2b16      	cmp	r3, #22
 800a618:	d101      	bne.n	800a61e <__sflush_r+0xb6>
 800a61a:	602f      	str	r7, [r5, #0]
 800a61c:	e7b1      	b.n	800a582 <__sflush_r+0x1a>
 800a61e:	89a3      	ldrh	r3, [r4, #12]
 800a620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a624:	81a3      	strh	r3, [r4, #12]
 800a626:	e7ad      	b.n	800a584 <__sflush_r+0x1c>
 800a628:	690f      	ldr	r7, [r1, #16]
 800a62a:	2f00      	cmp	r7, #0
 800a62c:	d0a9      	beq.n	800a582 <__sflush_r+0x1a>
 800a62e:	0793      	lsls	r3, r2, #30
 800a630:	680e      	ldr	r6, [r1, #0]
 800a632:	bf08      	it	eq
 800a634:	694b      	ldreq	r3, [r1, #20]
 800a636:	600f      	str	r7, [r1, #0]
 800a638:	bf18      	it	ne
 800a63a:	2300      	movne	r3, #0
 800a63c:	eba6 0807 	sub.w	r8, r6, r7
 800a640:	608b      	str	r3, [r1, #8]
 800a642:	f1b8 0f00 	cmp.w	r8, #0
 800a646:	dd9c      	ble.n	800a582 <__sflush_r+0x1a>
 800a648:	4643      	mov	r3, r8
 800a64a:	463a      	mov	r2, r7
 800a64c:	6a21      	ldr	r1, [r4, #32]
 800a64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a650:	4628      	mov	r0, r5
 800a652:	47b0      	blx	r6
 800a654:	2800      	cmp	r0, #0
 800a656:	dc06      	bgt.n	800a666 <__sflush_r+0xfe>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	e78e      	b.n	800a584 <__sflush_r+0x1c>
 800a666:	4407      	add	r7, r0
 800a668:	eba8 0800 	sub.w	r8, r8, r0
 800a66c:	e7e9      	b.n	800a642 <__sflush_r+0xda>
 800a66e:	bf00      	nop
 800a670:	20400001 	.word	0x20400001

0800a674 <_fflush_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	690b      	ldr	r3, [r1, #16]
 800a678:	4605      	mov	r5, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	b1db      	cbz	r3, 800a6b6 <_fflush_r+0x42>
 800a67e:	b118      	cbz	r0, 800a688 <_fflush_r+0x14>
 800a680:	6983      	ldr	r3, [r0, #24]
 800a682:	b90b      	cbnz	r3, 800a688 <_fflush_r+0x14>
 800a684:	f000 f860 	bl	800a748 <__sinit>
 800a688:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <_fflush_r+0x48>)
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d109      	bne.n	800a6a2 <_fflush_r+0x2e>
 800a68e:	686c      	ldr	r4, [r5, #4]
 800a690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a694:	b17b      	cbz	r3, 800a6b6 <_fflush_r+0x42>
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a69e:	f7ff bf63 	b.w	800a568 <__sflush_r>
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <_fflush_r+0x4c>)
 800a6a4:	429c      	cmp	r4, r3
 800a6a6:	d101      	bne.n	800a6ac <_fflush_r+0x38>
 800a6a8:	68ac      	ldr	r4, [r5, #8]
 800a6aa:	e7f1      	b.n	800a690 <_fflush_r+0x1c>
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <_fflush_r+0x50>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	bf08      	it	eq
 800a6b2:	68ec      	ldreq	r4, [r5, #12]
 800a6b4:	e7ec      	b.n	800a690 <_fflush_r+0x1c>
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800b980 	.word	0x0800b980
 800a6c0:	0800b9a0 	.word	0x0800b9a0
 800a6c4:	0800b960 	.word	0x0800b960

0800a6c8 <std>:
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	b510      	push	{r4, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a6d2:	6083      	str	r3, [r0, #8]
 800a6d4:	8181      	strh	r1, [r0, #12]
 800a6d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a6d8:	81c2      	strh	r2, [r0, #14]
 800a6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6de:	6183      	str	r3, [r0, #24]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	2208      	movs	r2, #8
 800a6e4:	305c      	adds	r0, #92	; 0x5c
 800a6e6:	f7ff fd2d 	bl	800a144 <memset>
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <std+0x38>)
 800a6ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <std+0x3c>)
 800a6f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <std+0x40>)
 800a6f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6f6:	4b05      	ldr	r3, [pc, #20]	; (800a70c <std+0x44>)
 800a6f8:	6224      	str	r4, [r4, #32]
 800a6fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	bf00      	nop
 800a700:	0800aedd 	.word	0x0800aedd
 800a704:	0800aeff 	.word	0x0800aeff
 800a708:	0800af37 	.word	0x0800af37
 800a70c:	0800af5b 	.word	0x0800af5b

0800a710 <_cleanup_r>:
 800a710:	4901      	ldr	r1, [pc, #4]	; (800a718 <_cleanup_r+0x8>)
 800a712:	f000 b885 	b.w	800a820 <_fwalk_reent>
 800a716:	bf00      	nop
 800a718:	0800a675 	.word	0x0800a675

0800a71c <__sfmoreglue>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	1e4a      	subs	r2, r1, #1
 800a720:	2568      	movs	r5, #104	; 0x68
 800a722:	4355      	muls	r5, r2
 800a724:	460e      	mov	r6, r1
 800a726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a72a:	f7ff fd6f 	bl	800a20c <_malloc_r>
 800a72e:	4604      	mov	r4, r0
 800a730:	b140      	cbz	r0, 800a744 <__sfmoreglue+0x28>
 800a732:	2100      	movs	r1, #0
 800a734:	e9c0 1600 	strd	r1, r6, [r0]
 800a738:	300c      	adds	r0, #12
 800a73a:	60a0      	str	r0, [r4, #8]
 800a73c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a740:	f7ff fd00 	bl	800a144 <memset>
 800a744:	4620      	mov	r0, r4
 800a746:	bd70      	pop	{r4, r5, r6, pc}

0800a748 <__sinit>:
 800a748:	6983      	ldr	r3, [r0, #24]
 800a74a:	b510      	push	{r4, lr}
 800a74c:	4604      	mov	r4, r0
 800a74e:	bb33      	cbnz	r3, 800a79e <__sinit+0x56>
 800a750:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a754:	6503      	str	r3, [r0, #80]	; 0x50
 800a756:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <__sinit+0x58>)
 800a758:	4a12      	ldr	r2, [pc, #72]	; (800a7a4 <__sinit+0x5c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6282      	str	r2, [r0, #40]	; 0x28
 800a75e:	4298      	cmp	r0, r3
 800a760:	bf04      	itt	eq
 800a762:	2301      	moveq	r3, #1
 800a764:	6183      	streq	r3, [r0, #24]
 800a766:	f000 f81f 	bl	800a7a8 <__sfp>
 800a76a:	6060      	str	r0, [r4, #4]
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 f81b 	bl	800a7a8 <__sfp>
 800a772:	60a0      	str	r0, [r4, #8]
 800a774:	4620      	mov	r0, r4
 800a776:	f000 f817 	bl	800a7a8 <__sfp>
 800a77a:	2200      	movs	r2, #0
 800a77c:	60e0      	str	r0, [r4, #12]
 800a77e:	2104      	movs	r1, #4
 800a780:	6860      	ldr	r0, [r4, #4]
 800a782:	f7ff ffa1 	bl	800a6c8 <std>
 800a786:	2201      	movs	r2, #1
 800a788:	2109      	movs	r1, #9
 800a78a:	68a0      	ldr	r0, [r4, #8]
 800a78c:	f7ff ff9c 	bl	800a6c8 <std>
 800a790:	2202      	movs	r2, #2
 800a792:	2112      	movs	r1, #18
 800a794:	68e0      	ldr	r0, [r4, #12]
 800a796:	f7ff ff97 	bl	800a6c8 <std>
 800a79a:	2301      	movs	r3, #1
 800a79c:	61a3      	str	r3, [r4, #24]
 800a79e:	bd10      	pop	{r4, pc}
 800a7a0:	0800b95c 	.word	0x0800b95c
 800a7a4:	0800a711 	.word	0x0800a711

0800a7a8 <__sfp>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	4b1b      	ldr	r3, [pc, #108]	; (800a818 <__sfp+0x70>)
 800a7ac:	681e      	ldr	r6, [r3, #0]
 800a7ae:	69b3      	ldr	r3, [r6, #24]
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	b913      	cbnz	r3, 800a7ba <__sfp+0x12>
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7ff ffc7 	bl	800a748 <__sinit>
 800a7ba:	3648      	adds	r6, #72	; 0x48
 800a7bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	d503      	bpl.n	800a7cc <__sfp+0x24>
 800a7c4:	6833      	ldr	r3, [r6, #0]
 800a7c6:	b133      	cbz	r3, 800a7d6 <__sfp+0x2e>
 800a7c8:	6836      	ldr	r6, [r6, #0]
 800a7ca:	e7f7      	b.n	800a7bc <__sfp+0x14>
 800a7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7d0:	b16d      	cbz	r5, 800a7ee <__sfp+0x46>
 800a7d2:	3468      	adds	r4, #104	; 0x68
 800a7d4:	e7f4      	b.n	800a7c0 <__sfp+0x18>
 800a7d6:	2104      	movs	r1, #4
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff9f 	bl	800a71c <__sfmoreglue>
 800a7de:	6030      	str	r0, [r6, #0]
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d1f1      	bne.n	800a7c8 <__sfp+0x20>
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ee:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <__sfp+0x74>)
 800a7f0:	6665      	str	r5, [r4, #100]	; 0x64
 800a7f2:	e9c4 5500 	strd	r5, r5, [r4]
 800a7f6:	60a5      	str	r5, [r4, #8]
 800a7f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a7fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a800:	2208      	movs	r2, #8
 800a802:	4629      	mov	r1, r5
 800a804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a808:	f7ff fc9c 	bl	800a144 <memset>
 800a80c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a814:	e7e9      	b.n	800a7ea <__sfp+0x42>
 800a816:	bf00      	nop
 800a818:	0800b95c 	.word	0x0800b95c
 800a81c:	ffff0001 	.word	0xffff0001

0800a820 <_fwalk_reent>:
 800a820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a82c:	2600      	movs	r6, #0
 800a82e:	b914      	cbnz	r4, 800a836 <_fwalk_reent+0x16>
 800a830:	4630      	mov	r0, r6
 800a832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a836:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a83a:	3f01      	subs	r7, #1
 800a83c:	d501      	bpl.n	800a842 <_fwalk_reent+0x22>
 800a83e:	6824      	ldr	r4, [r4, #0]
 800a840:	e7f5      	b.n	800a82e <_fwalk_reent+0xe>
 800a842:	89ab      	ldrh	r3, [r5, #12]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d907      	bls.n	800a858 <_fwalk_reent+0x38>
 800a848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a84c:	3301      	adds	r3, #1
 800a84e:	d003      	beq.n	800a858 <_fwalk_reent+0x38>
 800a850:	4629      	mov	r1, r5
 800a852:	4640      	mov	r0, r8
 800a854:	47c8      	blx	r9
 800a856:	4306      	orrs	r6, r0
 800a858:	3568      	adds	r5, #104	; 0x68
 800a85a:	e7ee      	b.n	800a83a <_fwalk_reent+0x1a>

0800a85c <__swhatbuf_r>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	460e      	mov	r6, r1
 800a860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a864:	2900      	cmp	r1, #0
 800a866:	b096      	sub	sp, #88	; 0x58
 800a868:	4614      	mov	r4, r2
 800a86a:	461d      	mov	r5, r3
 800a86c:	da07      	bge.n	800a87e <__swhatbuf_r+0x22>
 800a86e:	2300      	movs	r3, #0
 800a870:	602b      	str	r3, [r5, #0]
 800a872:	89b3      	ldrh	r3, [r6, #12]
 800a874:	061a      	lsls	r2, r3, #24
 800a876:	d410      	bmi.n	800a89a <__swhatbuf_r+0x3e>
 800a878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a87c:	e00e      	b.n	800a89c <__swhatbuf_r+0x40>
 800a87e:	466a      	mov	r2, sp
 800a880:	f000 fb92 	bl	800afa8 <_fstat_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	dbf2      	blt.n	800a86e <__swhatbuf_r+0x12>
 800a888:	9a01      	ldr	r2, [sp, #4]
 800a88a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a88e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a892:	425a      	negs	r2, r3
 800a894:	415a      	adcs	r2, r3
 800a896:	602a      	str	r2, [r5, #0]
 800a898:	e7ee      	b.n	800a878 <__swhatbuf_r+0x1c>
 800a89a:	2340      	movs	r3, #64	; 0x40
 800a89c:	2000      	movs	r0, #0
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	b016      	add	sp, #88	; 0x58
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}

0800a8a4 <__smakebuf_r>:
 800a8a4:	898b      	ldrh	r3, [r1, #12]
 800a8a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8a8:	079d      	lsls	r5, r3, #30
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	d507      	bpl.n	800a8c0 <__smakebuf_r+0x1c>
 800a8b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	6123      	str	r3, [r4, #16]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	6163      	str	r3, [r4, #20]
 800a8bc:	b002      	add	sp, #8
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	ab01      	add	r3, sp, #4
 800a8c2:	466a      	mov	r2, sp
 800a8c4:	f7ff ffca 	bl	800a85c <__swhatbuf_r>
 800a8c8:	9900      	ldr	r1, [sp, #0]
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f7ff fc9d 	bl	800a20c <_malloc_r>
 800a8d2:	b948      	cbnz	r0, 800a8e8 <__smakebuf_r+0x44>
 800a8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d8:	059a      	lsls	r2, r3, #22
 800a8da:	d4ef      	bmi.n	800a8bc <__smakebuf_r+0x18>
 800a8dc:	f023 0303 	bic.w	r3, r3, #3
 800a8e0:	f043 0302 	orr.w	r3, r3, #2
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	e7e3      	b.n	800a8b0 <__smakebuf_r+0xc>
 800a8e8:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <__smakebuf_r+0x7c>)
 800a8ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	6020      	str	r0, [r4, #0]
 800a8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f4:	81a3      	strh	r3, [r4, #12]
 800a8f6:	9b00      	ldr	r3, [sp, #0]
 800a8f8:	6163      	str	r3, [r4, #20]
 800a8fa:	9b01      	ldr	r3, [sp, #4]
 800a8fc:	6120      	str	r0, [r4, #16]
 800a8fe:	b15b      	cbz	r3, 800a918 <__smakebuf_r+0x74>
 800a900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a904:	4630      	mov	r0, r6
 800a906:	f000 fb61 	bl	800afcc <_isatty_r>
 800a90a:	b128      	cbz	r0, 800a918 <__smakebuf_r+0x74>
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	f043 0301 	orr.w	r3, r3, #1
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	431d      	orrs	r5, r3
 800a91c:	81a5      	strh	r5, [r4, #12]
 800a91e:	e7cd      	b.n	800a8bc <__smakebuf_r+0x18>
 800a920:	0800a711 	.word	0x0800a711

0800a924 <__malloc_lock>:
 800a924:	4770      	bx	lr

0800a926 <__malloc_unlock>:
 800a926:	4770      	bx	lr

0800a928 <__ssputs_r>:
 800a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	688e      	ldr	r6, [r1, #8]
 800a92e:	429e      	cmp	r6, r3
 800a930:	4682      	mov	sl, r0
 800a932:	460c      	mov	r4, r1
 800a934:	4690      	mov	r8, r2
 800a936:	4699      	mov	r9, r3
 800a938:	d837      	bhi.n	800a9aa <__ssputs_r+0x82>
 800a93a:	898a      	ldrh	r2, [r1, #12]
 800a93c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a940:	d031      	beq.n	800a9a6 <__ssputs_r+0x7e>
 800a942:	6825      	ldr	r5, [r4, #0]
 800a944:	6909      	ldr	r1, [r1, #16]
 800a946:	1a6f      	subs	r7, r5, r1
 800a948:	6965      	ldr	r5, [r4, #20]
 800a94a:	2302      	movs	r3, #2
 800a94c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a950:	fb95 f5f3 	sdiv	r5, r5, r3
 800a954:	f109 0301 	add.w	r3, r9, #1
 800a958:	443b      	add	r3, r7
 800a95a:	429d      	cmp	r5, r3
 800a95c:	bf38      	it	cc
 800a95e:	461d      	movcc	r5, r3
 800a960:	0553      	lsls	r3, r2, #21
 800a962:	d530      	bpl.n	800a9c6 <__ssputs_r+0x9e>
 800a964:	4629      	mov	r1, r5
 800a966:	f7ff fc51 	bl	800a20c <_malloc_r>
 800a96a:	4606      	mov	r6, r0
 800a96c:	b950      	cbnz	r0, 800a984 <__ssputs_r+0x5c>
 800a96e:	230c      	movs	r3, #12
 800a970:	f8ca 3000 	str.w	r3, [sl]
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a984:	463a      	mov	r2, r7
 800a986:	6921      	ldr	r1, [r4, #16]
 800a988:	f000 fb42 	bl	800b010 <memcpy>
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	6126      	str	r6, [r4, #16]
 800a99a:	6165      	str	r5, [r4, #20]
 800a99c:	443e      	add	r6, r7
 800a99e:	1bed      	subs	r5, r5, r7
 800a9a0:	6026      	str	r6, [r4, #0]
 800a9a2:	60a5      	str	r5, [r4, #8]
 800a9a4:	464e      	mov	r6, r9
 800a9a6:	454e      	cmp	r6, r9
 800a9a8:	d900      	bls.n	800a9ac <__ssputs_r+0x84>
 800a9aa:	464e      	mov	r6, r9
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	4641      	mov	r1, r8
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	f000 fb38 	bl	800b026 <memmove>
 800a9b6:	68a3      	ldr	r3, [r4, #8]
 800a9b8:	1b9b      	subs	r3, r3, r6
 800a9ba:	60a3      	str	r3, [r4, #8]
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	441e      	add	r6, r3
 800a9c0:	6026      	str	r6, [r4, #0]
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e7dc      	b.n	800a980 <__ssputs_r+0x58>
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	f000 fb46 	bl	800b058 <_realloc_r>
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d1e2      	bne.n	800a998 <__ssputs_r+0x70>
 800a9d2:	6921      	ldr	r1, [r4, #16]
 800a9d4:	4650      	mov	r0, sl
 800a9d6:	f7ff fbcb 	bl	800a170 <_free_r>
 800a9da:	e7c8      	b.n	800a96e <__ssputs_r+0x46>

0800a9dc <_svfiprintf_r>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	461d      	mov	r5, r3
 800a9e2:	898b      	ldrh	r3, [r1, #12]
 800a9e4:	061f      	lsls	r7, r3, #24
 800a9e6:	b09d      	sub	sp, #116	; 0x74
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	d50f      	bpl.n	800aa10 <_svfiprintf_r+0x34>
 800a9f0:	690b      	ldr	r3, [r1, #16]
 800a9f2:	b96b      	cbnz	r3, 800aa10 <_svfiprintf_r+0x34>
 800a9f4:	2140      	movs	r1, #64	; 0x40
 800a9f6:	f7ff fc09 	bl	800a20c <_malloc_r>
 800a9fa:	6020      	str	r0, [r4, #0]
 800a9fc:	6120      	str	r0, [r4, #16]
 800a9fe:	b928      	cbnz	r0, 800aa0c <_svfiprintf_r+0x30>
 800aa00:	230c      	movs	r3, #12
 800aa02:	f8c8 3000 	str.w	r3, [r8]
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0a:	e0c8      	b.n	800ab9e <_svfiprintf_r+0x1c2>
 800aa0c:	2340      	movs	r3, #64	; 0x40
 800aa0e:	6163      	str	r3, [r4, #20]
 800aa10:	2300      	movs	r3, #0
 800aa12:	9309      	str	r3, [sp, #36]	; 0x24
 800aa14:	2320      	movs	r3, #32
 800aa16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa1a:	2330      	movs	r3, #48	; 0x30
 800aa1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa20:	9503      	str	r5, [sp, #12]
 800aa22:	f04f 0b01 	mov.w	fp, #1
 800aa26:	4637      	mov	r7, r6
 800aa28:	463d      	mov	r5, r7
 800aa2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa2e:	b10b      	cbz	r3, 800aa34 <_svfiprintf_r+0x58>
 800aa30:	2b25      	cmp	r3, #37	; 0x25
 800aa32:	d13e      	bne.n	800aab2 <_svfiprintf_r+0xd6>
 800aa34:	ebb7 0a06 	subs.w	sl, r7, r6
 800aa38:	d00b      	beq.n	800aa52 <_svfiprintf_r+0x76>
 800aa3a:	4653      	mov	r3, sl
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4640      	mov	r0, r8
 800aa42:	f7ff ff71 	bl	800a928 <__ssputs_r>
 800aa46:	3001      	adds	r0, #1
 800aa48:	f000 80a4 	beq.w	800ab94 <_svfiprintf_r+0x1b8>
 800aa4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4e:	4453      	add	r3, sl
 800aa50:	9309      	str	r3, [sp, #36]	; 0x24
 800aa52:	783b      	ldrb	r3, [r7, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 809d 	beq.w	800ab94 <_svfiprintf_r+0x1b8>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	9307      	str	r3, [sp, #28]
 800aa68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa6c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa6e:	462f      	mov	r7, r5
 800aa70:	2205      	movs	r2, #5
 800aa72:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aa76:	4850      	ldr	r0, [pc, #320]	; (800abb8 <_svfiprintf_r+0x1dc>)
 800aa78:	f7f5 fc3a 	bl	80002f0 <memchr>
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	b9d0      	cbnz	r0, 800aab6 <_svfiprintf_r+0xda>
 800aa80:	06d9      	lsls	r1, r3, #27
 800aa82:	bf44      	itt	mi
 800aa84:	2220      	movmi	r2, #32
 800aa86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa8a:	071a      	lsls	r2, r3, #28
 800aa8c:	bf44      	itt	mi
 800aa8e:	222b      	movmi	r2, #43	; 0x2b
 800aa90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aa94:	782a      	ldrb	r2, [r5, #0]
 800aa96:	2a2a      	cmp	r2, #42	; 0x2a
 800aa98:	d015      	beq.n	800aac6 <_svfiprintf_r+0xea>
 800aa9a:	9a07      	ldr	r2, [sp, #28]
 800aa9c:	462f      	mov	r7, r5
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	250a      	movs	r5, #10
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaa8:	3b30      	subs	r3, #48	; 0x30
 800aaaa:	2b09      	cmp	r3, #9
 800aaac:	d94d      	bls.n	800ab4a <_svfiprintf_r+0x16e>
 800aaae:	b1b8      	cbz	r0, 800aae0 <_svfiprintf_r+0x104>
 800aab0:	e00f      	b.n	800aad2 <_svfiprintf_r+0xf6>
 800aab2:	462f      	mov	r7, r5
 800aab4:	e7b8      	b.n	800aa28 <_svfiprintf_r+0x4c>
 800aab6:	4a40      	ldr	r2, [pc, #256]	; (800abb8 <_svfiprintf_r+0x1dc>)
 800aab8:	1a80      	subs	r0, r0, r2
 800aaba:	fa0b f000 	lsl.w	r0, fp, r0
 800aabe:	4318      	orrs	r0, r3
 800aac0:	9004      	str	r0, [sp, #16]
 800aac2:	463d      	mov	r5, r7
 800aac4:	e7d3      	b.n	800aa6e <_svfiprintf_r+0x92>
 800aac6:	9a03      	ldr	r2, [sp, #12]
 800aac8:	1d11      	adds	r1, r2, #4
 800aaca:	6812      	ldr	r2, [r2, #0]
 800aacc:	9103      	str	r1, [sp, #12]
 800aace:	2a00      	cmp	r2, #0
 800aad0:	db01      	blt.n	800aad6 <_svfiprintf_r+0xfa>
 800aad2:	9207      	str	r2, [sp, #28]
 800aad4:	e004      	b.n	800aae0 <_svfiprintf_r+0x104>
 800aad6:	4252      	negs	r2, r2
 800aad8:	f043 0302 	orr.w	r3, r3, #2
 800aadc:	9207      	str	r2, [sp, #28]
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	783b      	ldrb	r3, [r7, #0]
 800aae2:	2b2e      	cmp	r3, #46	; 0x2e
 800aae4:	d10c      	bne.n	800ab00 <_svfiprintf_r+0x124>
 800aae6:	787b      	ldrb	r3, [r7, #1]
 800aae8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaea:	d133      	bne.n	800ab54 <_svfiprintf_r+0x178>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	9203      	str	r2, [sp, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfb8      	it	lt
 800aaf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aafc:	3702      	adds	r7, #2
 800aafe:	9305      	str	r3, [sp, #20]
 800ab00:	4d2e      	ldr	r5, [pc, #184]	; (800abbc <_svfiprintf_r+0x1e0>)
 800ab02:	7839      	ldrb	r1, [r7, #0]
 800ab04:	2203      	movs	r2, #3
 800ab06:	4628      	mov	r0, r5
 800ab08:	f7f5 fbf2 	bl	80002f0 <memchr>
 800ab0c:	b138      	cbz	r0, 800ab1e <_svfiprintf_r+0x142>
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	1b40      	subs	r0, r0, r5
 800ab12:	fa03 f000 	lsl.w	r0, r3, r0
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	4303      	orrs	r3, r0
 800ab1a:	3701      	adds	r7, #1
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	7839      	ldrb	r1, [r7, #0]
 800ab20:	4827      	ldr	r0, [pc, #156]	; (800abc0 <_svfiprintf_r+0x1e4>)
 800ab22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab26:	2206      	movs	r2, #6
 800ab28:	1c7e      	adds	r6, r7, #1
 800ab2a:	f7f5 fbe1 	bl	80002f0 <memchr>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d038      	beq.n	800aba4 <_svfiprintf_r+0x1c8>
 800ab32:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <_svfiprintf_r+0x1e8>)
 800ab34:	bb13      	cbnz	r3, 800ab7c <_svfiprintf_r+0x1a0>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	3307      	adds	r3, #7
 800ab3a:	f023 0307 	bic.w	r3, r3, #7
 800ab3e:	3308      	adds	r3, #8
 800ab40:	9303      	str	r3, [sp, #12]
 800ab42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab44:	444b      	add	r3, r9
 800ab46:	9309      	str	r3, [sp, #36]	; 0x24
 800ab48:	e76d      	b.n	800aa26 <_svfiprintf_r+0x4a>
 800ab4a:	fb05 3202 	mla	r2, r5, r2, r3
 800ab4e:	2001      	movs	r0, #1
 800ab50:	460f      	mov	r7, r1
 800ab52:	e7a6      	b.n	800aaa2 <_svfiprintf_r+0xc6>
 800ab54:	2300      	movs	r3, #0
 800ab56:	3701      	adds	r7, #1
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	250a      	movs	r5, #10
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab64:	3a30      	subs	r2, #48	; 0x30
 800ab66:	2a09      	cmp	r2, #9
 800ab68:	d903      	bls.n	800ab72 <_svfiprintf_r+0x196>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0c8      	beq.n	800ab00 <_svfiprintf_r+0x124>
 800ab6e:	9105      	str	r1, [sp, #20]
 800ab70:	e7c6      	b.n	800ab00 <_svfiprintf_r+0x124>
 800ab72:	fb05 2101 	mla	r1, r5, r1, r2
 800ab76:	2301      	movs	r3, #1
 800ab78:	4607      	mov	r7, r0
 800ab7a:	e7f0      	b.n	800ab5e <_svfiprintf_r+0x182>
 800ab7c:	ab03      	add	r3, sp, #12
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	4622      	mov	r2, r4
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <_svfiprintf_r+0x1ec>)
 800ab84:	a904      	add	r1, sp, #16
 800ab86:	4640      	mov	r0, r8
 800ab88:	f3af 8000 	nop.w
 800ab8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ab90:	4681      	mov	r9, r0
 800ab92:	d1d6      	bne.n	800ab42 <_svfiprintf_r+0x166>
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	065b      	lsls	r3, r3, #25
 800ab98:	f53f af35 	bmi.w	800aa06 <_svfiprintf_r+0x2a>
 800ab9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab9e:	b01d      	add	sp, #116	; 0x74
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	4622      	mov	r2, r4
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <_svfiprintf_r+0x1ec>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4640      	mov	r0, r8
 800abb0:	f000 f882 	bl	800acb8 <_printf_i>
 800abb4:	e7ea      	b.n	800ab8c <_svfiprintf_r+0x1b0>
 800abb6:	bf00      	nop
 800abb8:	0800b9c0 	.word	0x0800b9c0
 800abbc:	0800b9c6 	.word	0x0800b9c6
 800abc0:	0800b9ca 	.word	0x0800b9ca
 800abc4:	00000000 	.word	0x00000000
 800abc8:	0800a929 	.word	0x0800a929

0800abcc <_printf_common>:
 800abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	4691      	mov	r9, r2
 800abd2:	461f      	mov	r7, r3
 800abd4:	688a      	ldr	r2, [r1, #8]
 800abd6:	690b      	ldr	r3, [r1, #16]
 800abd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abdc:	4293      	cmp	r3, r2
 800abde:	bfb8      	it	lt
 800abe0:	4613      	movlt	r3, r2
 800abe2:	f8c9 3000 	str.w	r3, [r9]
 800abe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abea:	4606      	mov	r6, r0
 800abec:	460c      	mov	r4, r1
 800abee:	b112      	cbz	r2, 800abf6 <_printf_common+0x2a>
 800abf0:	3301      	adds	r3, #1
 800abf2:	f8c9 3000 	str.w	r3, [r9]
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	0699      	lsls	r1, r3, #26
 800abfa:	bf42      	ittt	mi
 800abfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac00:	3302      	addmi	r3, #2
 800ac02:	f8c9 3000 	strmi.w	r3, [r9]
 800ac06:	6825      	ldr	r5, [r4, #0]
 800ac08:	f015 0506 	ands.w	r5, r5, #6
 800ac0c:	d107      	bne.n	800ac1e <_printf_common+0x52>
 800ac0e:	f104 0a19 	add.w	sl, r4, #25
 800ac12:	68e3      	ldr	r3, [r4, #12]
 800ac14:	f8d9 2000 	ldr.w	r2, [r9]
 800ac18:	1a9b      	subs	r3, r3, r2
 800ac1a:	42ab      	cmp	r3, r5
 800ac1c:	dc28      	bgt.n	800ac70 <_printf_common+0xa4>
 800ac1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	3300      	adds	r3, #0
 800ac26:	bf18      	it	ne
 800ac28:	2301      	movne	r3, #1
 800ac2a:	0692      	lsls	r2, r2, #26
 800ac2c:	d42d      	bmi.n	800ac8a <_printf_common+0xbe>
 800ac2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac32:	4639      	mov	r1, r7
 800ac34:	4630      	mov	r0, r6
 800ac36:	47c0      	blx	r8
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d020      	beq.n	800ac7e <_printf_common+0xb2>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	68e5      	ldr	r5, [r4, #12]
 800ac40:	f8d9 2000 	ldr.w	r2, [r9]
 800ac44:	f003 0306 	and.w	r3, r3, #6
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	bf08      	it	eq
 800ac4c:	1aad      	subeq	r5, r5, r2
 800ac4e:	68a3      	ldr	r3, [r4, #8]
 800ac50:	6922      	ldr	r2, [r4, #16]
 800ac52:	bf0c      	ite	eq
 800ac54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac58:	2500      	movne	r5, #0
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	bfc4      	itt	gt
 800ac5e:	1a9b      	subgt	r3, r3, r2
 800ac60:	18ed      	addgt	r5, r5, r3
 800ac62:	f04f 0900 	mov.w	r9, #0
 800ac66:	341a      	adds	r4, #26
 800ac68:	454d      	cmp	r5, r9
 800ac6a:	d11a      	bne.n	800aca2 <_printf_common+0xd6>
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e008      	b.n	800ac82 <_printf_common+0xb6>
 800ac70:	2301      	movs	r3, #1
 800ac72:	4652      	mov	r2, sl
 800ac74:	4639      	mov	r1, r7
 800ac76:	4630      	mov	r0, r6
 800ac78:	47c0      	blx	r8
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d103      	bne.n	800ac86 <_printf_common+0xba>
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac86:	3501      	adds	r5, #1
 800ac88:	e7c3      	b.n	800ac12 <_printf_common+0x46>
 800ac8a:	18e1      	adds	r1, r4, r3
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	2030      	movs	r0, #48	; 0x30
 800ac90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac94:	4422      	add	r2, r4
 800ac96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac9e:	3302      	adds	r3, #2
 800aca0:	e7c5      	b.n	800ac2e <_printf_common+0x62>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4622      	mov	r2, r4
 800aca6:	4639      	mov	r1, r7
 800aca8:	4630      	mov	r0, r6
 800acaa:	47c0      	blx	r8
 800acac:	3001      	adds	r0, #1
 800acae:	d0e6      	beq.n	800ac7e <_printf_common+0xb2>
 800acb0:	f109 0901 	add.w	r9, r9, #1
 800acb4:	e7d8      	b.n	800ac68 <_printf_common+0x9c>
	...

0800acb8 <_printf_i>:
 800acb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800acc0:	460c      	mov	r4, r1
 800acc2:	7e09      	ldrb	r1, [r1, #24]
 800acc4:	b085      	sub	sp, #20
 800acc6:	296e      	cmp	r1, #110	; 0x6e
 800acc8:	4617      	mov	r7, r2
 800acca:	4606      	mov	r6, r0
 800accc:	4698      	mov	r8, r3
 800acce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acd0:	f000 80b3 	beq.w	800ae3a <_printf_i+0x182>
 800acd4:	d822      	bhi.n	800ad1c <_printf_i+0x64>
 800acd6:	2963      	cmp	r1, #99	; 0x63
 800acd8:	d036      	beq.n	800ad48 <_printf_i+0x90>
 800acda:	d80a      	bhi.n	800acf2 <_printf_i+0x3a>
 800acdc:	2900      	cmp	r1, #0
 800acde:	f000 80b9 	beq.w	800ae54 <_printf_i+0x19c>
 800ace2:	2958      	cmp	r1, #88	; 0x58
 800ace4:	f000 8083 	beq.w	800adee <_printf_i+0x136>
 800ace8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800acf0:	e032      	b.n	800ad58 <_printf_i+0xa0>
 800acf2:	2964      	cmp	r1, #100	; 0x64
 800acf4:	d001      	beq.n	800acfa <_printf_i+0x42>
 800acf6:	2969      	cmp	r1, #105	; 0x69
 800acf8:	d1f6      	bne.n	800ace8 <_printf_i+0x30>
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	6813      	ldr	r3, [r2, #0]
 800acfe:	0605      	lsls	r5, r0, #24
 800ad00:	f103 0104 	add.w	r1, r3, #4
 800ad04:	d52a      	bpl.n	800ad5c <_printf_i+0xa4>
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6011      	str	r1, [r2, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	da03      	bge.n	800ad16 <_printf_i+0x5e>
 800ad0e:	222d      	movs	r2, #45	; 0x2d
 800ad10:	425b      	negs	r3, r3
 800ad12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ad16:	486f      	ldr	r0, [pc, #444]	; (800aed4 <_printf_i+0x21c>)
 800ad18:	220a      	movs	r2, #10
 800ad1a:	e039      	b.n	800ad90 <_printf_i+0xd8>
 800ad1c:	2973      	cmp	r1, #115	; 0x73
 800ad1e:	f000 809d 	beq.w	800ae5c <_printf_i+0x1a4>
 800ad22:	d808      	bhi.n	800ad36 <_printf_i+0x7e>
 800ad24:	296f      	cmp	r1, #111	; 0x6f
 800ad26:	d020      	beq.n	800ad6a <_printf_i+0xb2>
 800ad28:	2970      	cmp	r1, #112	; 0x70
 800ad2a:	d1dd      	bne.n	800ace8 <_printf_i+0x30>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	f043 0320 	orr.w	r3, r3, #32
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	e003      	b.n	800ad3e <_printf_i+0x86>
 800ad36:	2975      	cmp	r1, #117	; 0x75
 800ad38:	d017      	beq.n	800ad6a <_printf_i+0xb2>
 800ad3a:	2978      	cmp	r1, #120	; 0x78
 800ad3c:	d1d4      	bne.n	800ace8 <_printf_i+0x30>
 800ad3e:	2378      	movs	r3, #120	; 0x78
 800ad40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad44:	4864      	ldr	r0, [pc, #400]	; (800aed8 <_printf_i+0x220>)
 800ad46:	e055      	b.n	800adf4 <_printf_i+0x13c>
 800ad48:	6813      	ldr	r3, [r2, #0]
 800ad4a:	1d19      	adds	r1, r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6011      	str	r1, [r2, #0]
 800ad50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e08c      	b.n	800ae76 <_printf_i+0x1be>
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6011      	str	r1, [r2, #0]
 800ad60:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad64:	bf18      	it	ne
 800ad66:	b21b      	sxthne	r3, r3
 800ad68:	e7cf      	b.n	800ad0a <_printf_i+0x52>
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	6825      	ldr	r5, [r4, #0]
 800ad6e:	1d18      	adds	r0, r3, #4
 800ad70:	6010      	str	r0, [r2, #0]
 800ad72:	0628      	lsls	r0, r5, #24
 800ad74:	d501      	bpl.n	800ad7a <_printf_i+0xc2>
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	e002      	b.n	800ad80 <_printf_i+0xc8>
 800ad7a:	0668      	lsls	r0, r5, #25
 800ad7c:	d5fb      	bpl.n	800ad76 <_printf_i+0xbe>
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	4854      	ldr	r0, [pc, #336]	; (800aed4 <_printf_i+0x21c>)
 800ad82:	296f      	cmp	r1, #111	; 0x6f
 800ad84:	bf14      	ite	ne
 800ad86:	220a      	movne	r2, #10
 800ad88:	2208      	moveq	r2, #8
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad90:	6865      	ldr	r5, [r4, #4]
 800ad92:	60a5      	str	r5, [r4, #8]
 800ad94:	2d00      	cmp	r5, #0
 800ad96:	f2c0 8095 	blt.w	800aec4 <_printf_i+0x20c>
 800ad9a:	6821      	ldr	r1, [r4, #0]
 800ad9c:	f021 0104 	bic.w	r1, r1, #4
 800ada0:	6021      	str	r1, [r4, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d13d      	bne.n	800ae22 <_printf_i+0x16a>
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	f040 808e 	bne.w	800aec8 <_printf_i+0x210>
 800adac:	4665      	mov	r5, ip
 800adae:	2a08      	cmp	r2, #8
 800adb0:	d10b      	bne.n	800adca <_printf_i+0x112>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	07db      	lsls	r3, r3, #31
 800adb6:	d508      	bpl.n	800adca <_printf_i+0x112>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	6862      	ldr	r2, [r4, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	bfde      	ittt	le
 800adc0:	2330      	movle	r3, #48	; 0x30
 800adc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adca:	ebac 0305 	sub.w	r3, ip, r5
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	f8cd 8000 	str.w	r8, [sp]
 800add4:	463b      	mov	r3, r7
 800add6:	aa03      	add	r2, sp, #12
 800add8:	4621      	mov	r1, r4
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff fef6 	bl	800abcc <_printf_common>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d14d      	bne.n	800ae80 <_printf_i+0x1c8>
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295
 800ade8:	b005      	add	sp, #20
 800adea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adee:	4839      	ldr	r0, [pc, #228]	; (800aed4 <_printf_i+0x21c>)
 800adf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800adf4:	6813      	ldr	r3, [r2, #0]
 800adf6:	6821      	ldr	r1, [r4, #0]
 800adf8:	1d1d      	adds	r5, r3, #4
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6015      	str	r5, [r2, #0]
 800adfe:	060a      	lsls	r2, r1, #24
 800ae00:	d50b      	bpl.n	800ae1a <_printf_i+0x162>
 800ae02:	07ca      	lsls	r2, r1, #31
 800ae04:	bf44      	itt	mi
 800ae06:	f041 0120 	orrmi.w	r1, r1, #32
 800ae0a:	6021      	strmi	r1, [r4, #0]
 800ae0c:	b91b      	cbnz	r3, 800ae16 <_printf_i+0x15e>
 800ae0e:	6822      	ldr	r2, [r4, #0]
 800ae10:	f022 0220 	bic.w	r2, r2, #32
 800ae14:	6022      	str	r2, [r4, #0]
 800ae16:	2210      	movs	r2, #16
 800ae18:	e7b7      	b.n	800ad8a <_printf_i+0xd2>
 800ae1a:	064d      	lsls	r5, r1, #25
 800ae1c:	bf48      	it	mi
 800ae1e:	b29b      	uxthmi	r3, r3
 800ae20:	e7ef      	b.n	800ae02 <_printf_i+0x14a>
 800ae22:	4665      	mov	r5, ip
 800ae24:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae28:	fb02 3311 	mls	r3, r2, r1, r3
 800ae2c:	5cc3      	ldrb	r3, [r0, r3]
 800ae2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ae32:	460b      	mov	r3, r1
 800ae34:	2900      	cmp	r1, #0
 800ae36:	d1f5      	bne.n	800ae24 <_printf_i+0x16c>
 800ae38:	e7b9      	b.n	800adae <_printf_i+0xf6>
 800ae3a:	6813      	ldr	r3, [r2, #0]
 800ae3c:	6825      	ldr	r5, [r4, #0]
 800ae3e:	6961      	ldr	r1, [r4, #20]
 800ae40:	1d18      	adds	r0, r3, #4
 800ae42:	6010      	str	r0, [r2, #0]
 800ae44:	0628      	lsls	r0, r5, #24
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	d501      	bpl.n	800ae4e <_printf_i+0x196>
 800ae4a:	6019      	str	r1, [r3, #0]
 800ae4c:	e002      	b.n	800ae54 <_printf_i+0x19c>
 800ae4e:	066a      	lsls	r2, r5, #25
 800ae50:	d5fb      	bpl.n	800ae4a <_printf_i+0x192>
 800ae52:	8019      	strh	r1, [r3, #0]
 800ae54:	2300      	movs	r3, #0
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	4665      	mov	r5, ip
 800ae5a:	e7b9      	b.n	800add0 <_printf_i+0x118>
 800ae5c:	6813      	ldr	r3, [r2, #0]
 800ae5e:	1d19      	adds	r1, r3, #4
 800ae60:	6011      	str	r1, [r2, #0]
 800ae62:	681d      	ldr	r5, [r3, #0]
 800ae64:	6862      	ldr	r2, [r4, #4]
 800ae66:	2100      	movs	r1, #0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f7f5 fa41 	bl	80002f0 <memchr>
 800ae6e:	b108      	cbz	r0, 800ae74 <_printf_i+0x1bc>
 800ae70:	1b40      	subs	r0, r0, r5
 800ae72:	6060      	str	r0, [r4, #4]
 800ae74:	6863      	ldr	r3, [r4, #4]
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae7e:	e7a7      	b.n	800add0 <_printf_i+0x118>
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	462a      	mov	r2, r5
 800ae84:	4639      	mov	r1, r7
 800ae86:	4630      	mov	r0, r6
 800ae88:	47c0      	blx	r8
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d0aa      	beq.n	800ade4 <_printf_i+0x12c>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	079b      	lsls	r3, r3, #30
 800ae92:	d413      	bmi.n	800aebc <_printf_i+0x204>
 800ae94:	68e0      	ldr	r0, [r4, #12]
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	4298      	cmp	r0, r3
 800ae9a:	bfb8      	it	lt
 800ae9c:	4618      	movlt	r0, r3
 800ae9e:	e7a3      	b.n	800ade8 <_printf_i+0x130>
 800aea0:	2301      	movs	r3, #1
 800aea2:	464a      	mov	r2, r9
 800aea4:	4639      	mov	r1, r7
 800aea6:	4630      	mov	r0, r6
 800aea8:	47c0      	blx	r8
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d09a      	beq.n	800ade4 <_printf_i+0x12c>
 800aeae:	3501      	adds	r5, #1
 800aeb0:	68e3      	ldr	r3, [r4, #12]
 800aeb2:	9a03      	ldr	r2, [sp, #12]
 800aeb4:	1a9b      	subs	r3, r3, r2
 800aeb6:	42ab      	cmp	r3, r5
 800aeb8:	dcf2      	bgt.n	800aea0 <_printf_i+0x1e8>
 800aeba:	e7eb      	b.n	800ae94 <_printf_i+0x1dc>
 800aebc:	2500      	movs	r5, #0
 800aebe:	f104 0919 	add.w	r9, r4, #25
 800aec2:	e7f5      	b.n	800aeb0 <_printf_i+0x1f8>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1ac      	bne.n	800ae22 <_printf_i+0x16a>
 800aec8:	7803      	ldrb	r3, [r0, #0]
 800aeca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aece:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aed2:	e76c      	b.n	800adae <_printf_i+0xf6>
 800aed4:	0800b9d1 	.word	0x0800b9d1
 800aed8:	0800b9e2 	.word	0x0800b9e2

0800aedc <__sread>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	460c      	mov	r4, r1
 800aee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee4:	f000 f8de 	bl	800b0a4 <_read_r>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	bfab      	itete	ge
 800aeec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeee:	89a3      	ldrhlt	r3, [r4, #12]
 800aef0:	181b      	addge	r3, r3, r0
 800aef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aef6:	bfac      	ite	ge
 800aef8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aefa:	81a3      	strhlt	r3, [r4, #12]
 800aefc:	bd10      	pop	{r4, pc}

0800aefe <__swrite>:
 800aefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af02:	461f      	mov	r7, r3
 800af04:	898b      	ldrh	r3, [r1, #12]
 800af06:	05db      	lsls	r3, r3, #23
 800af08:	4605      	mov	r5, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	4616      	mov	r6, r2
 800af0e:	d505      	bpl.n	800af1c <__swrite+0x1e>
 800af10:	2302      	movs	r3, #2
 800af12:	2200      	movs	r2, #0
 800af14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af18:	f000 f868 	bl	800afec <_lseek_r>
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	4632      	mov	r2, r6
 800af2a:	463b      	mov	r3, r7
 800af2c:	4628      	mov	r0, r5
 800af2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af32:	f000 b817 	b.w	800af64 <_write_r>

0800af36 <__sseek>:
 800af36:	b510      	push	{r4, lr}
 800af38:	460c      	mov	r4, r1
 800af3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3e:	f000 f855 	bl	800afec <_lseek_r>
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	bf15      	itete	ne
 800af48:	6560      	strne	r0, [r4, #84]	; 0x54
 800af4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af52:	81a3      	strheq	r3, [r4, #12]
 800af54:	bf18      	it	ne
 800af56:	81a3      	strhne	r3, [r4, #12]
 800af58:	bd10      	pop	{r4, pc}

0800af5a <__sclose>:
 800af5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af5e:	f000 b813 	b.w	800af88 <_close_r>
	...

0800af64 <_write_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4c07      	ldr	r4, [pc, #28]	; (800af84 <_write_r+0x20>)
 800af68:	4605      	mov	r5, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	6022      	str	r2, [r4, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f6 fb49 	bl	800160a <_write>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_write_r+0x1e>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_write_r+0x1e>
 800af80:	602b      	str	r3, [r5, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	2400037c 	.word	0x2400037c

0800af88 <_close_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4c06      	ldr	r4, [pc, #24]	; (800afa4 <_close_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4605      	mov	r5, r0
 800af90:	4608      	mov	r0, r1
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	f7f6 fb55 	bl	8001642 <_close>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_close_r+0x1a>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_close_r+0x1a>
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	2400037c 	.word	0x2400037c

0800afa8 <_fstat_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4c07      	ldr	r4, [pc, #28]	; (800afc8 <_fstat_r+0x20>)
 800afac:	2300      	movs	r3, #0
 800afae:	4605      	mov	r5, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	4611      	mov	r1, r2
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	f7f6 fb50 	bl	800165a <_fstat>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d102      	bne.n	800afc4 <_fstat_r+0x1c>
 800afbe:	6823      	ldr	r3, [r4, #0]
 800afc0:	b103      	cbz	r3, 800afc4 <_fstat_r+0x1c>
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	bd38      	pop	{r3, r4, r5, pc}
 800afc6:	bf00      	nop
 800afc8:	2400037c 	.word	0x2400037c

0800afcc <_isatty_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	4c06      	ldr	r4, [pc, #24]	; (800afe8 <_isatty_r+0x1c>)
 800afd0:	2300      	movs	r3, #0
 800afd2:	4605      	mov	r5, r0
 800afd4:	4608      	mov	r0, r1
 800afd6:	6023      	str	r3, [r4, #0]
 800afd8:	f7f6 fb4f 	bl	800167a <_isatty>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_isatty_r+0x1a>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_isatty_r+0x1a>
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	2400037c 	.word	0x2400037c

0800afec <_lseek_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4c07      	ldr	r4, [pc, #28]	; (800b00c <_lseek_r+0x20>)
 800aff0:	4605      	mov	r5, r0
 800aff2:	4608      	mov	r0, r1
 800aff4:	4611      	mov	r1, r2
 800aff6:	2200      	movs	r2, #0
 800aff8:	6022      	str	r2, [r4, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	f7f6 fb48 	bl	8001690 <_lseek>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_lseek_r+0x1e>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	b103      	cbz	r3, 800b00a <_lseek_r+0x1e>
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	2400037c 	.word	0x2400037c

0800b010 <memcpy>:
 800b010:	b510      	push	{r4, lr}
 800b012:	1e43      	subs	r3, r0, #1
 800b014:	440a      	add	r2, r1
 800b016:	4291      	cmp	r1, r2
 800b018:	d100      	bne.n	800b01c <memcpy+0xc>
 800b01a:	bd10      	pop	{r4, pc}
 800b01c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b020:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b024:	e7f7      	b.n	800b016 <memcpy+0x6>

0800b026 <memmove>:
 800b026:	4288      	cmp	r0, r1
 800b028:	b510      	push	{r4, lr}
 800b02a:	eb01 0302 	add.w	r3, r1, r2
 800b02e:	d807      	bhi.n	800b040 <memmove+0x1a>
 800b030:	1e42      	subs	r2, r0, #1
 800b032:	4299      	cmp	r1, r3
 800b034:	d00a      	beq.n	800b04c <memmove+0x26>
 800b036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b03e:	e7f8      	b.n	800b032 <memmove+0xc>
 800b040:	4283      	cmp	r3, r0
 800b042:	d9f5      	bls.n	800b030 <memmove+0xa>
 800b044:	1881      	adds	r1, r0, r2
 800b046:	1ad2      	subs	r2, r2, r3
 800b048:	42d3      	cmn	r3, r2
 800b04a:	d100      	bne.n	800b04e <memmove+0x28>
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b052:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b056:	e7f7      	b.n	800b048 <memmove+0x22>

0800b058 <_realloc_r>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	4607      	mov	r7, r0
 800b05c:	4614      	mov	r4, r2
 800b05e:	460e      	mov	r6, r1
 800b060:	b921      	cbnz	r1, 800b06c <_realloc_r+0x14>
 800b062:	4611      	mov	r1, r2
 800b064:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b068:	f7ff b8d0 	b.w	800a20c <_malloc_r>
 800b06c:	b922      	cbnz	r2, 800b078 <_realloc_r+0x20>
 800b06e:	f7ff f87f 	bl	800a170 <_free_r>
 800b072:	4625      	mov	r5, r4
 800b074:	4628      	mov	r0, r5
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	f000 f826 	bl	800b0c8 <_malloc_usable_size_r>
 800b07c:	42a0      	cmp	r0, r4
 800b07e:	d20f      	bcs.n	800b0a0 <_realloc_r+0x48>
 800b080:	4621      	mov	r1, r4
 800b082:	4638      	mov	r0, r7
 800b084:	f7ff f8c2 	bl	800a20c <_malloc_r>
 800b088:	4605      	mov	r5, r0
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0f2      	beq.n	800b074 <_realloc_r+0x1c>
 800b08e:	4631      	mov	r1, r6
 800b090:	4622      	mov	r2, r4
 800b092:	f7ff ffbd 	bl	800b010 <memcpy>
 800b096:	4631      	mov	r1, r6
 800b098:	4638      	mov	r0, r7
 800b09a:	f7ff f869 	bl	800a170 <_free_r>
 800b09e:	e7e9      	b.n	800b074 <_realloc_r+0x1c>
 800b0a0:	4635      	mov	r5, r6
 800b0a2:	e7e7      	b.n	800b074 <_realloc_r+0x1c>

0800b0a4 <_read_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4c07      	ldr	r4, [pc, #28]	; (800b0c4 <_read_r+0x20>)
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	6022      	str	r2, [r4, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f7f6 fa8c 	bl	80015d0 <_read>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_read_r+0x1e>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_read_r+0x1e>
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	2400037c 	.word	0x2400037c

0800b0c8 <_malloc_usable_size_r>:
 800b0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0cc:	1f18      	subs	r0, r3, #4
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	bfbc      	itt	lt
 800b0d2:	580b      	ldrlt	r3, [r1, r0]
 800b0d4:	18c0      	addlt	r0, r0, r3
 800b0d6:	4770      	bx	lr

0800b0d8 <_init>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	bf00      	nop
 800b0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0de:	bc08      	pop	{r3}
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	4770      	bx	lr

0800b0e4 <_fini>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	bf00      	nop
 800b0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ea:	bc08      	pop	{r3}
 800b0ec:	469e      	mov	lr, r3
 800b0ee:	4770      	bx	lr
